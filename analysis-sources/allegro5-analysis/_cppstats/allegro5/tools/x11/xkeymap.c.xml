<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\tools\x11\xkeymap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xalleg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro/internal/aintern.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILENAME_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>unicode_description</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DIALOG</name></type> <name><name>main_dialog</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DIALOG</name></type> <name><name>keymap_dialog</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>black</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>white</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>red</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yellow</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>waiting_for_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>new_keycode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>keycode_to_scancode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_raw_keycode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pressed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;&amp;</operator> <name>waiting_for_key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_keycode</name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>waiting_for_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keycode_getter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>list_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>scancode_to_name</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>list_size</name> <operator>=</operator> <name>KEY_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>DIALOG</name></type> <name><name>keymap_dialog</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>d_clear_proc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_ctext_proc</name></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Select Keycode:"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_list_proc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>keycode_getter</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_ctext_proc</name></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>unicode_description</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Define &amp;X Key !"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"&amp;Cancel"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">16</literal></expr> , <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"&amp;Done"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_ctext_proc</name></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_yield_proc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_all_keys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_dialog_color</name><argument_list>(<argument><expr><name>keymap_dialog</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>centre_dialog</name><argument_list>(<argument><expr><name>keymap_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <call><name>do_dialog</name><argument_list>(<argument><expr><name>keymap_dialog</name></expr></argument>, <argument><expr><name>focus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>focus</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>textprintf_centre_ex</name> <argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>font</name></expr></argument>,

<argument><expr><name><name>keymap_dialog</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>keymap_dialog</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"Press a key to map to the current scancode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf_centre_ex</name> <argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>font</name></expr></argument>,

<argument><expr><name><name>keymap_dialog</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>keymap_dialog</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"(or a mouse button to leave it unchanged)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_keycode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>waiting_for_key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>poll_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>waiting_for_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

while <condition>(<expr><name>waiting_for_key</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_keycode</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>new_keycode</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>new_keycode</name></expr>]</index></name> <operator>=</operator> <name><name>keymap_dialog</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>d1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_keybuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<return>return;</return>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>_xwin</name><operator>.</operator><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_key_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>key_was_pressed</name><index>[<expr><name>KEY_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>key_is_pressed</name><index>[<expr><name>KEY_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>welcome</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Key that is pressed now is marked with red"</literal></expr>,

<expr><literal type="string">"Key that was pressed is marked with yellow"</literal></expr>,

<expr><literal type="string">"Press mouse button or Escape to exit test"</literal></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_to_color</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>welcome</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>textout_ex</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>welcome</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>clear_to_color</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>textprintf_ex</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">160</literal></expr></argument>,

<argument><expr><literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>scancode_to_name</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>poll_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>(</operator><name><name>key</name><index>[<expr><name>KEY_ESC</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mouse_b</name><operator>)</operator></expr>)</condition>;</do>

<do>do <block>{<block_content>

<while>while <condition>(<expr><call><name>keypressed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>ureadkey</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf_centre_ex</name> <argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>SCREEN_W</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><name>red</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><literal type="string">"&gt; %c &lt;"</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>poll_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key_was_pressed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key_is_pressed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key_is_pressed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">160</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_is_pressed</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>key_was_pressed</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>yellow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>(</operator><operator>!</operator><name><name>key</name><index>[<expr><name>KEY_ESC</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>mouse_b</name><operator>)</operator></expr>)</condition>;</do>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>poll_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>(</operator><name><name>key</name><index>[<expr><name>KEY_ESC</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mouse_b</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>clear_keybuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_key_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>option_format</name></decl>, <decl><type ref="prev"/><name><name>option</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp1</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_file</name><argument_list>(<argument><expr><literal type="string">"xkeymap.cfg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>uconvert_ascii</name><argument_list>(<argument><expr><literal type="string">"xkeymap"</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>option_format</name> <operator>=</operator> <call><name>uconvert_ascii</name><argument_list>(<argument><expr><literal type="string">"keycode%d"</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uszprintf</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>option_format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_table</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>KEY_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"key%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>DIALOG</name></type> <name><name>main_dialog</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>d_clear_proc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_ctext_proc</name></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"X Key Mapping Utility"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_ctext_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"~"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Setup X key &amp;mappings"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"&amp;Test X key mappings"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"&amp;Save and exit"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_button_proc</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>D_EXIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"E&amp;xit"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>d_yield_proc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_main_dialog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_dialog_color</name><argument_list>(<argument><expr><name>main_dialog</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>centre_dialog</name><argument_list>(<argument><expr><name>main_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <call><name>do_dialog</name><argument_list>(<argument><expr><name>main_dialog</name></expr></argument>, <argument><expr><name>focus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>focus</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>setup_all_keys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>test_key_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><call><name>save_key_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>allegro_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_gfx_mode</name><argument_list>(<argument><expr><name>GFX_SAFE</name></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_gfx_mode</name><argument_list>(<argument><expr><name>GFX_TEXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>allegro_message</name><argument_list>(<argument><expr><literal type="string">"Unable to set any graphic mode\n%s\n"</literal></expr></argument>, <argument><expr><name>allegro_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_palette</name><argument_list>(<argument><expr><name>desktop_palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gui_fg_color</name> <operator>=</operator> <name><name>palette_color</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gui_bg_color</name> <operator>=</operator> <name><name>palette_color</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>black</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>white</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>red</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yellow</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>_xwin_keyboard_callback</name> <operator>=</operator> <name>get_raw_keycode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_main_dialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>END_OF_MAIN</name><argument_list>()</argument_list></macro>

</unit>
