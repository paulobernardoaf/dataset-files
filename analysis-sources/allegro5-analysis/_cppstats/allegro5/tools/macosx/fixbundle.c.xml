<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\tools\macosx\fixbundle.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_USE_CONSOLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRUE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FALSE</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCAN_DEPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRUE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FALSE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_SMALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_LARGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_HUGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_THUMBNAIL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SMALL_DEFINED</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_LARGE_DEFINED</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_HUGE_DEFINED</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_THUMBNAIL_DEFINED</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_ICONS_DEFINED</name></cpp:macro> <cpp:value>0xf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_MOVE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GOT_VERSION</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GOT_LONG_VERSION</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_EMBED_FRAMEWORK</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRING_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_SIXTH</name></cpp:macro> <cpp:value>(1.0 / 6.0)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ICON_DATA</name>

<block>{

<decl_stmt><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>original</name></decl>, <modifier>*</modifier><name>workspace</name>, <modifier>*</modifier><name>scaled</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSType</name></type> <name>data</name></decl>, <name>mask8</name>, <name>mask1</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>defined</name></decl>;</decl_stmt>

}</block></struct></type> <name>ICON_DATA</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ICON_DATA</name></type> <name><name>icon_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>kSmall32BitData</name></expr>, <expr><name>kSmall8BitMask</name></expr>, <expr><name>kSmall1BitMask</name></expr>, <expr><name>F_SMALL_DEFINED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>kLarge32BitData</name></expr>, <expr><name>kLarge8BitMask</name></expr>, <expr><name>kLarge1BitMask</name></expr>, <expr><name>F_LARGE_DEFINED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">48</literal></expr>, <expr><name>kHuge32BitData</name></expr>, <expr><name>kHuge8BitMask</name></expr>, <expr><name>kHuge1BitMask</name></expr>, <expr><name>F_HUGE_DEFINED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">128</literal></expr>, <expr><name>kThumbnail32BitData</name></expr>, <expr><name>kThumbnail8BitMask</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>F_THUMBNAIL_DEFINED</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>float</name></type> <name>cubic_bspline</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">2.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">2.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">4.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>*</operator> <literal type="number">6.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">4.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>d</name><operator>)</operator> <operator>*</operator> <name>ONE_SIXTH</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scale_icon</name><parameter_list>(<parameter><decl><type><name>ICON_DATA</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>shape</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>x_ofs</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_ofs</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>f_x</name></decl>, <decl><type ref="prev"/><name>f_y</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>red</name></decl>, <decl><type ref="prev"/><name>green</name></decl>, <decl><type ref="prev"/><name>blue</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_ofs</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_ofs</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>icon</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>icon</name><operator>-&gt;</operator><name>workspace</name></name> <operator>=</operator> <call><name>create_bitmap_ex</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>icon</name><operator>-&gt;</operator><name>workspace</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>icon</name><operator>-&gt;</operator><name>scaled</name></name> <operator>=</operator> <call><name>create_bitmap_ex</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>icon</name><operator>-&gt;</operator><name>scaled</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <call><name>create_bitmap_ex</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shape</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blit</name><argument_list>(<argument><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name></name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_to_color</name><argument_list>(<argument><expr><name><name>icon</name><operator>-&gt;</operator><name>workspace</name></name></expr></argument>, <argument><expr><call><name>makeacol32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>mask_color</name></name> <operator>=</operator> <call><name>makeacol32</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>masked_blit</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>workspace</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x_ofs</name></expr></argument>, <argument><expr><name>y_ofs</name></expr></argument>, <argument><expr><name><name>shape</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>shape</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_bitmap</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>icon</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>f_y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>*</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>f_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>f_y</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>f_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>icon</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>f_x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>*</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>f_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>f_x</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>f_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>red</name> <operator>=</operator> <name>green</name> <operator>=</operator> <name>blue</name> <operator>=</operator> <name>alpha</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>cubic_bspline</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>m</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>cubic_bspline</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon</name><operator>-&gt;</operator><name>workspace</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i_y</name> <operator>+</operator> <name>m</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>i_x</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>red</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>getr32</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r1</name> <operator>*</operator> <name>r2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>green</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>getg32</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r1</name> <operator>*</operator> <name>r2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>blue</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>getb32</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r1</name> <operator>*</operator> <name>r2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>geta32</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r1</name> <operator>*</operator> <name>r2</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>makeacol32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>red</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>green</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon</name><operator>-&gt;</operator><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_resource</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datafile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ICON_DATA</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATAFILE</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLE_SPRITE</name> <modifier>*</modifier></type><name>rle_sprite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PALETTE</name></type> <name>palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>datafile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>load_datafile_object</name><argument_list>(<argument><expr><name>datafile</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error loading object '%s' from %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>datafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DAT_BITMAP</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>BITMAP</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>create_bitmap_ex</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>color_depth</name></name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blit</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DAT_RLE_SPRITE</name></expr>:</case>

<expr_stmt><expr><name>rle_sprite</name> <operator>=</operator> <operator>(</operator><name>RLE_SPRITE</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>create_bitmap_ex</name><argument_list>(<argument><expr><name><name>rle_sprite</name><operator>-&gt;</operator><name>color_depth</name></name></expr></argument>, <argument><expr><name><name>rle_sprite</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>rle_sprite</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_to_color</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>mask_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_rle_sprite</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>rle_sprite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DAT_PALETTE</name></expr>:</case>

<expr_stmt><expr><call><name>select_palette</name><argument_list>(<argument><expr><operator>(</operator><name>RGB</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unload_datafile_object</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'%s' is not a BITMAP, RLE_SPRITE or PALETTE object in datafile '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>datafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unload_datafile_object</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>unload_datafile_object</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>load_bitmap</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>select_palette</name><argument_list>(<argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to load '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icon</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ICON_SMALL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ICON_LARGE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ICON_HUGE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ICON_THUMBNAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>&amp;</operator><name><name>icon_data</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>icon</name><operator>-&gt;</operator><name>defined</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>&amp;</operator><name><name>icon_data</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>icon</name><operator>-&gt;</operator><name>defined</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>icon</name><operator>-&gt;</operator><name>defined</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Too many icon resources!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>icon</name><operator>-&gt;</operator><name>scaled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Multiple icon resources of the same size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name></name> <operator>=</operator> <call><name>create_bitmap_ex</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>color_depth</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blit</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>icon</name><operator>-&gt;</operator><name>original</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>scale_icon</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>icon</name><operator>-&gt;</operator><name>defined</name></name></expr>;</expr_stmt>

<label><name>exit_error</name>:</label>

<expr_stmt><expr><call><name>destroy_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nMacOS X application bundle fixer utility for Allegro "</literal> <name>ALLEGRO_VERSION_STR</name> <literal type="string">"\n"</literal>

<literal type="string">"By Angelo Mottola, "</literal> <name>ALLEGRO_DATE_STR</name> <literal type="string">"\n\n"</literal>

<literal type="string">"Usage: fixbundle exename [-m] [-o bundlename] [-v version] [-V long_version]\n"</literal>

<literal type="string">"\t\t[-e] [[-d datafile] [[palette] [-{16,32,48,128}] icon] ...]\n"</literal>

<literal type="string">"\twhere icon is either a datafile bitmap or a RLE sprite object, either\n"</literal>

<literal type="string">"\tan image file.\n"</literal>

<literal type="string">"Options:\n"</literal>

<literal type="string">"\t-m\t\tMoves executable inside bundle instead of copying it\n"</literal>

<literal type="string">"\t-o bundlename\tSpecifies a bundle name (default: exename.app)\n"</literal>

<literal type="string">"\t-v version\tSets application version string (default: 1.0)\n"</literal>

<literal type="string">"\t-V long_version\tSets long application version string\n"</literal>

<literal type="string">"\t-e\t\tEmbeds the Allegro framework into the application bundle\n"</literal>

<literal type="string">"\t-d datafile\tUses datafile as source for objects and palettes\n"</literal>

<literal type="string">"\t-{16,32,48,128}\tForces next icon image into the 16x16, 32x32, 48x48 or\n"</literal>

<literal type="string">"\t\t\t128x128 icon resource slot\n"</literal>

<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dest_file</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PACKFILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>=</operator> <call><name>file_size_ex</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>append_filename</name><argument_list>(<argument><expr><name>dest_file</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pack_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>F_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pack_fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pack_fopen</name><argument_list>(<argument><expr><name>dest_file</name></expr></argument>, <argument><expr><name>F_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pack_fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PACKFILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFURLRef</name></type> <name>cf_url_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FSRef</name></type> <name>fs_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FSSpec</name></type> <name>fs_spec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IconFamilyHandle</name></type> <name>icon_family</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>raw_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>datafile</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_dir</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_contents_dir</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_contents_resources_dir</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_contents_macos_dir</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_contents_frameworks_dir</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bundle_exe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_plist</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_pkginfo</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_icns</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_version</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bundle_long_version</name><index>[<expr><name>MAX_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mask_bit</name></decl>, <decl><type ref="prev"/><name>mask_byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>install_allegro</name><argument_list>(<argument><expr><name>SYSTEM_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color_depth</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color_conversion</name><argument_list>(<argument><expr><name>COLORCONV_TOTAL</name> <operator>|</operator> <name>COLORCONV_KEEP_TRANS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>datafile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bundle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>select_palette</name><argument_list>(<argument><expr><name>black_palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>arg</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>arg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_MOVE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_EMBED_FRAMEWORK</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argc</name> <operator>&lt;</operator> <name>arg</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>bundle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_GOT_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle_version</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_GOT_LONG_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle_long_version</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>datafile</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-16"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-32"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-48"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-128"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">48</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">128</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>load_resource</name><argument_list>(<argument><expr><name>datafile</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>icon_data</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>load_resource</name><argument_list>(<argument><expr><name>datafile</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bundle_exe</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot locate executable file '%s'\n"</literal></expr></argument>, <argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bundle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>, <argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>replace_extension</name><argument_list>(<argument><expr><name>bundle_dir</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>, <argument><expr><literal type="string">"app"</literal></expr></argument>, <argument><expr><name>MAX_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle_contents_dir</name></expr></argument>, <argument><expr><name>bundle_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_dir</name></expr></argument>, <argument><expr><literal type="string">"/Contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle_contents_resources_dir</name></expr></argument>, <argument><expr><name>bundle_contents_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_resources_dir</name></expr></argument>, <argument><expr><literal type="string">"/Resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><name>bundle_contents_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><literal type="string">"/MacOS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bundle_contents_frameworks_dir</name></expr></argument>, <argument><expr><name>bundle_contents_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_frameworks_dir</name></expr></argument>, <argument><expr><literal type="string">"/Frameworks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bundle_icns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bundle_plist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bundle_pkginfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>mkdir</name><argument_list>(<argument><expr><name>bundle_dir</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>mkdir</name><argument_list>(<argument><expr><name>bundle_contents_dir</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>mkdir</name><argument_list>(<argument><expr><name>bundle_contents_resources_dir</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>mkdir</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>copy_file</name><argument_list>(<argument><expr><name>bundle_exe</name></expr></argument>, <argument><expr><name>bundle_contents_macos_dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_contents_macos_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_MOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_EMBED_FRAMEWORK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><literal type="string">"/Library/Frameworks/Allegro.framework"</literal></expr></argument>, <argument><expr><name>FA_RDONLY</name> <operator>|</operator> <name>FA_DIREC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot find Allegro framework\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"/Library/Frameworks/Allegro.framework/Resources/Embeddable"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot embed system wide Allegro framework; install embeddable version first!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"/Developer/Tools/pbxcp -exclude .DS_Store -exclude CVS -resolve-src-symlinks /Library/Frameworks/Allegro.framework %s"</literal></expr></argument>, <argument><expr><name>bundle_contents_frameworks_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>mkdir</name><argument_list>(<argument><expr><name>bundle_contents_frameworks_dir</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>system</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_contents_frameworks_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_ICONS_DEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_resources_dir</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>bundle_contents_resources_dir</name></expr></argument>, <argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace_extension</name><argument_list>(<argument><expr><name>bundle_icns</name></expr></argument>, <argument><expr><name>bundle_contents_resources_dir</name></expr></argument>, <argument><expr><literal type="string">"icns"</literal></expr></argument>, <argument><expr><name>MAX_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icon_family</name> <operator>=</operator> <operator>(</operator><name>IconFamilyHandle</name><operator>)</operator><call><name>NewHandle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>defined</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>raw_data</name> <operator>=</operator> <call><name>NewHandle</name><argument_list>(<argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>raw_data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <call><name>geta32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <call><name>getr32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <call><name>getg32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <call><name>getb32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>SetIconFamilyData</name><argument_list>(<argument><expr><name>icon_family</name></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name>raw_data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error setting %dx%d icon resource RGBA data\n"</literal></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>raw_data</name> <operator>=</operator> <call><name>NewHandle</name><argument_list>(<argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>raw_data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <call><name>geta32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>SetIconFamilyData</name><argument_list>(<argument><expr><name>icon_family</name></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask8</name></expr></argument>, <argument><expr><name>raw_data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error setting %dx%d icon resource 8bit mask\n"</literal></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>raw_data</name> <operator>=</operator> <call><name>NewHandle</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>raw_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_bit</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>geta32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scaled</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0xfd</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask_byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mask_bit</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mask_bit</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask_bit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <name>mask_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_bit</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>raw_data</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><operator>*</operator><name>raw_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetIconFamilyData</name><argument_list>(<argument><expr><name>icon_family</name></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask1</name></expr></argument>, <argument><expr><name>raw_data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error setting %dx%d icon resource 1bit mask\n"</literal></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>raw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pack_fopen</name><argument_list>(<argument><expr><name>bundle_icns</name></expr></argument>, <argument><expr><name>F_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_icns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pack_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cf_url_ref</name> <operator>=</operator> <call><name>CFURLCreateWithBytes</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>bundle_icns</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>bundle_icns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cf_url_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_icns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFURLGetFSRef</name><argument_list>(<argument><expr><name>cf_url_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_url_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FSGetCatalogInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_ref</name></expr></argument>, <argument><expr><name>kFSCatInfoNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs_spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 

<operator>(</operator><call><name>WriteIconFile</name><argument_list>(<argument><expr><name>icon_family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs_spec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_icns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><operator>(</operator><name>Handle</name><operator>)</operator><name>icon_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>bundle_plist</name></expr></argument>, <argument><expr><literal type="string">"%s/Info.plist"</literal></expr></argument>, <argument><expr><name>bundle_contents_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pack_fopen</name><argument_list>(<argument><expr><name>bundle_plist</name></expr></argument>, <argument><expr><name>F_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_plist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>

<literal type="string">"&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n"</literal>

<literal type="string">"&lt;plist version=\"1.0\"&gt;\n"</literal>

<literal type="string">"&lt;dict&gt;\n"</literal>

<literal type="string">"\t&lt;key&gt;CFBundleExecutable&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;%s&lt;/string&gt;\n"</literal>

<literal type="string">"\t&lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;6.0&lt;/string&gt;\n"</literal>

<literal type="string">"\t&lt;key&gt;CFBundlePackageType&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;APPL&lt;/string&gt;\n"</literal>

<literal type="string">"\t&lt;key&gt;CFBundleSignature&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;%s&lt;/string&gt;\n"</literal>

<literal type="string">"\t&lt;key&gt;CFBundleVersion&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;%s&lt;/string&gt;\n"</literal>

<literal type="string">"\t&lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;array&gt;\n"</literal>

<literal type="string">"\t\t&lt;dict&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;array&gt;\n"</literal>

<literal type="string">"\t\t\t\t&lt;string&gt;*&lt;/string&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;/array&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;key&gt;CFBundleTypeName&lt;/key&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;string&gt;NSStringPboardType&lt;/string&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;key&gt;CFBundleTypeOSTypes&lt;/key&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;array&gt;\n"</literal>

<literal type="string">"\t\t\t\t&lt;string&gt;****&lt;/string&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;/array&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;key&gt;CFBundleTypeRole&lt;/key&gt;\n"</literal>

<literal type="string">"\t\t\t&lt;string&gt;Viewer&lt;/string&gt;\n"</literal>

<literal type="string">"\t\t&lt;/dict&gt;\n"</literal>

<literal type="string">"\t&lt;/array&gt;\n"</literal></expr></argument>,

<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"????"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_GOT_VERSION</name><operator>)</operator></expr> ?</condition><then> <expr><name>bundle_version</name></expr> </then><else>: <expr><literal type="string">"1.0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fputs</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_GOT_LONG_VERSION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;key&gt;CFBundleGetInfoString&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;%s&lt;/string&gt;\n"</literal></expr></argument>, <argument><expr><name>bundle_long_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fputs</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_ICONS_DEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;key&gt;CFBundleIconFile&lt;/key&gt;\n"</literal>

<literal type="string">"\t&lt;string&gt;%s&lt;/string&gt;\n"</literal></expr></argument>, <argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>bundle_icns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fputs</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pack_fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/dict&gt;\n&lt;/plist&gt;\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>bundle_pkginfo</name></expr></argument>, <argument><expr><literal type="string">"%s/PkgInfo"</literal></expr></argument>, <argument><expr><name>bundle_contents_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pack_fopen</name><argument_list>(<argument><expr><name>bundle_pkginfo</name></expr></argument>, <argument><expr><name>F_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s\n"</literal></expr></argument>, <argument><expr><name>bundle_pkginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>exit_error_bundle</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pack_fputs</name><argument_list>(<argument><expr><literal type="string">"APPL????"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit_error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>original</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>destroy_bitmap</name><argument_list>(<argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>workspace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>destroy_bitmap</name><argument_list>(<argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scaled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>destroy_bitmap</name><argument_list>(<argument><expr><name><name>icon_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

<label><name>exit_error_bundle</name>:</label>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>bundle_contents_macos_dir</name></expr></argument>, <argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>bundle_exe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>bundle_plist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>bundle_pkginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>bundle_icns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rmdir</name><argument_list>(<argument><expr><name>bundle_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rmdir</name><argument_list>(<argument><expr><name>bundle_contents_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rmdir</name><argument_list>(<argument><expr><name>bundle_contents_resources_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rmdir</name><argument_list>(<argument><expr><name>bundle_contents_macos_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit_error</name>;</goto>

</block_content>}</block></function>

</unit>
