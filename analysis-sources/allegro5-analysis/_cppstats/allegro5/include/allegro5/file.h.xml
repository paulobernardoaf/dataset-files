<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\file.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/utf8.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FILE</name></name></type> <name>ALLEGRO_FILE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_FILE_INTERFACE</name>

<block>{

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>fi_fopen</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fi_fclose</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>handle</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>fi_fread</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>void</name> <operator>*</operator><name>ptr</name><operator>,</operator> <name>size_t</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>fi_fwrite</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator><name>ptr</name><operator>,</operator> <name>size_t</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fi_fflush</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>fi_ftell</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fi_fseek</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int64_t</name> <name>offset</name><operator>,</operator> <name>int</name> <name>whence</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fi_feof</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>fi_ferror</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>fi_ferrmsg</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>fi_fclearerr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>fi_fungetc</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>fi_fsize</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></struct></type> <name>ALLEGRO_FILE_INTERFACE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ALLEGRO_SEEK</name>

<block>{

<decl><name>ALLEGRO_SEEK_SET</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ALLEGRO_SEEK_CUR</name></decl>,

<decl><name>ALLEGRO_SEEK_END</name></decl>

}</block></enum></type> <name>ALLEGRO_SEEK</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_fopen</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_fopen_interface</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <operator>*</operator><name>vt</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_file_handle</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <operator>*</operator><name>vt</name><operator>,</operator> <name>void</name> <operator>*</operator><name>userdata</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_fclose</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_fread</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>void</name> <operator>*</operator><name>ptr</name><operator>,</operator> <name>size_t</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_fwrite</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator><name>ptr</name><operator>,</operator> <name>size_t</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_fflush</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>al_ftell</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_fseek</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int64_t</name> <name>offset</name><operator>,</operator> <name>int</name> <name>whence</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_feof</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ferror</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ferrmsg</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_fclearerr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_fungetc</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>al_fsize</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_fgetc</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_fputc</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>al_fread16le</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>al_fread16be</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_fwrite16le</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int16_t</name> <name>w</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_fwrite16be</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int16_t</name> <name>w</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>al_fread32le</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>al_fread32be</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_fwrite32le</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int32_t</name> <name>l</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_fwrite32be</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int32_t</name> <name>l</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_fgets</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <name>char</name> <operator>*</operator> <specifier>const</specifier> <name>p</name><operator>,</operator> <name>size_t</name> <name>max</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_fget_ustr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_fputs</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_fprintf</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_vfprintf</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>format</name><operator>,</operator> <name>va_list</name> <name>args</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_fopen_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>fd</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_make_temp_file</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>tmpl</name><operator>,</operator>

<name>ALLEGRO_PATH</name> <operator>*</operator><operator>*</operator><name>ret_path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_fopen_slice</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>fp</name><operator>,</operator>

<name>size_t</name> <name>initial_size</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_new_file_interface</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_new_file_interface</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <operator>*</operator>

<name>file_interface</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_standard_file_interface</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_file_userdata</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
