<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\timer.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/events.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_USECS_TO_SECS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) / 1000000.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_MSECS_TO_SECS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) / 1000.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_BPS_TO_SECS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1.0 / (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_BPM_TO_SECS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(60.0 / (x))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_TIMER</name></name></type> <name>ALLEGRO_TIMER</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_TIMER</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_timer</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name> <name>speed_secs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_timer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_start_timer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_stop_timer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_resume_timer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_timer_started</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_timer_speed</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_timer_speed</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>,</operator> <name>double</name> <name>speed_secs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>al_get_timer_count</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_timer_count</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>,</operator> <name>int64_t</name> <name>count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_add_timer_count</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>,</operator> <name>int64_t</name> <name>diff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_timer_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TIMER</name> <operator>*</operator><name>timer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
