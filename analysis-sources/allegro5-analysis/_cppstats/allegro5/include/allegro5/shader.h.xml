<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\shader.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/transformations.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SHADER</name></name></type> <name>ALLEGRO_SHADER</name>;</typedef>

<enum>enum <name>ALLEGRO_SHADER_TYPE</name> <block>{

<decl><name>ALLEGRO_VERTEX_SHADER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_PIXEL_SHADER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_SHADER_TYPE</name></name></type> <name>ALLEGRO_SHADER_TYPE</name>;</typedef>

<enum>enum <name>ALLEGRO_SHADER_PLATFORM</name> <block>{

<decl><name>ALLEGRO_SHADER_AUTO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ALLEGRO_SHADER_GLSL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_SHADER_HLSL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_SHADER_PLATFORM</name></name></type> <name>ALLEGRO_SHADER_PLATFORM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_COLOR</name></cpp:macro> <cpp:value>"al_color"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_POS</name></cpp:macro> <cpp:value>"al_pos"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX</name></cpp:macro> <cpp:value>"al_projview_matrix"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_TEX</name></cpp:macro> <cpp:value>"al_tex"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_TEXCOORD</name></cpp:macro> <cpp:value>"al_texcoord"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_TEX_MATRIX</name></cpp:macro> <cpp:value>"al_tex_matrix"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_USER_ATTR</name></cpp:macro> <cpp:value>"al_user_attr_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_USE_TEX</name></cpp:macro> <cpp:value>"al_use_tex"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_USE_TEX_MATRIX</name></cpp:macro> <cpp:value>"al_use_tex_matrix"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_ALPHA_TEST</name></cpp:macro> <cpp:value>"al_alpha_test"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_ALPHA_FUNCTION</name></cpp:macro> <cpp:value>"al_alpha_func"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SHADER_VAR_ALPHA_TEST_VALUE</name></cpp:macro> <cpp:value>"al_alpha_test_val"</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SHADER</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_shader</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER_PLATFORM</name> <name>platform</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_shader_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>,</operator>

<name>ALLEGRO_SHADER_TYPE</name> <name>type</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>source</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_attach_shader_source_file</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>,</operator>

<name>ALLEGRO_SHADER_TYPE</name> <name>type</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_build_shader</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_shader_log</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SHADER_PLATFORM</name></expr></argument>, <argument><expr><name>al_get_shader_platform</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_use_shader</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_shader</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><name>shader</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_sampler</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator> <name>ALLEGRO_BITMAP</name> <operator>*</operator><name>bitmap</name><operator>,</operator>

<name>int</name> <name>unit</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_matrix</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator>

<specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <operator>*</operator><name>matrix</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_int</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator> <name>int</name> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_float</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator> <name>float</name> <name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_int_vector</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator> <name>int</name> <name>num_components</name><operator>,</operator>

<specifier>const</specifier> <name>int</name> <operator>*</operator><name>i</name><operator>,</operator> <name>int</name> <name>num_elems</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_float_vector</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator> <name>int</name> <name>num_components</name><operator>,</operator>

<specifier>const</specifier> <name>float</name> <operator>*</operator><name>f</name><operator>,</operator> <name>int</name> <name>num_elems</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_shader_bool</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name><operator>,</operator> <name>bool</name> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_default_shader_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_SHADER_PLATFORM</name> <name>platform</name><operator>,</operator>

<name>ALLEGRO_SHADER_TYPE</name> <name>type</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
