<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\path.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/utf8.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NATIVE_PATH_SEP</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NATIVE_DRIVE_SEP</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NATIVE_PATH_SEP</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NATIVE_DRIVE_SEP</name></cpp:macro> <cpp:value>'\0'</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_PATH</name></name></type> <name>ALLEGRO_PATH</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_PATH</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_path</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_PATH</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_path_for_directory</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_PATH</name><operator>*</operator></expr></argument>, <argument><expr><name>al_clone_path</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_path_num_components</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_get_path_component</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>int</name> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_replace_path_component</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>int</name> <name>i</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_remove_path_component</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>int</name> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_insert_path_component</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>int</name> <name>i</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_get_path_tail</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_drop_path_tail</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_append_path_component</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_join_paths</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>tail</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_rebase_path</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>head</name><operator>,</operator> <name>ALLEGRO_PATH</name> <operator>*</operator><name>tail</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_path_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>char</name> <name>delim</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_USTR</name><operator>*</operator></expr></argument>, <argument><expr><name>al_path_ustr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>char</name> <name>delim</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_path</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_path_drive</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>drive</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_get_path_drive</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_path_filename</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_get_path_filename</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_get_path_extension</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_path_extension</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>,</operator> <name>char</name> <specifier>const</specifier> <operator>*</operator><name>extension</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>al_get_path_basename</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_make_path_canonical</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PATH</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
