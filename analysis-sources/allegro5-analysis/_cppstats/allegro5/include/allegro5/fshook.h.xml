<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\fshook.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/path.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>off_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FS_ENTRY</name></name></type> <name>ALLEGRO_FS_ENTRY</name>;</typedef>

<struct>struct <name>ALLEGRO_FS_ENTRY</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_FS_INTERFACE</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><enum>enum <name>ALLEGRO_FILE_MODE</name>

<block>{

<decl><name>ALLEGRO_FILEMODE_READ</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_FILEMODE_WRITE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_FILEMODE_EXECUTE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>ALLEGRO_FILEMODE_HIDDEN</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,

<decl><name>ALLEGRO_FILEMODE_ISFILE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,

<decl><name>ALLEGRO_FILEMODE_ISDIR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>

}</block></enum></type> <name>ALLEGRO_FILE_MODE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOF</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FS_INTERFACE</name></name></type> <name>ALLEGRO_FS_INTERFACE</name>;</typedef>

<struct>struct <name>ALLEGRO_FS_INTERFACE</name> <block>{

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator></expr></argument>, <argument><expr><name>fs_create_entry</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>fs_destroy_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>fs_entry_name</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_update_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>fs_entry_mode</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>fs_entry_atime</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>fs_entry_mtime</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>fs_entry_ctime</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>fs_entry_size</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_entry_exists</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_remove_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_open_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator></expr></argument>, <argument><expr><name>fs_read_directory</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_close_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_filename_exists</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_remove_filename</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>fs_get_current_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_change_directory</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>fs_make_directory</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name> <operator>*</operator></expr></argument>, <argument><expr><name>fs_open_file</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_fs_entry</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_fs_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_fs_entry_name</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_update_fs_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>al_get_fs_entry_mode</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>al_get_fs_entry_atime</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>al_get_fs_entry_mtime</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>al_get_fs_entry_ctime</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>al_get_fs_entry_size</name></expr></argument>,<argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_fs_entry_exists</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_remove_fs_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_open_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_read_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_close_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_filename_exists</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_remove_filename</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_current_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_change_directory</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_make_directory</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_FILE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_open_fs_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>e</name><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <name>ALLEGRO_FOR_EACH_FS_ENTRY_RESULT</name> <block>{

<decl><name>ALLEGRO_FOR_EACH_FS_ENTRY_ERROR</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_FOR_EACH_FS_ENTRY_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ALLEGRO_FOR_EACH_FS_ENTRY_SKIP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_FOR_EACH_FS_ENTRY_STOP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>ALLEGRO_FOR_EACH_FS_ENTRY_RESULT</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_for_each_fs_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>dir</name><operator>,</operator>

<call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>callback</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ALLEGRO_FS_ENTRY</name> <operator>*</operator><name>entry</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>extra</name></expr></argument>)</argument_list></call><operator>,</operator>

<name>void</name> <operator>*</operator><name>extra</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_fs_interface</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_fs_interface</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <operator>*</operator><name>vtable</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_standard_fs_interface</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
