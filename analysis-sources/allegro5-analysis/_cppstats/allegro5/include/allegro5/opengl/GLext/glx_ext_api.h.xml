<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\opengl\GLext\glx_ext_api.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLXFBConfig *</argument>, <argument>GetFBConfigs</argument>, <argument>(Display *, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXFBConfig *</argument>, <argument>ChooseFBConfig</argument>, <argument>(Display *, int, const int *, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>GetFBConfigAttrib</argument>, <argument>(Display *, GLXFBConfig, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>XVisualInfo *</argument>, <argument>GetVisualFromFBConfig</argument>, <argument>(Display *, GLXFBConfig)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXWindow</argument>, <argument>CreateWindow</argument>, <argument>(Display *, GLXFBConfig, Window, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DestroyWindow</argument>, <argument>(Display *, GLXWindow)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXPixmap</argument>, <argument>CreatePixmap</argument>, <argument>(Display *, GLXFBConfig, Pixmap, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DestroyPixmap</argument>, <argument>(Display *, GLXPixmap)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXPbuffer</argument>, <argument>CreatePbuffer</argument>, <argument>(Display *, GLXFBConfig, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DestroyPbuffer</argument>, <argument>(Display *, GLXPbuffer)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>QueryDrawable</argument>, <argument>(Display *, GLXDrawable, int, unsigned int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXContext</argument>, <argument>CreateNewContext</argument>, <argument>(Display *, GLXFBConfig, int, GLXContext, Bool)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>MakeContextCurrent</argument>, <argument>(Display *, GLXDrawable, GLXDrawable, GLXContext)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXDrawable</argument>, <argument>GetCurrentReadDrawable</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Display *</argument>, <argument>GetCurrentDisplay</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryContext</argument>, <argument>(Display *, GLXContext, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SelectEvent</argument>, <argument>(Display *, GLXDrawable, unsigned long)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSelectedEvent</argument>, <argument>(Display *, GLXDrawable, unsigned long *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>__GLXextFuncPtr</argument>, <argument>GetProcAddress</argument>, <argument>(const GLubyte *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_ARB_get_proc_address</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>__GLXextFuncPtr</argument>, <argument>GetProcAddressARB</argument>, <argument>(const GLubyte *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_ARB_create_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLXContext</argument>, <argument>CreateContextAttribsARB</argument>, <argument>(Display *, GLXFBConfig, GLXContext, Bool, const int *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>SwapIntervalSGI</argument>, <argument>(int)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_video_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>GetVideoSyncSGI</argument>, <argument>(unsigned int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>WaitVideoSyncSGI</argument>, <argument>(int, int, unsigned int *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_make_current_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>MakeCurrentReadSGI</argument>, <argument>(Display *, GLXDrawable, GLXDrawable, GLXContext)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXDrawable</argument>, <argument>GetCurrentReadDrawableSGI</argument>, <argument>(void)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_video_source</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_VL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLXVideoSourceSGIX</argument>, <argument>CreateGLXVideoSourceSGIX</argument>, <argument>(Display *, int, VLServer, VLPath, int, VLNode)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DestroyGLXVideoSourceSGIX</argument>, <argument>(Display *, GLXVideoSourceSGIX)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_import_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Display *</argument>, <argument>GetCurrentDisplayEXT</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryContextInfoEXT</argument>, <argument>(Display *, GLXContext, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXContextID</argument>, <argument>GetContextIDEXT</argument>, <argument>(const GLXContext)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXContext</argument>, <argument>ImportContextEXT</argument>, <argument>(Display *, GLXContextID)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FreeContextEXT</argument>, <argument>(Display *, GLXContext)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_fbconfig</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>GetFBConfigAttribSGIX</argument>, <argument>(Display *, GLXFBConfigSGIX, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXFBConfigSGIX *</argument>, <argument>ChooseFBConfigSGIX</argument>, <argument>(Display *, int, int *, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXPixmap</argument>, <argument>CreateGLXPixmapWithConfigSGIX</argument>, <argument>(Display *, GLXFBConfigSGIX, Pixmap)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXContext</argument>, <argument>CreateContextWithConfigSGIX</argument>, <argument>(Display *, GLXFBConfigSGIX, int, GLXContext, Bool)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>XVisualInfo *</argument>, <argument>GetVisualFromFBConfigSGIX</argument>, <argument>(Display *, GLXFBConfigSGIX)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXFBConfigSGIX</argument>, <argument>GetFBConfigFromVisualSGIX</argument>, <argument>(Display *, XVisualInfo *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_pbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLXPbufferSGIX</argument>, <argument>CreateGLXPbufferSGIX</argument>, <argument>(Display *, GLXFBConfigSGIX, unsigned int, unsigned int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DestroyGLXPbufferSGIX</argument>, <argument>(Display *, GLXPbufferSGIX)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryGLXPbufferSGIX</argument>, <argument>(Display *, GLXPbufferSGIX, int, unsigned int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SelectEventSGIX</argument>, <argument>(Display *, GLXDrawable, unsigned long)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSelectedEventSGIX</argument>, <argument>(Display *, GLXDrawable, unsigned long *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_cushion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CushionSGI</argument>, <argument>(Display *, Window, float)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_video_resize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>BindChannelToWindowSGIX</argument>, <argument>(Display *, int, int, Window)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>ChannelRectSGIX</argument>, <argument>(Display *, int, int, int, int, int, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryChannelRectSGIX</argument>, <argument>(Display *, int, int, int *, int *, int *, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryChannelDeltasSGIX</argument>, <argument>(Display *, int, int, int *, int *, int *, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>ChannelRectSyncSGIX</argument>, <argument>(Display *, int, int, GLenum)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_dmbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DM_BUFFER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>AssociateDMPbufferSGIX</argument>, <argument>(Display *, GLXPbufferSGIX, DMparams *, DMbuffer)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>JoinSwapGroupSGIX</argument>, <argument>(Display *, GLXDrawable, GLXDrawable)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_swap_barrier</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindSwapBarrierSGIX</argument>, <argument>(Display *, GLXDrawable, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>QueryMaxSwapBarriersSGIX</argument>, <argument>(Display *, int, int *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SUN_get_transparent_index</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Status</argument>, <argument>GetTransparentIndexSUN</argument>, <argument>(Display *, Window, Window, long *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_copy_sub_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopySubBufferMESA</argument>, <argument>(Display *, GLXDrawable, int, int, int, int)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_pixmap_colormap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLXPixmap</argument>, <argument>CreateGLXPixmapMESA</argument>, <argument>(Display *, XVisualInfo *, Pixmap, Colormap)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_release_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>ReleaseBuffersMESA</argument>, <argument>(Display *, GLXDrawable)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_set_3dfx_mode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>Set3DfxModeMESA</argument>, <argument>(int)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_OML_sync_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>GetSyncValuesOML</argument>, <argument>(Display *, GLXDrawable, int64_t *, int64_t *, int64_t *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>GetMscRateOML</argument>, <argument>(Display *, GLXDrawable, int32_t *, int32_t *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int64_t</argument>, <argument>SwapBuffersMscOML</argument>, <argument>(Display *, GLXDrawable, int64_t, int64_t, int64_t)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>WaitForMscOML</argument>, <argument>(Display *, GLXDrawable, int64_t, int64_t, int64_t, int64_t *, int64_t *, int64_t *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>WaitForSbcOML</argument>, <argument>(Display *, GLXDrawable, int64_t, int64_t *, int64_t *, int64_t *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_hyperpipe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLXHyperpipeNetworkSGIX *</argument>, <argument>QueryHyperpipeNetworkSGIX</argument>, <argument>(Display *dpy, int *npipes)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>HyperpipeConfigSGIX</argument>, <argument>(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXHyperpipeConfigSGIX *</argument>, <argument>QueryHyperpipeConfigSGIX</argument>, <argument>(Display *dpy, int hpId, int *npipes)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>DestroyHyperpipeConfigSGIX</argument>, <argument>(Display * dpy, int hpId)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>BindHyperpipeSGIX</argument>, <argument>(Display *dpy, int hpId)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryHyperpipeBestAttribSGIX</argument>, <argument>(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>HyperpipeAttribSGIX</argument>, <argument>(Display *dpy, int timeSlice, int attrib, int size, void *attribList)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryHyperpipeAttribSGIX</argument>, <argument>(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_agp_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>unsigned int</argument>, <argument>GetAGPOffsetMESA</argument>, <argument>(const void *pointer)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_texture_from_pixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindTexImageEXT</argument>, <argument>(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReleaseTextImageEXT</argument>, <argument>(Display *dpy, GLXDrawable drawable, int buffer)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_video_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>GetVideoDeviceNV</argument>, <argument>(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>ReleaseVideoDeviceNV</argument>, <argument>(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>BindVideoImageNV</argument>, <argument>(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>ReleaseVideoImageNV</argument>, <argument>(Display *dpy, GLXPbuffer pbuf)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>SendPbufferToVideoNV</argument>, <argument>(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>GetVideoInfoNV</argument>, <argument>(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputVideo, unsigned long *pulCounterOutputPbuffer)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>JoinSwapGroupNV</argument>, <argument>(Display *dpy, GLXDrawable drawable, GLuint group)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>BindSwapBarrierNV</argument>, <argument>(Display *dpy, GLuint group, GLuint barrier)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>QuerySwapGroupNV</argument>, <argument>(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>QueryMaxSwapGroupsNV</argument>, <argument>(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>QueryFrameCountNV</argument>, <argument>(Display *dpy, int screen, GLuint *count)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>Bool</argument>, <argument>ResetFrameCountNV</argument>, <argument>(Display *dpy, int screen)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>BindVideoCaptureDeviceNV</argument>, <argument>(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLXVideoCaptureDeviceNV *</argument>, <argument>EnumerateVideoCaptureDevicesNV</argument>, <argument>(Display *dpy, int screen, int *nelements)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LockVideoCaptureDeviceNV</argument>, <argument>(Display *dpy, GLXVideoCaptureDeviceNV device)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>QueryVideoCaptureDeviceNV</argument>, <argument>(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReleaseVideoCaptureDeviceNV</argument>, <argument>(Display *dpy, GLXVideoCaptureDeviceNV device)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>SwapIntervalEXT</argument>, <argument>(Display *dpy, GLXDrawable drawable, int interval)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyImageSubDataNV</argument>, <argument>(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_create_context_es_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
