<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\opengl\GLext\wgl_ext_api.h"><macro><name>AGL_API</name><argument_list>(<argument>HANDLE</argument>, <argument>CreateBufferRegionARB</argument>, <argument>(HDC, int, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>VOID</argument>, <argument>DeleteBufferRegionARB</argument>, <argument>(HANDLE)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SaveBufferRegionARB</argument>, <argument>(HANDLE, int, int, int, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>RestoreBufferRegionARB</argument>, <argument>(HANDLE, int, int, int, int, int, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>const char *</argument>, <argument>GetExtensionsStringARB</argument>, <argument>(HDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetPixelFormatAttribivARB</argument>, <argument>(HDC, int, int, UINT, const int *, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetPixelFormatAttribfvARB</argument>, <argument>(HDC, int, int, UINT, const int *, FLOAT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ChoosePixelFormatARB</argument>, <argument>(HDC, const int *, const FLOAT *, UINT, int *, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>MakeContextCurrentARB</argument>, <argument>(HDC, HDC, HGLRC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HDC</argument>, <argument>GetCurrentReadDCARB</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HPBUFFERARB</argument>, <argument>CreatePbufferARB</argument>, <argument>(HDC, int, int, int, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HDC</argument>, <argument>GetPbufferDCARB</argument>, <argument>(HPBUFFERARB)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>ReleasePbufferDCARB</argument>, <argument>(HPBUFFERARB, HDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DestroyPbufferARB</argument>, <argument>(HPBUFFERARB)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryPbufferARB</argument>, <argument>(HPBUFFERARB, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>BindTexImageARB</argument>, <argument>(HPBUFFERARB, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ReleaseTexImageARB</argument>, <argument>(HPBUFFERARB, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SetPbufferAttribARB</argument>, <argument>(HPBUFFERARB, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HGLRC</argument>, <argument>CreateContextAttribsARB</argument>, <argument>(HDC, HGLRC, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>CreateDisplayColorTableEXT</argument>, <argument>(GLushort)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>LoadDisplayColorTableEXT</argument>, <argument>(const GLushort *, GLuint)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>BindDisplayColorTableEXT</argument>, <argument>(GLushort)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>VOID</argument>, <argument>DestroyDisplayColorTableEXT</argument>, <argument>(GLushort)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>const char *</argument>, <argument>GetExtensionsStringEXT</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>MakeContextCurrentEXT</argument>, <argument>(HDC, HDC, HGLRC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HDC</argument>, <argument>GetCurrentReadDCEXT</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HPBUFFEREXT</argument>, <argument>CreatePbufferEXT</argument>, <argument>(HDC, int, int, int, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HDC</argument>, <argument>GetPbufferDCEXT</argument>, <argument>(HPBUFFEREXT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>ReleasePbufferDCEXT</argument>, <argument>(HPBUFFEREXT, HDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DestroyPbufferEXT</argument>, <argument>(HPBUFFEREXT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryPbufferEXT</argument>, <argument>(HPBUFFEREXT, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetPixelFormatAttribivEXT</argument>, <argument>(HDC, int, int, UINT, int *, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetPixelFormatAttribfvEXT</argument>, <argument>(HDC, int, int, UINT, int *, FLOAT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ChoosePixelFormatEXT</argument>, <argument>(HDC, const int *, const FLOAT *, UINT, int *, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SwapIntervalEXT</argument>, <argument>(int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>GetSwapIntervalEXT</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void*</argument>, <argument>AllocateMemoryNV</argument>, <argument>(GLsizei, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FreeMemoryNV</argument>, <argument>(void *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetSyncValuesOML</argument>, <argument>(HDC, INT64 *, INT64 *, INT64 *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetMscRateOML</argument>, <argument>(HDC, INT32 *, INT32 *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>INT64</argument>, <argument>SwapBuffersMscOML</argument>, <argument>(HDC, INT64, INT64, INT64)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>INT64</argument>, <argument>SwapLayerBuffersMscOML</argument>, <argument>(HDC, int, INT64, INT64, INT64)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>WaitForMscOML</argument>, <argument>(HDC, INT64, INT64, INT64, INT64 *, INT64 *, INT64 *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>WaitForSbcOML</argument>, <argument>(HDC, INT64, INT64 *, INT64 *, INT64 *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetDigitalVideoParametersI3D</argument>, <argument>(HDC, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SetDigitalVideoParametersI3D</argument>, <argument>(HDC, int, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetGammaTableParametersI3D</argument>, <argument>(HDC, int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SetGammaTableParametersI3D</argument>, <argument>(HDC, int, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetGammaTableI3D</argument>, <argument>(HDC, int, USHORT *, USHORT *, USHORT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SetGammaTableI3D</argument>, <argument>(HDC, int, const USHORT *, const USHORT *, const USHORT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>EnableGenlockI3D</argument>, <argument>(HDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DisableGenlockI3D</argument>, <argument>(HDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>IsEnabledGenlockI3D</argument>, <argument>(HDC, BOOL *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GenlockSourceI3D</argument>, <argument>(HDC, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetGenlockSourceI3D</argument>, <argument>(HDC, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GenlockSourceEdgeI3D</argument>, <argument>(HDC, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetGenlockSourceEdgeI3D</argument>, <argument>(HDC, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GenlockSampleRateI3D</argument>, <argument>(HDC, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetGenlockSampleRateI3D</argument>, <argument>(HDC, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GenlockSourceDelayI3D</argument>, <argument>(HDC, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetGenlockSourceDelayI3D</argument>, <argument>(HDC, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryGenlockMaxSourceDelayI3D</argument>, <argument>(HDC, UINT *, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>LPVOID</argument>, <argument>CreateImageBufferI3D</argument>, <argument>(HDC, DWORD, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DestroyImageBufferI3D</argument>, <argument>(HDC, LPVOID)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>AssociateImageBufferEventsI3D</argument>, <argument>(HDC, const HANDLE *, const LPVOID *, const DWORD *, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ReleaseImageBufferEventsI3D</argument>, <argument>(HDC, const LPVOID *, UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>EnableFrameLockI3D</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DisableFrameLockI3D</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>IsEnabledFrameLockI3D</argument>, <argument>(BOOL *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryFrameLockMasterI3D</argument>, <argument>(BOOL *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetFrameUsageI3D</argument>, <argument>(float *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>BeginFrameTrackingI3D</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>EndFrameTrackingI3D</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryFrameTrackingI3D</argument>, <argument>(DWORD *, DWORD *, float *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AddSwapHintRectWIN</argument>, <argument>(int, int, int, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>int</argument>, <argument>EnumerateVideoDevicesNV</argument>, <argument>(HDC, HVIDEOOUTPUTDEVICENV *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>BindVideoDeviceNV</argument>, <argument>(HDC, unsigned int, HVIDEOOUTPUTDEVICENV, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryCurrentContextNV</argument>, <argument>(int, int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetVideoDeviceNV</argument>, <argument>(HDC, int, HPVIDEODEV *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ReleaseVideoDeviceNV</argument>, <argument>(HPVIDEODEV)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>BindVideoImageNV</argument>, <argument>(HPVIDEODEV, HPBUFFERARB, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ReleaseVideoImageNV</argument>, <argument>(HPBUFFERARB, int)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>SendPbufferToVideoNV</argument>, <argument>(HPBUFFERARB, int, unsigned long *, BOOL)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>GetVideoInfoNV</argument>, <argument>(HPVIDEODEV, unsigned long *, unsigned long *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>JoinSwapGroupNV</argument>, <argument>(HDC hDC, GLuint group)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>BindSwapBarrierNV</argument>, <argument>(GLuint group, GLuint barrier)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QuerySwapGroupNV</argument>, <argument>(HDC hDC, GLuint *group, GLuint *barrier)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryMaxSwapGroupsNV</argument>, <argument>(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryFrameCountNV</argument>, <argument>(HDC hDC, GLuint *count)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ResetFrameCountNV</argument>, <argument>(HDC hDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>EnumGpusNV</argument>, <argument>(UINT, HGPUNV *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>EnumGpuDevicesNV</argument>, <argument>(HGPUNV, UINT, PGPU_DEVICE)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HDC</argument>, <argument>CreateAffinityDCNV</argument>, <argument>(const HGPUNV *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>EnumGpusFromAffinityDCNV</argument>, <argument>(HDC, UINT, HGPUNV *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DeleteDCNV</argument>, <argument>(HDC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>UINT</argument>, <argument>GetGPUIDsAMD</argument>, <argument>(UINT, UINT *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>INT</argument>, <argument>GetGPUInfoAMD</argument>, <argument>(UINT, int, GLenum, UINT, void *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>UINT</argument>, <argument>GetContextGPUIDAMD</argument>, <argument>(HGLRC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HGLRC</argument>, <argument>CreateAssociatedContextAMD</argument>, <argument>(UINT)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HGLRC</argument>, <argument>CreateAssociatedContextAttribsAMD</argument>, <argument>(UINT, HGLRC, const int *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>DeleteAssociatedContextAMD</argument>, <argument>(HGLRC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>MakeAssociatedContextCurrentAMD</argument>, <argument>(HGLRC)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>HGLRC</argument>, <argument>GetCurrentAssociatedContextAMD</argument>, <argument>(void)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>VOID</argument>, <argument>BlitContextFramebufferAMD</argument>, <argument>(HGLRC, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>BindVideoCaptureDeviceNV</argument>, <argument>(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>UINT</argument>, <argument>EnumerateVideoCaptureDevicesNV</argument>, <argument>(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>LockVideoCaptureDeviceNV</argument>, <argument>(HDC hDc, HVIDEOINPUTDEVICENV hDevice)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>QueryVideoCaptureDeviceNV</argument>, <argument>(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>ReleaseVideoCaptureDeviceNV</argument>, <argument>(HDC hDc, HVIDEOINPUTDEVICENV hDevice)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>BOOL</argument>, <argument>CopyImageSubDataNV</argument>, <argument>(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)</argument>)</argument_list></macro>

</unit>
