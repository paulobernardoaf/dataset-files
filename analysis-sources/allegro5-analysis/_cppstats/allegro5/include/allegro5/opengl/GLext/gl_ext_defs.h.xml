<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\opengl\GLext\gl_ext_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>_MSC_VER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>__int64</name></type> <name>GLint64</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>GLuint64</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int64_t</name></type> <name>GLint64</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_1_2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_3_3_2</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8</name></cpp:macro> <cpp:value>0x8035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2</name></cpp:macro> <cpp:value>0x8036</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESCALE_NORMAL</name></cpp:macro> <cpp:value>0x803A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_3D</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_3D</name></cpp:macro> <cpp:value>0x8070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH</name></cpp:macro> <cpp:value>0x8071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_2_3_3_REV</name></cpp:macro> <cpp:value>0x8362</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5</name></cpp:macro> <cpp:value>0x8363</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5_REV</name></cpp:macro> <cpp:value>0x8364</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_REV</name></cpp:macro> <cpp:value>0x8365</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></cpp:macro> <cpp:value>0x8366</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></cpp:macro> <cpp:value>0x8367</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8368</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR</name></cpp:macro> <cpp:value>0x80E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_COLOR_CONTROL</name></cpp:macro> <cpp:value>0x81F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SINGLE_COLOR</name></cpp:macro> <cpp:value>0x81F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_SPECULAR_COLOR</name></cpp:macro> <cpp:value>0x81FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x846D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x846E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_imaging</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_imaging</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_imaging</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_1D</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_2D</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARABLE_2D</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_MODE</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_SCALE</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_BIAS</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REDUCE</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FORMAT</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_WIDTH</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_HEIGHT</name></cpp:macro> <cpp:value>0x8019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_WIDTH</name></cpp:macro> <cpp:value>0x801A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_HEIGHT</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_SCALE</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_SCALE</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_SCALE</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_SCALE</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_BIAS</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_BIAS</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_BIAS</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_BIAS</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM</name></cpp:macro> <cpp:value>0x8024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_HISTOGRAM</name></cpp:macro> <cpp:value>0x8025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_WIDTH</name></cpp:macro> <cpp:value>0x8026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_FORMAT</name></cpp:macro> <cpp:value>0x8027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_RED_SIZE</name></cpp:macro> <cpp:value>0x8028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8029</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_BLUE_SIZE</name></cpp:macro> <cpp:value>0x802A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x802B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_LUMINANCE_SIZE</name></cpp:macro> <cpp:value>0x802C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_SINK</name></cpp:macro> <cpp:value>0x802D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX</name></cpp:macro> <cpp:value>0x802E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_FORMAT</name></cpp:macro> <cpp:value>0x802F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_SINK</name></cpp:macro> <cpp:value>0x8030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TABLE_TOO_LARGE</name></cpp:macro> <cpp:value>0x8031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX</name></cpp:macro> <cpp:value>0x80B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX_STACK_DEPTH</name></cpp:macro> <cpp:value>0x80B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_MATRIX_STACK_DEPTH</name></cpp:macro> <cpp:value>0x80B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_SCALE</name></cpp:macro> <cpp:value>0x80B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_SCALE</name></cpp:macro> <cpp:value>0x80B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_SCALE</name></cpp:macro> <cpp:value>0x80B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_SCALE</name></cpp:macro> <cpp:value>0x80B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_BIAS</name></cpp:macro> <cpp:value>0x80B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_BIAS</name></cpp:macro> <cpp:value>0x80B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_BIAS</name></cpp:macro> <cpp:value>0x80BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_BIAS</name></cpp:macro> <cpp:value>0x80BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_CONVOLUTION_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE</name></cpp:macro> <cpp:value>0x80D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_SCALE</name></cpp:macro> <cpp:value>0x80D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BIAS</name></cpp:macro> <cpp:value>0x80D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_FORMAT</name></cpp:macro> <cpp:value>0x80D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_WIDTH</name></cpp:macro> <cpp:value>0x80D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_RED_SIZE</name></cpp:macro> <cpp:value>0x80DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_GREEN_SIZE</name></cpp:macro> <cpp:value>0x80DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BLUE_SIZE</name></cpp:macro> <cpp:value>0x80DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x80DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_LUMINANCE_SIZE</name></cpp:macro> <cpp:value>0x80DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_INTENSITY_SIZE</name></cpp:macro> <cpp:value>0x80DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_BORDER</name></cpp:macro> <cpp:value>0x8151</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLICATE_BORDER</name></cpp:macro> <cpp:value>0x8153</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_COLOR</name></cpp:macro> <cpp:value>0x8154</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_1_3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_UNITS</name></cpp:macro> <cpp:value>0x84E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_MODELVIEW_MATRIX</name></cpp:macro> <cpp:value>0x84E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_PROJECTION_MATRIX</name></cpp:macro> <cpp:value>0x84E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_TEXTURE_MATRIX</name></cpp:macro> <cpp:value>0x84E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_COLOR_MATRIX</name></cpp:macro> <cpp:value>0x84E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_ALPHA</name></cpp:macro> <cpp:value>0x84E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE</name></cpp:macro> <cpp:value>0x84EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x84EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_INTENSITY</name></cpp:macro> <cpp:value>0x84EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER_SGIS</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE</name></cpp:macro> <cpp:value>0x8570</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_RGB</name></cpp:macro> <cpp:value>0x8571</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ALPHA</name></cpp:macro> <cpp:value>0x8572</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_RGB</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_RGB</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_RGB</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_ALPHA</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_ALPHA</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_ALPHA</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_RGB</name></cpp:macro> <cpp:value>0x8590</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_RGB</name></cpp:macro> <cpp:value>0x8591</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_RGB</name></cpp:macro> <cpp:value>0x8592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_ALPHA</name></cpp:macro> <cpp:value>0x8598</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_ALPHA</name></cpp:macro> <cpp:value>0x8599</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_ALPHA</name></cpp:macro> <cpp:value>0x859A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SCALE</name></cpp:macro> <cpp:value>0x8573</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_SIGNED</name></cpp:macro> <cpp:value>0x8574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERPOLATE</name></cpp:macro> <cpp:value>0x8575</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBTRACT</name></cpp:macro> <cpp:value>0x84E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT</name></cpp:macro> <cpp:value>0x8576</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS</name></cpp:macro> <cpp:value>0x8578</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGB</name></cpp:macro> <cpp:value>0x86AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGBA</name></cpp:macro> <cpp:value>0x86AF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_1_4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_DISTANCE_ATTENUATION</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP</name></cpp:macro> <cpp:value>0x8191</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_HINT</name></cpp:macro> <cpp:value>0x8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_SOURCE</name></cpp:macro> <cpp:value>0x8450</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE</name></cpp:macro> <cpp:value>0x8451</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_DEPTH</name></cpp:macro> <cpp:value>0x8452</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_FOG_COORDINATE</name></cpp:macro> <cpp:value>0x8453</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8454</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8455</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8456</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY</name></cpp:macro> <cpp:value>0x8457</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_SECONDARY_COLOR</name></cpp:macro> <cpp:value>0x8459</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x845A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x845B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x845C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x845D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY</name></cpp:macro> <cpp:value>0x845E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FILTER_CONTROL</name></cpp:macro> <cpp:value>0x8500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x8501</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEXTURE_MODE</name></cpp:macro> <cpp:value>0x884B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_R_TO_TEXTURE</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_1_5</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLintptr</name>;</typedef>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLsizeiptr</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_SRC</name></cpp:macro> <cpp:value>GL_FOG_COORDINATE_SOURCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD</name></cpp:macro> <cpp:value>GL_FOG_COORDINATE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_FOG_COORD</name></cpp:macro> <cpp:value>GL_CURRENT_FOG_COORDINATE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_TYPE</name></cpp:macro> <cpp:value>GL_FOG_COORDINATE_ARRAY_TYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_STRIDE</name></cpp:macro> <cpp:value>GL_FOG_COORDINATE_ARRAY_STRIDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_POINTER</name></cpp:macro> <cpp:value>GL_FOG_COORDINATE_ARRAY_POINTER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY</name></cpp:macro> <cpp:value>GL_FOG_COORDINATE_ARRAY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC0_RGB</name></cpp:macro> <cpp:value>GL_SOURCE0_RGB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_RGB</name></cpp:macro> <cpp:value>GL_SOURCE1_RGB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC2_RGB</name></cpp:macro> <cpp:value>GL_SOURCE2_RGB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC0_ALPHA</name></cpp:macro> <cpp:value>GL_SOURCE0_ALPHA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_ALPHA</name></cpp:macro> <cpp:value>GL_SOURCE1_ALPHA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC2_ALPHA</name></cpp:macro> <cpp:value>GL_SOURCE2_ALPHA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8896</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8897</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8898</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8899</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8914</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_COUNTER_BITS</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_2_0</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>char</name></type> <name>GLchar</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB</name></cpp:macro> <cpp:value>GL_BLEND_EQUATION</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE</name></cpp:macro> <cpp:value>0x8861</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COORD_REPLACE</name></cpp:macro> <cpp:value>0x8862</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_TYPE</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8B5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_SHADOW</name></cpp:macro> <cpp:value>0x8B61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DELETE_STATUS</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE_STATUS</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINK_STATUS</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VALIDATE_STATUS</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INFO_LOG_LENGTH</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTACHED_SHADERS</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_SOURCE_LENGTH</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTES</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PROGRAM</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_COORD_ORIGIN</name></cpp:macro> <cpp:value>0x8CA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOWER_LEFT</name></cpp:macro> <cpp:value>0x8CA1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UPPER_LEFT</name></cpp:macro> <cpp:value>0x8CA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_REF</name></cpp:macro> <cpp:value>0x8CA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_VALUE_MASK</name></cpp:macro> <cpp:value>0x8CA4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_WRITEMASK</name></cpp:macro> <cpp:value>0x8CA5</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_2_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_2_1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_SECONDARY_COLOR</name></cpp:macro> <cpp:value>0x845F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x3</name></cpp:macro> <cpp:value>0x8B65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x4</name></cpp:macro> <cpp:value>0x8B66</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x2</name></cpp:macro> <cpp:value>0x8B67</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x4</name></cpp:macro> <cpp:value>0x8B68</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x2</name></cpp:macro> <cpp:value>0x8B69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x3</name></cpp:macro> <cpp:value>0x8B6A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x8C44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_ALPHA8</name></cpp:macro> <cpp:value>0x8C45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE</name></cpp:macro> <cpp:value>0x8C46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8</name></cpp:macro> <cpp:value>0x8C47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE</name></cpp:macro> <cpp:value>0x8C4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x8C4B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_0</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_3_0</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_TO_TEXTURE</name></cpp:macro> <cpp:value>GL_COMPARE_R_TO_TEXTURE_ARB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE0</name></cpp:macro> <cpp:value>GL_CLIP_PLANE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE1</name></cpp:macro> <cpp:value>GL_CLIP_PLANE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE2</name></cpp:macro> <cpp:value>GL_CLIP_PLANE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE3</name></cpp:macro> <cpp:value>GL_CLIP_PLANE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE4</name></cpp:macro> <cpp:value>GL_CLIP_PLANE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE5</name></cpp:macro> <cpp:value>GL_CLIP_PLANE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIP_DISTANCES</name></cpp:macro> <cpp:value>GL_MAX_CLIP_PLANES</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAJOR_VERSION</name></cpp:macro> <cpp:value>0x821B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINOR_VERSION</name></cpp:macro> <cpp:value>0x821C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_EXTENSIONS</name></cpp:macro> <cpp:value>0x821D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAGS</name></cpp:macro> <cpp:value>0x821E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER</name></cpp:macro> <cpp:value>0x8223</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER</name></cpp:macro> <cpp:value>0x8224</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED</name></cpp:macro> <cpp:value>0x8225</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG</name></cpp:macro> <cpp:value>0x8226</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_VERTEX_COLOR</name></cpp:macro> <cpp:value>0x891A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_FRAGMENT_COLOR</name></cpp:macro> <cpp:value>0x891B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_READ_COLOR</name></cpp:macro> <cpp:value>0x891C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_ONLY</name></cpp:macro> <cpp:value>0x891D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS</name></cpp:macro> <cpp:value>GL_MAX_VARYING_FLOATS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_TYPE</name></cpp:macro> <cpp:value>0x8C14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_TYPE</name></cpp:macro> <cpp:value>0x8C15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHARED_SIZE</name></cpp:macro> <cpp:value>0x8C3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_INTEGER</name></cpp:macro> <cpp:value>0x8D95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_INTEGER</name></cpp:macro> <cpp:value>0x8D96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_INTEGER</name></cpp:macro> <cpp:value>0x8D97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_INTEGER</name></cpp:macro> <cpp:value>0x8D9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_INTEGER</name></cpp:macro> <cpp:value>0x8D9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DC9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_WAIT</name></cpp:macro> <cpp:value>0x8E13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_NO_WAIT</name></cpp:macro> <cpp:value>0x8E14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_WAIT</name></cpp:macro> <cpp:value>0x8E15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_NO_WAIT</name></cpp:macro> <cpp:value>0x8E16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_0_DEPRECATED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_0_DEPRECATED</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_3_0_DEPRECATED</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_VERTEX_COLOR</name></cpp:macro> <cpp:value>0x891A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_FRAGMENT_COLOR</name></cpp:macro> <cpp:value>0x891B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_INTEGER</name></cpp:macro> <cpp:value>0x8D97</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_3_1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8B63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_SHADOW</name></cpp:macro> <cpp:value>0x8B64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DCD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_FORMAT</name></cpp:macro> <cpp:value>0x8C2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_SNORM</name></cpp:macro> <cpp:value>0x8F90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_SNORM</name></cpp:macro> <cpp:value>0x8F91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SNORM</name></cpp:macro> <cpp:value>0x8F92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_SNORM</name></cpp:macro> <cpp:value>0x8F93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_SNORM</name></cpp:macro> <cpp:value>0x8F94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_SNORM</name></cpp:macro> <cpp:value>0x8F95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_SNORM</name></cpp:macro> <cpp:value>0x8F96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_SNORM</name></cpp:macro> <cpp:value>0x8F97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16_SNORM</name></cpp:macro> <cpp:value>0x8F98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16_SNORM</name></cpp:macro> <cpp:value>0x8F99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_SNORM</name></cpp:macro> <cpp:value>0x8F9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_SNORM</name></cpp:macro> <cpp:value>0x8F9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8F9C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART</name></cpp:macro> <cpp:value>0x8F9D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_INDEX</name></cpp:macro> <cpp:value>0x8F9E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_3_2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_CORE_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_COMPATIBILITY_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT</name></cpp:macro> <cpp:value>0x8916</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE</name></cpp:macro> <cpp:value>0x8917</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE</name></cpp:macro> <cpp:value>0x8918</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9124</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9125</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_PROFILE_MASK</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_3_3</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_4_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_4_3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_VERSION_4_3</name></cpp:macro></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GLDEBUGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SHADING_LANGUAGE_VERSIONS</name></cpp:macro> <cpp:value>0x82E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_LONG</name></cpp:macro> <cpp:value>0x874E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_ETC2</name></cpp:macro> <cpp:value>0x9274</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ETC2</name></cpp:macro> <cpp:value>0x9275</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9276</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9277</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9278</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9279</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_R11_EAC</name></cpp:macro> <cpp:value>0x9270</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_R11_EAC</name></cpp:macro> <cpp:value>0x9271</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG11_EAC</name></cpp:macro> <cpp:value>0x9272</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG11_EAC</name></cpp:macro> <cpp:value>0x9273</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_FIXED_INDEX</name></cpp:macro> <cpp:value>0x8D69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED_CONSERVATIVE</name></cpp:macro> <cpp:value>0x8D6A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENT_INDEX</name></cpp:macro> <cpp:value>0x8D6B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x91B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x91BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x91BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_IMAGE_UNIFORMS</name></cpp:macro> <cpp:value>0x91BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_SHARED_MEMORY_SIZE</name></cpp:macro> <cpp:value>0x8262</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8263</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS</name></cpp:macro> <cpp:value>0x8264</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_ATOMIC_COUNTERS</name></cpp:macro> <cpp:value>0x8265</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8266</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS</name></cpp:macro> <cpp:value>0x90EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_WORK_GROUP_COUNT</name></cpp:macro> <cpp:value>0x91BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_WORK_GROUP_SIZE</name></cpp:macro> <cpp:value>0x91BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_WORK_GROUP_SIZE</name></cpp:macro> <cpp:value>0x8267</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x90EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x90ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPATCH_INDIRECT_BUFFER</name></cpp:macro> <cpp:value>0x90EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPATCH_INDIRECT_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x90EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SHADER_BIT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_MARKER</name></cpp:macro> <cpp:value>0x8268</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PUSH_GROUP</name></cpp:macro> <cpp:value>0x8269</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_POP_GROUP</name></cpp:macro> <cpp:value>0x826A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_NOTIFICATION</name></cpp:macro> <cpp:value>0x826B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER</name></cpp:macro> <cpp:value>0x82E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER</name></cpp:macro> <cpp:value>0x82E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM</name></cpp:macro> <cpp:value>0x82E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY</name></cpp:macro> <cpp:value>0x82E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE</name></cpp:macro> <cpp:value>0x82E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER</name></cpp:macro> <cpp:value>0x82E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LABEL_LENGTH</name></cpp:macro> <cpp:value>0x82E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT</name></cpp:macro> <cpp:value>0x92E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_DEBUG_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x826E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_WIDTH</name></cpp:macro> <cpp:value>0x9310</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_HEIGHT</name></cpp:macro> <cpp:value>0x9311</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_LAYERS</name></cpp:macro> <cpp:value>0x9312</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_SAMPLES</name></cpp:macro> <cpp:value>0x9313</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS</name></cpp:macro> <cpp:value>0x9314</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x9315</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x9316</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_LAYERS</name></cpp:macro> <cpp:value>0x9317</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x9318</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_SUPPORTED</name></cpp:macro> <cpp:value>0x826F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_PREFERRED</name></cpp:macro> <cpp:value>0x8270</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_RED_SIZE</name></cpp:macro> <cpp:value>0x8271</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8272</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8273</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8274</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8275</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8276</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_SHARED_SIZE</name></cpp:macro> <cpp:value>0x8277</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_RED_TYPE</name></cpp:macro> <cpp:value>0x8278</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_GREEN_TYPE</name></cpp:macro> <cpp:value>0x8279</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_BLUE_TYPE</name></cpp:macro> <cpp:value>0x827A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_ALPHA_TYPE</name></cpp:macro> <cpp:value>0x827B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_DEPTH_TYPE</name></cpp:macro> <cpp:value>0x827C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERNALFORMAT_STENCIL_TYPE</name></cpp:macro> <cpp:value>0x827D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_WIDTH</name></cpp:macro> <cpp:value>0x827E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_HEIGHT</name></cpp:macro> <cpp:value>0x827F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEPTH</name></cpp:macro> <cpp:value>0x8280</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LAYERS</name></cpp:macro> <cpp:value>0x8281</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_DIMENSIONS</name></cpp:macro> <cpp:value>0x8282</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_COMPONENTS</name></cpp:macro> <cpp:value>0x8283</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENTS</name></cpp:macro> <cpp:value>0x8284</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_COMPONENTS</name></cpp:macro> <cpp:value>0x8285</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_RENDERABLE</name></cpp:macro> <cpp:value>0x8286</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_RENDERABLE</name></cpp:macro> <cpp:value>0x8287</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_RENDERABLE</name></cpp:macro> <cpp:value>0x8288</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_RENDERABLE</name></cpp:macro> <cpp:value>0x8289</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_RENDERABLE_LAYERED</name></cpp:macro> <cpp:value>0x828A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BLEND</name></cpp:macro> <cpp:value>0x828B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXELS</name></cpp:macro> <cpp:value>0x828C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXELS_FORMAT</name></cpp:macro> <cpp:value>0x828D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXELS_TYPE</name></cpp:macro> <cpp:value>0x828E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMAGE_FORMAT</name></cpp:macro> <cpp:value>0x828F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMAGE_TYPE</name></cpp:macro> <cpp:value>0x8290</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GET_TEXTURE_IMAGE_FORMAT</name></cpp:macro> <cpp:value>0x8291</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GET_TEXTURE_IMAGE_TYPE</name></cpp:macro> <cpp:value>0x8292</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIPMAP</name></cpp:macro> <cpp:value>0x8293</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MANUAL_GENERATE_MIPMAP</name></cpp:macro> <cpp:value>0x8294</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUTO_GENERATE_MIPMAP</name></cpp:macro> <cpp:value>0x8295</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8296</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_READ</name></cpp:macro> <cpp:value>0x8297</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_WRITE</name></cpp:macro> <cpp:value>0x8298</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILTER</name></cpp:macro> <cpp:value>0x829A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_TEXTURE</name></cpp:macro> <cpp:value>0x829B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_TEXTURE</name></cpp:macro> <cpp:value>0x829C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_TEXTURE</name></cpp:macro> <cpp:value>0x829D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_TEXTURE</name></cpp:macro> <cpp:value>0x829E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_TEXTURE</name></cpp:macro> <cpp:value>0x829F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_TEXTURE</name></cpp:macro> <cpp:value>0x82A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHADOW</name></cpp:macro> <cpp:value>0x82A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GATHER</name></cpp:macro> <cpp:value>0x82A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GATHER_SHADOW</name></cpp:macro> <cpp:value>0x82A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_LOAD</name></cpp:macro> <cpp:value>0x82A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_STORE</name></cpp:macro> <cpp:value>0x82A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_IMAGE_ATOMIC</name></cpp:macro> <cpp:value>0x82A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TEXEL_SIZE</name></cpp:macro> <cpp:value>0x82A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_COMPATIBILITY_CLASS</name></cpp:macro> <cpp:value>0x82A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_PIXEL_FORMAT</name></cpp:macro> <cpp:value>0x82A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_PIXEL_TYPE</name></cpp:macro> <cpp:value>0x82AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST</name></cpp:macro> <cpp:value>0x82AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST</name></cpp:macro> <cpp:value>0x82AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE</name></cpp:macro> <cpp:value>0x82AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE</name></cpp:macro> <cpp:value>0x82AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_BLOCK_WIDTH</name></cpp:macro> <cpp:value>0x82B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT</name></cpp:macro> <cpp:value>0x82B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x82B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLEAR_BUFFER</name></cpp:macro> <cpp:value>0x82B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW</name></cpp:macro> <cpp:value>0x82B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_COMPATIBILITY_CLASS</name></cpp:macro> <cpp:value>0x82B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_SUPPORT</name></cpp:macro> <cpp:value>0x82B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CAVEAT_SUPPORT</name></cpp:macro> <cpp:value>0x82B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_4_X_32</name></cpp:macro> <cpp:value>0x82B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_2_X_32</name></cpp:macro> <cpp:value>0x82BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_1_X_32</name></cpp:macro> <cpp:value>0x82BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_4_X_16</name></cpp:macro> <cpp:value>0x82BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_2_X_16</name></cpp:macro> <cpp:value>0x82BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_1_X_16</name></cpp:macro> <cpp:value>0x82BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_4_X_8</name></cpp:macro> <cpp:value>0x82BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_2_X_8</name></cpp:macro> <cpp:value>0x82C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_1_X_8</name></cpp:macro> <cpp:value>0x82C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_11_11_10</name></cpp:macro> <cpp:value>0x82C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CLASS_10_10_10_2</name></cpp:macro> <cpp:value>0x82C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_128_BITS</name></cpp:macro> <cpp:value>0x82C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_96_BITS</name></cpp:macro> <cpp:value>0x82C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_64_BITS</name></cpp:macro> <cpp:value>0x82C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_48_BITS</name></cpp:macro> <cpp:value>0x82C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_32_BITS</name></cpp:macro> <cpp:value>0x82C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_24_BITS</name></cpp:macro> <cpp:value>0x82C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_16_BITS</name></cpp:macro> <cpp:value>0x82CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_8_BITS</name></cpp:macro> <cpp:value>0x82CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT1_RGB</name></cpp:macro> <cpp:value>0x82CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT1_RGBA</name></cpp:macro> <cpp:value>0x82CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT3_RGBA</name></cpp:macro> <cpp:value>0x82CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_S3TC_DXT5_RGBA</name></cpp:macro> <cpp:value>0x82CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_RGTC1_RED</name></cpp:macro> <cpp:value>0x82D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_RGTC2_RG</name></cpp:macro> <cpp:value>0x82D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_BPTC_UNORM</name></cpp:macro> <cpp:value>0x82D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEW_CLASS_BPTC_FLOAT</name></cpp:macro> <cpp:value>0x82D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM</name></cpp:macro> <cpp:value>0x92E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK</name></cpp:macro> <cpp:value>0x92E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_INPUT</name></cpp:macro> <cpp:value>0x92E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_OUTPUT</name></cpp:macro> <cpp:value>0x92E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_VARIABLE</name></cpp:macro> <cpp:value>0x92E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BLOCK</name></cpp:macro> <cpp:value>0x92E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SUBROUTINE</name></cpp:macro> <cpp:value>0x92E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SUBROUTINE</name></cpp:macro> <cpp:value>0x92E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SUBROUTINE</name></cpp:macro> <cpp:value>0x92EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SUBROUTINE</name></cpp:macro> <cpp:value>0x92EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SUBROUTINE</name></cpp:macro> <cpp:value>0x92EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SUBROUTINE</name></cpp:macro> <cpp:value>0x92ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPUTE_SUBROUTINE_UNIFORM</name></cpp:macro> <cpp:value>0x92F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING</name></cpp:macro> <cpp:value>0x92F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_RESOURCES</name></cpp:macro> <cpp:value>0x92F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x92F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NUM_ACTIVE_VARIABLES</name></cpp:macro> <cpp:value>0x92F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_NUM_COMPATIBLE_SUBROUTINES</name></cpp:macro> <cpp:value>0x92F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAME_LENGTH</name></cpp:macro> <cpp:value>0x92F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TYPE</name></cpp:macro> <cpp:value>0x92FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x92FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET</name></cpp:macro> <cpp:value>0x92FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x92FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x92FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x92FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x9300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATOMIC_COUNTER_BUFFER_INDEX</name></cpp:macro> <cpp:value>0x9301</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x9302</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_DATA_SIZE</name></cpp:macro> <cpp:value>0x9303</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_ACTIVE_VARIABLES</name></cpp:macro> <cpp:value>0x9304</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VARIABLES</name></cpp:macro> <cpp:value>0x9305</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x9306</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x9307</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x9308</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x9309</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x930A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCED_BY_COMPUTE_SHADER</name></cpp:macro> <cpp:value>0x930B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TOP_LEVEL_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x930C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TOP_LEVEL_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x930D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCATION</name></cpp:macro> <cpp:value>0x930E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCATION_INDEX</name></cpp:macro> <cpp:value>0x930F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IS_PER_PATCH</name></cpp:macro> <cpp:value>0x92E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER</name></cpp:macro> <cpp:value>0x90D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x90D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_START</name></cpp:macro> <cpp:value>0x90D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x90D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS</name></cpp:macro> <cpp:value>0x90DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x90DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHADER_STORAGE_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x90DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x90DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_STORAGE_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES</name></cpp:macro> <cpp:value>0x8F39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_TEXTURE_MODE</name></cpp:macro> <cpp:value>0x90EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_OFFSET</name></cpp:macro> <cpp:value>0x919D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x919E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x919F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_MIN_LEVEL</name></cpp:macro> <cpp:value>0x82DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_NUM_LEVELS</name></cpp:macro> <cpp:value>0x82DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_MIN_LAYER</name></cpp:macro> <cpp:value>0x82DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_VIEW_NUM_LAYERS</name></cpp:macro> <cpp:value>0x82DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMMUTABLE_LEVELS</name></cpp:macro> <cpp:value>0x82DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_BINDING</name></cpp:macro> <cpp:value>0x82D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_RELATIVE_OFFSET</name></cpp:macro> <cpp:value>0x82D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_DIVISOR</name></cpp:macro> <cpp:value>0x82D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_OFFSET</name></cpp:macro> <cpp:value>0x82D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_STRIDE</name></cpp:macro> <cpp:value>0x82D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET</name></cpp:macro> <cpp:value>0x82D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_BINDINGS</name></cpp:macro> <cpp:value>0x82DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_BUFFER</name></cpp:macro> <cpp:value>0x8F4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISPLAY_LIST</name></cpp:macro> <cpp:value>0x82E7</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLCLEARBUFFERDATAPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLCLEARBUFFERSUBDATAPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLDISPATCHCOMPUTEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>num_groups_x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>num_groups_y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>num_groups_z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLDISPATCHCOMPUTEINDIRECTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLintptr</name></type> <name>indirect</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLCOPYIMAGESUBDATAPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>srcName</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>srcTarget</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcLevel</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcZ</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstName</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dstTarget</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstLevel</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstZ</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>srcWidth</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>srcHeight</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>srcDepth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLFRAMEBUFFERPARAMETERIPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETFRAMEBUFFERPARAMETERIVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETINTERNALFORMATI64VPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLINVALIDATETEXSUBIMAGEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLINVALIDATETEXIMAGEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLINVALIDATEBUFFERSUBDATAPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLINVALIDATEBUFFERDATAPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLINVALIDATEFRAMEBUFFERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>numAttachments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>attachments</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLINVALIDATESUBFRAMEBUFFERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>numAttachments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>attachments</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLMULTIDRAWARRAYSINDIRECTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>indirect</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLMULTIDRAWELEMENTSINDIRECTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>indirect</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETPROGRAMINTERFACEIVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>programInterface</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>PFNGLGETPROGRAMRESOURCEINDEXPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>programInterface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETPROGRAMRESOURCENAMEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>programInterface</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETPROGRAMRESOURCEIVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>programInterface</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>propCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>PFNGLGETPROGRAMRESOURCELOCATIONPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>programInterface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>programInterface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLSHADERSTORAGEBLOCKBINDINGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>storageBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>storageBlockBinding</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLTEXBUFFERRANGEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLTEXSTORAGE2DMULTISAMPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>fixedsamplelocations</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLTEXSTORAGE3DMULTISAMPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>fixedsamplelocations</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLTEXTUREVIEWPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>origtexture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>minlevel</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>numlevels</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>minlayer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>numlayers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLBINDVERTEXBUFFERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>bindingindex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLVERTEXATTRIBFORMATPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>relativeoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLVERTEXATTRIBIFORMATPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>relativeoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLVERTEXATTRIBLFORMATPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>relativeoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLVERTEXATTRIBBINDINGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>bindingindex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLVERTEXBINDINGDIVISORPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>bindingindex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLDEBUGMESSAGECONTROLPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLDEBUGMESSAGEINSERTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLDEBUGMESSAGECALLBACKPROC</name>) <parameter_list>(<parameter><decl><type><name>GLDEBUGPROC</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>PFNGLGETDEBUGMESSAGELOGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>sources</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>types</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>severities</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>messageLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLPUSHDEBUGGROUPPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLPOPDEBUGGROUPPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLOBJECTLABELPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETOBJECTLABELPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLOBJECTPTRLABELPROC</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>PFNGLGETOBJECTPTRLABELPROC</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multitexture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multitexture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_multitexture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0_ARB</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1_ARB</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2_ARB</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3_ARB</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4_ARB</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5_ARB</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6_ARB</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7_ARB</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8_ARB</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9_ARB</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10_ARB</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11_ARB</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12_ARB</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13_ARB</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14_ARB</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15_ARB</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16_ARB</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17_ARB</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18_ARB</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19_ARB</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20_ARB</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21_ARB</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22_ARB</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23_ARB</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24_ARB</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25_ARB</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26_ARB</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27_ARB</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28_ARB</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29_ARB</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30_ARB</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31_ARB</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_ACTIVE_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x84E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_UNITS_ARB</name></cpp:macro> <cpp:value>0x84E2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transpose_matrix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transpose_matrix</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_transpose_matrix</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_MODELVIEW_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_PROJECTION_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_TEXTURE_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_COLOR_MATRIX_ARB</name></cpp:macro> <cpp:value>0x84E6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_ARB</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_ARB</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_ARB</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE_ARB</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT_ARB</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_ARB</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_cube_map</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_cube_map</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_cube_map</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP_ARB</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP_ARB</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_ARB</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_compression</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_ALPHA_ARB</name></cpp:macro> <cpp:value>0x84E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ARB</name></cpp:macro> <cpp:value>0x84EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA_ARB</name></cpp:macro> <cpp:value>0x84EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_INTENSITY_ARB</name></cpp:macro> <cpp:value>0x84EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_ARB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ARB</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT_ARB</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_ARB</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS_ARB</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_border_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_border_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_border_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER_ARB</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_point_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_point_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_point_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN_ARB</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX_ARB</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE_ARB</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_DISTANCE_ATTENUATION_ARB</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_blend</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_blend</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNITS_ARB</name></cpp:macro> <cpp:value>0x86A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VERTEX_UNITS_ARB</name></cpp:macro> <cpp:value>0x86A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_SUM_UNITY_ARB</name></cpp:macro> <cpp:value>0x86A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BLEND_ARB</name></cpp:macro> <cpp:value>0x86A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_WEIGHT_ARB</name></cpp:macro> <cpp:value>0x86A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x86A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x86AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x86AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x86AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_ARB</name></cpp:macro> <cpp:value>0x86AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_ARB</name></cpp:macro> <cpp:value>0x1700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_ARB</name></cpp:macro> <cpp:value>0x850A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW2_ARB</name></cpp:macro> <cpp:value>0x8722</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW3_ARB</name></cpp:macro> <cpp:value>0x8723</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW4_ARB</name></cpp:macro> <cpp:value>0x8724</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW5_ARB</name></cpp:macro> <cpp:value>0x8725</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW6_ARB</name></cpp:macro> <cpp:value>0x8726</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW7_ARB</name></cpp:macro> <cpp:value>0x8727</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW8_ARB</name></cpp:macro> <cpp:value>0x8728</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW9_ARB</name></cpp:macro> <cpp:value>0x8729</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW10_ARB</name></cpp:macro> <cpp:value>0x872A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW11_ARB</name></cpp:macro> <cpp:value>0x872B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW12_ARB</name></cpp:macro> <cpp:value>0x872C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW13_ARB</name></cpp:macro> <cpp:value>0x872D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW14_ARB</name></cpp:macro> <cpp:value>0x872E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW15_ARB</name></cpp:macro> <cpp:value>0x872F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW16_ARB</name></cpp:macro> <cpp:value>0x8730</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW17_ARB</name></cpp:macro> <cpp:value>0x8731</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW18_ARB</name></cpp:macro> <cpp:value>0x8732</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW19_ARB</name></cpp:macro> <cpp:value>0x8733</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW20_ARB</name></cpp:macro> <cpp:value>0x8734</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW21_ARB</name></cpp:macro> <cpp:value>0x8735</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW22_ARB</name></cpp:macro> <cpp:value>0x8736</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW23_ARB</name></cpp:macro> <cpp:value>0x8737</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW24_ARB</name></cpp:macro> <cpp:value>0x8738</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW25_ARB</name></cpp:macro> <cpp:value>0x8739</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW26_ARB</name></cpp:macro> <cpp:value>0x873A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW27_ARB</name></cpp:macro> <cpp:value>0x873B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW28_ARB</name></cpp:macro> <cpp:value>0x873C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW29_ARB</name></cpp:macro> <cpp:value>0x873D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW30_ARB</name></cpp:macro> <cpp:value>0x873E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW31_ARB</name></cpp:macro> <cpp:value>0x873F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_matrix_palette</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_matrix_palette</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_matrix_palette</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_PALETTE_ARB</name></cpp:macro> <cpp:value>0x8840</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x8841</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PALETTE_MATRICES_ARB</name></cpp:macro> <cpp:value>0x8842</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PALETTE_MATRIX_ARB</name></cpp:macro> <cpp:value>0x8843</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_ARB</name></cpp:macro> <cpp:value>0x8844</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_INDEX_ARB</name></cpp:macro> <cpp:value>0x8845</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x8846</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8847</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x8848</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_INDEX_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x8849</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_env_combine</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_env_combine</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_env_combine</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ARB</name></cpp:macro> <cpp:value>0x8570</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_RGB_ARB</name></cpp:macro> <cpp:value>0x8571</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8572</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_RGB_ARB</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_RGB_ARB</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_RGB_ARB</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_ALPHA_ARB</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_RGB_ARB</name></cpp:macro> <cpp:value>0x8590</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_RGB_ARB</name></cpp:macro> <cpp:value>0x8591</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_RGB_ARB</name></cpp:macro> <cpp:value>0x8592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8598</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_ALPHA_ARB</name></cpp:macro> <cpp:value>0x8599</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_ALPHA_ARB</name></cpp:macro> <cpp:value>0x859A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SCALE_ARB</name></cpp:macro> <cpp:value>0x8573</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_SIGNED_ARB</name></cpp:macro> <cpp:value>0x8574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERPOLATE_ARB</name></cpp:macro> <cpp:value>0x8575</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBTRACT_ARB</name></cpp:macro> <cpp:value>0x84E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ARB</name></cpp:macro> <cpp:value>0x8576</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR_ARB</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS_ARB</name></cpp:macro> <cpp:value>0x8578</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_env_dot3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_env_dot3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_env_dot3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGB_ARB</name></cpp:macro> <cpp:value>0x86AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_RGBA_ARB</name></cpp:macro> <cpp:value>0x86AF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_mirrored_repeat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_mirrored_repeat</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_mirrored_repeat</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT_ARB</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_depth_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_ARB</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24_ARB</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_ARB</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE_ARB</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEXTURE_MODE_ARB</name></cpp:macro> <cpp:value>0x884B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_window_pos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_window_pos</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_window_pos</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shadow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shadow</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shadow</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE_ARB</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC_ARB</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_R_TO_TEXTURE_ARB</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shadow_ambient</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shadow_ambient</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shadow_ambient</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FAIL_VALUE_ARB</name></cpp:macro> <cpp:value>0x80BF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_ARB</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_ARB</name></cpp:macro> <cpp:value>0x8620</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB_ARB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8627</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_STRING_ARB</name></cpp:macro> <cpp:value>0x8628</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x862E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_MATRICES_ARB</name></cpp:macro> <cpp:value>0x862F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x8640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_ARB</name></cpp:macro> <cpp:value>0x8641</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE_ARB</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE_ARB</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_POSITION_ARB</name></cpp:macro> <cpp:value>0x864B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINDING_ARB</name></cpp:macro> <cpp:value>0x8677</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_STRING_ARB</name></cpp:macro> <cpp:value>0x8874</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_FORMAT_ASCII_ARB</name></cpp:macro> <cpp:value>0x8875</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_FORMAT_ARB</name></cpp:macro> <cpp:value>0x8876</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ENV_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB</name></cpp:macro> <cpp:value>0x88B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_CURRENT_MATRIX_ARB</name></cpp:macro> <cpp:value>0x88B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX0_ARB</name></cpp:macro> <cpp:value>0x88C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX1_ARB</name></cpp:macro> <cpp:value>0x88C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX2_ARB</name></cpp:macro> <cpp:value>0x88C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX3_ARB</name></cpp:macro> <cpp:value>0x88C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX4_ARB</name></cpp:macro> <cpp:value>0x88C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX5_ARB</name></cpp:macro> <cpp:value>0x88C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX6_ARB</name></cpp:macro> <cpp:value>0x88C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX7_ARB</name></cpp:macro> <cpp:value>0x88C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX8_ARB</name></cpp:macro> <cpp:value>0x88C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX9_ARB</name></cpp:macro> <cpp:value>0x88C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX10_ARB</name></cpp:macro> <cpp:value>0x88CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX11_ARB</name></cpp:macro> <cpp:value>0x88CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX12_ARB</name></cpp:macro> <cpp:value>0x88CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX13_ARB</name></cpp:macro> <cpp:value>0x88CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX14_ARB</name></cpp:macro> <cpp:value>0x88CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX15_ARB</name></cpp:macro> <cpp:value>0x88CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX16_ARB</name></cpp:macro> <cpp:value>0x88D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX17_ARB</name></cpp:macro> <cpp:value>0x88D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX18_ARB</name></cpp:macro> <cpp:value>0x88D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX19_ARB</name></cpp:macro> <cpp:value>0x88D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX20_ARB</name></cpp:macro> <cpp:value>0x88D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX21_ARB</name></cpp:macro> <cpp:value>0x88D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX22_ARB</name></cpp:macro> <cpp:value>0x88D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX23_ARB</name></cpp:macro> <cpp:value>0x88D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX24_ARB</name></cpp:macro> <cpp:value>0x88D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX25_ARB</name></cpp:macro> <cpp:value>0x88D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX26_ARB</name></cpp:macro> <cpp:value>0x88DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX27_ARB</name></cpp:macro> <cpp:value>0x88DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX28_ARB</name></cpp:macro> <cpp:value>0x88DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX29_ARB</name></cpp:macro> <cpp:value>0x88DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX30_ARB</name></cpp:macro> <cpp:value>0x88DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX31_ARB</name></cpp:macro> <cpp:value>0x88DF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_fragment_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_ARB</name></cpp:macro> <cpp:value>0x8804</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8805</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8806</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x8807</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8808</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8809</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x880A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x880D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x8810</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_ARB</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_buffer_object</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLintptrARB</name>;</typedef>

<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLsizeiptrARB</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE_ARB</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE_ARB</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8896</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8897</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8898</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8899</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY_ARB</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY_ARB</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE_ARB</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_ARB</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED_ARB</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER_ARB</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ_ARB</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY_ARB</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ_ARB</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY_ARB</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ_ARB</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY_ARB</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_occlusion_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_occlusion_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_occlusion_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_PASSED_ARB</name></cpp:macro> <cpp:value>0x8914</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_COUNTER_BITS_ARB</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY_ARB</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_ARB</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE_ARB</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_objects</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shader_objects</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>char</name></type> <name>GLcharARB</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>GLhandleARB</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_OBJECT_ARB</name></cpp:macro> <cpp:value>0x8B40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8B4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_SUBTYPE_ARB</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_DELETE_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_COMPILE_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_LINK_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_VALIDATE_STATUS_ARB</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_INFO_LOG_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ATTACHED_OBJECTS_ARB</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_UNIFORMS_ARB</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_SHADER_SOURCE_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OBJECT_ARB</name></cpp:macro> <cpp:value>0x8B48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_ARB</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2_ARB</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3_ARB</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4_ARB</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARB</name></cpp:macro> <cpp:value>0x8B5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARB</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D_ARB</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_ARB</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_SHADOW_ARB</name></cpp:macro> <cpp:value>0x8B61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW_ARB</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_ARB</name></cpp:macro> <cpp:value>0x8B63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_SHADOW_ARB</name></cpp:macro> <cpp:value>0x8B64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_ARB</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS_ARB</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_ARB</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE_ARB</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE_ARB</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_ARB_shader_objects</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8B4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_SUBTYPE_ARB</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_ATTRIBUTES_ARB</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_ARB_shader_objects</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OBJECT_ARB</name></cpp:macro> <cpp:value>0x8B48</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB_ARB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_ARB_shader_objects</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2_ARB</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3_ARB</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4_ARB</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_fragment_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_ARB</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_ARB</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_ARB_shader_objects</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>GL_ARB_vertex_shader</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8B4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_SUBTYPE_ARB</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OBJECT_ARB</name></cpp:macro> <cpp:value>0x8B48</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shading_language_100</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shading_language_100</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shading_language_100</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_non_power_of_two</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_non_power_of_two</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_non_power_of_two</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_point_sprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_point_sprite</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_point_sprite</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_ARB</name></cpp:macro> <cpp:value>0x8861</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COORD_REPLACE_ARB</name></cpp:macro> <cpp:value>0x8862</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_buffers</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_draw_buffers</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_ARB</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_ARB</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_ARB</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_ARB</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_ARB</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_ARB</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_ARB</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_ARB</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_ARB</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_ARB</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_ARB</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_ARB</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_ARB</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_ARB</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_ARB</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_ARB</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rectangle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rectangle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_rectangle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE_ARB</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE_ARB</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE_ARB</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_rectangle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_rectangle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_rectangle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE_EXT</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE_EXT</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE_EXT</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_color_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_color_buffer_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_color_buffer_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT_MODE_ARB</name></cpp:macro> <cpp:value>0x8820</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_VERTEX_COLOR_ARB</name></cpp:macro> <cpp:value>0x891A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_FRAGMENT_COLOR_ARB</name></cpp:macro> <cpp:value>0x891B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_READ_COLOR_ARB</name></cpp:macro> <cpp:value>0x891C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_ONLY_ARB</name></cpp:macro> <cpp:value>0x891D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_half_float_pixel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_half_float_pixel</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_half_float_pixel</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT_ARB</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F_ARB</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F_ARB</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32F_ARB</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32F_ARB</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32F_ARB</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32F_ARB</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F_ARB</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F_ARB</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16F_ARB</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16F_ARB</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16F_ARB</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16F_ARB</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_pixel_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_pixel_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_pixel_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_ARB</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_ARB</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_buffer_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_depth_buffer_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F</name></cpp:macro> <cpp:value>0x8CAC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8</name></cpp:macro> <cpp:value>0x8CAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_instanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_instanced</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_draw_instanced</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_framebuffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8210</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE</name></cpp:macro> <cpp:value>0x8211</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE</name></cpp:macro> <cpp:value>0x8212</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8213</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8214</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8215</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8216</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8217</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT</name></cpp:macro> <cpp:value>0x8218</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNDEFINED</name></cpp:macro> <cpp:value>0x8219</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x821A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX</name></cpp:macro> <cpp:value>0x8222</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x88F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>GL_FRAMEBUFFER_BINDING</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_sRGB</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_framebuffer_sRGB</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_geometry_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_geometry_shader4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_geometry_shader4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY_ARB</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE_ARB</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB</name></cpp:macro> <cpp:value>0x8DA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_ARB</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT_ARB</name></cpp:macro> <cpp:value>0x8DDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8DDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE_ARB</name></cpp:macro> <cpp:value>0x8DDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_VARYING_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_half_float_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_half_float_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_half_float_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_instanced_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_instanced_arrays</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_instanced_arrays</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_map_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_map_buffer_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_map_buffer_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_READ_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_WRITE_BIT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_RANGE_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_BUFFER_BIT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_FLUSH_EXPLICIT_BIT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_UNSYNCHRONIZED_BIT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE_ARB</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_FORMAT_ARB</name></cpp:macro> <cpp:value>0x8C2E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression_rgtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression_rgtc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_compression_rgtc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rg</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rg</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_rg</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_INTEGER</name></cpp:macro> <cpp:value>0x8228</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16</name></cpp:macro> <cpp:value>0x822A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16</name></cpp:macro> <cpp:value>0x822C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32F</name></cpp:macro> <cpp:value>0x822E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32F</name></cpp:macro> <cpp:value>0x8230</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8I</name></cpp:macro> <cpp:value>0x8231</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8UI</name></cpp:macro> <cpp:value>0x8232</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16I</name></cpp:macro> <cpp:value>0x8233</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16UI</name></cpp:macro> <cpp:value>0x8234</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32I</name></cpp:macro> <cpp:value>0x8235</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32UI</name></cpp:macro> <cpp:value>0x8236</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8I</name></cpp:macro> <cpp:value>0x8237</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8UI</name></cpp:macro> <cpp:value>0x8238</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16I</name></cpp:macro> <cpp:value>0x8239</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16UI</name></cpp:macro> <cpp:value>0x823A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32I</name></cpp:macro> <cpp:value>0x823B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32UI</name></cpp:macro> <cpp:value>0x823C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_uniform_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_uniform_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_uniform_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER</name></cpp:macro> <cpp:value>0x8A11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8A28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_START</name></cpp:macro> <cpp:value>0x8A29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8A2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x8A2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x8A30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x8A34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_TYPE</name></cpp:macro> <cpp:value>0x8A37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_SIZE</name></cpp:macro> <cpp:value>0x8A38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x8A3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_OFFSET</name></cpp:macro> <cpp:value>0x8A3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8A3C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x8A3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x8A3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_BINDING</name></cpp:macro> <cpp:value>0x8A3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_DATA_SIZE</name></cpp:macro> <cpp:value>0x8A40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8A42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES</name></cpp:macro> <cpp:value>0x8A43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8A44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8A45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8A46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_INDEX</name></cpp:macro> <cpp:value>0xFFFFFFFFu</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compatibility</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_compatibility</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_copy_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_copy_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_copy_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER</name></cpp:macro> <cpp:value>0x8F36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER</name></cpp:macro> <cpp:value>0x8F37</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_texture_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_texture_lod</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shader_texture_lod</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_depth_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP</name></cpp:macro> <cpp:value>0x864F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_elements_base_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_elements_base_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_draw_elements_base_vertex</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_coord_conventions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_coord_conventions</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_fragment_coord_conventions</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_provoking_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_provoking_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_provoking_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROVOKING_VERTEX</name></cpp:macro> <cpp:value>0x8E4F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_seamless_cube_map</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_seamless_cube_map</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_seamless_cube_map</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_SEAMLESS</name></cpp:macro> <cpp:value>0x884F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sync</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_sync</name></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SERVER_WAIT_TIMEOUT</name></cpp:macro> <cpp:value>0x9111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x9112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CONDITION</name></cpp:macro> <cpp:value>0x9113</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_STATUS</name></cpp:macro> <cpp:value>0x9114</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLAGS</name></cpp:macro> <cpp:value>0x9115</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FENCE</name></cpp:macro> <cpp:value>0x9116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_GPU_COMMANDS_COMPLETE</name></cpp:macro> <cpp:value>0x9117</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNALED</name></cpp:macro> <cpp:value>0x9118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNALED</name></cpp:macro> <cpp:value>0x9119</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALREADY_SIGNALED</name></cpp:macro> <cpp:value>0x911A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_EXPIRED</name></cpp:macro> <cpp:value>0x911B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONDITION_SATISFIED</name></cpp:macro> <cpp:value>0x911C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WAIT_FAILED</name></cpp:macro> <cpp:value>0x911D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLUSH_COMMANDS_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_IGNORED</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFull</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_POSITION</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK</name></cpp:macro> <cpp:value>0x8E51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE</name></cpp:macro> <cpp:value>0x8E52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLE_MASK_WORDS</name></cpp:macro> <cpp:value>0x8E59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9102</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9103</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9104</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9105</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x9106</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FIXED_SAMPLE_LOCATIONS</name></cpp:macro> <cpp:value>0x9107</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9108</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9109</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x910A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEPTH_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_INTEGER_SAMPLES</name></cpp:macro> <cpp:value>0x9110</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_array_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_array_bgra</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_array_bgra</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_buffers_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_buffers_blend</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_draw_buffers_blend</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sample_shading</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sample_shading</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_sample_shading</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_SHADING</name></cpp:macro> <cpp:value>0x8C36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_SAMPLE_SHADING_VALUE</name></cpp:macro> <cpp:value>0x8C37</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_cube_map_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_cube_map_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_cube_map_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x9009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x900D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY</name></cpp:macro> <cpp:value>0x900F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_gather</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_gather</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_gather</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB</name></cpp:macro> <cpp:value>0x8E5E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB</name></cpp:macro> <cpp:value>0x8E5F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_query_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_query_lod</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_query_lod</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shading_language_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shading_language_include</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shading_language_include</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_INCLUDE_ARB</name></cpp:macro> <cpp:value>0x8DAE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAMED_STRING_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8DE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAMED_STRING_TYPE_ARB</name></cpp:macro> <cpp:value>0x8DEA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression_bptc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression_bptc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_compression_bptc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</name></cpp:macro> <cpp:value>0x8E8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</name></cpp:macro> <cpp:value>0x8E8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</name></cpp:macro> <cpp:value>0x8E8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</name></cpp:macro> <cpp:value>0x8E8F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_blend_func_extended</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_blend_func_extended</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_blend_func_extended</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x88FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DUAL_SOURCE_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x88FC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_explicit_attrib_location</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_explicit_attrib_location</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_explicit_attrib_location</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_occlusion_query2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_occlusion_query2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_occlusion_query2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8C2F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sampler_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sampler_objects</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_sampler_objects</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BINDING</name></cpp:macro> <cpp:value>0x8919</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_bit_encoding</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_bit_encoding</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shader_bit_encoding</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rgb10_a2ui</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rgb10_a2ui</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_rgb10_a2ui</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2UI</name></cpp:macro> <cpp:value>0x906F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_swizzle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_swizzle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_swizzle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_timer_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_timer_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_timer_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIME_ELAPSED</name></cpp:macro> <cpp:value>0x88BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMESTAMP</name></cpp:macro> <cpp:value>0x8E28</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_type_2_10_10_10_rev</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_type_2_10_10_10_rev</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8D9F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_indirect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_indirect</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_draw_indirect</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_BUFFER</name></cpp:macro> <cpp:value>0x8F3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_INDIRECT_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8F43</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_gpu_shader5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_gpu_shader5</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_gpu_shader5</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_INVOCATIONS</name></cpp:macro> <cpp:value>0x887F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_SHADER_INVOCATIONS</name></cpp:macro> <cpp:value>0x8E5A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_FRAGMENT_INTERPOLATION_OFFSET</name></cpp:macro> <cpp:value>0x8E5B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INTERPOLATION_OFFSET</name></cpp:macro> <cpp:value>0x8E5C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_INTERPOLATION_OFFSET_BITS</name></cpp:macro> <cpp:value>0x8E5D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_STREAMS</name></cpp:macro> <cpp:value>0x8E71</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_gpu_shader_fp64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_gpu_shader_fp64</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_gpu_shader_fp64</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC2</name></cpp:macro> <cpp:value>0x8FFC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC3</name></cpp:macro> <cpp:value>0x8FFD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_VEC4</name></cpp:macro> <cpp:value>0x8FFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2</name></cpp:macro> <cpp:value>0x8F46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3</name></cpp:macro> <cpp:value>0x8F47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4</name></cpp:macro> <cpp:value>0x8F48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2x3</name></cpp:macro> <cpp:value>0x8F49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT2x4</name></cpp:macro> <cpp:value>0x8F4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3x2</name></cpp:macro> <cpp:value>0x8F4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT3x4</name></cpp:macro> <cpp:value>0x8F4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4x2</name></cpp:macro> <cpp:value>0x8F4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE_MAT4x3</name></cpp:macro> <cpp:value>0x8F4E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_shader_subroutine</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_shader_subroutine</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_shader_subroutine</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINES</name></cpp:macro> <cpp:value>0x8DE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_UNIFORMS</name></cpp:macro> <cpp:value>0x8DE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x8E47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8E48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8E49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SUBROUTINES</name></cpp:macro> <cpp:value>0x8DE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x8DE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPATIBLE_SUBROUTINES</name></cpp:macro> <cpp:value>0x8E4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPATIBLE_SUBROUTINES</name></cpp:macro> <cpp:value>0x8E4B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_tessellation_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_tessellation_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_tessellation_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCHES</name></cpp:macro> <cpp:value>0x000E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCH_VERTICES</name></cpp:macro> <cpp:value>0x8E72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCH_DEFAULT_INNER_LEVEL</name></cpp:macro> <cpp:value>0x8E73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PATCH_DEFAULT_OUTER_LEVEL</name></cpp:macro> <cpp:value>0x8E74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_OUTPUT_VERTICES</name></cpp:macro> <cpp:value>0x8E75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_MODE</name></cpp:macro> <cpp:value>0x8E76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_SPACING</name></cpp:macro> <cpp:value>0x8E77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_VERTEX_ORDER</name></cpp:macro> <cpp:value>0x8E78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_GEN_POINT_MODE</name></cpp:macro> <cpp:value>0x8E79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ISOLINES</name></cpp:macro> <cpp:value>0x8E7A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRACTIONAL_ODD</name></cpp:macro> <cpp:value>0x8E7B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRACTIONAL_EVEN</name></cpp:macro> <cpp:value>0x8E7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PATCH_VERTICES</name></cpp:macro> <cpp:value>0x8E7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_GEN_LEVEL</name></cpp:macro> <cpp:value>0x8E7E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8E81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8E82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8E83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_PATCH_COMPONENTS</name></cpp:macro> <cpp:value>0x8E84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8E85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8E86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8E89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8E8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_CONTROL_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x886C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x886D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E1E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8E1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x84F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x84F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_EVALUATION_SHADER</name></cpp:macro> <cpp:value>0x8E87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESS_CONTROL_SHADER</name></cpp:macro> <cpp:value>0x8E88</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_buffer_object_rgb32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_buffer_object_rgb32</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_texture_buffer_object_rgb32</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transform_feedback2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transform_feedback2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_transform_feedback2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK</name></cpp:macro> <cpp:value>0x8E22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED</name></cpp:macro> <cpp:value>0x8E23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE</name></cpp:macro> <cpp:value>0x8E24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BINDING</name></cpp:macro> <cpp:value>0x8E25</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_transform_feedback3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_transform_feedback3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ARB_transform_feedback3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_BUFFERS</name></cpp:macro> <cpp:value>0x8E70</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_abgr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_abgr</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_abgr</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ABGR_EXT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_blend_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR_EXT</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_polygon_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_polygon_offset</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_polygon_offset</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8037</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FACTOR_EXT</name></cpp:macro> <cpp:value>0x8038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_BIAS_EXT</name></cpp:macro> <cpp:value>0x8039</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x803B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x803C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA12_EXT</name></cpp:macro> <cpp:value>0x803D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16_EXT</name></cpp:macro> <cpp:value>0x803E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_EXT</name></cpp:macro> <cpp:value>0x803F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_EXT</name></cpp:macro> <cpp:value>0x8041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_EXT</name></cpp:macro> <cpp:value>0x8042</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x8043</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE6_ALPHA2_EXT</name></cpp:macro> <cpp:value>0x8044</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8045</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x8046</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA12_EXT</name></cpp:macro> <cpp:value>0x8047</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_ALPHA16_EXT</name></cpp:macro> <cpp:value>0x8048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_EXT</name></cpp:macro> <cpp:value>0x8049</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY4_EXT</name></cpp:macro> <cpp:value>0x804A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8_EXT</name></cpp:macro> <cpp:value>0x804B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY12_EXT</name></cpp:macro> <cpp:value>0x804C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16_EXT</name></cpp:macro> <cpp:value>0x804D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB2_EXT</name></cpp:macro> <cpp:value>0x804E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4_EXT</name></cpp:macro> <cpp:value>0x804F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_EXT</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_EXT</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_EXT</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB12_EXT</name></cpp:macro> <cpp:value>0x8053</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_EXT</name></cpp:macro> <cpp:value>0x8054</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA2_EXT</name></cpp:macro> <cpp:value>0x8055</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_EXT</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1_EXT</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_EXT</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2_EXT</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA12_EXT</name></cpp:macro> <cpp:value>0x805A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_EXT</name></cpp:macro> <cpp:value>0x805B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x805D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x805E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x805F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8061</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_EXT</name></cpp:macro> <cpp:value>0x8062</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_EXT</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_EXT</name></cpp:macro> <cpp:value>0x8064</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_TOO_LARGE_EXT</name></cpp:macro> <cpp:value>0x8065</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture3D</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture3D</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_IMAGES_EXT</name></cpp:macro> <cpp:value>0x806B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x806C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES_EXT</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D_EXT</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_3D_EXT</name></cpp:macro> <cpp:value>0x8070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R_EXT</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_filter4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_filter4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_texture_filter4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILTER4_SGIS</name></cpp:macro> <cpp:value>0x8146</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FILTER4_SIZE_SGIS</name></cpp:macro> <cpp:value>0x8147</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_histogram</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_histogram</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_histogram</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_EXT</name></cpp:macro> <cpp:value>0x8024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_HISTOGRAM_EXT</name></cpp:macro> <cpp:value>0x8025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x8028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x8029</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x802A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x802B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_LUMINANCE_SIZE_EXT</name></cpp:macro> <cpp:value>0x802C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HISTOGRAM_SINK_EXT</name></cpp:macro> <cpp:value>0x802D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_EXT</name></cpp:macro> <cpp:value>0x802E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_FORMAT_EXT</name></cpp:macro> <cpp:value>0x802F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINMAX_SINK_EXT</name></cpp:macro> <cpp:value>0x8030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TABLE_TOO_LARGE_EXT</name></cpp:macro> <cpp:value>0x8031</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_subtexture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_subtexture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_subtexture</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_copy_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_copy_texture</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_GL_HEADER_NV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_copy_texture</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_histogram</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_histogram</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_histogram</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_convolution</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_convolution</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_convolution</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_1D_EXT</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_2D_EXT</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARABLE_2D_EXT</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_MODE_EXT</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_SCALE_EXT</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FILTER_BIAS_EXT</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REDUCE_EXT</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x8019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_WIDTH_EXT</name></cpp:macro> <cpp:value>0x801A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CONVOLUTION_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_SCALE_EXT</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_SCALE_EXT</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_SCALE_EXT</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_SCALE_EXT</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_RED_BIAS_EXT</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_GREEN_BIAS_EXT</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_BLUE_BIAS_EXT</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_ALPHA_BIAS_EXT</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_color_matrix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_color_matrix</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGI_color_matrix</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX_SGI</name></cpp:macro> <cpp:value>0x80B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_MATRIX_STACK_DEPTH_SGI</name></cpp:macro> <cpp:value>0x80B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI</name></cpp:macro> <cpp:value>0x80B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI</name></cpp:macro> <cpp:value>0x80B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_RED_BIAS_SGI</name></cpp:macro> <cpp:value>0x80B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI</name></cpp:macro> <cpp:value>0x80B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI</name></cpp:macro> <cpp:value>0x80BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI</name></cpp:macro> <cpp:value>0x80BB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_color_table</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_color_table</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGI_color_table</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_CONVOLUTION_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_SCALE_SGI</name></cpp:macro> <cpp:value>0x80D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BIAS_SGI</name></cpp:macro> <cpp:value>0x80D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_FORMAT_SGI</name></cpp:macro> <cpp:value>0x80D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_WIDTH_SGI</name></cpp:macro> <cpp:value>0x80D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_RED_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_GREEN_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_BLUE_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_ALPHA_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_LUMINANCE_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_TABLE_INTENSITY_SIZE_SGI</name></cpp:macro> <cpp:value>0x80DF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_pixel_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_pixel_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_pixel_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEXTURE_SGIS</name></cpp:macro> <cpp:value>0x8353</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS</name></cpp:macro> <cpp:value>0x8354</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS</name></cpp:macro> <cpp:value>0x8355</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_GROUP_COLOR_SGIS</name></cpp:macro> <cpp:value>0x8356</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_pixel_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_pixel_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_pixel_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_SGIX</name></cpp:macro> <cpp:value>0x8139</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_MODE_SGIX</name></cpp:macro> <cpp:value>0x832B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture4D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture4D</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_texture4D</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_VOLUMES_SGIS</name></cpp:macro> <cpp:value>0x8130</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_DEPTH_SGIS</name></cpp:macro> <cpp:value>0x8131</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_VOLUMES_SGIS</name></cpp:macro> <cpp:value>0x8132</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_DEPTH_SGIS</name></cpp:macro> <cpp:value>0x8133</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_4D_SGIS</name></cpp:macro> <cpp:value>0x8134</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_4D_SGIS</name></cpp:macro> <cpp:value>0x8135</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_4DSIZE_SGIS</name></cpp:macro> <cpp:value>0x8136</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_Q_SGIS</name></cpp:macro> <cpp:value>0x8137</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_4D_TEXTURE_SIZE_SGIS</name></cpp:macro> <cpp:value>0x8138</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_4D_BINDING_SGIS</name></cpp:macro> <cpp:value>0x814F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_texture_color_table</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_texture_color_table</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGI_texture_color_table</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_COLOR_TABLE_SGI</name></cpp:macro> <cpp:value>0x80BD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_cmyka</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_cmyka</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_cmyka</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CMYK_EXT</name></cpp:macro> <cpp:value>0x800C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CMYKA_EXT</name></cpp:macro> <cpp:value>0x800D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_CMYK_HINT_EXT</name></cpp:macro> <cpp:value>0x800E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_CMYK_HINT_EXT</name></cpp:macro> <cpp:value>0x800F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_PRIORITY_EXT</name></cpp:macro> <cpp:value>0x8066</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RESIDENT_EXT</name></cpp:macro> <cpp:value>0x8067</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_BINDING_EXT</name></cpp:macro> <cpp:value>0x8068</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_BINDING_EXT</name></cpp:macro> <cpp:value>0x8069</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D_BINDING_EXT</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_detail_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_detail_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_detail_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_2D_SGIS</name></cpp:macro> <cpp:value>0x8095</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_2D_BINDING_SGIS</name></cpp:macro> <cpp:value>0x8096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_DETAIL_SGIS</name></cpp:macro> <cpp:value>0x8097</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_DETAIL_ALPHA_SGIS</name></cpp:macro> <cpp:value>0x8098</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_DETAIL_COLOR_SGIS</name></cpp:macro> <cpp:value>0x8099</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_LEVEL_SGIS</name></cpp:macro> <cpp:value>0x809A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_MODE_SGIS</name></cpp:macro> <cpp:value>0x809B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x809C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_sharpen_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_sharpen_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_sharpen_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_SHARPEN_SGIS</name></cpp:macro> <cpp:value>0x80AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_SHARPEN_ALPHA_SGIS</name></cpp:macro> <cpp:value>0x80AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_SHARPEN_COLOR_SGIS</name></cpp:macro> <cpp:value>0x80AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x80B0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_packed_pixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_packed_pixels</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_packed_pixels</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_3_3_2_EXT</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_EXT</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1_EXT</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8_EXT</name></cpp:macro> <cpp:value>0x8035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2_EXT</name></cpp:macro> <cpp:value>0x8036</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_lod</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_texture_lod</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD_SGIS</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD_SGIS</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL_SGIS</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL_SGIS</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_SGIS</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_MASK_SGIS</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_SGIS</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_SGIS</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_1PASS_SGIS</name></cpp:macro> <cpp:value>0x80A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_0_SGIS</name></cpp:macro> <cpp:value>0x80A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_1_SGIS</name></cpp:macro> <cpp:value>0x80A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_0_SGIS</name></cpp:macro> <cpp:value>0x80A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_1_SGIS</name></cpp:macro> <cpp:value>0x80A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_2_SGIS</name></cpp:macro> <cpp:value>0x80A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_3_SGIS</name></cpp:macro> <cpp:value>0x80A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_SGIS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_SGIS</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE_SGIS</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_INVERT_SGIS</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_PATTERN_SGIS</name></cpp:macro> <cpp:value>0x80AC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_rescale_normal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_rescale_normal</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_rescale_normal</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESCALE_NORMAL_EXT</name></cpp:macro> <cpp:value>0x803A</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_vertex_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8075</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8076</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8078</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8079</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x807A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x807B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x807C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x807D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x807E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x807F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8081</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8082</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8083</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8084</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8085</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8086</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8087</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8088</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8089</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x808A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x808B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x808C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x808D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x808E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x808F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8090</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8091</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8092</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8093</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_generate_mipmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_generate_mipmap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_generate_mipmap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_SGIS</name></cpp:macro> <cpp:value>0x8191</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_HINT_SGIS</name></cpp:macro> <cpp:value>0x8192</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_clipmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_clipmap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_clipmap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_CLIPMAP_LINEAR_SGIX</name></cpp:macro> <cpp:value>0x8170</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_CENTER_SGIX</name></cpp:macro> <cpp:value>0x8171</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_FRAME_SGIX</name></cpp:macro> <cpp:value>0x8172</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_OFFSET_SGIX</name></cpp:macro> <cpp:value>0x8173</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8174</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX</name></cpp:macro> <cpp:value>0x8175</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CLIPMAP_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8176</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIPMAP_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8177</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8178</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_CLIPMAP_NEAREST_SGIX</name></cpp:macro> <cpp:value>0x844D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_CLIPMAP_LINEAR_SGIX</name></cpp:macro> <cpp:value>0x844E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_CLIPMAP_NEAREST_SGIX</name></cpp:macro> <cpp:value>0x844F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_shadow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_shadow</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_shadow</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_SGIX</name></cpp:macro> <cpp:value>0x819A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_OPERATOR_SGIX</name></cpp:macro> <cpp:value>0x819B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LEQUAL_R_SGIX</name></cpp:macro> <cpp:value>0x819C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GEQUAL_R_SGIX</name></cpp:macro> <cpp:value>0x819D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_edge_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_edge_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_texture_edge_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE_SGIS</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_minmax</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_blend_minmax</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD_EXT</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_EXT</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_EXT</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_subtract</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_subtract</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_blend_subtract</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT_EXT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT_EXT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_interlace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_interlace</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_interlace</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_SGIX</name></cpp:macro> <cpp:value>0x8094</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_pixel_tiles</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_pixel_tiles</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_pixel_tiles</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX</name></cpp:macro> <cpp:value>0x813E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_CACHE_INCREMENT_SGIX</name></cpp:macro> <cpp:value>0x813F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8140</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x8141</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_GRID_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8142</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_GRID_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x8143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_GRID_DEPTH_SGIX</name></cpp:macro> <cpp:value>0x8144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TILE_CACHE_SIZE_SGIX</name></cpp:macro> <cpp:value>0x8145</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_select</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_select</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_texture_select</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA4_SGIS</name></cpp:macro> <cpp:value>0x8110</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA8_SGIS</name></cpp:macro> <cpp:value>0x8111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA12_SGIS</name></cpp:macro> <cpp:value>0x8112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_ALPHA16_SGIS</name></cpp:macro> <cpp:value>0x8113</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE4_SGIS</name></cpp:macro> <cpp:value>0x8114</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE8_SGIS</name></cpp:macro> <cpp:value>0x8115</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE12_SGIS</name></cpp:macro> <cpp:value>0x8116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE16_SGIS</name></cpp:macro> <cpp:value>0x8117</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY4_SGIS</name></cpp:macro> <cpp:value>0x8118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY8_SGIS</name></cpp:macro> <cpp:value>0x8119</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY12_SGIS</name></cpp:macro> <cpp:value>0x811A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_INTENSITY16_SGIS</name></cpp:macro> <cpp:value>0x811B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE_ALPHA4_SGIS</name></cpp:macro> <cpp:value>0x811C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_LUMINANCE_ALPHA8_SGIS</name></cpp:macro> <cpp:value>0x811D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_ALPHA4_SGIS</name></cpp:macro> <cpp:value>0x811E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_ALPHA8_SGIS</name></cpp:macro> <cpp:value>0x811F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_LUMINANCE4_SGIS</name></cpp:macro> <cpp:value>0x8120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_LUMINANCE8_SGIS</name></cpp:macro> <cpp:value>0x8121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_INTENSITY4_SGIS</name></cpp:macro> <cpp:value>0x8122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_INTENSITY8_SGIS</name></cpp:macro> <cpp:value>0x8123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUAL_TEXTURE_SELECT_SGIS</name></cpp:macro> <cpp:value>0x8124</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_TEXTURE_SELECT_SGIS</name></cpp:macro> <cpp:value>0x8125</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_sprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_sprite</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_sprite</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_SGIX</name></cpp:macro> <cpp:value>0x8148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_MODE_SGIX</name></cpp:macro> <cpp:value>0x8149</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_AXIS_SGIX</name></cpp:macro> <cpp:value>0x814A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_TRANSLATION_SGIX</name></cpp:macro> <cpp:value>0x814B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_AXIAL_SGIX</name></cpp:macro> <cpp:value>0x814C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_OBJECT_ALIGNED_SGIX</name></cpp:macro> <cpp:value>0x814D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPRITE_EYE_ALIGNED_SGIX</name></cpp:macro> <cpp:value>0x814E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_multi_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_multi_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_texture_multi_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MULTI_BUFFER_HINT_SGIX</name></cpp:macro> <cpp:value>0x812E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_point_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_point_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_point_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN_EXT</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX_EXT</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE_EXT</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISTANCE_ATTENUATION_EXT</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_point_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_point_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_point_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MIN_SGIS</name></cpp:macro> <cpp:value>0x8126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_MAX_SGIS</name></cpp:macro> <cpp:value>0x8127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE_SGIS</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISTANCE_ATTENUATION_SGIS</name></cpp:macro> <cpp:value>0x8129</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_instruments</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_instruments</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_instruments</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INSTRUMENT_BUFFER_POINTER_SGIX</name></cpp:macro> <cpp:value>0x8180</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INSTRUMENT_MEASUREMENTS_SGIX</name></cpp:macro> <cpp:value>0x8181</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_scale_bias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_scale_bias</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_texture_scale_bias</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_BIAS_SGIX</name></cpp:macro> <cpp:value>0x8179</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_SCALE_SGIX</name></cpp:macro> <cpp:value>0x817A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX</name></cpp:macro> <cpp:value>0x817B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX</name></cpp:macro> <cpp:value>0x817C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_framezoom</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_framezoom</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_framezoom</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEZOOM_SGIX</name></cpp:macro> <cpp:value>0x818B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEZOOM_FACTOR_SGIX</name></cpp:macro> <cpp:value>0x818C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAMEZOOM_FACTOR_SGIX</name></cpp:macro> <cpp:value>0x818D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_FfdMaskSGIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FfdMaskSGIX</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_FfdMaskSGIX</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEFORMATION_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_DEFORMATION_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_tag_sample_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_tag_sample_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_tag_sample_buffer</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_polynomial_ffd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_polynomial_ffd</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_polynomial_ffd</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_DEFORMATION_SGIX</name></cpp:macro> <cpp:value>0x8194</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEFORMATION_SGIX</name></cpp:macro> <cpp:value>0x8195</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEFORMATIONS_MASK_SGIX</name></cpp:macro> <cpp:value>0x8196</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEFORMATION_ORDER_SGIX</name></cpp:macro> <cpp:value>0x8197</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_reference_plane</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_reference_plane</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_reference_plane</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCE_PLANE_SGIX</name></cpp:macro> <cpp:value>0x817D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFERENCE_PLANE_EQUATION_SGIX</name></cpp:macro> <cpp:value>0x817E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_depth_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_depth_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_SGIX</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24_SGIX</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_SGIX</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_flush_raster</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_flush_raster</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_flush_raster</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_fog_function</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_fog_function</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_fog_function</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_FUNC_SGIS</name></cpp:macro> <cpp:value>0x812A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x812B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FOG_FUNC_POINTS_SGIS</name></cpp:macro> <cpp:value>0x812C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_fog_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_fog_offset</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_fog_offset</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_OFFSET_SGIX</name></cpp:macro> <cpp:value>0x8198</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_OFFSET_VALUE_SGIX</name></cpp:macro> <cpp:value>0x8199</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_image_transform</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_image_transform</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_HP_image_transform</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_SCALE_X_HP</name></cpp:macro> <cpp:value>0x8155</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_SCALE_Y_HP</name></cpp:macro> <cpp:value>0x8156</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TRANSLATE_X_HP</name></cpp:macro> <cpp:value>0x8157</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TRANSLATE_Y_HP</name></cpp:macro> <cpp:value>0x8158</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_ROTATE_ANGLE_HP</name></cpp:macro> <cpp:value>0x8159</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_ROTATE_ORIGIN_X_HP</name></cpp:macro> <cpp:value>0x815A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_ROTATE_ORIGIN_Y_HP</name></cpp:macro> <cpp:value>0x815B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_MAG_FILTER_HP</name></cpp:macro> <cpp:value>0x815C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_MIN_FILTER_HP</name></cpp:macro> <cpp:value>0x815D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_CUBIC_WEIGHT_HP</name></cpp:macro> <cpp:value>0x815E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CUBIC_HP</name></cpp:macro> <cpp:value>0x815F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AVERAGE_HP</name></cpp:macro> <cpp:value>0x8160</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMAGE_TRANSFORM_2D_HP</name></cpp:macro> <cpp:value>0x8161</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP</name></cpp:macro> <cpp:value>0x8162</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP</name></cpp:macro> <cpp:value>0x8163</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_convolution_border_modes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_convolution_border_modes</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_HP_convolution_border_modes</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IGNORE_BORDER_HP</name></cpp:macro> <cpp:value>0x8150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_BORDER_HP</name></cpp:macro> <cpp:value>0x8151</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLICATE_BORDER_HP</name></cpp:macro> <cpp:value>0x8153</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_BORDER_COLOR_HP</name></cpp:macro> <cpp:value>0x8154</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_add_env</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_add_env</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_texture_add_env</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ENV_BIAS_SGIX</name></cpp:macro> <cpp:value>0x80BE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_color_subtable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_color_subtable</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_color_subtable</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_PGI_vertex_hints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PGI_vertex_hints</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_PGI_vertex_hints</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_DATA_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_CONSISTENT_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATERIAL_SIDE_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_HINT_PGI</name></cpp:macro> <cpp:value>0x1A22D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR3_BIT_PGI</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR4_BIT_PGI</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGEFLAG_BIT_PGI</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_BIT_PGI</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_AMBIENT_BIT_PGI</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_DIFFUSE_BIT_PGI</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_EMISSION_BIT_PGI</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_COLOR_INDEXES_BIT_PGI</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_SHININESS_BIT_PGI</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAT_SPECULAR_BIT_PGI</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_BIT_PGI</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD1_BIT_PGI</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD2_BIT_PGI</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD3_BIT_PGI</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXCOORD4_BIT_PGI</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX23_BIT_PGI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX4_BIT_PGI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_PGI_misc_hints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PGI_misc_hints</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_PGI_misc_hints</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREFER_DOUBLEBUFFER_HINT_PGI</name></cpp:macro> <cpp:value>0x1A1F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSERVE_MEMORY_HINT_PGI</name></cpp:macro> <cpp:value>0x1A1FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RECLAIM_MEMORY_HINT_PGI</name></cpp:macro> <cpp:value>0x1A1FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NATIVE_GRAPHICS_HANDLE_PGI</name></cpp:macro> <cpp:value>0x1A202</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI</name></cpp:macro> <cpp:value>0x1A203</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NATIVE_GRAPHICS_END_HINT_PGI</name></cpp:macro> <cpp:value>0x1A204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS_FAST_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS_SOFT_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_OBJ_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_WIN_HINT_PGI</name></cpp:macro> <cpp:value>0x1A20F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_FRG_HINT_PGI</name></cpp:macro> <cpp:value>0x1A210</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALLOW_DRAW_MEM_HINT_PGI</name></cpp:macro> <cpp:value>0x1A211</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STRICT_DEPTHFUNC_HINT_PGI</name></cpp:macro> <cpp:value>0x1A216</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STRICT_LIGHTING_HINT_PGI</name></cpp:macro> <cpp:value>0x1A217</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STRICT_SCISSOR_HINT_PGI</name></cpp:macro> <cpp:value>0x1A218</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_STIPPLE_HINT_PGI</name></cpp:macro> <cpp:value>0x1A219</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_NEAR_HINT_PGI</name></cpp:macro> <cpp:value>0x1A220</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_FAR_HINT_PGI</name></cpp:macro> <cpp:value>0x1A221</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WIDE_LINE_HINT_PGI</name></cpp:macro> <cpp:value>0x1A222</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_NORMALS_HINT_PGI</name></cpp:macro> <cpp:value>0x1A223</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_paletted_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_paletted_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX1_EXT</name></cpp:macro> <cpp:value>0x80E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX2_EXT</name></cpp:macro> <cpp:value>0x80E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX4_EXT</name></cpp:macro> <cpp:value>0x80E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX8_EXT</name></cpp:macro> <cpp:value>0x80E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX12_EXT</name></cpp:macro> <cpp:value>0x80E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_INDEX16_EXT</name></cpp:macro> <cpp:value>0x80E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INDEX_SIZE_EXT</name></cpp:macro> <cpp:value>0x80ED</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_clip_volume_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_clip_volume_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_clip_volume_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_VOLUME_CLIPPING_HINT_EXT</name></cpp:macro> <cpp:value>0x80F0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_list_priority</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_list_priority</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_list_priority</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIST_PRIORITY_SGIX</name></cpp:macro> <cpp:value>0x8182</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ir_instrument1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ir_instrument1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_ir_instrument1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IR_INSTRUMENT1_SGIX</name></cpp:macro> <cpp:value>0x817F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_calligraphic_fragment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_calligraphic_fragment</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_calligraphic_fragment</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CALLIGRAPHIC_FRAGMENT_SGIX</name></cpp:macro> <cpp:value>0x8183</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_lod_bias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_lod_bias</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_texture_lod_bias</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_S_SGIX</name></cpp:macro> <cpp:value>0x818E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_T_SGIX</name></cpp:macro> <cpp:value>0x818F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_R_SGIX</name></cpp:macro> <cpp:value>0x8190</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_shadow_ambient</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_shadow_ambient</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_shadow_ambient</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADOW_AMBIENT_SGIX</name></cpp:macro> <cpp:value>0x80BF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_material</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_material</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_index_material</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MATERIAL_EXT</name></cpp:macro> <cpp:value>0x81B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MATERIAL_PARAMETER_EXT</name></cpp:macro> <cpp:value>0x81B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_MATERIAL_FACE_EXT</name></cpp:macro> <cpp:value>0x81BA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_func</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_func</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_index_func</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_TEST_EXT</name></cpp:macro> <cpp:value>0x81B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_TEST_FUNC_EXT</name></cpp:macro> <cpp:value>0x81B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_TEST_REF_EXT</name></cpp:macro> <cpp:value>0x81B7</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_array_formats</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_array_formats</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_index_array_formats</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_V2F_EXT</name></cpp:macro> <cpp:value>0x81AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_V3F_EXT</name></cpp:macro> <cpp:value>0x81AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_N3F_V2F_EXT</name></cpp:macro> <cpp:value>0x81AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_N3F_V3F_EXT</name></cpp:macro> <cpp:value>0x81B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_V2F_EXT</name></cpp:macro> <cpp:value>0x81B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_V3F_EXT</name></cpp:macro> <cpp:value>0x81B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_N3F_V2F_EXT</name></cpp:macro> <cpp:value>0x81B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_N3F_V3F_EXT</name></cpp:macro> <cpp:value>0x81B4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_compiled_vertex_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_compiled_vertex_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_compiled_vertex_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_ELEMENT_LOCK_FIRST_EXT</name></cpp:macro> <cpp:value>0x81A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_ELEMENT_LOCK_COUNT_EXT</name></cpp:macro> <cpp:value>0x81A9</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_cull_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_cull_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_cull_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_EXT</name></cpp:macro> <cpp:value>0x81AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_EYE_POSITION_EXT</name></cpp:macro> <cpp:value>0x81AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_OBJECT_POSITION_EXT</name></cpp:macro> <cpp:value>0x81AC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ycrcb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ycrcb</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_ycrcb</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCB_422_SGIX</name></cpp:macro> <cpp:value>0x81BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCB_444_SGIX</name></cpp:macro> <cpp:value>0x81BC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_fragment_lighting</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_fragment_lighting</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_fragment_lighting</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHTING_SGIX</name></cpp:macro> <cpp:value>0x8400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_MATERIAL_SGIX</name></cpp:macro> <cpp:value>0x8401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX</name></cpp:macro> <cpp:value>0x8402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX</name></cpp:macro> <cpp:value>0x8403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_LIGHTS_SGIX</name></cpp:macro> <cpp:value>0x8404</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ACTIVE_LIGHTS_SGIX</name></cpp:macro> <cpp:value>0x8405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_RASTER_NORMAL_SGIX</name></cpp:macro> <cpp:value>0x8406</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_ENV_MODE_SGIX</name></cpp:macro> <cpp:value>0x8407</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX</name></cpp:macro> <cpp:value>0x8408</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX</name></cpp:macro> <cpp:value>0x8409</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX</name></cpp:macro> <cpp:value>0x840A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX</name></cpp:macro> <cpp:value>0x840B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT0_SGIX</name></cpp:macro> <cpp:value>0x840C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT1_SGIX</name></cpp:macro> <cpp:value>0x840D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT2_SGIX</name></cpp:macro> <cpp:value>0x840E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT3_SGIX</name></cpp:macro> <cpp:value>0x840F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT4_SGIX</name></cpp:macro> <cpp:value>0x8410</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT5_SGIX</name></cpp:macro> <cpp:value>0x8411</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT6_SGIX</name></cpp:macro> <cpp:value>0x8412</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_LIGHT7_SGIX</name></cpp:macro> <cpp:value>0x8413</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_rasterpos_clip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_rasterpos_clip</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_IBM_rasterpos_clip</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTER_POSITION_UNCLIPPED_IBM</name></cpp:macro> <cpp:value>0x19262</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_texture_lighting</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_texture_lighting</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_HP_texture_lighting</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LIGHTING_MODE_HP</name></cpp:macro> <cpp:value>0x8167</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_POST_SPECULAR_HP</name></cpp:macro> <cpp:value>0x8168</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_PRE_SPECULAR_HP</name></cpp:macro> <cpp:value>0x8169</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_range_elements</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_range_elements</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_draw_range_elements</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES_EXT</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES_EXT</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_WIN_phong_shading</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WIN_phong_shading</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_WIN_phong_shading</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PHONG_WIN</name></cpp:macro> <cpp:value>0x80EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PHONG_HINT_WIN</name></cpp:macro> <cpp:value>0x80EB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_WIN_specular_fog</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WIN_specular_fog</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_WIN_specular_fog</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_SPECULAR_TEXTURE_WIN</name></cpp:macro> <cpp:value>0x80EC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_light_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_light_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_light_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_MATERIAL_EXT</name></cpp:macro> <cpp:value>0x8349</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_NORMAL_EXT</name></cpp:macro> <cpp:value>0x834A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_COLOR_EXT</name></cpp:macro> <cpp:value>0x834C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTENUATION_EXT</name></cpp:macro> <cpp:value>0x834D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADOW_ATTENUATION_EXT</name></cpp:macro> <cpp:value>0x834E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_APPLICATION_MODE_EXT</name></cpp:macro> <cpp:value>0x834F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LIGHT_EXT</name></cpp:macro> <cpp:value>0x8350</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MATERIAL_FACE_EXT</name></cpp:macro> <cpp:value>0x8351</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MATERIAL_PARAMETER_EXT</name></cpp:macro> <cpp:value>0x8352</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_FRAGMENT_DEPTH_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8452</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_blend_alpha_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_blend_alpha_minmax</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_blend_alpha_minmax</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MIN_SGIX</name></cpp:macro> <cpp:value>0x8320</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MAX_SGIX</name></cpp:macro> <cpp:value>0x8321</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_impact_pixel_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_impact_pixel_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_impact_pixel_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_Q_CEILING_SGIX</name></cpp:macro> <cpp:value>0x8184</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_Q_ROUND_SGIX</name></cpp:macro> <cpp:value>0x8185</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX</name></cpp:macro> <cpp:value>0x8186</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX</name></cpp:macro> <cpp:value>0x8187</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX</name></cpp:macro> <cpp:value>0x8188</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX</name></cpp:macro> <cpp:value>0x8189</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX</name></cpp:macro> <cpp:value>0x818A</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_bgra</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_bgra</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_EXT</name></cpp:macro> <cpp:value>0x80E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_EXT</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_async</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_async</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_async</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_MARKER_SGIX</name></cpp:macro> <cpp:value>0x8329</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_async_pixel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_async_pixel</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_async_pixel</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_TEX_IMAGE_SGIX</name></cpp:macro> <cpp:value>0x835C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_DRAW_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x835D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_READ_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x835E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_TEX_IMAGE_SGIX</name></cpp:macro> <cpp:value>0x835F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_DRAW_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x8360</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_READ_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x8361</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_async_histogram</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_async_histogram</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_async_histogram</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASYNC_HISTOGRAM_SGIX</name></cpp:macro> <cpp:value>0x832C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ASYNC_HISTOGRAM_SGIX</name></cpp:macro> <cpp:value>0x832D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INTEL_parallel_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTEL_parallel_arrays</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_INTEL_parallel_arrays</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PARALLEL_ARRAYS_INTEL</name></cpp:macro> <cpp:value>0x83F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL</name></cpp:macro> <cpp:value>0x83F8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_HP_occlusion_test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HP_occlusion_test</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_HP_occlusion_test</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OCCLUSION_TEST_HP</name></cpp:macro> <cpp:value>0x8165</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OCCLUSION_TEST_RESULT_HP</name></cpp:macro> <cpp:value>0x8166</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_pixel_transform</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_pixel_transform</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_pixel_transform</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TRANSFORM_2D_EXT</name></cpp:macro> <cpp:value>0x8330</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MAG_FILTER_EXT</name></cpp:macro> <cpp:value>0x8331</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_MIN_FILTER_EXT</name></cpp:macro> <cpp:value>0x8332</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_CUBIC_WEIGHT_EXT</name></cpp:macro> <cpp:value>0x8333</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CUBIC_EXT</name></cpp:macro> <cpp:value>0x8334</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AVERAGE_EXT</name></cpp:macro> <cpp:value>0x8335</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8336</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8337</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_TRANSFORM_2D_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8338</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shared_texture_palette</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shared_texture_palette</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_shared_texture_palette</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHARED_TEXTURE_PALETTE_EXT</name></cpp:macro> <cpp:value>0x81FB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_separate_specular_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_separate_specular_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_separate_specular_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_COLOR_CONTROL_EXT</name></cpp:macro> <cpp:value>0x81F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SINGLE_COLOR_EXT</name></cpp:macro> <cpp:value>0x81F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_SPECULAR_COLOR_EXT</name></cpp:macro> <cpp:value>0x81FA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_secondary_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_secondary_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_secondary_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_EXT</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_SECONDARY_COLOR_EXT</name></cpp:macro> <cpp:value>0x8459</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x845A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x845B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x845C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x845D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_EXT</name></cpp:macro> <cpp:value>0x845E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_perturb_normal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_perturb_normal</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_perturb_normal</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERTURB_EXT</name></cpp:macro> <cpp:value>0x85AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_NORMAL_EXT</name></cpp:macro> <cpp:value>0x85AF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multi_draw_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multi_draw_arrays</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_multi_draw_arrays</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_fog_coord</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_fog_coord</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_fog_coord</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_SOURCE_EXT</name></cpp:macro> <cpp:value>0x8450</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_EXT</name></cpp:macro> <cpp:value>0x8451</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8452</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_FOG_COORDINATE_EXT</name></cpp:macro> <cpp:value>0x8453</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8454</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8455</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8456</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8457</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_REND_screen_coordinates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REND_screen_coordinates</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_REND_screen_coordinates</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCREEN_COORDINATES_REND</name></cpp:macro> <cpp:value>0x8490</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERTED_SCREEN_W_REND</name></cpp:macro> <cpp:value>0x8491</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_coordinate_frame</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_coordinate_frame</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_coordinate_frame</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8439</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_EXT</name></cpp:macro> <cpp:value>0x843A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_TANGENT_EXT</name></cpp:macro> <cpp:value>0x843B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_BINORMAL_EXT</name></cpp:macro> <cpp:value>0x843C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x843E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x843F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8440</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8441</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TANGENT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8442</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINORMAL_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8443</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_TANGENT_EXT</name></cpp:macro> <cpp:value>0x8444</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_TANGENT_EXT</name></cpp:macro> <cpp:value>0x8445</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_BINORMAL_EXT</name></cpp:macro> <cpp:value>0x8446</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_BINORMAL_EXT</name></cpp:macro> <cpp:value>0x8447</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_env_combine</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_env_combine</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_env_combine</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_EXT</name></cpp:macro> <cpp:value>0x8570</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_RGB_EXT</name></cpp:macro> <cpp:value>0x8571</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8572</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_SCALE_EXT</name></cpp:macro> <cpp:value>0x8573</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_SIGNED_EXT</name></cpp:macro> <cpp:value>0x8574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERPOLATE_EXT</name></cpp:macro> <cpp:value>0x8575</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_EXT</name></cpp:macro> <cpp:value>0x8576</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR_EXT</name></cpp:macro> <cpp:value>0x8577</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS_EXT</name></cpp:macro> <cpp:value>0x8578</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_RGB_EXT</name></cpp:macro> <cpp:value>0x8580</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_RGB_EXT</name></cpp:macro> <cpp:value>0x8581</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_RGB_EXT</name></cpp:macro> <cpp:value>0x8582</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE0_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8588</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE1_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE2_ALPHA_EXT</name></cpp:macro> <cpp:value>0x858A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_RGB_EXT</name></cpp:macro> <cpp:value>0x8590</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_RGB_EXT</name></cpp:macro> <cpp:value>0x8591</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_RGB_EXT</name></cpp:macro> <cpp:value>0x8592</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND0_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8598</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND1_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8599</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND2_ALPHA_EXT</name></cpp:macro> <cpp:value>0x859A</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_specular_vector</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_specular_vector</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_specular_vector</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE</name></cpp:macro> <cpp:value>0x85B0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_transform_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_transform_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_transform_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_HINT_APPLE</name></cpp:macro> <cpp:value>0x85B1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_fog_scale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_fog_scale</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_fog_scale</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_SCALE_SGIX</name></cpp:macro> <cpp:value>0x81FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_SCALE_VALUE_SGIX</name></cpp:macro> <cpp:value>0x81FD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUNX_constant_data</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUNX_constant_data</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUNX_constant_data</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_CONSTANT_DATA_SUNX</name></cpp:macro> <cpp:value>0x81D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CONSTANT_DATA_SUNX</name></cpp:macro> <cpp:value>0x81D6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_global_alpha</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_global_alpha</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUN_global_alpha</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLOBAL_ALPHA_SUN</name></cpp:macro> <cpp:value>0x81D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GLOBAL_ALPHA_FACTOR_SUN</name></cpp:macro> <cpp:value>0x81DA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_triangle_list</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_triangle_list</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUN_triangle_list</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESTART_SUN</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_MIDDLE_SUN</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_OLDEST_SUN</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_LIST_SUN</name></cpp:macro> <cpp:value>0x81D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_SUN</name></cpp:macro> <cpp:value>0x81D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_SUN</name></cpp:macro> <cpp:value>0x85C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN</name></cpp:macro> <cpp:value>0x85C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN</name></cpp:macro> <cpp:value>0x85C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN</name></cpp:macro> <cpp:value>0x85C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_V3F_SUN</name></cpp:macro> <cpp:value>0x85C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_C4UB_V3F_SUN</name></cpp:macro> <cpp:value>0x85C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_C3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_C4F_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_T2F_V3F_SUN</name></cpp:macro> <cpp:value>0x85C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_T2F_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R1UI_T2F_C4F_N3F_V3F_SUN</name></cpp:macro> <cpp:value>0x85CB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUN_vertex</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_func_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_func_separate</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_blend_func_separate</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB_EXT</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB_EXT</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA_EXT</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA_EXT</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INGR_color_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INGR_color_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_INGR_color_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8560</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8561</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8562</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MIN_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8563</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8564</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8565</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8566</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_MAX_CLAMP_INGR</name></cpp:macro> <cpp:value>0x8567</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INGR_blend_func_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INGR_blend_func_separate</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_INGR_blend_func_separate</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_INGR_interlace_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INGR_interlace_read</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_INGR_interlace_read</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_READ_INGR</name></cpp:macro> <cpp:value>0x8568</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_stencil_wrap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_stencil_wrap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_stencil_wrap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP_EXT</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP_EXT</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_422_pixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_422_pixels</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_422_pixels</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_EXT</name></cpp:macro> <cpp:value>0x80CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_REV_EXT</name></cpp:macro> <cpp:value>0x80CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_AVERAGE_EXT</name></cpp:macro> <cpp:value>0x80CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_422_REV_AVERAGE_EXT</name></cpp:macro> <cpp:value>0x80CF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texgen_reflection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texgen_reflection</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texgen_reflection</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP_NV</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP_NV</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_cube_map</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_cube_map</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_cube_map</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_MAP_EXT</name></cpp:macro> <cpp:value>0x8511</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REFLECTION_MAP_EXT</name></cpp:macro> <cpp:value>0x8512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_EXT</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP_EXT</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP_EXT</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_convolution_border_modes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_convolution_border_modes</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUN_convolution_border_modes</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRAP_BORDER_SUN</name></cpp:macro> <cpp:value>0x81D4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_lod_bias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_lod_bias</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_lod_bias</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS_EXT</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FILTER_CONTROL_EXT</name></cpp:macro> <cpp:value>0x8500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS_EXT</name></cpp:macro> <cpp:value>0x8501</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_filter_anisotropic</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_filter_anisotropic</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_filter_anisotropic</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_weighting</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_weighting</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_vertex_weighting</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>GL_MODELVIEW_STACK_DEPTH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8502</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_MATRIX_EXT</name></cpp:macro> <cpp:value>GL_MODELVIEW_MATRIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8506</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHTING_EXT</name></cpp:macro> <cpp:value>0x8509</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW0_EXT</name></cpp:macro> <cpp:value>GL_MODELVIEW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW1_EXT</name></cpp:macro> <cpp:value>0x850A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_WEIGHT_EXT</name></cpp:macro> <cpp:value>0x850B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x850C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x850D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x850E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x850F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8510</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_light_max_exponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_light_max_exponent</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_light_max_exponent</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHININESS_NV</name></cpp:macro> <cpp:value>0x8504</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SPOT_EXPONENT_NV</name></cpp:macro> <cpp:value>0x8505</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_array_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_array_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_array_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_NV</name></cpp:macro> <cpp:value>0x851D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_LENGTH_NV</name></cpp:macro> <cpp:value>0x851E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_VALID_NV</name></cpp:macro> <cpp:value>0x851F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV</name></cpp:macro> <cpp:value>0x8520</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_POINTER_NV</name></cpp:macro> <cpp:value>0x8521</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_register_combiners</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_register_combiners</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_register_combiners</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REGISTER_COMBINERS_NV</name></cpp:macro> <cpp:value>0x8522</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_A_NV</name></cpp:macro> <cpp:value>0x8523</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_B_NV</name></cpp:macro> <cpp:value>0x8524</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_C_NV</name></cpp:macro> <cpp:value>0x8525</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_D_NV</name></cpp:macro> <cpp:value>0x8526</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_E_NV</name></cpp:macro> <cpp:value>0x8527</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_F_NV</name></cpp:macro> <cpp:value>0x8528</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIABLE_G_NV</name></cpp:macro> <cpp:value>0x8529</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR0_NV</name></cpp:macro> <cpp:value>0x852A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR1_NV</name></cpp:macro> <cpp:value>0x852B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMARY_COLOR_NV</name></cpp:macro> <cpp:value>0x852C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x852D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARE0_NV</name></cpp:macro> <cpp:value>0x852E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARE1_NV</name></cpp:macro> <cpp:value>0x852F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCARD_NV</name></cpp:macro> <cpp:value>0x8530</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_E_TIMES_F_NV</name></cpp:macro> <cpp:value>0x8531</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SPARE0_PLUS_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x8532</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_IDENTITY_NV</name></cpp:macro> <cpp:value>0x8536</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INVERT_NV</name></cpp:macro> <cpp:value>0x8537</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXPAND_NORMAL_NV</name></cpp:macro> <cpp:value>0x8538</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXPAND_NEGATE_NV</name></cpp:macro> <cpp:value>0x8539</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIAS_NORMAL_NV</name></cpp:macro> <cpp:value>0x853A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIAS_NEGATE_NV</name></cpp:macro> <cpp:value>0x853B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_IDENTITY_NV</name></cpp:macro> <cpp:value>0x853C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NEGATE_NV</name></cpp:macro> <cpp:value>0x853D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALE_BY_TWO_NV</name></cpp:macro> <cpp:value>0x853E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALE_BY_FOUR_NV</name></cpp:macro> <cpp:value>0x853F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALE_BY_ONE_HALF_NV</name></cpp:macro> <cpp:value>0x8540</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV</name></cpp:macro> <cpp:value>0x8541</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_INPUT_NV</name></cpp:macro> <cpp:value>0x8542</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_MAPPING_NV</name></cpp:macro> <cpp:value>0x8543</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_COMPONENT_USAGE_NV</name></cpp:macro> <cpp:value>0x8544</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_AB_DOT_PRODUCT_NV</name></cpp:macro> <cpp:value>0x8545</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_CD_DOT_PRODUCT_NV</name></cpp:macro> <cpp:value>0x8546</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_MUX_SUM_NV</name></cpp:macro> <cpp:value>0x8547</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_SCALE_NV</name></cpp:macro> <cpp:value>0x8548</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_BIAS_NV</name></cpp:macro> <cpp:value>0x8549</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_AB_OUTPUT_NV</name></cpp:macro> <cpp:value>0x854A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_CD_OUTPUT_NV</name></cpp:macro> <cpp:value>0x854B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER_SUM_OUTPUT_NV</name></cpp:macro> <cpp:value>0x854C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GENERAL_COMBINERS_NV</name></cpp:macro> <cpp:value>0x854D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_GENERAL_COMBINERS_NV</name></cpp:macro> <cpp:value>0x854E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_CLAMP_NV</name></cpp:macro> <cpp:value>0x854F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER0_NV</name></cpp:macro> <cpp:value>0x8550</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER1_NV</name></cpp:macro> <cpp:value>0x8551</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER2_NV</name></cpp:macro> <cpp:value>0x8552</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER3_NV</name></cpp:macro> <cpp:value>0x8553</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER4_NV</name></cpp:macro> <cpp:value>0x8554</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER5_NV</name></cpp:macro> <cpp:value>0x8555</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER6_NV</name></cpp:macro> <cpp:value>0x8556</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINER7_NV</name></cpp:macro> <cpp:value>0x8557</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fog_distance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fog_distance</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_fog_distance</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_DISTANCE_MODE_NV</name></cpp:macro> <cpp:value>0x855A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_RADIAL_NV</name></cpp:macro> <cpp:value>0x855B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_PLANE_ABSOLUTE_NV</name></cpp:macro> <cpp:value>0x855C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texgen_emboss</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texgen_emboss</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texgen_emboss</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMBOSS_LIGHT_NV</name></cpp:macro> <cpp:value>0x855D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMBOSS_CONSTANT_NV</name></cpp:macro> <cpp:value>0x855E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EMBOSS_MAP_NV</name></cpp:macro> <cpp:value>0x855F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_env_combine4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_env_combine4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_env_combine4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMBINE4_NV</name></cpp:macro> <cpp:value>0x8503</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE3_RGB_NV</name></cpp:macro> <cpp:value>0x8583</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SOURCE3_ALPHA_NV</name></cpp:macro> <cpp:value>0x858B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND3_RGB_NV</name></cpp:macro> <cpp:value>0x8593</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OPERAND3_ALPHA_NV</name></cpp:macro> <cpp:value>0x859B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_s3tc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_s3tc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_compression_s3tc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x83F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x83F3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_resize_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_resize_buffers</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_MESA_resize_buffers</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_window_pos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_window_pos</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_MESA_window_pos</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_cull_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_cull_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_IBM_cull_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_VERTEX_IBM</name></cpp:macro> <cpp:value>103050</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_multimode_draw_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_multimode_draw_arrays</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_IBM_multimode_draw_arrays</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_vertex_array_lists</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_vertex_array_lists</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_IBM_vertex_array_lists</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103071</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103073</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103074</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103075</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103076</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_LIST_IBM</name></cpp:macro> <cpp:value>103077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103081</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103082</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103083</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103084</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103085</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103086</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM</name></cpp:macro> <cpp:value>103087</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_subsample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_subsample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_subsample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SUBSAMPLE_RATE_SGIX</name></cpp:macro> <cpp:value>0x85A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SUBSAMPLE_RATE_SGIX</name></cpp:macro> <cpp:value>0x85A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_SUBSAMPLE_4444_SGIX</name></cpp:macro> <cpp:value>0x85A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_SUBSAMPLE_2424_SGIX</name></cpp:macro> <cpp:value>0x85A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_SUBSAMPLE_4242_SGIX</name></cpp:macro> <cpp:value>0x85A4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_ycrcba</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_ycrcba</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_ycrcba</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCB_SGIX</name></cpp:macro> <cpp:value>0x8318</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCRCBA_SGIX</name></cpp:macro> <cpp:value>0x8319</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGI_depth_pass_instrument</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGI_depth_pass_instrument</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGI_depth_pass_instrument</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_PASS_INSTRUMENT_SGIX</name></cpp:macro> <cpp:value>0x8310</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX</name></cpp:macro> <cpp:value>0x8311</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX</name></cpp:macro> <cpp:value>0x8312</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_3DFX_texture_compression_FXT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DFX_texture_compression_FXT1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_3DFX_texture_compression_FXT1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_FXT1_3DFX</name></cpp:macro> <cpp:value>0x86B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_FXT1_3DFX</name></cpp:macro> <cpp:value>0x86B1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_3DFX_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DFX_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_3DFX_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_3DFX</name></cpp:macro> <cpp:value>0x86B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_3DFX</name></cpp:macro> <cpp:value>0x86B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_3DFX</name></cpp:macro> <cpp:value>0x86B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_3DFX</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_3DFX_tbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DFX_tbuffer</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_GL_HEADER_NV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_3DFX_tbuffer</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_MASK_EXT</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_EXT</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_EXT</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_1PASS_EXT</name></cpp:macro> <cpp:value>0x80A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_0_EXT</name></cpp:macro> <cpp:value>0x80A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2PASS_1_EXT</name></cpp:macro> <cpp:value>0x80A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_0_EXT</name></cpp:macro> <cpp:value>0x80A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_1_EXT</name></cpp:macro> <cpp:value>0x80A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_2_EXT</name></cpp:macro> <cpp:value>0x80A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4PASS_3_EXT</name></cpp:macro> <cpp:value>0x80A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE_EXT</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_INVERT_EXT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_PATTERN_EXT</name></cpp:macro> <cpp:value>0x80AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_EXT</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_vertex_preclip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_vertex_preclip</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_vertex_preclip</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PRECLIP_SGIX</name></cpp:macro> <cpp:value>0x83EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PRECLIP_HINT_SGIX</name></cpp:macro> <cpp:value>0x83EF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_convolution_accuracy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_convolution_accuracy</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_convolution_accuracy</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONVOLUTION_HINT_SGIX</name></cpp:macro> <cpp:value>0x8316</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_resample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_resample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_resample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_RESAMPLE_SGIX</name></cpp:macro> <cpp:value>0x842C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_RESAMPLE_SGIX</name></cpp:macro> <cpp:value>0x842D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_REPLICATE_SGIX</name></cpp:macro> <cpp:value>0x842E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_ZERO_FILL_SGIX</name></cpp:macro> <cpp:value>0x842F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_DECIMATE_SGIX</name></cpp:macro> <cpp:value>0x8430</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_point_line_texgen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_point_line_texgen</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_point_line_texgen</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_DISTANCE_TO_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_DISTANCE_TO_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_DISTANCE_TO_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_DISTANCE_TO_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_POINT_SGIS</name></cpp:macro> <cpp:value>0x81F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EYE_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_LINE_SGIS</name></cpp:macro> <cpp:value>0x81F7</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIS_texture_color_mask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIS_texture_color_mask</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_GL_HEADER_NV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIS_texture_color_mask</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COLOR_WRITEMASK_SGIS</name></cpp:macro> <cpp:value>0x81EF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_igloo_interface</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_igloo_interface</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_igloo_interface</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_env_dot3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_env_dot3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_env_dot3</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_texture_mirror_once</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_texture_mirror_once</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_texture_mirror_once</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_ATI</name></cpp:macro> <cpp:value>0x8742</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_EDGE_ATI</name></cpp:macro> <cpp:value>0x8743</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fence</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_fence</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_COMPLETED_NV</name></cpp:macro> <cpp:value>0x84F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_STATUS_NV</name></cpp:macro> <cpp:value>0x84F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_CONDITION_NV</name></cpp:macro> <cpp:value>0x84F4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IBM_texture_mirrored_repeat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IBM_texture_mirrored_repeat</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_IBM_texture_mirrored_repeat</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT_IBM</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_evaluators</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_evaluators</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_evaluators</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_2D_NV</name></cpp:macro> <cpp:value>0x86C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_TRIANGULAR_2D_NV</name></cpp:macro> <cpp:value>0x86C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_TESSELLATION_NV</name></cpp:macro> <cpp:value>0x86C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_ATTRIB_U_ORDER_NV</name></cpp:macro> <cpp:value>0x86C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_ATTRIB_V_ORDER_NV</name></cpp:macro> <cpp:value>0x86C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_FRACTIONAL_TESSELLATION_NV</name></cpp:macro> <cpp:value>0x86C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB0_NV</name></cpp:macro> <cpp:value>0x86C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB1_NV</name></cpp:macro> <cpp:value>0x86C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB2_NV</name></cpp:macro> <cpp:value>0x86C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB3_NV</name></cpp:macro> <cpp:value>0x86C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB4_NV</name></cpp:macro> <cpp:value>0x86CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB5_NV</name></cpp:macro> <cpp:value>0x86CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB6_NV</name></cpp:macro> <cpp:value>0x86CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB7_NV</name></cpp:macro> <cpp:value>0x86CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB8_NV</name></cpp:macro> <cpp:value>0x86CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB9_NV</name></cpp:macro> <cpp:value>0x86CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB10_NV</name></cpp:macro> <cpp:value>0x86D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB11_NV</name></cpp:macro> <cpp:value>0x86D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB12_NV</name></cpp:macro> <cpp:value>0x86D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB13_NV</name></cpp:macro> <cpp:value>0x86D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB14_NV</name></cpp:macro> <cpp:value>0x86D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EVAL_VERTEX_ATTRIB15_NV</name></cpp:macro> <cpp:value>0x86D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MAP_TESSELLATION_NV</name></cpp:macro> <cpp:value>0x86D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RATIONAL_EVAL_ORDER_NV</name></cpp:macro> <cpp:value>0x86D7</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_packed_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_packed_depth_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_packed_depth_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_NV</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8_NV</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_register_combiners2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_register_combiners2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_register_combiners2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PER_STAGE_CONSTANTS_NV</name></cpp:macro> <cpp:value>0x8535</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_rectangle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_rectangle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_rectangle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE_NV</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x864C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV</name></cpp:macro> <cpp:value>0x864D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x864E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV</name></cpp:macro> <cpp:value>0x86D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_S8_S8_8_8_NV</name></cpp:macro> <cpp:value>0x86DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_S8_S8_REV_NV</name></cpp:macro> <cpp:value>0x86DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_MAG_INTENSITY_NV</name></cpp:macro> <cpp:value>0x86DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_CONSISTENT_NV</name></cpp:macro> <cpp:value>0x86DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHADER_NV</name></cpp:macro> <cpp:value>0x86DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OPERATION_NV</name></cpp:macro> <cpp:value>0x86DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_MODES_NV</name></cpp:macro> <cpp:value>0x86E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_MATRIX_NV</name></cpp:macro> <cpp:value>0x86E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_SCALE_NV</name></cpp:macro> <cpp:value>0x86E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_BIAS_NV</name></cpp:macro> <cpp:value>0x86E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_MATRIX_NV</name></cpp:macro> <cpp:value>GL_OFFSET_TEXTURE_MATRIX_NV</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_SCALE_NV</name></cpp:macro> <cpp:value>GL_OFFSET_TEXTURE_SCALE_NV</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_BIAS_NV</name></cpp:macro> <cpp:value>GL_OFFSET_TEXTURE_BIAS_NV</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PREVIOUS_TEXTURE_INPUT_NV</name></cpp:macro> <cpp:value>0x86E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONST_EYE_NV</name></cpp:macro> <cpp:value>0x86E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PASS_THROUGH_NV</name></cpp:macro> <cpp:value>0x86E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FRAGMENT_NV</name></cpp:macro> <cpp:value>0x86E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_AR_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_GB_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_NV</name></cpp:macro> <cpp:value>0x86EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_DEPTH_REPLACE_NV</name></cpp:macro> <cpp:value>0x86ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x86EE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x86F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HILO_NV</name></cpp:macro> <cpp:value>0x86F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_NV</name></cpp:macro> <cpp:value>0x86F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_MAG_NV</name></cpp:macro> <cpp:value>0x86F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT_MAG_VIB_NV</name></cpp:macro> <cpp:value>0x86F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HILO16_NV</name></cpp:macro> <cpp:value>0x86F8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_HILO_NV</name></cpp:macro> <cpp:value>0x86F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_HILO16_NV</name></cpp:macro> <cpp:value>0x86FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGBA_NV</name></cpp:macro> <cpp:value>0x86FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGBA8_NV</name></cpp:macro> <cpp:value>0x86FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB_NV</name></cpp:macro> <cpp:value>0x86FE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB8_NV</name></cpp:macro> <cpp:value>0x86FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE_NV</name></cpp:macro> <cpp:value>0x8701</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE8_NV</name></cpp:macro> <cpp:value>0x8702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE_ALPHA_NV</name></cpp:macro> <cpp:value>0x8703</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_LUMINANCE8_ALPHA8_NV</name></cpp:macro> <cpp:value>0x8704</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_ALPHA_NV</name></cpp:macro> <cpp:value>0x8705</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_ALPHA8_NV</name></cpp:macro> <cpp:value>0x8706</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_INTENSITY_NV</name></cpp:macro> <cpp:value>0x8707</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_INTENSITY8_NV</name></cpp:macro> <cpp:value>0x8708</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT8_NV</name></cpp:macro> <cpp:value>0x8709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT8_MAG8_NV</name></cpp:macro> <cpp:value>0x870A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DSDT8_MAG8_INTENSITY8_NV</name></cpp:macro> <cpp:value>0x870B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB_UNSIGNED_ALPHA_NV</name></cpp:macro> <cpp:value>0x870C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV</name></cpp:macro> <cpp:value>0x870D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HI_SCALE_NV</name></cpp:macro> <cpp:value>0x870E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LO_SCALE_NV</name></cpp:macro> <cpp:value>0x870F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DS_SCALE_NV</name></cpp:macro> <cpp:value>0x8710</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DT_SCALE_NV</name></cpp:macro> <cpp:value>0x8711</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAGNITUDE_SCALE_NV</name></cpp:macro> <cpp:value>0x8712</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIBRANCE_SCALE_NV</name></cpp:macro> <cpp:value>0x8713</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HI_BIAS_NV</name></cpp:macro> <cpp:value>0x8714</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LO_BIAS_NV</name></cpp:macro> <cpp:value>0x8715</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DS_BIAS_NV</name></cpp:macro> <cpp:value>0x8716</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DT_BIAS_NV</name></cpp:macro> <cpp:value>0x8717</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAGNITUDE_BIAS_NV</name></cpp:macro> <cpp:value>0x8718</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIBRANCE_BIAS_NV</name></cpp:macro> <cpp:value>0x8719</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER_VALUES_NV</name></cpp:macro> <cpp:value>0x871A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_HI_SIZE_NV</name></cpp:macro> <cpp:value>0x871B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LO_SIZE_NV</name></cpp:macro> <cpp:value>0x871C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DS_SIZE_NV</name></cpp:macro> <cpp:value>0x871D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DT_SIZE_NV</name></cpp:macro> <cpp:value>0x871E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAG_SIZE_NV</name></cpp:macro> <cpp:value>0x871F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_shader2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_shader2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_shader2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_3D_NV</name></cpp:macro> <cpp:value>0x86EF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_array_range2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_array_range2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_array_range2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV</name></cpp:macro> <cpp:value>0x8533</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8620</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STATE_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8621</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_SIZE_NV</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_STRIDE_NV</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_TYPE_NV</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_ATTRIB_NV</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_LENGTH_NV</name></cpp:macro> <cpp:value>0x8627</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_STRING_NV</name></cpp:macro> <cpp:value>0x8628</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODELVIEW_PROJECTION_NV</name></cpp:macro> <cpp:value>0x8629</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IDENTITY_NV</name></cpp:macro> <cpp:value>0x862A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERSE_NV</name></cpp:macro> <cpp:value>0x862B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_NV</name></cpp:macro> <cpp:value>0x862C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERSE_TRANSPOSE_NV</name></cpp:macro> <cpp:value>0x862D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV</name></cpp:macro> <cpp:value>0x862E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRACK_MATRICES_NV</name></cpp:macro> <cpp:value>0x862F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX0_NV</name></cpp:macro> <cpp:value>0x8630</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX1_NV</name></cpp:macro> <cpp:value>0x8631</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX2_NV</name></cpp:macro> <cpp:value>0x8632</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX3_NV</name></cpp:macro> <cpp:value>0x8633</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX4_NV</name></cpp:macro> <cpp:value>0x8634</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX5_NV</name></cpp:macro> <cpp:value>0x8635</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX6_NV</name></cpp:macro> <cpp:value>0x8636</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX7_NV</name></cpp:macro> <cpp:value>0x8637</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_STACK_DEPTH_NV</name></cpp:macro> <cpp:value>0x8640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_NV</name></cpp:macro> <cpp:value>0x8641</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE_NV</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE_NV</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PARAMETER_NV</name></cpp:macro> <cpp:value>0x8644</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTRIB_ARRAY_POINTER_NV</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TARGET_NV</name></cpp:macro> <cpp:value>0x8646</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_RESIDENT_NV</name></cpp:macro> <cpp:value>0x8647</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRACK_MATRIX_NV</name></cpp:macro> <cpp:value>0x8648</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRACK_MATRIX_TRANSFORM_NV</name></cpp:macro> <cpp:value>0x8649</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_BINDING_NV</name></cpp:macro> <cpp:value>0x864A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_POSITION_NV</name></cpp:macro> <cpp:value>0x864B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY0_NV</name></cpp:macro> <cpp:value>0x8650</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY1_NV</name></cpp:macro> <cpp:value>0x8651</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY2_NV</name></cpp:macro> <cpp:value>0x8652</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY3_NV</name></cpp:macro> <cpp:value>0x8653</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY4_NV</name></cpp:macro> <cpp:value>0x8654</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY5_NV</name></cpp:macro> <cpp:value>0x8655</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY6_NV</name></cpp:macro> <cpp:value>0x8656</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY7_NV</name></cpp:macro> <cpp:value>0x8657</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY8_NV</name></cpp:macro> <cpp:value>0x8658</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY9_NV</name></cpp:macro> <cpp:value>0x8659</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY10_NV</name></cpp:macro> <cpp:value>0x865A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY11_NV</name></cpp:macro> <cpp:value>0x865B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY12_NV</name></cpp:macro> <cpp:value>0x865C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY13_NV</name></cpp:macro> <cpp:value>0x865D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY14_NV</name></cpp:macro> <cpp:value>0x865E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY15_NV</name></cpp:macro> <cpp:value>0x865F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB0_4_NV</name></cpp:macro> <cpp:value>0x8660</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB1_4_NV</name></cpp:macro> <cpp:value>0x8661</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB2_4_NV</name></cpp:macro> <cpp:value>0x8662</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB3_4_NV</name></cpp:macro> <cpp:value>0x8663</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB4_4_NV</name></cpp:macro> <cpp:value>0x8664</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB5_4_NV</name></cpp:macro> <cpp:value>0x8665</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB6_4_NV</name></cpp:macro> <cpp:value>0x8666</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB7_4_NV</name></cpp:macro> <cpp:value>0x8667</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB8_4_NV</name></cpp:macro> <cpp:value>0x8668</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB9_4_NV</name></cpp:macro> <cpp:value>0x8669</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB10_4_NV</name></cpp:macro> <cpp:value>0x866A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB11_4_NV</name></cpp:macro> <cpp:value>0x866B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB12_4_NV</name></cpp:macro> <cpp:value>0x866C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB13_4_NV</name></cpp:macro> <cpp:value>0x866D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB14_4_NV</name></cpp:macro> <cpp:value>0x866E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP1_VERTEX_ATTRIB15_4_NV</name></cpp:macro> <cpp:value>0x866F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB0_4_NV</name></cpp:macro> <cpp:value>0x8670</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB1_4_NV</name></cpp:macro> <cpp:value>0x8671</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB2_4_NV</name></cpp:macro> <cpp:value>0x8672</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB3_4_NV</name></cpp:macro> <cpp:value>0x8673</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB4_4_NV</name></cpp:macro> <cpp:value>0x8674</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB5_4_NV</name></cpp:macro> <cpp:value>0x8675</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB6_4_NV</name></cpp:macro> <cpp:value>0x8676</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB7_4_NV</name></cpp:macro> <cpp:value>0x8677</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB8_4_NV</name></cpp:macro> <cpp:value>0x8678</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB9_4_NV</name></cpp:macro> <cpp:value>0x8679</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB10_4_NV</name></cpp:macro> <cpp:value>0x867A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB11_4_NV</name></cpp:macro> <cpp:value>0x867B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB12_4_NV</name></cpp:macro> <cpp:value>0x867C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB13_4_NV</name></cpp:macro> <cpp:value>0x867D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB14_4_NV</name></cpp:macro> <cpp:value>0x867E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP2_VERTEX_ATTRIB15_4_NV</name></cpp:macro> <cpp:value>0x867F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_texture_coordinate_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_texture_coordinate_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_texture_coordinate_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_CLAMP_S_SGIX</name></cpp:macro> <cpp:value>0x8369</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_CLAMP_T_SGIX</name></cpp:macro> <cpp:value>0x836A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_CLAMP_R_SGIX</name></cpp:macro> <cpp:value>0x836B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SGIX_scalebias_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGIX_scalebias_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SGIX_scalebias_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALEBIAS_HINT_SGIX</name></cpp:macro> <cpp:value>0x8322</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OML_interlace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OML_interlace</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OML_interlace</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_OML</name></cpp:macro> <cpp:value>0x8980</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLACE_READ_OML</name></cpp:macro> <cpp:value>0x8981</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OML_subsample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OML_subsample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OML_subsample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FORMAT_SUBSAMPLE_24_24_OML</name></cpp:macro> <cpp:value>0x8982</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FORMAT_SUBSAMPLE_244_244_OML</name></cpp:macro> <cpp:value>0x8983</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OML_resample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OML_resample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OML_resample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_RESAMPLE_OML</name></cpp:macro> <cpp:value>0x8984</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_RESAMPLE_OML</name></cpp:macro> <cpp:value>0x8985</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_REPLICATE_OML</name></cpp:macro> <cpp:value>0x8986</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_ZERO_FILL_OML</name></cpp:macro> <cpp:value>0x8987</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_AVERAGE_OML</name></cpp:macro> <cpp:value>0x8988</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESAMPLE_DECIMATE_OML</name></cpp:macro> <cpp:value>0x8989</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_copy_depth_to_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_copy_depth_to_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_copy_depth_to_color</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_TO_RGBA_NV</name></cpp:macro> <cpp:value>0x886E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_TO_BGRA_NV</name></cpp:macro> <cpp:value>0x886F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_envmap_bumpmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_envmap_bumpmap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_envmap_bumpmap</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_ROT_MATRIX_ATI</name></cpp:macro> <cpp:value>0x8775</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_ROT_MATRIX_SIZE_ATI</name></cpp:macro> <cpp:value>0x8776</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_NUM_TEX_UNITS_ATI</name></cpp:macro> <cpp:value>0x8777</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_TEX_UNITS_ATI</name></cpp:macro> <cpp:value>0x8778</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DUDV_ATI</name></cpp:macro> <cpp:value>0x8779</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DU8DV8_ATI</name></cpp:macro> <cpp:value>0x877A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_ENVMAP_ATI</name></cpp:macro> <cpp:value>0x877B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUMP_TARGET_ATI</name></cpp:macro> <cpp:value>0x877C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_fragment_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_fragment_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_ATI</name></cpp:macro> <cpp:value>0x8920</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_0_ATI</name></cpp:macro> <cpp:value>0x8921</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_1_ATI</name></cpp:macro> <cpp:value>0x8922</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_2_ATI</name></cpp:macro> <cpp:value>0x8923</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_3_ATI</name></cpp:macro> <cpp:value>0x8924</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_4_ATI</name></cpp:macro> <cpp:value>0x8925</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_5_ATI</name></cpp:macro> <cpp:value>0x8926</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_6_ATI</name></cpp:macro> <cpp:value>0x8927</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_7_ATI</name></cpp:macro> <cpp:value>0x8928</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_8_ATI</name></cpp:macro> <cpp:value>0x8929</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_9_ATI</name></cpp:macro> <cpp:value>0x892A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_10_ATI</name></cpp:macro> <cpp:value>0x892B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_11_ATI</name></cpp:macro> <cpp:value>0x892C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_12_ATI</name></cpp:macro> <cpp:value>0x892D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_13_ATI</name></cpp:macro> <cpp:value>0x892E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_14_ATI</name></cpp:macro> <cpp:value>0x892F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_15_ATI</name></cpp:macro> <cpp:value>0x8930</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_16_ATI</name></cpp:macro> <cpp:value>0x8931</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_17_ATI</name></cpp:macro> <cpp:value>0x8932</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_18_ATI</name></cpp:macro> <cpp:value>0x8933</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_19_ATI</name></cpp:macro> <cpp:value>0x8934</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_20_ATI</name></cpp:macro> <cpp:value>0x8935</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_21_ATI</name></cpp:macro> <cpp:value>0x8936</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_22_ATI</name></cpp:macro> <cpp:value>0x8937</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_23_ATI</name></cpp:macro> <cpp:value>0x8938</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_24_ATI</name></cpp:macro> <cpp:value>0x8939</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_25_ATI</name></cpp:macro> <cpp:value>0x893A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_26_ATI</name></cpp:macro> <cpp:value>0x893B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_27_ATI</name></cpp:macro> <cpp:value>0x893C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_28_ATI</name></cpp:macro> <cpp:value>0x893D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_29_ATI</name></cpp:macro> <cpp:value>0x893E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_30_ATI</name></cpp:macro> <cpp:value>0x893F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_31_ATI</name></cpp:macro> <cpp:value>0x8940</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_0_ATI</name></cpp:macro> <cpp:value>0x8941</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_1_ATI</name></cpp:macro> <cpp:value>0x8942</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_2_ATI</name></cpp:macro> <cpp:value>0x8943</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_3_ATI</name></cpp:macro> <cpp:value>0x8944</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_4_ATI</name></cpp:macro> <cpp:value>0x8945</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_5_ATI</name></cpp:macro> <cpp:value>0x8946</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_6_ATI</name></cpp:macro> <cpp:value>0x8947</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_7_ATI</name></cpp:macro> <cpp:value>0x8948</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_8_ATI</name></cpp:macro> <cpp:value>0x8949</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_9_ATI</name></cpp:macro> <cpp:value>0x894A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_10_ATI</name></cpp:macro> <cpp:value>0x894B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_11_ATI</name></cpp:macro> <cpp:value>0x894C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_12_ATI</name></cpp:macro> <cpp:value>0x894D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_13_ATI</name></cpp:macro> <cpp:value>0x894E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_14_ATI</name></cpp:macro> <cpp:value>0x894F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_15_ATI</name></cpp:macro> <cpp:value>0x8950</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_16_ATI</name></cpp:macro> <cpp:value>0x8951</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_17_ATI</name></cpp:macro> <cpp:value>0x8952</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_18_ATI</name></cpp:macro> <cpp:value>0x8953</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_19_ATI</name></cpp:macro> <cpp:value>0x8954</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_20_ATI</name></cpp:macro> <cpp:value>0x8955</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_21_ATI</name></cpp:macro> <cpp:value>0x8956</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_22_ATI</name></cpp:macro> <cpp:value>0x8957</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_23_ATI</name></cpp:macro> <cpp:value>0x8958</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_24_ATI</name></cpp:macro> <cpp:value>0x8959</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_25_ATI</name></cpp:macro> <cpp:value>0x895A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_26_ATI</name></cpp:macro> <cpp:value>0x895B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_27_ATI</name></cpp:macro> <cpp:value>0x895C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_28_ATI</name></cpp:macro> <cpp:value>0x895D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_29_ATI</name></cpp:macro> <cpp:value>0x895E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_30_ATI</name></cpp:macro> <cpp:value>0x895F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_31_ATI</name></cpp:macro> <cpp:value>0x8960</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MOV_ATI</name></cpp:macro> <cpp:value>0x8961</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_ATI</name></cpp:macro> <cpp:value>0x8963</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MUL_ATI</name></cpp:macro> <cpp:value>0x8964</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUB_ATI</name></cpp:macro> <cpp:value>0x8965</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_ATI</name></cpp:macro> <cpp:value>0x8966</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT4_ATI</name></cpp:macro> <cpp:value>0x8967</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAD_ATI</name></cpp:macro> <cpp:value>0x8968</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LERP_ATI</name></cpp:macro> <cpp:value>0x8969</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CND_ATI</name></cpp:macro> <cpp:value>0x896A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CND0_ATI</name></cpp:macro> <cpp:value>0x896B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT2_ADD_ATI</name></cpp:macro> <cpp:value>0x896C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_INTERPOLATOR_ATI</name></cpp:macro> <cpp:value>0x896D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FRAGMENT_REGISTERS_ATI</name></cpp:macro> <cpp:value>0x896E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FRAGMENT_CONSTANTS_ATI</name></cpp:macro> <cpp:value>0x896F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_PASSES_ATI</name></cpp:macro> <cpp:value>0x8970</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INSTRUCTIONS_PER_PASS_ATI</name></cpp:macro> <cpp:value>0x8971</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INSTRUCTIONS_TOTAL_ATI</name></cpp:macro> <cpp:value>0x8972</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI</name></cpp:macro> <cpp:value>0x8973</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_LOOPBACK_COMPONENTS_ATI</name></cpp:macro> <cpp:value>0x8974</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ALPHA_PAIRING_ATI</name></cpp:macro> <cpp:value>0x8975</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STR_ATI</name></cpp:macro> <cpp:value>0x8976</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STQ_ATI</name></cpp:macro> <cpp:value>0x8977</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STR_DR_ATI</name></cpp:macro> <cpp:value>0x8978</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STQ_DQ_ATI</name></cpp:macro> <cpp:value>0x8979</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STRQ_ATI</name></cpp:macro> <cpp:value>0x897A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STRQ_DQ_ATI</name></cpp:macro> <cpp:value>0x897B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_BIT_ATI</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_8X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIT_ATI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUARTER_BIT_ATI</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EIGHTH_BIT_ATI</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SATURATE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMP_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BIAS_BIT_ATI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_pn_triangles</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_pn_triangles</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_pn_triangles</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_ATI</name></cpp:macro> <cpp:value>0x87F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI</name></cpp:macro> <cpp:value>0x87F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_POINT_MODE_ATI</name></cpp:macro> <cpp:value>0x87F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_NORMAL_MODE_ATI</name></cpp:macro> <cpp:value>0x87F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI</name></cpp:macro> <cpp:value>0x87F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI</name></cpp:macro> <cpp:value>0x87F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI</name></cpp:macro> <cpp:value>0x87F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI</name></cpp:macro> <cpp:value>0x87F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI</name></cpp:macro> <cpp:value>0x87F8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_vertex_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_ATI</name></cpp:macro> <cpp:value>0x8760</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_ATI</name></cpp:macro> <cpp:value>0x8761</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESERVE_ATI</name></cpp:macro> <cpp:value>0x8762</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCARD_ATI</name></cpp:macro> <cpp:value>0x8763</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_BUFFER_SIZE_ATI</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_BUFFER_USAGE_ATI</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_OBJECT_BUFFER_ATI</name></cpp:macro> <cpp:value>0x8766</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_OBJECT_OFFSET_ATI</name></cpp:macro> <cpp:value>0x8767</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_vertex_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_EXT</name></cpp:macro> <cpp:value>0x8780</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8781</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_INDEX_EXT</name></cpp:macro> <cpp:value>0x8782</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_NEGATE_EXT</name></cpp:macro> <cpp:value>0x8783</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_DOT3_EXT</name></cpp:macro> <cpp:value>0x8784</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_DOT4_EXT</name></cpp:macro> <cpp:value>0x8785</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MUL_EXT</name></cpp:macro> <cpp:value>0x8786</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_ADD_EXT</name></cpp:macro> <cpp:value>0x8787</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MADD_EXT</name></cpp:macro> <cpp:value>0x8788</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_FRAC_EXT</name></cpp:macro> <cpp:value>0x8789</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MAX_EXT</name></cpp:macro> <cpp:value>0x878A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MIN_EXT</name></cpp:macro> <cpp:value>0x878B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SET_GE_EXT</name></cpp:macro> <cpp:value>0x878C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SET_LT_EXT</name></cpp:macro> <cpp:value>0x878D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_CLAMP_EXT</name></cpp:macro> <cpp:value>0x878E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_FLOOR_EXT</name></cpp:macro> <cpp:value>0x878F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_ROUND_EXT</name></cpp:macro> <cpp:value>0x8790</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_EXP_BASE_2_EXT</name></cpp:macro> <cpp:value>0x8791</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_LOG_BASE_2_EXT</name></cpp:macro> <cpp:value>0x8792</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_POWER_EXT</name></cpp:macro> <cpp:value>0x8793</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_RECIP_EXT</name></cpp:macro> <cpp:value>0x8794</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_RECIP_SQRT_EXT</name></cpp:macro> <cpp:value>0x8795</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SUB_EXT</name></cpp:macro> <cpp:value>0x8796</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_CROSS_PRODUCT_EXT</name></cpp:macro> <cpp:value>0x8797</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MULTIPLY_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8798</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MOV_EXT</name></cpp:macro> <cpp:value>0x8799</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_VERTEX_EXT</name></cpp:macro> <cpp:value>0x879A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_COLOR0_EXT</name></cpp:macro> <cpp:value>0x879B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_COLOR1_EXT</name></cpp:macro> <cpp:value>0x879C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD0_EXT</name></cpp:macro> <cpp:value>0x879D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD1_EXT</name></cpp:macro> <cpp:value>0x879E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD2_EXT</name></cpp:macro> <cpp:value>0x879F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD3_EXT</name></cpp:macro> <cpp:value>0x87A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD4_EXT</name></cpp:macro> <cpp:value>0x87A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD5_EXT</name></cpp:macro> <cpp:value>0x87A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD6_EXT</name></cpp:macro> <cpp:value>0x87A3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD7_EXT</name></cpp:macro> <cpp:value>0x87A4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD8_EXT</name></cpp:macro> <cpp:value>0x87A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD9_EXT</name></cpp:macro> <cpp:value>0x87A6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD10_EXT</name></cpp:macro> <cpp:value>0x87A7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD11_EXT</name></cpp:macro> <cpp:value>0x87A8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD12_EXT</name></cpp:macro> <cpp:value>0x87A9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD13_EXT</name></cpp:macro> <cpp:value>0x87AA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD14_EXT</name></cpp:macro> <cpp:value>0x87AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD15_EXT</name></cpp:macro> <cpp:value>0x87AC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD16_EXT</name></cpp:macro> <cpp:value>0x87AD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD17_EXT</name></cpp:macro> <cpp:value>0x87AE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD18_EXT</name></cpp:macro> <cpp:value>0x87AF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD19_EXT</name></cpp:macro> <cpp:value>0x87B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD20_EXT</name></cpp:macro> <cpp:value>0x87B1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD21_EXT</name></cpp:macro> <cpp:value>0x87B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD22_EXT</name></cpp:macro> <cpp:value>0x87B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD23_EXT</name></cpp:macro> <cpp:value>0x87B4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD24_EXT</name></cpp:macro> <cpp:value>0x87B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD25_EXT</name></cpp:macro> <cpp:value>0x87B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD26_EXT</name></cpp:macro> <cpp:value>0x87B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD27_EXT</name></cpp:macro> <cpp:value>0x87B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD28_EXT</name></cpp:macro> <cpp:value>0x87B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD29_EXT</name></cpp:macro> <cpp:value>0x87BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD30_EXT</name></cpp:macro> <cpp:value>0x87BB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD31_EXT</name></cpp:macro> <cpp:value>0x87BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_FOG_EXT</name></cpp:macro> <cpp:value>0x87BD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALAR_EXT</name></cpp:macro> <cpp:value>0x87BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VECTOR_EXT</name></cpp:macro> <cpp:value>0x87BF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_EXT</name></cpp:macro> <cpp:value>0x87C0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_EXT</name></cpp:macro> <cpp:value>0x87C1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_EXT</name></cpp:macro> <cpp:value>0x87C2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_EXT</name></cpp:macro> <cpp:value>0x87C3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_EXT</name></cpp:macro> <cpp:value>0x87C4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87C5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87C6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87C7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87C8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87C9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87CA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87CB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87CC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87CD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87CE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87CF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87D0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87D1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87D2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87D3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_OPTIMIZED_EXT</name></cpp:macro> <cpp:value>0x87D4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_X_EXT</name></cpp:macro> <cpp:value>0x87D5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Y_EXT</name></cpp:macro> <cpp:value>0x87D6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z_EXT</name></cpp:macro> <cpp:value>0x87D7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_W_EXT</name></cpp:macro> <cpp:value>0x87D8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_X_EXT</name></cpp:macro> <cpp:value>0x87D9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_Y_EXT</name></cpp:macro> <cpp:value>0x87DA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_Z_EXT</name></cpp:macro> <cpp:value>0x87DB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_W_EXT</name></cpp:macro> <cpp:value>0x87DC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO_EXT</name></cpp:macro> <cpp:value>0x87DD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_EXT</name></cpp:macro> <cpp:value>0x87DE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_ONE_EXT</name></cpp:macro> <cpp:value>0x87DF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMALIZED_RANGE_EXT</name></cpp:macro> <cpp:value>0x87E0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_RANGE_EXT</name></cpp:macro> <cpp:value>0x87E1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_EXT</name></cpp:macro> <cpp:value>0x87E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MVP_MATRIX_EXT</name></cpp:macro> <cpp:value>0x87E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87E4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87E5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x87E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x87E7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x87E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x87E9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87EA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87ED</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_streams</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_streams</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_vertex_streams</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_STREAMS_ATI</name></cpp:macro> <cpp:value>0x876B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM0_ATI</name></cpp:macro> <cpp:value>0x876C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM1_ATI</name></cpp:macro> <cpp:value>0x876D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM2_ATI</name></cpp:macro> <cpp:value>0x876E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM3_ATI</name></cpp:macro> <cpp:value>0x876F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM4_ATI</name></cpp:macro> <cpp:value>0x8770</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM5_ATI</name></cpp:macro> <cpp:value>0x8771</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM6_ATI</name></cpp:macro> <cpp:value>0x8772</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_STREAM7_ATI</name></cpp:macro> <cpp:value>0x8773</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SOURCE_ATI</name></cpp:macro> <cpp:value>0x8774</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_element_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_element_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_element_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_ATI</name></cpp:macro> <cpp:value>0x8768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_TYPE_ATI</name></cpp:macro> <cpp:value>0x8769</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_POINTER_ATI</name></cpp:macro> <cpp:value>0x876A</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_mesh_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_mesh_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUN_mesh_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUAD_MESH_SUN</name></cpp:macro> <cpp:value>0x8614</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_MESH_SUN</name></cpp:macro> <cpp:value>0x8615</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SUN_slice_accum</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUN_slice_accum</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_SUN_slice_accum</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLICE_ACCUM_SUN</name></cpp:macro> <cpp:value>0x85CC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_multisample_filter_hint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_multisample_filter_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_multisample_filter_hint</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_FILTER_HINT_NV</name></cpp:macro> <cpp:value>0x8534</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_depth_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_depth_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_depth_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP_NV</name></cpp:macro> <cpp:value>0x864F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_occlusion_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_occlusion_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_occlusion_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_COUNTER_BITS_NV</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_OCCLUSION_QUERY_ID_NV</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_COUNT_NV</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_COUNT_AVAILABLE_NV</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_point_sprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_point_sprite</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_point_sprite</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_NV</name></cpp:macro> <cpp:value>0x8861</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COORD_REPLACE_NV</name></cpp:macro> <cpp:value>0x8862</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_R_MODE_NV</name></cpp:macro> <cpp:value>0x8863</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_shader3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_shader3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_shader3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8850</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV</name></cpp:macro> <cpp:value>0x8851</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x8852</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV</name></cpp:macro> <cpp:value>0x8853</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8854</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x8855</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8856</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV</name></cpp:macro> <cpp:value>0x8857</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_HILO_TEXTURE_2D_NV</name></cpp:macro> <cpp:value>0x8858</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_RGB_TEXTURE_3D_NV</name></cpp:macro> <cpp:value>0x8859</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV</name></cpp:macro> <cpp:value>0x885A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_PASS_THROUGH_NV</name></cpp:macro> <cpp:value>0x885B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_TEXTURE_1D_NV</name></cpp:macro> <cpp:value>0x885C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV</name></cpp:macro> <cpp:value>0x885D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HILO8_NV</name></cpp:macro> <cpp:value>0x885E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_HILO8_NV</name></cpp:macro> <cpp:value>0x885F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FORCE_BLUE_TO_ONE_NV</name></cpp:macro> <cpp:value>0x8860</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_stencil_two_side</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_stencil_two_side</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_stencil_two_side</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TEST_TWO_SIDE_EXT</name></cpp:macro> <cpp:value>0x8910</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_STENCIL_FACE_EXT</name></cpp:macro> <cpp:value>0x8911</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_text_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_text_fragment_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_text_fragment_shader</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXT_FRAGMENT_SHADER_ATI</name></cpp:macro> <cpp:value>0x8200</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_client_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_client_storage</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_client_storage</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_CLIENT_STORAGE_APPLE</name></cpp:macro> <cpp:value>0x85B2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_element_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_element_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_element_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_APPLE</name></cpp:macro> <cpp:value>0x8768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_TYPE_APPLE</name></cpp:macro> <cpp:value>0x8769</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_POINTER_APPLE</name></cpp:macro> <cpp:value>0x876A</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_fence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_fence</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_fence</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_PIXELS_APPLE</name></cpp:macro> <cpp:value>0x8A0A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_APPLE</name></cpp:macro> <cpp:value>0x8A0B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_vertex_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_vertex_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING_APPLE</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_vertex_array_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_vertex_array_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_vertex_array_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_APPLE</name></cpp:macro> <cpp:value>0x851D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE</name></cpp:macro> <cpp:value>0x851E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_STORAGE_HINT_APPLE</name></cpp:macro> <cpp:value>0x851F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_RANGE_POINTER_APPLE</name></cpp:macro> <cpp:value>0x8521</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_CACHED_APPLE</name></cpp:macro> <cpp:value>0x85BE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_SHARED_APPLE</name></cpp:macro> <cpp:value>0x85BF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_ycbcr_422</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_ycbcr_422</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_ycbcr_422</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBCR_422_APPLE</name></cpp:macro> <cpp:value>0x85B9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_APPLE</name></cpp:macro> <cpp:value>0x85BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_REV_APPLE</name></cpp:macro> <cpp:value>0x85BB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_S3_s3tc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_S3_s3tc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_S3_s3tc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_S3TC</name></cpp:macro> <cpp:value>0x83A0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4_S3TC</name></cpp:macro> <cpp:value>0x83A1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_S3TC</name></cpp:macro> <cpp:value>0x83A2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_S3TC</name></cpp:macro> <cpp:value>0x83A3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_draw_buffers</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_draw_buffers</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_ATI</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_ATI</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_ATI</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_ATI</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_ATI</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_ATI</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_ATI</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_ATI</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_ATI</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_ATI</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_ATI</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_ATI</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_ATI</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_ATI</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_ATI</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_ATI</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_ATI</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_texture_env_combine3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_texture_env_combine3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_texture_env_combine3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE_ADD_ATI</name></cpp:macro> <cpp:value>0x8744</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE_SIGNED_ADD_ATI</name></cpp:macro> <cpp:value>0x8745</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MODULATE_SUBTRACT_ATI</name></cpp:macro> <cpp:value>0x8746</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_texture_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_texture_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_texture_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT32_ATI</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT16_ATI</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_float_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_float_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_float_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_R_NV</name></cpp:macro> <cpp:value>0x8880</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RG_NV</name></cpp:macro> <cpp:value>0x8881</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGB_NV</name></cpp:macro> <cpp:value>0x8882</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA_NV</name></cpp:macro> <cpp:value>0x8883</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_R16_NV</name></cpp:macro> <cpp:value>0x8884</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_R32_NV</name></cpp:macro> <cpp:value>0x8885</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RG16_NV</name></cpp:macro> <cpp:value>0x8886</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RG32_NV</name></cpp:macro> <cpp:value>0x8887</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGB16_NV</name></cpp:macro> <cpp:value>0x8888</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGB32_NV</name></cpp:macro> <cpp:value>0x8889</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA16_NV</name></cpp:macro> <cpp:value>0x888A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA32_NV</name></cpp:macro> <cpp:value>0x888B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FLOAT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x888C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_CLEAR_COLOR_VALUE_NV</name></cpp:macro> <cpp:value>0x888D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_RGBA_MODE_NV</name></cpp:macro> <cpp:value>0x888E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_fragment_program</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV</name></cpp:macro> <cpp:value>0x8868</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8870</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_NV</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_NV</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_BINDING_NV</name></cpp:macro> <cpp:value>0x8873</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_STRING_NV</name></cpp:macro> <cpp:value>0x8874</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_half_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_half_float</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>short</name></type> <name>GLhalfNV</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT_NV</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_pixel_data_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_pixel_data_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_pixel_data_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_PIXEL_DATA_RANGE_NV</name></cpp:macro> <cpp:value>0x8878</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXEL_DATA_RANGE_NV</name></cpp:macro> <cpp:value>0x8879</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV</name></cpp:macro> <cpp:value>0x887A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXEL_DATA_RANGE_LENGTH_NV</name></cpp:macro> <cpp:value>0x887B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV</name></cpp:macro> <cpp:value>0x887C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_PIXEL_DATA_RANGE_POINTER_NV</name></cpp:macro> <cpp:value>0x887D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_primitive_restart</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_primitive_restart</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_primitive_restart</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_NV</name></cpp:macro> <cpp:value>0x8558</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_INDEX_NV</name></cpp:macro> <cpp:value>0x8559</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_expand_normal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_expand_normal</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_expand_normal</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_UNSIGNED_REMAP_MODE_NV</name></cpp:macro> <cpp:value>0x888F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_map_object_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_map_object_buffer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_map_object_buffer</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_separate_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_separate_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC_ATI</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL_ATI</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_attrib_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_attrib_array_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_vertex_attrib_array_object</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_byte_coordinates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_byte_coordinates</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OES_byte_coordinates</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_fixed_point</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_fixed_point</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OES_fixed_point</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>GLfixed</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>GLclampx</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_OES</name></cpp:macro> <cpp:value>0x140C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_single_precision</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_single_precision</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OES_single_precision</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_compressed_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_compressed_paletted_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OES_compressed_paletted_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGB8_OES</name></cpp:macro> <cpp:value>0x8B90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGBA8_OES</name></cpp:macro> <cpp:value>0x8B91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_R5_G6_B5_OES</name></cpp:macro> <cpp:value>0x8B92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGBA4_OES</name></cpp:macro> <cpp:value>0x8B93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8B94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGB8_OES</name></cpp:macro> <cpp:value>0x8B95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGBA8_OES</name></cpp:macro> <cpp:value>0x8B96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_R5_G6_B5_OES</name></cpp:macro> <cpp:value>0x8B97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGBA4_OES</name></cpp:macro> <cpp:value>0x8B98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8B99</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_read_format</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_read_format</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OES_read_format</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_TYPE_OES</name></cpp:macro> <cpp:value>0x8B9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES</name></cpp:macro> <cpp:value>0x8B9B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_query_matrix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_query_matrix</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_OES_query_matrix</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_framebuffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_OES</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_OES</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_OES</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_OES</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB565_OES</name></cpp:macro> <cpp:value>0x8D62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1_OES</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4_OES</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8_OES</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH_OES</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT_OES</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT_OES</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE_OES</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE_OES</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE_OES</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE_OES</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE_OES</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE_OES</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0_OES</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT_OES</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT_OES</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GL_NONE_OES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE_OES</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES</name></cpp:macro> <cpp:value>0x8CD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES</name></cpp:macro> <cpp:value>0x8CDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED_OES</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING_OES</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING_OES</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE_OES</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION_OES</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_depth24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_depth24</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEPTH_COMPONENT24_OES</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_depth_bounds_test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_depth_bounds_test</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_depth_bounds_test</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BOUNDS_TEST_EXT</name></cpp:macro> <cpp:value>0x8890</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BOUNDS_EXT</name></cpp:macro> <cpp:value>0x8891</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_mirror_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_mirror_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_mirror_clamp</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_EXT</name></cpp:macro> <cpp:value>0x8742</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_EDGE_EXT</name></cpp:macro> <cpp:value>0x8743</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRROR_CLAMP_TO_BORDER_EXT</name></cpp:macro> <cpp:value>0x8912</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_equation_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_equation_separate</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_blend_equation_separate</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA_EXT</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_pack_invert</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_pack_invert</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_MESA_pack_invert</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_INVERT_MESA</name></cpp:macro> <cpp:value>0x8758</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESA_ycbcr_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESA_ycbcr_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_MESA_ycbcr_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBCR_MESA</name></cpp:macro> <cpp:value>0x8757</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_MESA</name></cpp:macro> <cpp:value>0x85BA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_REV_MESA</name></cpp:macro> <cpp:value>0x85BB</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_pixel_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_pixel_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_pixel_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_EXT</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_EXT</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program_option</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program_option</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_fragment_program_option</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_fragment_program2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV</name></cpp:macro> <cpp:value>0x88F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_CALL_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_IF_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOOP_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOOP_COUNT_NV</name></cpp:macro> <cpp:value>0x88F8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program2_option</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program2_option</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_program2_option</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV</name></cpp:macro> <cpp:value>0x88F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_CALL_DEPTH_NV</name></cpp:macro> <cpp:value>0x88F5</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_program3</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_dxt1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_dxt1</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_compression_dxt1</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_GL_EXT_texture_compression_s3tc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_framebuffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_EXT</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX_EXT</name></cpp:macro> <cpp:value>0x8D45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1_EXT</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4_EXT</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8_EXT</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16_EXT</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0_EXT</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1_EXT</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2_EXT</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3_EXT</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4_EXT</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5_EXT</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6_EXT</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7_EXT</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8_EXT</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9_EXT</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10_EXT</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11_EXT</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12_EXT</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13_EXT</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14_EXT</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15_EXT</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE_EXT</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT</name></cpp:macro> <cpp:value>0x8CD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT</name></cpp:macro> <cpp:value>0x8CDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED_EXT</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_STATUS_ERROR_EXT</name></cpp:macro> <cpp:value>0x8CDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS_EXT</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION_EXT</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_GREMEDY_string_marker</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREMEDY_string_marker</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_GREMEDY_string_marker</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_packed_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_packed_depth_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_packed_depth_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_EXT</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8_EXT</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8_EXT</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STENCIL_SIZE_EXT</name></cpp:macro> <cpp:value>0x88F1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_stencil_clear_tag</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_stencil_clear_tag</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_stencil_clear_tag</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TAG_BITS_EXT</name></cpp:macro> <cpp:value>0x88F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_CLEAR_TAG_VALUE_EXT</name></cpp:macro> <cpp:value>0x88F3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_sRGB</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_sRGB</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_EXT</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_EXT</name></cpp:macro> <cpp:value>0x8C46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8C47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_EXT</name></cpp:macro> <cpp:value>0x8C4A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x8C4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x8C4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x8C4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x8C4F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_blit</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_framebuffer_blit</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>GL_FRAMEBUFFER_BINDING_EXT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_framebuffer_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MESAX_texture_stack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MESAX_texture_stack</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_MESAX_texture_stack</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_STACK_MESAX</name></cpp:macro> <cpp:value>0x8759</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_STACK_MESAX</name></cpp:macro> <cpp:value>0x875A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_STACK_MESAX</name></cpp:macro> <cpp:value>0x875B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_STACK_MESAX</name></cpp:macro> <cpp:value>0x875C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_STACK_BINDING_MESAX</name></cpp:macro> <cpp:value>0x875D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_STACK_BINDING_MESAX</name></cpp:macro> <cpp:value>0x875E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_timer_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_timer_query</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_timer_query</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>_MSC_VER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>__int64</name></type> <name>GLint64EXT</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>GLuint64EXT</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int64_t</name></type> <name>GLint64EXT</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64EXT</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIME_ELAPSED_EXT</name></cpp:macro> <cpp:value>0x88BF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_gpu_program_parameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_gpu_program_parameters</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_gpu_program_parameters</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_flush_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_flush_buffer_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_flush_buffer_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SERIALIZED_MODIFY_APPLE</name></cpp:macro> <cpp:value>0x8A12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_FLUSHING_UNMAP_APPLE</name></cpp:macro> <cpp:value>0x8A13</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_bindable_uniform</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_bindable_uniform</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_bindable_uniform</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT</name></cpp:macro> <cpp:value>0x8DE2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT</name></cpp:macro> <cpp:value>0x8DE3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT</name></cpp:macro> <cpp:value>0x8DE4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_BINDABLE_UNIFORM_SIZE_EXT</name></cpp:macro> <cpp:value>0x8DED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8DEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DEE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_buffers2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_buffers2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_draw_buffers2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_instanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_instanced</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_draw_instanced</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_sRGB</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_framebuffer_sRGB</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB_EXT</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB_CAPABLE_EXT</name></cpp:macro> <cpp:value>0x8DBA</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_geometry_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_geometry_shader4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_geometry_shader4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER_EXT</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT_EXT</name></cpp:macro> <cpp:value>0x8DDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8DDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8DDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_VARYING_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DDE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT</name></cpp:macro> <cpp:value>0x8DA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE_EXT</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_gpu_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_gpu_shader4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_gpu_shader4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2_EXT</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3_EXT</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4_EXT</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_EXT</name></cpp:macro> <cpp:value>0x8DC9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_EXT</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D_EXT</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE_EXT</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x8DCD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DD0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_EXT</name></cpp:macro> <cpp:value>0x8DD1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_EXT</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D_EXT</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE_EXT</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT</name></cpp:macro> <cpp:value>0x8DD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DD6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8DD8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_packed_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_packed_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_packed_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F_EXT</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV_EXT</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_SIGNED_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8C3C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_array</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS_EXT</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8C2E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_latc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_latc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_compression_latc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_LATC1_EXT</name></cpp:macro> <cpp:value>0x8C70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT</name></cpp:macro> <cpp:value>0x8C71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT</name></cpp:macro> <cpp:value>0x8C72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT</name></cpp:macro> <cpp:value>0x8C73</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_rgtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_rgtc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_compression_rgtc</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_RGTC1_EXT</name></cpp:macro> <cpp:value>0x8DBB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_RGTC1_EXT</name></cpp:macro> <cpp:value>0x8DBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_GREEN_RGTC2_EXT</name></cpp:macro> <cpp:value>0x8DBD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT</name></cpp:macro> <cpp:value>0x8DBE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_integer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_integer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_integer</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER_MODE_EXT</name></cpp:macro> <cpp:value>0x8D9E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI_EXT</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI_EXT</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32UI_EXT</name></cpp:macro> <cpp:value>0x8D72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32UI_EXT</name></cpp:macro> <cpp:value>0x8D73</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32UI_EXT</name></cpp:macro> <cpp:value>0x8D74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32UI_EXT</name></cpp:macro> <cpp:value>0x8D75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI_EXT</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI_EXT</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16UI_EXT</name></cpp:macro> <cpp:value>0x8D78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16UI_EXT</name></cpp:macro> <cpp:value>0x8D79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16UI_EXT</name></cpp:macro> <cpp:value>0x8D7A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16UI_EXT</name></cpp:macro> <cpp:value>0x8D7B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI_EXT</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI_EXT</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8UI_EXT</name></cpp:macro> <cpp:value>0x8D7E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8UI_EXT</name></cpp:macro> <cpp:value>0x8D7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8UI_EXT</name></cpp:macro> <cpp:value>0x8D80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA8UI_EXT</name></cpp:macro> <cpp:value>0x8D81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I_EXT</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I_EXT</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32I_EXT</name></cpp:macro> <cpp:value>0x8D84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32I_EXT</name></cpp:macro> <cpp:value>0x8D85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32I_EXT</name></cpp:macro> <cpp:value>0x8D86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32I_EXT</name></cpp:macro> <cpp:value>0x8D87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I_EXT</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I_EXT</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16I_EXT</name></cpp:macro> <cpp:value>0x8D8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16I_EXT</name></cpp:macro> <cpp:value>0x8D8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16I_EXT</name></cpp:macro> <cpp:value>0x8D8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16I_EXT</name></cpp:macro> <cpp:value>0x8D8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I_EXT</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I_EXT</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8I_EXT</name></cpp:macro> <cpp:value>0x8D90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8I_EXT</name></cpp:macro> <cpp:value>0x8D91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8I_EXT</name></cpp:macro> <cpp:value>0x8D92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA8I_EXT</name></cpp:macro> <cpp:value>0x8D93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_INTEGER_EXT</name></cpp:macro> <cpp:value>0x8D9D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_shared_exponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_shared_exponent</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_shared_exponent</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5_EXT</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV_EXT</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHARED_SIZE_EXT</name></cpp:macro> <cpp:value>0x8C3F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_depth_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_depth_buffer_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_depth_buffer_float</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F_NV</name></cpp:macro> <cpp:value>0x8DAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8_NV</name></cpp:macro> <cpp:value>0x8DAC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_FLOAT_MODE_NV</name></cpp:macro> <cpp:value>0x8DAF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fragment_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fragment_program4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_fragment_program4</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_framebuffer_multisample_coverage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_framebuffer_multisample_coverage</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_framebuffer_multisample_coverage</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_COLOR_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8E10</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_geometry_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_geometry_program4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_geometry_program4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_PROGRAM_NV</name></cpp:macro> <cpp:value>0x8C26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_OUTPUT_VERTICES_NV</name></cpp:macro> <cpp:value>0x8C27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8C28</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_EXT_geometry_shader4</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT_EXT</name></cpp:macro> <cpp:value>0x8DDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8DDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8DDC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY_EXT</name></cpp:macro> <cpp:value>0xD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT</name></cpp:macro> <cpp:value>0x8DA9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE_EXT</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_gpu_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_gpu_program4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_gpu_program4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET_EXT</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ATTRIB_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8906</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_RESULT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8907</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8908</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_RESULT_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8909</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8DA5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_GENERIC_RESULTS_NV</name></cpp:macro> <cpp:value>0x8DA6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_parameter_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_parameter_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_parameter_buffer_object</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV</name></cpp:macro> <cpp:value>0x8DA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV</name></cpp:macro> <cpp:value>0x8DA1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8DA2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8DA3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV</name></cpp:macro> <cpp:value>0x8DA4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_transform_feedback</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_transform_feedback</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_transform_feedback</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_NV</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START_NV</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_RECORD_NV</name></cpp:macro> <cpp:value>0x8C86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED_NV</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD_NV</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_ATTRIBS_NV</name></cpp:macro> <cpp:value>0x8C7E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VARYINGS_NV</name></cpp:macro> <cpp:value>0x8C81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_VARYING_MAX_LENGTH_NV</name></cpp:macro> <cpp:value>0x8C82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS_NV</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_PRIMARY_COLOR_NV</name></cpp:macro> <cpp:value>0x8C77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x8C78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_NV</name></cpp:macro> <cpp:value>0x8C79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE_NV</name></cpp:macro> <cpp:value>0x8C7A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ID_NV</name></cpp:macro> <cpp:value>0x8C7B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_ID_NV</name></cpp:macro> <cpp:value>0x8C7C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERIC_ATTRIB_NV</name></cpp:macro> <cpp:value>0x8C7D</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_NV_register_combiners</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_NV</name></cpp:macro> <cpp:value>0x852D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_EXT_gpu_shader4</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2_EXT</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3_EXT</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4_EXT</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_program4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_program4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_program4</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>GL_EXT_vertex_shader4</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_GREMEDY_frame_terminator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREMEDY_frame_terminator</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_GREMEDY_frame_terminator</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_conditional_render</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_conditional_render</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_conditional_render</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_WAIT_NV</name></cpp:macro> <cpp:value>0x8E13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_NO_WAIT_NV</name></cpp:macro> <cpp:value>0x8E14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_WAIT_NV</name></cpp:macro> <cpp:value>0x8E15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_NO_WAIT_NV</name></cpp:macro> <cpp:value>0x8E16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_present_video</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_present_video</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_present_video</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAME_NV</name></cpp:macro> <cpp:value>0x8E26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIELDS_NV</name></cpp:macro> <cpp:value>0x8E27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_TIME_NV</name></cpp:macro> <cpp:value>0x8E28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FILL_STREAMS_NV</name></cpp:macro> <cpp:value>0x8E29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESENT_TIME_NV</name></cpp:macro> <cpp:value>0x8E2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESENT_DURATION_NV</name></cpp:macro> <cpp:value>0x8E2B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_transform_feedback</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_transform_feedback</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_transform_feedback</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS_EXT</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS_EXT</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED_EXT</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD_EXT</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS_EXT</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_direct_state_access</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_direct_state_access</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_direct_state_access</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8E2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_PROGRAM_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8E2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_MATRIX_STACK_DEPTH_EXT</name></cpp:macro> <cpp:value>0x8E2F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_swizzle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_swizzle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_swizzle</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R_EXT</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G_EXT</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B_EXT</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A_EXT</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA_EXT</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_explicit_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_explicit_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_explicit_multisample</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_POSITION_NV</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_NV</name></cpp:macro> <cpp:value>0x8E51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE_NV</name></cpp:macro> <cpp:value>0x8E52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV</name></cpp:macro> <cpp:value>0x8E54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLE_MASK_WORDS_NV</name></cpp:macro> <cpp:value>0x8E59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV</name></cpp:macro> <cpp:value>0x8E58</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_transform_feedback2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_transform_feedback2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_transform_feedback2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_NV</name></cpp:macro> <cpp:value>0x8E22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV</name></cpp:macro> <cpp:value>0x8E23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV</name></cpp:macro> <cpp:value>0x8E24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BINDING_NV</name></cpp:macro> <cpp:value>0x8E25</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_meminfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_meminfo</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_ATI_meminfo</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VBO_FREE_MEMORY_ATI</name></cpp:macro> <cpp:value>0x87FB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FREE_MEMORY_ATI</name></cpp:macro> <cpp:value>0x87FC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_FREE_MEMORY_ATI</name></cpp:macro> <cpp:value>0x87FD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_performance_monitor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_performance_monitor</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_performance_monitor</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNTER_TYPE_AMD</name></cpp:macro> <cpp:value>0x8BC0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNTER_RANGE_AMD</name></cpp:macro> <cpp:value>0x8BC1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_AMD</name></cpp:macro> <cpp:value>0x8BC2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERCENTAGE_AMD</name></cpp:macro> <cpp:value>0x8BC3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_AVAILABLE_AMD</name></cpp:macro> <cpp:value>0x8BC4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_SIZE_AMD</name></cpp:macro> <cpp:value>0x8BC5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_AMD</name></cpp:macro> <cpp:value>0x8BC6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_texture_texture4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_texture_texture4</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_texture_texture4</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_vertex_shader_tesselator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_vertex_shader_tesselator</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_vertex_shader_tesselator</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESSELLATION_MODE_AMD</name></cpp:macro> <cpp:value>0x9004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TESSELLATION_FACTOR_AMD</name></cpp:macro> <cpp:value>0x9005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCRETE_AMD</name></cpp:macro> <cpp:value>0x9006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTINUOUS_AMD</name></cpp:macro> <cpp:value>0x9007</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_provoking_vertex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_provoking_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_provoking_vertex</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT</name></cpp:macro> <cpp:value>0x8E4C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_VERTEX_CONVENTION_EXT</name></cpp:macro> <cpp:value>0x8E4D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VERTEX_CONVENTION_EXT</name></cpp:macro> <cpp:value>0x8E4E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROVOKING_VERTEX_EXT</name></cpp:macro> <cpp:value>0x8E4F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_snorm</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_snorm</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_texture_snorm</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_SNORM</name></cpp:macro> <cpp:value>0x9010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_SNORM</name></cpp:macro> <cpp:value>0x9011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_SNORM</name></cpp:macro> <cpp:value>0x9012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_SNORM</name></cpp:macro> <cpp:value>0x9013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_SNORM</name></cpp:macro> <cpp:value>0x9014</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_SNORM</name></cpp:macro> <cpp:value>0x9015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_SNORM</name></cpp:macro> <cpp:value>0x9016</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8_SNORM</name></cpp:macro> <cpp:value>0x9017</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16_SNORM</name></cpp:macro> <cpp:value>0x9018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_SNORM</name></cpp:macro> <cpp:value>0x9019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_ALPHA16_SNORM</name></cpp:macro> <cpp:value>0x901A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16_SNORM</name></cpp:macro> <cpp:value>0x901B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_draw_buffers_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_draw_buffers_blend</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_draw_buffers_blend</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_texture_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_texture_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_texture_range</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RANGE_LENGTH_APPLE</name></cpp:macro> <cpp:value>0x85B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RANGE_POINTER_APPLE</name></cpp:macro> <cpp:value>0x85B8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STORAGE_HINT_APPLE</name></cpp:macro> <cpp:value>0x85BC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STORAGE_PRIVATE_APPLE</name></cpp:macro> <cpp:value>0x85BD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_float_pixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_float_pixels</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_float_pixels</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_APPLE</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT32_APPLE</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA_FLOAT16_APPLE</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_FLOAT_APPLE</name></cpp:macro> <cpp:value>0x8A0F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_vertex_program_evaluators</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_vertex_program_evaluators</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_vertex_program_evaluators</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_APPLE</name></cpp:macro> <cpp:value>0x8A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_APPLE</name></cpp:macro> <cpp:value>0x8A01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE</name></cpp:macro> <cpp:value>0x8A02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE</name></cpp:macro> <cpp:value>0x8A03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE</name></cpp:macro> <cpp:value>0x8A04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE</name></cpp:macro> <cpp:value>0x8A05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE</name></cpp:macro> <cpp:value>0x8A06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE</name></cpp:macro> <cpp:value>0x8A07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE</name></cpp:macro> <cpp:value>0x8A08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE</name></cpp:macro> <cpp:value>0x8A09</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_aux_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_aux_depth_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_aux_depth_stencil</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AUX_DEPTH_STENCIL_APPLE</name></cpp:macro> <cpp:value>0x8A14</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_object_purgeable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_object_purgeable</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_object_purgeable</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_OBJECT_APPLE</name></cpp:macro> <cpp:value>0x85B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RELEASED_APPLE</name></cpp:macro> <cpp:value>0x8A19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VOLATILE_APPLE</name></cpp:macro> <cpp:value>0x8A1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RETAINED_APPLE</name></cpp:macro> <cpp:value>0x8A1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNDEFINED_APPLE</name></cpp:macro> <cpp:value>0x8A1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PURGEABLE_APPLE</name></cpp:macro> <cpp:value>0x8A1D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_row_bytes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_row_bytes</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_row_bytes</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ROW_BYTES_APPLE</name></cpp:macro> <cpp:value>0x8A15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_BYTES_APPLE</name></cpp:macro> <cpp:value>0x8A16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_rgb_422</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_rgb_422</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_APPLE_rgb_422</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_422_APPLE</name></cpp:macro> <cpp:value>0x8A1F</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_video_capture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_video_capture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_NV</name></cpp:macro> <cpp:value>0x9020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_BINDING_NV</name></cpp:macro> <cpp:value>0x9021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIELD_UPPER_NV</name></cpp:macro> <cpp:value>0x9022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIELD_LOWER_NV</name></cpp:macro> <cpp:value>0x9023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_VIDEO_CAPTURE_STREAMS_NV</name></cpp:macro> <cpp:value>0x9024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV</name></cpp:macro> <cpp:value>0x9025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV</name></cpp:macro> <cpp:value>0x9026</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VIDEO_CAPTURE_STATUS_NV</name></cpp:macro> <cpp:value>0x9027</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_PITCH_NV</name></cpp:macro> <cpp:value>0x9028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_MATRIX_NV</name></cpp:macro> <cpp:value>0x9029</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_MAX_NV</name></cpp:macro> <cpp:value>0x902A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_MIN_NV</name></cpp:macro> <cpp:value>0x902B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_COLOR_CONVERSION_OFFSET_NV</name></cpp:macro> <cpp:value>0x902C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV</name></cpp:macro> <cpp:value>0x902D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PARTIAL_SUCCESS_NV</name></cpp:macro> <cpp:value>0x902E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUCCESS_NV</name></cpp:macro> <cpp:value>0x902F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FAILURE_NV</name></cpp:macro> <cpp:value>0x9030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBYCR8_422_NV</name></cpp:macro> <cpp:value>0x9031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_YCBAYCR8A_4224_NV</name></cpp:macro> <cpp:value>0x9032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV</name></cpp:macro> <cpp:value>0x9033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV</name></cpp:macro> <cpp:value>0x9034</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV</name></cpp:macro> <cpp:value>0x9035</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV</name></cpp:macro> <cpp:value>0x9036</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z4Y12Z4CB12Z4CR12_444_NV</name></cpp:macro> <cpp:value>0x9037</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FRAME_WIDTH_NV</name></cpp:macro> <cpp:value>0x9038</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV</name></cpp:macro> <cpp:value>0x9039</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV</name></cpp:macro> <cpp:value>0x903A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV</name></cpp:macro> <cpp:value>0x903B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV</name></cpp:macro> <cpp:value>0x903C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_separate_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_separate_shader_objects</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_EXT_separate_shader_objects</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_PROGRAM_EXT</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_parameter_buffer_object2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_parameter_buffer_object2</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_parameter_buffer_object2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shader_buffer_load</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shader_buffer_load</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_shader_buffer_load</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_GPU_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SHADER_BUFFER_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F35</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_vertex_buffer_unified_memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_vertex_buffer_unified_memory</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_vertex_buffer_unified_memory</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV</name></cpp:macro> <cpp:value>0x8F1E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_UNIFIED_NV</name></cpp:macro> <cpp:value>0x8F1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_ADDRESS_NV</name></cpp:macro> <cpp:value>0x8F29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F2F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORD_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_LENGTH_NV</name></cpp:macro> <cpp:value>0x8F33</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_barrier</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_barrier</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_NV_texture_barrier</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_shader_stencil_export</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_shader_stencil_export</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_shader_stencil_export</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_seamless_cubemap_per_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_seamless_cubemap_per_texture</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_seamless_cubemap_per_texture</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_conservative_depth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_conservative_depth</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GL_AMD_conservative_depth</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
