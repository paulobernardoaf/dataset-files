<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\debug.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_trace_prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><name>channel</name><operator>,</operator> <name>int</name> <name>level</name><operator>,</operator>

<name>char</name> <specifier>const</specifier> <operator>*</operator><name>file</name><operator>,</operator> <name>int</name> <name>line</name><operator>,</operator> <name>char</name> <specifier>const</specifier> <operator>*</operator><name>function</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_PRINTFUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_trace_suffix</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>msg</name><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_RELEASE_LOGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DEBUG_CHANNEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static char const *__al_debug_channel __attribute__((unused)) = x;</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DEBUG_CHANNEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static char const *__al_debug_channel = x;</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_TRACE_CHANNEL_LEVEL</name><parameter_list>(<parameter><type><name>channel</name></type></parameter>, <parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!_al_trace_prefix(channel, level, __FILE__, __LINE__, __func__) ? (void)0 : _al_trace_suffix</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_TRACE_CHANNEL_LEVEL</name><parameter_list>(<parameter><type><name>channel</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1 ? (void) 0 : _al_trace_suffix</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DEBUG_CHANNEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_TRACE_LEVEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALLEGRO_TRACE_CHANNEL_LEVEL(__al_debug_channel, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DEBUG</name></cpp:macro> <cpp:value>ALLEGRO_TRACE_LEVEL(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_INFO</name></cpp:macro> <cpp:value>ALLEGRO_TRACE_LEVEL(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_WARN</name></cpp:macro> <cpp:value>ALLEGRO_TRACE_LEVEL(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ERROR</name></cpp:macro> <cpp:value>ALLEGRO_TRACE_LEVEL(3)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AL_FUNCPTR</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_user_assert_handler</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><name>expr</name><operator>,</operator> <name>char</name> <specifier>const</specifier> <operator>*</operator><name>file</name><operator>,</operator>

<name>int</name> <name>line</name><operator>,</operator> <name>char</name> <specifier>const</specifier> <operator>*</operator><name>func</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_register_assert_handler</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>void</name> <argument_list>(<argument>*handler</argument>)</argument_list></macro><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><name>expr</name><operator>,</operator>

<name>char</name> <specifier>const</specifier> <operator>*</operator><name>file</name><operator>,</operator> <name>int</name> <name>line</name><operator>,</operator> <name>char</name> <specifier>const</specifier> <operator>*</operator><name>func</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_register_trace_handler</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>handler</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang_analyzer__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ASSERT</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(e)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ASSERT</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(0 &amp;&amp; (e)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ASSERT</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((e) ? (void) 0 : (_al_user_assert_handler) ? _al_user_assert_handler(#e, __FILE__, __LINE__, __func__) : assert(e))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ASSERT_CONCAT_</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ASSERT_CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALLEGRO_ASSERT_CONCAT_(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct ALLEGRO_ASSERT_CONCAT(static_assert_##module##_line_, __LINE__) { unsigned int bf : !!(e); }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_LIB_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALLEGRO_ASSERT(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
