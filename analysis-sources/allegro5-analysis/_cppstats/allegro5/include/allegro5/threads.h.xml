<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\threads.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/altime.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_THREAD</name></name></type> <name>ALLEGRO_THREAD</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_MUTEX</name></name></type> <name>ALLEGRO_MUTEX</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_COND</name></name></type> <name>ALLEGRO_COND</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_THREAD</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_thread</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier><name>proc</name>)<argument_list>(<argument><expr><name>ALLEGRO_THREAD</name> <operator>*</operator><name>thread</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list></call><operator>,</operator> <name>void</name> <operator>*</operator><name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_THREAD</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_thread_with_stacksize</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier><name>proc</name>)<argument_list>(<argument><expr><name>ALLEGRO_THREAD</name> <operator>*</operator><name>thread</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list></call><operator>,</operator> <name>void</name> <operator>*</operator><name>arg</name><operator>,</operator> <name>size_t</name> <name>stacksize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_start_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><name>outer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_join_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><name>outer</name><operator>,</operator> <name>void</name> <operator>*</operator><operator>*</operator><name>ret_value</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_thread_should_stop</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><name>outer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_thread_should_stop</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><name>outer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_THREAD</name> <operator>*</operator><name>thread</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_run_detached_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier><name>proc</name>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list></call><operator>,</operator> <name>void</name> <operator>*</operator><name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_MUTEX</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_mutex</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_MUTEX</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_mutex_recursive</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_lock_mutex</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MUTEX</name> <operator>*</operator><name>mutex</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unlock_mutex</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MUTEX</name> <operator>*</operator><name>mutex</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_mutex</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MUTEX</name> <operator>*</operator><name>mutex</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COND</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_create_cond</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_cond</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COND</name> <operator>*</operator><name>cond</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_wait_cond</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COND</name> <operator>*</operator><name>cond</name><operator>,</operator> <name>ALLEGRO_MUTEX</name> <operator>*</operator><name>mutex</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_wait_cond_until</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COND</name> <operator>*</operator><name>cond</name><operator>,</operator> <name>ALLEGRO_MUTEX</name> <operator>*</operator><name>mutex</name><operator>,</operator>

<specifier>const</specifier> <name>ALLEGRO_TIMEOUT</name> <operator>*</operator><name>timeout</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_broadcast_cond</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COND</name> <operator>*</operator><name>cond</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_signal_cond</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COND</name> <operator>*</operator><name>cond</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
