<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\platform\alwatcom.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SW_3S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Allegro only supports stack based calling convention</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SW_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Stack overflow checking must be disabled</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;i86.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>disable_message</name> <name>(</name><name>120</name> <name>201</name> <name>202</name><name>)</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WATCOMC__</name> <operator>&gt;=</operator> <literal type="number">1230</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_HAVE_INTTYPES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_HAVE_STDINT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_GUESS_INTTYPES_OK</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_PLATFORM_STR</name></cpp:macro> <cpp:value>"Watcom"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DOS</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_I386</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_LITTLE_ENDIAN</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_GUESS_INTTYPES_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int64_t</name></cpp:macro> <cpp:value>signed long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inportb</name><parameter_list>(<parameter><type><name>port</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inp(port)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inportw</name><parameter_list>(<parameter><type><name>port</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inpw(port)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outportb</name><parameter_list>(<parameter><type><name>port</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>outp(port, val)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>outportw</name><parameter_list>(<parameter><type><name>port</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>outpw(port, val)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ffblk</name></cpp:macro> <cpp:value>find_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_name</name></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_attrib</name></cpp:macro> <cpp:value>attrib</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_fsize</name></cpp:macro> <cpp:value>size</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_ftime</name></cpp:macro> <cpp:value>wr_time</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_fdate</name></cpp:macro> <cpp:value>wr_date</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>findfirst</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>dta</name></type></parameter>, <parameter><type><name>attrib</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_dos_findfirst(name, attrib, dta)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>findnext</name><parameter_list>(<parameter><type><name>dta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_dos_findnext(dta)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>random</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rand()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srandom</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>srand(n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_dos_ds</name></cpp:macro> <cpp:value>_default_ds()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dosmemget</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(buffer, (void *)(offset), length)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dosmemput</name><parameter_list>(<parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy((void *)(offset), buffer, length)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__djgpp_nearptr_enable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__djgpp_nearptr_disable</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__djgpp_base_address</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__djgpp_conventional_base</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_crt0_startup_flags</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT0_FLAG_NEARPTR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <name>__dpmi_regs</name>

<block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>edi</name></decl>, <name>esi</name>, <name>ebp</name>, <name>res</name>, <name>ebx</name>, <name>edx</name>, <name>ecx</name>, <name>eax</name>;</decl_stmt>

}</block> <decl><name>d</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>di</name></decl>, <name>di_hi</name>, <name>si</name>, <name>si_hi</name>, <name>bp</name>, <name>bp_hi</name>, <name>res</name>, <name>res_hi</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>bx</name></decl>, <name>bx_hi</name>, <name>dx</name>, <name>dx_hi</name>, <name>cx</name>, <name>cx_hi</name>, <name>ax</name>, <name>ax_hi</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>, <name>es</name>, <name>ds</name>, <name>fs</name>, <name>gs</name>, <name>ip</name>, <name>cs</name>, <name>sp</name>, <name>ss</name>;</decl_stmt>

}</block> <decl><name>x</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>edi</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <name><name>esi</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>, <name><name>ebp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>, <name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bl</name></decl>, <name>bh</name>, <name>ebx_b2</name>, <name>ebx_b3</name>, <name>dl</name>, <name>dh</name>, <name>edx_b2</name>, <name>edx_b3</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cl</name></decl>, <name>ch</name>, <name>ecx_b2</name>, <name>ecx_b3</name>, <name>al</name>, <name>ah</name>, <name>eax_b2</name>, <name>eax_b3</name>;</decl_stmt>

}</block> <decl><name>h</name></decl>;</struct>

}</block></union></type> <name>__dpmi_regs</name>;</typedef>

<typedef>typedef <type><struct>struct <name>__dpmi_meminfo</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>address</name></decl>;</decl_stmt>

}</block></struct></type> <name>__dpmi_meminfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>__dpmi_free_mem_info</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>largest_available_free_block_in_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maximum_unlocked_page_allocation_in_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maximum_locked_page_allocation_in_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>linear_address_space_size_in_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>total_number_of_unlocked_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>total_number_of_free_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>total_number_of_physical_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>free_linear_address_space_in_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size_of_paging_file_partition_in_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>__dpmi_free_mem_info</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>__tb</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>__dpmi_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vector</name></decl></parameter>, <parameter><decl><type><name>__dpmi_regs</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_allocate_dos_memory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paragraphs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_free_dos_memory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_physical_address_mapping</name><parameter_list>(<parameter><decl><type><name>__dpmi_meminfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_free_physical_address_mapping</name><parameter_list>(<parameter><decl><type><name>__dpmi_meminfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_lock_linear_region</name><parameter_list>(<parameter><decl><type><name>__dpmi_meminfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_unlock_linear_region</name><parameter_list>(<parameter><decl><type><name>__dpmi_meminfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_allocate_ldt_descriptors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_free_ldt_descriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_get_segment_base_address</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_set_segment_base_address</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_set_segment_limit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_get_free_memory_information</name><parameter_list>(<parameter><decl><type><name>__dpmi_free_mem_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_simulate_real_mode_interrupt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vector</name></decl></parameter>, <parameter><decl><type><name>__dpmi_regs</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__dpmi_simulate_real_mode_procedure_retf</name><parameter_list>(<parameter><decl><type><name>__dpmi_regs</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_go32_dpmi_lock_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lockaddr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>locksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_go32_dpmi_lock_code</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lockaddr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>locksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>_allocate_real_mode_callback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>__dpmi_regs</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>__dpmi_regs</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_unlock_dpmi_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void x##_end(void) { }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_STATIC_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void x##_end(void) { }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_DATA</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_go32_dpmi_lock_data(d, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_CODE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_go32_dpmi_lock_code(c, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK_DATA</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_unlock_dpmi_data(d, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_VARIABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOCK_DATA((void *)&amp;x, sizeof(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOCK_CODE((void *)FP_OFF(x), (long)FP_OFF(x##_end) - (long)FP_OFF(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_EXTRA_HEADER</name></cpp:macro> <cpp:value>"allegro5/platform/aldos.h"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_INTERNAL_HEADER</name></cpp:macro> <cpp:value>"allegro5/platform/aintdos.h"</cpp:value></cpp:define>

</unit>
