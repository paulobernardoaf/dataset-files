<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\platform\aintosx.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_keyboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OBJC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NSAppKitVersionNumber10_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSAppKitVersionNumber10_1</name></cpp:macro> <cpp:value>620</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NSAppKitVersionNumber10_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSAppKitVersionNumber10_2</name></cpp:macro> <cpp:value>663</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&lt;</operator> <literal type="number">1040</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> Cannot target OS X versions before 10.4</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_MAX_DEVICES</name></cpp:macro> <cpp:value>MAX_JOYSTICKS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_MOUSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_JOYSTICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_GAMEPAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_MAX_DEVICE_ELEMENTS</name></cpp:macro> <cpp:value>((MAX_JOYSTICK_AXIS * MAX_JOYSTICK_STICKS) + MAX_JOYSTICK_BUTTONS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_ELEMENT_BUTTON</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_ELEMENT_AXIS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_ELEMENT_AXIS_PRIMARY_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_ELEMENT_AXIS_PRIMARY_Y</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_ELEMENT_STANDALONE_AXIS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HID_ELEMENT_HAT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_IOKIT_HID_IOHIDLIB_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>HID_ELEMENT</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IOHIDElementCookie</name></type> <name>cookie</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>, <name>min</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block></struct></type> <name>HID_ELEMENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HID_DEVICE</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>manufacturer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>product</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_elements</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HID_ELEMENT</name> <modifier>*</modifier></type><name>element</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IOHIDDeviceInterface</name> <modifier>*</modifier><modifier>*</modifier></type><name>interface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_app</name></decl>;</decl_stmt>

}</block></struct></type> <name>HID_DEVICE</name>;</typedef>

<typedef>typedef <type><struct>struct 

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HID_DEVICE</name><modifier>*</modifier></type> <name>devices</name></decl>;</decl_stmt>

}</block></struct></type> <name>HID_DEVICE_COLLECTION</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name><name>struct</name> <name>HID_ELEMENT</name></name></type> <name>HID_ELEMENT</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>HID_DEVICE</name></name></type> <name>HID_DEVICE</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>HID_DEVICE_COLLECTION</name></name></type> <name>HID_DEVICE_COLLECTION</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>_al_osx_bootstrap_ok</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_keyboard_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pressed</name></decl></parameter>, <parameter><decl><type><name>NSEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_keyboard_modifiers</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>new_mods</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_keyboard_focused</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>focused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_mouse_generate_event</name><parameter_list>(<parameter><decl><type><name>NSEvent</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_mouse_handler</name><parameter_list>(<parameter><decl><type><name>NSEvent</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_al_osx_mouse_set_sprite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sprite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_al_osx_mouse_show</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_mouse_hide</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_mouse_move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HID_DEVICE_COLLECTION</name> <modifier>*</modifier></type><name>_al_osx_hid_scan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>HID_DEVICE_COLLECTION</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_hid_free</name><parameter_list>(<parameter><decl><type><name>HID_DEVICE_COLLECTION</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_switch_keyboard_focus</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>switch_in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_switch_mouse_focus</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>switch_in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_clear_mouse_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_mouse_was_installed</name><parameter_list>(<parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>_al_osx_create_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_focus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_focus</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_destroy_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_keyboard_was_installed</name><parameter_list>(<parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_osx_post_quit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NSView</name><modifier>*</modifier></type> <name>_al_osx_view_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NSImage</name><modifier>*</modifier></type> <name>NSImageFromAllegroBitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>bmp</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_KEYBOARD_DRIVER</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_osx_get_keyboard_driver</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_INTERFACE</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_osx_get_display_driver</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_MOUSE_DRIVER</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_osx_get_mouse_driver</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_JOYSTICK_DRIVER</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_osx_get_joystick_driver</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_osx_run_main</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>argc</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>argv</name><operator>,</operator>

<call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>real_main</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</unit>
