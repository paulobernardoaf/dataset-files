<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\platform\aintlnx.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>_AL_DRIVER_INFO</name></type> <name><name>_al_linux_keyboard_driver_list</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>_AL_DRIVER_INFO</name></type> <name><name>_al_linux_mouse_driver_list</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_MOUSEDRV_LINUX_EVDEV</name></cpp:macro> <cpp:value>AL_ID('E', 'V', 'D', 'V')</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>MAPPED_MEMORY</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>base</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>perms</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__al_linux_have_ioperms</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>__al_linux_init_memory</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_shutdown_memory</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_map_memory</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MAPPED_MEMORY</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_unmap_memory</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MAPPED_MEMORY</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__al_linux_vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__al_linux_console_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__al_linux_prev_vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__al_linux_got_text_message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>__al_linux_startup_termio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>__al_linux_work_termio</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>__al_linux_use_console</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_leave_console</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_console_graphics</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_console_text</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_wait_for_display</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGRELVT</name></cpp:macro> <cpp:value>SIGUSR1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGACQVT</name></cpp:macro> <cpp:value>SIGUSR2</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>__al_linux_init_vtswitch</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_done_vtswitch</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__al_linux_set_display_switch_mode</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>__al_linux_display_switch_lock</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>foreground</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>__al_linux_switching_blocked</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
