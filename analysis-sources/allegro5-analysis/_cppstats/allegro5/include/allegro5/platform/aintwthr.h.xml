<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\platform\aintwthr.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>_AL_THREAD</name>

<block>{

<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>cs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>should_stop</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_AL_THREAD</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>_AL_MUTEX</name>

<block>{

<decl_stmt><decl><type><name>PCRITICAL_SECTION</name></type> <name>cs</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_MUTEX_UNINITED</name></cpp:macro> <cpp:value>{ NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_MARK_MUTEX_UNINITED</name><parameter_list>(<parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { M.cs = NULL; } while (0)</cpp:value></cpp:define>

<struct>struct <name>_AL_COND</name>

<block>{

<decl_stmt><decl><type><name>long</name></type> <name>nWaitersBlocked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nWaitersGone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nWaitersToUnblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>semBlockQueue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>semBlockLock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>mtxUnblockLock</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_TIMEOUT_WIN</name></name></type> <name>ALLEGRO_TIMEOUT_WIN</name>;</typedef>

<struct>struct <name>ALLEGRO_TIMEOUT_WIN</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>abstime</name></decl>;</decl_stmt>

}</block>;</struct>

<macro><name>AL_INLINE</name><argument_list>(<argument>bool</argument>, <argument>_al_get_thread_should_stop</argument>, <argument>(struct _AL_THREAD *t)</argument>,

<argument>{

bool ret;

EnterCriticalSection(&amp;t-&gt;cs);

ret = t-&gt;should_stop;

LeaveCriticalSection(&amp;t-&gt;cs);

return ret;

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>void</argument>, <argument>_al_mutex_lock</argument>, <argument>(struct _AL_MUTEX *m)</argument>,

<argument>{

if (m-&gt;cs)

EnterCriticalSection(m-&gt;cs);

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>void</argument>, <argument>_al_mutex_unlock</argument>, <argument>(struct _AL_MUTEX *m)</argument>,

<argument>{

if (m-&gt;cs)

LeaveCriticalSection(m-&gt;cs);

}</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
