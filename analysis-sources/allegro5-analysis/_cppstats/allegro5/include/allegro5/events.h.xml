<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\events.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/altime.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ALLEGRO_EVENT_TYPE</name>;</typedef>

<enum>enum

<block>{

<decl><name>ALLEGRO_EVENT_JOYSTICK_AXIS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_KEY_DOWN</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_KEY_CHAR</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_KEY_UP</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_MOUSE_AXES</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_MOUSE_WARPED</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_TIMER</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_RESIZE</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_LOST</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_FOUND</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_SWITCH_IN</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_ORIENTATION</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_TOUCH_BEGIN</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_TOUCH_END</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_TOUCH_MOVE</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_TOUCH_CANCEL</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_CONNECTED</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_DISPLAY_DISCONNECTED</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_EVENT_TYPE_IS_USER</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) &gt;= 512)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_GET_EVENT_TYPE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AL_ID(a, b, c, d)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_EVENT_SOURCE</name></name></type> <name>ALLEGRO_EVENT_SOURCE</name>;</typedef>

<struct>struct <name>ALLEGRO_EVENT_SOURCE</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>__pad</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_EVENT_HEADER</name><parameter_list>(<parameter><type><name>srctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALLEGRO_EVENT_TYPE type; srctype *source; double timestamp;</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ALLEGRO_ANY_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>ALLEGRO_EVENT_SOURCE</argument>)</argument_list></macro>

}</block></struct></type> <name>ALLEGRO_ANY_EVENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_DISPLAY_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_DISPLAY</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orientation</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_DISPLAY_EVENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_JOYSTICK_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_JOYSTICK</argument>)</argument_list></macro>

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_JOYSTICK</name></name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>axis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_JOYSTICK_EVENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_KEYBOARD_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_KEYBOARD</argument>)</argument_list></macro>

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_DISPLAY</name></name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>keycode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>unichar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modifiers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>repeat</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ALLEGRO_KEYBOARD_EVENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_MOUSE_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_MOUSE</argument>)</argument_list></macro>

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_DISPLAY</name></name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>, <name>z</name>, <name>w</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <name>dy</name>, <name>dz</name>, <name>dw</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pressure</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_MOUSE_EVENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_TIMER_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_TIMER</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>error</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_TIMER_EVENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_TOUCH_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_TOUCH_INPUT</argument>)</argument_list></macro>

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_DISPLAY</name></name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name></decl>, <name>dy</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>primary</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_TOUCH_EVENT</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_USER_EVENT</name></name></type> <name>ALLEGRO_USER_EVENT</name>;</typedef>

<struct>struct <name>ALLEGRO_USER_EVENT</name>

<block>{

<macro><name>_AL_EVENT_HEADER</name><argument_list>(<argument>struct ALLEGRO_EVENT_SOURCE</argument>)</argument_list></macro>

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_USER_EVENT_DESCRIPTOR</name></name> <modifier>*</modifier></type><name>__internal__descr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>data1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>data2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>data3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>data4</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>union</name> <name>ALLEGRO_EVENT</name></name></type> <name>ALLEGRO_EVENT</name>;</typedef>

<union>union <name>ALLEGRO_EVENT</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_EVENT_TYPE</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_ANY_EVENT</name></type> <name>any</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_EVENT</name></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_EVENT</name></type> <name>joystick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_EVENT</name></type> <name>keyboard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_EVENT</name></type> <name>mouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER_EVENT</name></type> <name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TOUCH_EVENT</name></type> <name>touch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USER_EVENT</name></type> <name>user</name></decl>;</decl_stmt>

}</block>;</union>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_init_user_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_user_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_emit_user_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator><operator>,</operator> <name>ALLEGRO_EVENT</name> <operator>*</operator><operator>,</operator>

<call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>dtor</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ALLEGRO_USER_EVENT</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unref_user_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USER_EVENT</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_event_source_data</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_SOURCE</name><operator>*</operator><operator>,</operator> <name>intptr_t</name> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>intptr_t</name></expr></argument>, <argument><expr><name>al_get_event_source_data</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_EVENT_SOURCE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_EVENT_QUEUE</name></name></type> <name>ALLEGRO_EVENT_QUEUE</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator></expr></argument>, <argument><expr><name>al_create_event_queue</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_destroy_event_queue</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_event_source_registered</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name> <operator>*</operator><operator>,</operator> 

<name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_register_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator> <name>ALLEGRO_EVENT_SOURCE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unregister_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator> <name>ALLEGRO_EVENT_SOURCE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_pause_event_queue</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator> <name>bool</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_event_queue_paused</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_event_queue_empty</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_get_next_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator> <name>ALLEGRO_EVENT</name> <operator>*</operator><name>ret_event</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_peek_next_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator> <name>ALLEGRO_EVENT</name> <operator>*</operator><name>ret_event</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_drop_next_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_flush_event_queue</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_wait_for_event</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator>

<name>ALLEGRO_EVENT</name> <operator>*</operator><name>ret_event</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_wait_for_event_timed</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name><operator>*</operator><operator>,</operator>

<name>ALLEGRO_EVENT</name> <operator>*</operator><name>ret_event</name><operator>,</operator>

<name>float</name> <name>secs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_wait_for_event_until</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_EVENT_QUEUE</name> <operator>*</operator><name>queue</name><operator>,</operator>

<name>ALLEGRO_EVENT</name> <operator>*</operator><name>ret_event</name><operator>,</operator>

<name>ALLEGRO_TIMEOUT</name> <operator>*</operator><name>timeout</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
