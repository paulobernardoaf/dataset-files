<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\memory.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_MEMORY_INTERFACE</name></name></type> <name>ALLEGRO_MEMORY_INTERFACE</name>;</typedef>

<struct>struct <name>ALLEGRO_MEMORY_INTERFACE</name> <block>{

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mi_malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mi_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mi_realloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mi_calloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_memory_interface</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MEMORY_INTERFACE</name> <operator>*</operator><name>iface</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al_malloc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(al_malloc_with_context((n), __LINE__, __FILE__, __func__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al_free</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(al_free_with_context((p), __LINE__, __FILE__, __func__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al_realloc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(al_realloc_with_context((p), (n), __LINE__, __FILE__, __func__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al_calloc</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(al_calloc_with_context((c), (n), __LINE__, __FILE__, __func__))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_malloc_with_context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <name>n</name><operator>,</operator>

<name>int</name> <name>line</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_free_with_context</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>ptr</name><operator>,</operator>

<name>int</name> <name>line</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_realloc_with_context</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>ptr</name><operator>,</operator> <name>size_t</name> <name>n</name><operator>,</operator>

<name>int</name> <name>line</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_calloc_with_context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <name>count</name><operator>,</operator> <name>size_t</name> <name>n</name><operator>,</operator>

<name>int</name> <name>line</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
