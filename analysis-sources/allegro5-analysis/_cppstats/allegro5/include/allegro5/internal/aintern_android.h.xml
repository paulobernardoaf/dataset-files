<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\internal\aintern_android.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ALLEGRO_SYSTEM_ANDROID</name> <block>{

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name></type> <name>system</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_SYSTEM_ANDROID</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_DISPLAY_ANDROID</name> <block>{

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>surface_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>recreate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>resize_acknowledge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>resize_acknowledge2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>resumed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_destroy_display</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_DISPLAY_ANDROID</name>;</typedef>

<function_decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>_al_system_android_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>_al_get_apk_file_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_get_android_display_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>_al_get_android_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>_al_get_android_mouse_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_TOUCH_INPUT_DRIVER</name> <modifier>*</modifier></type><name>_al_get_android_touch_input_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>_al_android_get_display_orientation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_checkException</name><parameter_list>(<parameter><type><name>env</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__jni_checkException(env, __FILE__, __FUNCTION__, __LINE__)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>__jni_checkException</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_call</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>rett</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ rett ret = (*env)-&gt;method(env, ##args); _jni_checkException(env); ret; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callv</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ (*env)-&gt;method(env, ##args); _jni_checkException(env); })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callBooleanMethodV</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>sig</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ jclass class_id = _jni_call(env, jclass, GetObjectClass, obj); jmethodID method_id = _jni_call(env, jmethodID, GetMethodID, class_id, name, sig); bool ret = false; if (method_id == NULL) { ALLEGRO_DEBUG("couldn't find method %s", name); } else { ret = _jni_call(env, bool, CallBooleanMethod, obj, method_id, ##args); } _jni_callv(env, DeleteLocalRef, class_id); ret; })</cpp:value></cpp:define>

<function_decl><type><name>jobject</name></type> <name>_jni_callObjectMethod</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>object</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> <name>_jni_callObjectMethodV</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>object</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>_jni_getString</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>_jni_callStringMethod</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> <name>_jni_callStaticObjectMethodV</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>class_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jint</name></type> <name>_jni_callStaticIntMethodV</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>cls</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callIntMethodV</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>sig</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ jclass class_id = _jni_call(env, jclass, GetObjectClass, obj); jmethodID method_id = _jni_call(env, jmethodID, GetMethodID, class_id, name, sig); int ret = -1; if (method_id == NULL) { ALLEGRO_DEBUG("couldn't find method %s", #name); } else { ret = _jni_call(env, int, CallIntMethod, obj, method_id, ##args); } _jni_callv(env, DeleteLocalRef, class_id); ret; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callIntMethod</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jni_callIntMethodV(env, obj, name, "()I")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callLongMethodV</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>sig</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ jclass class_id = _jni_call(env, jclass, GetObjectClass, obj); jmethodID method_id = _jni_call(env, jmethodID, GetMethodID, class_id, name, sig); long ret = -1; if (method_id == NULL) { ALLEGRO_DEBUG("couldn't find method %s", name); } else { ret = _jni_call(env, long, CallLongMethod, obj, method_id, ##args); } _jni_callv(env, DeleteLocalRef, class_id); ret; })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callLongMethod</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jni_callLongMethodV(env, obj, name, "()J");</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callVoidMethodV</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>sig</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ jclass class_id = _jni_call(env, jclass, GetObjectClass, obj); jmethodID method_id = _jni_call(env, jmethodID, GetMethodID, class_id, name, sig); if (method_id == NULL) { ALLEGRO_ERROR("couldn't find method %s", name); } else { _jni_callv(env, CallVoidMethod, obj, method_id, ##args); } _jni_callv(env, DeleteLocalRef, class_id); })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_jni_callVoidMethod</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jni_callVoidMethodV(env, obj, name, "()V");</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_JOYSTICK_DRIVER</name></expr></argument>, <argument><expr><name>_al_android_joystick_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>_al_android_create_surface</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>post</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_destroy_surface</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>post</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_android_load_image_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_android_load_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> <name>_al_android_activity_object</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> <name>_al_android_input_stream_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> <name>_al_android_apk_stream_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> <name>_al_android_image_loader_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> <name>_al_android_clipboard_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> <name>_al_android_apk_fs_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_generate_mouse_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_mouse_get_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_generate_accelerometer_event</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_generate_joystick_axis_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stick</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_generate_joystick_button_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>down</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GLint</name></type> <name>_al_android_get_curr_fbo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_set_curr_fbo</name><parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>fbo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>_al_android_is_os_2_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_thread_created</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_thread_ended</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_set_jnienv</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>jnienv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>_al_android_get_jnienv</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>_al_android_is_paused</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_android_add_clipboard_functions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ANDROID_PACKAGE_NAME</name></cpp:macro> <cpp:value>org_liballeg_android</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name></cpp:macro> <cpp:value>"org/liballeg/android"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_FUNC_PASTER</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>cls</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>params</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JNIEXPORT ret JNICALL Java_ ##x ##_ ##cls ##_ ##name params</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_FUNC_EVALUATOR</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>cls</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>params</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JNI_FUNC_PASTER(ret, cls, name, params, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_FUNC</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>cls</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>params</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JNI_FUNC_EVALUATOR(ret, cls, name, params, ALLEGRO_ANDROID_PACKAGE_NAME)</cpp:value></cpp:define>

<extern>extern JNI_FUNC(bool<operator>,</operator> AllegroActivity<operator>,</operator> nativeOnCreate<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroActivity<operator>,</operator> nativeOnDestroy<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroActivity<operator>,</operator> nativeOnOrientationChange<operator>,</operator> (JNIEnv *env<operator>,</operator>

jobject obj<operator>,</operator> int orientation<operator>,</operator> bool init</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroActivity<operator>,</operator> nativeOnPause<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroActivity<operator>,</operator> nativeOnResume<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroSurface<operator>,</operator> nativeOnCreate<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(bool<operator>,</operator> AllegroSurface<operator>,</operator> nativeOnDestroy<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroSurface<operator>,</operator> nativeOnChange<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint format<operator>,</operator> jint width<operator>,</operator> jint height</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(int<operator>,</operator> AllegroInputStream<operator>,</operator> nativeRead<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jlong handle<operator>,</operator> jbyteArray array<operator>,</operator> int offset<operator>,</operator> int length</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroInputStream<operator>,</operator> nativeClose<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jlong handle</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> KeyListener<operator>,</operator> nativeOnKeyDown<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint scancode<operator>,</operator> jint unichar</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> KeyListener<operator>,</operator> nativeOnKeyUp<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint scancode</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> KeyListener<operator>,</operator> nativeOnKeyChar<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint scancode<operator>,</operator> jint unichar</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> TouchListener<operator>,</operator> nativeOnTouch<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint id<operator>,</operator> jint action<operator>,</operator> jfloat x<operator>,</operator> jfloat y<operator>,</operator> jboolean primary</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> Sensors<operator>,</operator> nativeOnAccel<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator> jint id<operator>,</operator>

jfloat x<operator>,</operator> jfloat y<operator>,</operator> jfloat z</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroSurface<operator>,</operator> nativeOnJoystickAxis<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint index<operator>,</operator> jint stick<operator>,</operator> jint axis<operator>,</operator> jfloat value</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroSurface<operator>,</operator> nativeOnJoystickButton<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint index<operator>,</operator> jint button<operator>,</operator> jboolean down</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> KeyListener<operator>,</operator> nativeOnJoystickButton<operator>,</operator> (JNIEnv *env<operator>,</operator> jobject obj<operator>,</operator>

jint index<operator>,</operator> jint button<operator>,</operator> jboolean down</extern>))<empty_stmt>;</empty_stmt>

<extern>extern JNI_FUNC(void<operator>,</operator> AllegroActivity<operator>,</operator> nativeSendJoystickConfigurationEvent<operator>,</operator>

(JNIEnv *env<operator>,</operator> jobject obj</extern>))<empty_stmt>;</empty_stmt>

</unit>
