<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\internal\aintern_atomicops.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>_AL_ATOMIC</name>;</typedef>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_fetch_and_add1</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return __sync_fetch_and_add(ptr, <literal type="number">1</literal>);

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_sub1_and_fetch</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return __sync_sub_and_fetch(ptr, <literal type="number">1</literal>);

}</argument>)</argument_list></macro>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<typedef>typedef <type><name>int</name></type> <name>_AL_ATOMIC</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_fetch_and_add</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ __volatile__ ( "lock; xaddl %0, %1" : "=r" (result), "=m" (*ptr) : "0" (value), "m" (*ptr) : "memory" )</cpp:value></cpp:define>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_fetch_and_add1</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

_AL_ATOMIC result;

__al_fetch_and_add(ptr, <literal type="number">1</literal>, result);

return result;

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_sub1_and_fetch</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

_AL_ATOMIC old;

__al_fetch_and_add(ptr, -<literal type="number">1</literal>, old);

return old - <literal type="number">1</literal>;

}</argument>)</argument_list></macro>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_M_IX86</name> <operator>&gt;=</operator> <literal type="number">400</literal></expr></cpp:elif>

<typedef>typedef <type><name>LONG</name></type> <name>_AL_ATOMIC</name>;</typedef>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_fetch_and_add1</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return InterlockedIncrement(ptr) - <literal type="number">1</literal>;

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_sub1_and_fetch</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return InterlockedDecrement(ptr);

}</argument>)</argument_list></macro>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_OSATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libkern/OSAtomic.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int32_t</name></type> <name>_AL_ATOMIC</name>;</typedef>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_fetch_and_add1</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return OSAtomicIncrement32Barrier((_AL_ATOMIC *)ptr) - <literal type="number">1</literal>;

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_sub1_and_fetch</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return OSAtomicDecrement32Barrier((_AL_ATOMIC *)ptr);

}</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> Atomic operations undefined for your compiler/architecture.</cpp:warning>

<typedef>typedef <type><name>int</name></type> <name>_AL_ATOMIC</name>;</typedef>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_fetch_and_add1</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return (*ptr)++;

}</argument>)</argument_list></macro>

<macro><name>AL_INLINE</name><argument_list>(<argument>_AL_ATOMIC</argument>,

<argument>_al_sub1_and_fetch</argument>, <argument>(volatile _AL_ATOMIC *ptr)</argument>,

<argument>{

return --(*ptr);

}</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
