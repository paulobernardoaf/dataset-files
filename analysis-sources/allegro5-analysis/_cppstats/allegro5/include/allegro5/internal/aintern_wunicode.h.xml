<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\internal\aintern_wunicode.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>wchar_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_ustr_to_utf16</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>u</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_ustr_to_ansi</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>u</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>wchar_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_utf8_to_utf16</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_utf16_to_utf8</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><name>ws</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_utf8_to_ansi</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator> <name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_ansi_to_utf8</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_copy_utf16_to_utf8</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator> <name>us</name><operator>,</operator> <specifier>const</specifier> <name>wchar_t</name><operator>*</operator> <name>ws</name><operator>,</operator> <name>size_t</name> <name>uslen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_copy_utf8_to_utf16</name></expr></argument>, <argument><expr><operator>(</operator><name>wchar_t</name><operator>*</operator> <name>ws</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>us</name><operator>,</operator> <name>size_t</name> <name>wslen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_copy_ansi_to_utf8</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator> <name>us</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>size_t</name> <name>uslen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_win_copy_utf8_to_ansi</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator> <name>s</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>us</name><operator>,</operator> <name>size_t</name> <name>slen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_tchar_strlen</name></cpp:macro> <cpp:value>wcslen</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_ustr_to_tchar</name></cpp:macro> <cpp:value>_al_win_ustr_to_utf16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_utf8_to_tchar</name></cpp:macro> <cpp:value>_al_win_utf8_to_utf16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_tchar_to_utf8</name></cpp:macro> <cpp:value>_al_win_utf16_to_utf8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_copy_tchar_to_utf8</name></cpp:macro> <cpp:value>_al_win_copy_utf16_to_utf8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_copy_utf8_to_tchar</name></cpp:macro> <cpp:value>_al_win_copy_utf8_to_utf16</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_tchar_strlen</name></cpp:macro> <cpp:value>strlen</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_ustr_to_tchar</name></cpp:macro> <cpp:value>_al_win_ustr_to_ansi</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_utf8_to_tchar</name></cpp:macro> <cpp:value>_al_win_utf8_to_ansi</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_tchar_to_utf8</name></cpp:macro> <cpp:value>_al_win_ansi_to_utf8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_copy_tchar_to_utf8</name></cpp:macro> <cpp:value>_al_win_copy_ansi_to_utf8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_twin_copy_utf8_to_tchar</name></cpp:macro> <cpp:value>_al_win_copy_utf8_to_ansi</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
