<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\internal\aintern_joystick.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_driver.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>ALLEGRO_JOYSTICK_DRIVER</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>joydrv_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joydrv_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joydrv_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joydrv_ascii_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>init_joystick</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>exit_joystick</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>reconfigure_joysticks</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>num_joysticks</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>ALLEGRO_JOYSTICK</name> <operator>*</operator></expr></argument>, <argument><expr><name>get_joystick</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>joyn</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>release_joystick</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><name>joy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>get_joystick_state</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><name>joy</name><operator>,</operator> <name>ALLEGRO_JOYSTICK_STATE</name> <operator>*</operator><name>ret_state</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>get_name</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><name>joy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>get_active</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><name>joy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></struct></type> <name>ALLEGRO_JOYSTICK_DRIVER</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>_AL_DRIVER_INFO</name></type> <name><name>_al_joystick_driver_list</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_BEGIN_JOYSTICK_DRIVER_LIST</name></cpp:macro> <cpp:value>_AL_DRIVER_INFO _al_joystick_driver_list[] = {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_END_JOYSTICK_DRIVER_LIST</name></cpp:macro> <cpp:value>{ 0, NULL, false } };</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_AL_JOYSTICK_AXIS_INFO</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block></struct></type> <name>_AL_JOYSTICK_AXIS_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_AL_JOYSTICK_STICK_INFO</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_axes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_JOYSTICK_AXIS_INFO</name></type> <name><name>axis</name><index>[<expr><name>_AL_MAX_JOYSTICK_AXES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block></struct></type> <name>_AL_JOYSTICK_STICK_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_AL_JOYSTICK_BUTTON_INFO</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block></struct></type> <name>_AL_JOYSTICK_BUTTON_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_AL_JOYSTICK_INFO</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>num_sticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_buttons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_JOYSTICK_STICK_INFO</name></type> <name><name>stick</name><index>[<expr><name>_AL_MAX_JOYSTICK_STICKS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_JOYSTICK_BUTTON_INFO</name></type> <name><name>button</name><index>[<expr><name>_AL_MAX_JOYSTICK_BUTTONS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>_AL_JOYSTICK_INFO</name>;</typedef>

<struct>struct <name>ALLEGRO_JOYSTICK</name>

<block>{

<decl_stmt><decl><type><name>_AL_JOYSTICK_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type> <name>driver</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>_al_generate_joystick_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
