<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\internal\bstrlib.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>BSTRLIB_VSNP_OK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>BSTRLIB_NOVSNP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__TURBOC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSTRLIB_NOVSNP</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_BSTR_ERR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_BSTR_OK</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_BSTR_BS_BUFF_LENGTH_GET</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>_al_tagbstring</name></name> <modifier>*</modifier></type> <name>_al_bstring</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name><name>struct</name> <name>_al_tagbstring</name></name> <modifier>*</modifier></type> <name>_al_const_bstring</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_cstr2bstr</name></cpp:macro> <cpp:value>_al_bfromcstr</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bfromcstr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bfromcstralloc</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_blk2bstr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type> <name>_al_bstr2cstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bcstrfree</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bstrcpy</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bassign</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bassignmidstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bassigncstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bassignblk</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bdestroy</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_balloc</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_ballocmin</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bmidstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bconcat</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bconchar</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bcatcstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bcatblk</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binsert</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binsertch</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_breplace</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bdelete</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsetstr</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_btrunc</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstricmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrnicmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_biseqcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bisstemeqcaselessblk</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_biseq</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bisstemeqblk</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_biseqcstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_biseqcstrcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrcmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrncmp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binstrr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binstrcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binstrrcaseless</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrchrp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrrchrp</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bstrchr</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_bstrchrp ((b), (c), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bstrrchr</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_bstrrchrp ((b), (c), _al_blength(b)-1)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binchr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_binchrr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bninchr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bninchrr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bfindreplace</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>repl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bfindreplacecaseless</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>repl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>_al_bstrList</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>qty</name></decl>, <decl><type ref="prev"/><name>mlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_al_bstring</name> <modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bstrListCreate</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrListDestroy</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrListAlloc</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bstrListAllocMin</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bsplit</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>splitChar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bsplits</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>_al_bsplitstr</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bjoin</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_al_bstrList</name></name> <modifier>*</modifier></type> <name>bl</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>sep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsplitcb</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>splitChar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsplitscb</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsplitstrcb</name> <parameter_list>(<parameter><decl><type><name>_al_const_bstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bpattern</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_btoupper</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_btolower</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bltrimws</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_brtrimws</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_btrimws</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>BSTRLIB_NOVSNP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bformat</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bformata</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bassignformat</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bvcformata</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>arglist</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bvformata</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>lastarg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ _al_bstring bstrtmp_b = (b); const char * bstrtmp_fmt = (fmt); int bstrtmp_r = _AL_BSTR_ERR, bstrtmp_sz = 16; for (;;) { va_list bstrtmp_arglist; va_start (bstrtmp_arglist, lastarg); bstrtmp_r = _al_bvcformata (bstrtmp_b, bstrtmp_sz, bstrtmp_fmt, bstrtmp_arglist); va_end (bstrtmp_arglist); if (bstrtmp_r &gt;= 0) { bstrtmp_r = _AL_BSTR_OK; break; } else if (-bstrtmp_r &lt;= bstrtmp_sz) { bstrtmp_r = _AL_BSTR_ERR; break; } bstrtmp_sz = -bstrtmp_r; } ret = bstrtmp_r; }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_al_bNgetc</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier> <name>_al_bNread</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nelem</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bgets</name> <parameter_list>(<parameter><decl><type><name>_al_bNgetc</name></type> <name>getcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_al_bstring</name></type> <name>_al_bread</name> <parameter_list>(<parameter><decl><type><name>_al_bNread</name></type> <name>readPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bgetsa</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_bNgetc</name></type> <name>getcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bassigngets</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_bNgetc</name></type> <name>getcPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_breada</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>_al_bNread</name></type> <name>readPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>_al_bsopen</name> <parameter_list>(<parameter><decl><type><name>_al_bNread</name></type> <name>readPtr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type> <name>_al_bsclose</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsbufflength</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsreadln</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsreadlns</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>term</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsread</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsreadlna</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>terminator</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsreadlnsa</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>term</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsreada</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bsunread</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bspeek</name> <parameter_list>(<parameter><decl><type><name>_al_bstring</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bssplitscb</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, 

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>entry</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bssplitstrcb</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>splitStr</name></decl></parameter>, 

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>_al_const_bstring</name></type> <name>entry</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>parm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_al_bseof</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_al_bStream</name></name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_tagbstring_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_tagbstring_defined</name></cpp:macro></cpp:define>

<struct>struct <name>_al_tagbstring</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>mlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_blengthe</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((b) == (void *)0 || (b)-&gt;slen &lt; 0) ? (int)(e) : ((b)-&gt;slen))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_blength</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_al_blengthe ((b), 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bdataofse</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((b) == (void *)0 || (b)-&gt;data == (void*)0) ? (char *)(e) : ((char *)(b)-&gt;data) + (o))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bdataofs</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_al_bdataofse ((b), (o), (void *)0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bdatae</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_al_bdataofse (b, 0, e))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bdata</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_al_bdataofs (b, 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bchare</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((unsigned)(p)) &lt; (unsigned)_al_blength(b)) ? ((b)-&gt;data[(p)]) : (e))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bchar</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_bchare ((b), (p), '\0')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bsStaticMlen</name><parameter_list>(<parameter><type><name>q</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{(m), (int) sizeof(q)-1, (unsigned char *) ("" q "")}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bsStatic</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_bsStaticMlen(q,-32)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_al_bsStatic</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bsStatic</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_bsStaticMlen(q,-__LINE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bsStaticBlkParms</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)("" q "")), ((int) sizeof(q)-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_cstr2tbstr</name></cpp:macro> <cpp:value>_al_btfromcstr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_btfromcstr</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (t).data = (unsigned char *) (s); (t).slen = ((t).data) ? ((int) (strlen) ((char *)(t).data)) : 0; (t).mlen = -1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_blk2tbstr</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (t).data = (unsigned char *) (s); (t).slen = l; (t).mlen = -1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_btfromblk</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_blk2tbstr(t,s,l)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bmid2tbstr</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ _al_const_bstring bstrtmp_s = (b); if (bstrtmp_s &amp;&amp; bstrtmp_s-&gt;data &amp;&amp; bstrtmp_s-&gt;slen &gt;= 0) { int bstrtmp_left = (p); int bstrtmp_len = (l); if (bstrtmp_left &lt; 0) { bstrtmp_len += bstrtmp_left; bstrtmp_left = 0; } if (bstrtmp_len &gt; bstrtmp_s-&gt;slen - bstrtmp_left) bstrtmp_len = bstrtmp_s-&gt;slen - bstrtmp_left; if (bstrtmp_len &lt;= 0) { (t).data = (unsigned char *)""; (t).slen = 0; } else { (t).data = bstrtmp_s-&gt;data + bstrtmp_left; (t).slen = bstrtmp_len; } } else { (t).data = (unsigned char *)""; (t).slen = 0; } (t).mlen = -__LINE__; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_btfromblkltrimws</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int bstrtmp_idx = 0, bstrtmp_len = (l); unsigned char * bstrtmp_s = (s); if (bstrtmp_s &amp;&amp; bstrtmp_len &gt;= 0) { for (; bstrtmp_idx &lt; bstrtmp_len; bstrtmp_idx++) { if (!isspace (bstrtmp_s[bstrtmp_idx])) break; } } (t).data = bstrtmp_s + bstrtmp_idx; (t).slen = bstrtmp_len - bstrtmp_idx; (t).mlen = -__LINE__; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_btfromblkrtrimws</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int bstrtmp_len = (l) - 1; unsigned char * bstrtmp_s = (s); if (bstrtmp_s &amp;&amp; bstrtmp_len &gt;= 0) { for (; bstrtmp_len &gt;= 0; bstrtmp_len--) { if (!isspace (bstrtmp_s[bstrtmp_len])) break; } } (t).data = bstrtmp_s; (t).slen = bstrtmp_len + 1; (t).mlen = -__LINE__; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_btfromblktrimws</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int bstrtmp_idx = 0, bstrtmp_len = (l) - 1; unsigned char * bstrtmp_s = (s); if (bstrtmp_s &amp;&amp; bstrtmp_len &gt;= 0) { for (; bstrtmp_idx &lt;= bstrtmp_len; bstrtmp_idx++) { if (!isspace (bstrtmp_s[bstrtmp_idx])) break; } for (; bstrtmp_len &gt;= bstrtmp_idx; bstrtmp_len--) { if (!isspace (bstrtmp_s[bstrtmp_len])) break; } } (t).data = bstrtmp_s + bstrtmp_idx; (t).slen = bstrtmp_len + 1 - bstrtmp_idx; (t).mlen = -__LINE__; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bwriteprotect</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((t).mlen &gt;= 0) (t).mlen = -1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_bwriteallow</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((t).mlen == -1) (t).mlen = (t).slen + ((t).slen == 0); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_al_biswriteprotected</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t).mlen &lt;= 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
