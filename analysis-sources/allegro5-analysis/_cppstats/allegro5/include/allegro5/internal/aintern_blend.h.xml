<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\include\allegro5\internal\aintern_blend.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_ALWAYS_INLINE</name></cpp:macro> <cpp:value>inline __attribute__((always_inline))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_ALWAYS_INLINE</name></cpp:macro> <cpp:value>INLINE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_DEST_IS_ZERO</name></cpp:macro> <cpp:value>(dst_mode == ALLEGRO_ZERO &amp;&amp; dst_alpha == ALLEGRO_ZERO &amp;&amp; op != ALLEGRO_DEST_MINUS_SRC &amp;&amp; op_alpha != ALLEGRO_DEST_MINUS_SRC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_SRC_NOT_MODIFIED</name></cpp:macro> <cpp:value>(src_mode == ALLEGRO_ONE &amp;&amp; src_alpha == ALLEGRO_ONE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_SRC_NOT_MODIFIED_TINT_WHITE</name></cpp:macro> <cpp:value>(_AL_SRC_NOT_MODIFIED &amp;&amp; tint.r == 1.0f &amp;&amp; tint.g == 1.0f &amp;&amp; tint.b == 1.0f &amp;&amp; tint.a == 1.0f)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AL_NO_BLEND_INLINE_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>_AL_ALWAYS_INLINE</name> <name>float</name></type>

<name>get_alpha_factor</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ALLEGRO_BLEND_MODE</name></name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>src_alpha</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dst_alpha</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name><modifier>*</modifier></type> <name>const_alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>operation</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_ZERO</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>ALLEGRO_ONE</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>ALLEGRO_ALPHA</name></expr>:</case> <return>return <expr><name>src_alpha</name></expr>;</return>

<case>case <expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>:</case> <return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>src_alpha</name></expr>;</return>

<case>case <expr><name>ALLEGRO_SRC_COLOR</name></expr>:</case> <return>return <expr><name>src_alpha</name></expr>;</return>

<case>case <expr><name>ALLEGRO_DEST_COLOR</name></expr>:</case> <return>return <expr><name>dst_alpha</name></expr>;</return>

<case>case <expr><name>ALLEGRO_INVERSE_SRC_COLOR</name></expr>:</case> <return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>src_alpha</name></expr>;</return>

<case>case <expr><name>ALLEGRO_INVERSE_DEST_COLOR</name></expr>:</case> <return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>dst_alpha</name></expr>;</return>

<case>case <expr><name>ALLEGRO_CONST_COLOR</name></expr>:</case> <return>return <expr><name><name>const_alpha</name><operator>-&gt;</operator><name>a</name></name></expr>;</return>

<case>case <expr><name>ALLEGRO_INVERSE_CONST_COLOR</name></expr>:</case> <return>return <expr><literal type="number">1</literal> <operator>-</operator> <name><name>const_alpha</name><operator>-&gt;</operator><name>a</name></name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_AL_ALWAYS_INLINE</name> <name>void</name></type> <name>get_factor</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ALLEGRO_BLEND_MODE</name></name></type> <name>operation</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>constcol</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>operation</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_ZERO</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_ONE</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_ALPHA</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SRC_COLOR</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>factor</name> <operator>=</operator> <operator>*</operator><name>source</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_DEST_COLOR</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>factor</name> <operator>=</operator> <operator>*</operator><name>dest</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_INVERSE_SRC_COLOR</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_INVERSE_DEST_COLOR</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>dest</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>dest</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>dest</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>dest</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_CONST_COLOR</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>factor</name> <operator>=</operator> <operator>*</operator><name>constcol</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_INVERSE_CONST_COLOR</name></expr>:</case>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>constcol</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>constcol</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>constcol</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>constcol</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>factor</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_AL_ALWAYS_INLINE</name>

<name>void</name></type> <name>_al_blend_alpha_inline</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>scol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dcol</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>asrc_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adst_</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>constcol</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>asrc</name></decl>, <decl><type ref="prev"/><name>adst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>asrc</name> <operator>=</operator> <call><name>get_alpha_factor</name><argument_list>(<argument><expr><name>asrc_</name></expr></argument>, <argument><expr><name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>dcol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adst</name> <operator>=</operator> <call><name>get_alpha_factor</name><argument_list>(<argument><expr><name>adst_</name></expr></argument>, <argument><expr><name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>dcol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>get_alpha_factor</name><argument_list>(<argument><expr><name>src_</name></expr></argument>, <argument><expr><name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>dcol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>get_alpha_factor</name><argument_list>(<argument><expr><name>dst_</name></expr></argument>, <argument><expr><name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>dcol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>result-&gt;c = OP(result-&gt;c * src, dcol-&gt;c * dst);</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_ADD</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MIN(1, x + y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>r</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>g</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>b</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SRC_MINUS_DEST</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, x - y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>r</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>g</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>b</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_DEST_MINUS_SRC</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, y - x)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>r</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>g</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>b</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>aop</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_ADD</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MIN(1, x + y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>a</argument>, <argument>asrc</argument>, <argument>adst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SRC_MINUS_DEST</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, x - y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>a</argument>, <argument>asrc</argument>, <argument>adst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_DEST_MINUS_SRC</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, y - x)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>a</argument>, <argument>asrc</argument>, <argument>adst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BLEND</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_AL_ALWAYS_INLINE</name>

<name>void</name></type> <name>_al_blend_inline</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>scol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>dcol</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>asrc_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adst_</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>constcol</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>asrc</name></decl>, <decl><type ref="prev"/><name>adst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>asrc</name> <operator>=</operator> <call><name>get_alpha_factor</name><argument_list>(<argument><expr><name>asrc_</name></expr></argument>, <argument><expr><name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>dcol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adst</name> <operator>=</operator> <call><name>get_alpha_factor</name><argument_list>(<argument><expr><name>adst_</name></expr></argument>, <argument><expr><name><name>scol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>dcol</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_factor</name><argument_list>(<argument><expr><name>src_</name></expr></argument>, <argument><expr><name>scol</name></expr></argument>, <argument><expr><name>dcol</name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_factor</name><argument_list>(<argument><expr><name>dst_</name></expr></argument>, <argument><expr><name>scol</name></expr></argument>, <argument><expr><name>dcol</name></expr></argument>, <argument><expr><name>constcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>result-&gt;c = OP(result-&gt;c * src.c, dcol-&gt;c * dst.c);</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_ADD</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MIN(1, x + y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>r</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>g</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>b</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SRC_MINUS_DEST</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, x - y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>r</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>g</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>b</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_DEST_MINUS_SRC</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, y - x)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>r</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>g</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<macro><name>BLEND</name><argument_list>(<argument>b</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BLEND</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>result-&gt;c = OP(result-&gt;c * src, dcol-&gt;c * dst);</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>aop</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_ADD</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MIN(1, x + y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>a</argument>, <argument>asrc</argument>, <argument>adst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SRC_MINUS_DEST</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, x - y)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>a</argument>, <argument>asrc</argument>, <argument>adst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

<case>case <expr><name>ALLEGRO_DEST_MINUS_SRC</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_MAX(0, y - x)</cpp:value></cpp:define>

<macro><name>BLEND</name><argument_list>(<argument>a</argument>, <argument>asrc</argument>, <argument>adst</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BLEND</name></cpp:undef>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>_al_blend_memory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>src_color</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
