<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\timernu.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_timer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BCC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>timer_handle_tick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>ALLEGRO_TIMER</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name></type> <name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>speed_secs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>counter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>dtor_item</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>timers_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>active_timers</name> <init>= <expr><call><name>_AL_VECTOR_INITIALIZER</name><argument_list>(<argument><expr><name>ALLEGRO_TIMER</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_THREAD</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>timer_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>timer_cond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>destroy_thread</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_thread_proc</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{

sigset_t mask;

sigfillset(&amp;mask);

pthread_sigmask(SIG_BLOCK, &amp;mask, NULL);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_QNX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sched_param</name></name></type> <name>sparam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spolicy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_getschedparam</name><argument_list>(<argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>spolicy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparam</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sparam</name><operator>.</operator><name>sched_priority</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_setschedparam</name><argument_list>(<argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>spolicy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>double</name></type> <name>old_time</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>new_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>interval</name> <init>= <expr><literal type="number">0.032768</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>_al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>destroy_thread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name>timer_cond</name></expr></argument>, <argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>interval</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>new_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>new_time</name> <operator>-</operator> <name>old_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_time</name> <operator>=</operator> <name>new_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <call><name>_al_timer_thread_handle_tick</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>_al_timer_thread_handle_tick</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>interval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>new_delay</name> <init>= <expr><literal type="number">0.032768</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>-=</operator> <name>interval</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>timer_handle_tick</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>+=</operator> <name><name>timer</name><operator>-&gt;</operator><name>speed_secs</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>&lt;</operator> <name>new_delay</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_delay</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>counter</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>new_delay</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shutdown_timers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timer_thread</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>destroy_thread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>timer_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_thread_join</name><argument_list>(<argument><expr><name>timer_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>timer_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer_thread</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>timer_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_timer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset_counter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reset_counter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>speed_secs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>timer_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timer_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>destroy_thread</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timer_thread</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_AL_THREAD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_thread_create</name><argument_list>(<argument><expr><name>timer_thread</name></expr></argument>, <argument><expr><name>timer_thread_proc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_init_timers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>timers_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer_cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>shutdown_timers</name></expr></argument>, <argument><expr><literal type="string">"shutdown_timers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_get_active_timers_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>al_create_timer</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>speed_secs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>speed_secs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>timer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>speed_secs</name></name> <operator>=</operator> <name>speed_secs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_register_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><literal type="string">"timer"</literal></expr></argument>, <argument><expr><name>timer</name></expr></argument>,

<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>al_destroy_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>timer</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_timer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_stop_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unregister_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_start_timer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>enable_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_resume_timer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>enable_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_stop_timer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>timer</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>active_timers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_get_timer_started</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>timer</name><operator>-&gt;</operator><name>started</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>al_get_timer_speed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>timer</name><operator>-&gt;</operator><name>speed_secs</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_timer_speed</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>new_speed_secs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_speed_secs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>-=</operator> <name><name>timer</name><operator>-&gt;</operator><name>speed_secs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name> <operator>+=</operator> <name>new_speed_secs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>speed_secs</name></name> <operator>=</operator> <name>new_speed_secs</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>al_get_timer_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>timer</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_timer_count</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>new_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>new_count</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_add_timer_count</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>diff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>timers_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_handle_tick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>timer</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>timer</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>timer</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>timer</name><operator>.</operator><name>error</name></name> <operator>=</operator> <operator>-</operator><name><name>timer</name><operator>-&gt;</operator><name>counter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_timer_event_source</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>es</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
