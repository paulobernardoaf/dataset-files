<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\raspberrypi\pidisplay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xwindow.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES/gl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/egl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/eglext.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcm_host.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"picursor.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CURSOR_WIDTH</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CURSOR_HEIGHT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EGLDisplay</name></type> <name>egl_display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EGLSurface</name></type> <name>egl_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EGLContext</name></type> <name>egl_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DISPMANX_UPDATE_HANDLE_T</name></type> <name>dispman_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DISPMANX_RESOURCE_HANDLE_T</name></type> <name>cursor_resource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DISPMANX_DISPLAY_HANDLE_T</name></type> <name>dispman_display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DISPMANX_ELEMENT_HANDLE_T</name></type> <name>cursor_element</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VC_RECT_T</name></type> <name>dst_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VC_RECT_T</name></type> <name>src_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>cursor_added</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>mouse_scale_ratio_x</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>mouse_scale_ratio_y</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>ALLEGRO_DISPLAY_RASPBERRYPI_EXTRA</name> <block>{

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_cursor_data</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spitch</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpitch</name> <init>= <expr><call><name>pot</name><argument_list>(<argument><expr><name>spitch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>dpitch</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dpitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>spitch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>spitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_cursor_data</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cursor_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>cursor_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_added</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>unused</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cursor_resource</name> <operator>=</operator> <call><name>vc_dispmanx_resource_create</name><argument_list>(<argument><expr><name>VC_IMAGE_ARGB8888</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VC_RECT_T</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpitch</name> <init>= <expr><call><name>pot</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dispman_update</name> <operator>=</operator> <call><name>vc_dispmanx_update_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_resource_write_data</name><argument_list>(<argument><expr><name>cursor_resource</name></expr></argument>, <argument><expr><name>VC_IMAGE_ARGB8888</name></expr></argument>, <argument><expr><name>dpitch</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_update_submit_sync</name><argument_list>(<argument><expr><name>dispman_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_mouse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>x</name></name><operator>+</operator><name><name>d</name><operator>-&gt;</operator><name>cursor_offset_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>y</name></name><operator>+</operator><name><name>d</name><operator>-&gt;</operator><name>cursor_offset_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dispman_update</name> <operator>=</operator> <call><name>vc_dispmanx_update_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_element</name> <operator>=</operator> <call><name>vc_dispmanx_element_add</name><argument_list>(

<argument><expr><name>dispman_update</name></expr></argument>,

<argument><expr><name>dispman_display</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst_rect</name></expr></argument>,

<argument><expr><name>cursor_resource</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>src_rect</name></expr></argument>,

<argument><expr><name>DISPMANX_PROTECTION_NONE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument> ,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_update_submit_sync</name><argument_list>(<argument><expr><name>dispman_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_added</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VC_RECT_T</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>cursor_width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>cursor_height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_mouse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>x</name></name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>screen_width</name></name> <operator>/</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>y</name></name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>screen_height</name></name> <operator>/</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>x</name></name><operator>+</operator><name><name>d</name><operator>-&gt;</operator><name>cursor_offset_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>y</name></name><operator>+</operator><name><name>d</name><operator>-&gt;</operator><name>cursor_offset_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>cursor_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>cursor_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dispman_update</name> <operator>=</operator> <call><name>vc_dispmanx_update_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_element_change_attributes</name><argument_list>(

<argument><expr><name>dispman_update</name></expr></argument>,

<argument><expr><name>cursor_element</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_update_submit_sync</name><argument_list>(<argument><expr><name>dispman_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hide_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor_added</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dispman_update</name> <operator>=</operator> <call><name>vc_dispmanx_update_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_element_remove</name><argument_list>(<argument><expr><name>dispman_update</name></expr></argument>, <argument><expr><name>cursor_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_update_submit_sync</name><argument_list>(<argument><expr><name>dispman_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_resource_delete</name><argument_list>(<argument><expr><name>cursor_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_added</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_gl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_ogl_resize_backbuffer</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name> <operator>=</operator> <call><name>_al_ogl_create_backbuffer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_raspberrypi_get_screen_info</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dy</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>graphics_get_display_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>screen_width</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>cmdline</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/cmdline"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">999</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>fgetc</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"fbwidth="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"fbheight="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"fbwidth="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"fbheight="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>file_interface</name> <init>= <expr><call><name>al_get_new_file_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_standard_file_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>al_load_config_file</name><argument_list>(<argument><expr><literal type="string">"/boot/config.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disable_overscan</name> <init>=

<expr><call><name>al_get_config_value</name><argument_list>(

<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"disable_overscan"</literal></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disable_overscan</name> <operator>||</operator>

<operator>(</operator><name>disable_overscan</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>disable_overscan</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>atoi</name><argument_list>(<argument><expr><name>disable_overscan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(

<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"overscan_left"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(

<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"overscan_right"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(

<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"overscan_top"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(

<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"overscan_bottom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><ternary><condition><expr><name>left</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xx</name> <operator>-=</operator> <ternary><condition><expr><name>right</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><ternary><condition><expr><name>top</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>yy</name> <operator>-=</operator> <ternary><condition><expr><name>bottom</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>screen_width</name> <operator>-</operator> <name>w</name> <operator>+</operator> <name>xx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dy</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>screen_height</name> <operator>-</operator> <name>h</name> <operator>+</operator> <name>yy</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>screen_width</name> <operator>-</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dy</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>screen_height</name> <operator>-</operator> <name>h</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Couldn't open /boot/config.txt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_set_new_file_interface</name><argument_list>(<argument><expr><name>file_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_raspberrypi_get_mouse_scale_ratios</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>mouse_scale_ratio_x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>mouse_scale_ratio_y</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pi_create_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name> <init>= <expr><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>egl_display</name> <operator>=</operator> <call><name>eglGetDisplay</name><argument_list>(<argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>egl_display</name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglInitialize</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EGLint</name></type> <name><name>attrib_list</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>EGL_DEPTH_SIZE</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>EGL_STENCIL_SIZE</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>EGL_RED_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>,

<expr><name>EGL_GREEN_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>,

<expr><name>EGL_BLUE_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>,

<expr><name>EGL_ALPHA_SIZE</name></expr>, <expr><literal type="number">8</literal></expr>,

<expr><name>EGL_SURFACE_TYPE</name></expr>, <expr><name>EGL_WINDOW_BIT</name></expr>,

<expr><name>EGL_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STENCIL_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name> <operator>||</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>||</operator>

<name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name> <operator>||</operator>

<name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib_list</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EGLConfig</name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_configs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglChooseConfig</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>attrib_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_configs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eglBindAPI</name><argument_list>(<argument><expr><name>EGL_OPENGL_ES_API</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>es_ver</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EGLint</name></type> <name><name>ctxattr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>EGL_CONTEXT_CLIENT_VERSION</name></expr>, <expr><literal type="number">0xDEADBEEF</literal></expr>,

<expr><name>EGL_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctxattr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>es_ver</name></expr>;</expr_stmt>

<expr_stmt><expr><name>egl_context</name> <operator>=</operator> <call><name>eglCreateContext</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>, <argument><expr><name>ctxattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>egl_context</name> <operator>==</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EGL_DISPMANX_WINDOW_T</name></type> <name>nativewindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPMANX_ELEMENT_HANDLE_T</name></type> <name>dispman_element</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>screen_width</name></decl>, <decl><type ref="prev"/><name>screen_height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_raspberrypi_get_screen_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_scale_ratio_x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name>screen_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_scale_ratio_y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name>screen_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_offset_x</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_offset_y</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>screen_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_rect</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>screen_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>screen_width</name></name> <operator>=</operator> <name>screen_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>screen_height</name></name> <operator>=</operator> <name>screen_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dispman_display</name> <operator>=</operator> <call><name>vc_dispmanx_display_open</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dispman_update</name> <operator>=</operator> <call><name>vc_dispmanx_update_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dispman_element</name> <operator>=</operator> <call><name>vc_dispmanx_element_add</name> <argument_list>(

<argument><expr><name>dispman_update</name></expr></argument>,

<argument><expr><name>dispman_display</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst_rect</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>src_rect</name></expr></argument>,

<argument><expr><name>DISPMANX_PROTECTION_NONE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument> ,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>DISPMANX_NO_ROTATE</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nativewindow</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>dispman_element</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nativewindow</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nativewindow</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc_dispmanx_update_submit_sync</name><argument_list>(<argument><expr><name>dispman_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>egl_window</name> <operator>=</operator> <call><name>eglCreateWindowSurface</name><argument_list>(

<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nativewindow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>egl_window</name> <operator>==</operator> <name>EGL_NO_SURFACE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>egl_window</name></expr></argument>, <argument><expr><name>egl_window</name></expr></argument>, <argument><expr><name>egl_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_evdev_set_mouse_range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>raspberrypi_create_display</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ogl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name> <operator>=</operator> <name>ogl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <call><name>_al_get_raspberrypi_display_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_RASPBERRYPI</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pi_create_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>root</name> <init>= <expr><call><name>RootWindow</name><argument_list>(

<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>XCreateWindow</name><argument_list>(

<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,

<argument><expr><name>root</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>attr</name><operator>.</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>attr</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>InputOnly</name></expr></argument>,

<argument><expr><call><name>DefaultVisual</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSelectInput</name><argument_list>(

<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,

<argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name>PointerMotionMask</name> <operator>|</operator> <name>KeyPressMask</name> <operator>|</operator> <name>KeyReleaseMask</name> <operator>|</operator> <name>ButtonPressMask</name> <operator>|</operator> <name>ButtonReleaseMask</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMapWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xwin_reset_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xwin_set_fullscreen_window</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xwin_set_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,

<argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_grab_mouse</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_manage_extensions</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_gl</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_is_mouse_installed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_evdev_set_mouse_range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_cursor_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>default_cursor</name></expr></argument>, <argument><expr><name>DEFAULT_CURSOR_WIDTH</name></expr></argument>, <argument><expr><name>DEFAULT_CURSOR_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<return>return <expr><name>display</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>pidisplay</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hide_cursor</name><argument_list>(<argument><expr><name>pidisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_cursor_data</name><argument_list>(<argument><expr><name>pidisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><operator>(</operator><name>ALLEGRO_BITMAP</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_convert_to_memory_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_RASPBERRYPI</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eglMakeCurrent</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eglDestroySurface</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>egl_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eglDestroyContext</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>egl_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eglTerminate</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XUnmapWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>pidisplay</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDestroyWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>pidisplay</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>==</operator> <name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_set_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_update_render_state</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>raspberrypi_get_orientation</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<return>return <expr><name>ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_is_compatible_bitmap</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_set_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bitmaps</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>num_icons</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmaps</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>title</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_set_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_set_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min_w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min_h</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>max_w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>max_h</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flag</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>onoff</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_get_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_get_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min_w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min_h</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>max_w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>max_h</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_wait_for_vsync</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_flip_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>eglSwapBuffers</name><argument_list>(<argument><expr><name>egl_display</name></expr></argument>, <argument><expr><name>egl_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_added</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_cursor</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <operator>*</operator><operator>)</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raspberrypi_update_display_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raspberrypi_flip_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>setup_gl</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_show_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hide_cursor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_cursor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_hide_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hide_cursor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_set_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_RASPBERRYPI</name> <modifier>*</modifier></type><name>pi_cursor</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>pi_cursor</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>pi_cursor</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name>w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name> <init>= <expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>pi_cursor</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>pi_cursor</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_cursor_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_cursor_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_added</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hide_cursor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_cursor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>raspberrypi_set_system_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>cursor_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cursor_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_RASPBERRYPI</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>delete_cursor_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_cursor_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>default_cursor</name></expr></argument>, <argument><expr><name>DEFAULT_CURSOR_WIDTH</name></expr></argument>, <argument><expr><name>DEFAULT_CURSOR_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_get_raspberrypi_display_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_display</name></name> <operator>=</operator> <name>raspberrypi_create_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>destroy_display</name></name> <operator>=</operator> <name>raspberrypi_destroy_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_current_display</name></name> <operator>=</operator> <name>raspberrypi_set_current_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>flip_display</name></name> <operator>=</operator> <name>raspberrypi_flip_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_display_region</name></name> <operator>=</operator> <name>raspberrypi_update_display_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>acknowledge_resize</name></name> <operator>=</operator> <name>raspberrypi_acknowledge_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>create_bitmap</name></name> <operator>=</operator> <name>_al_ogl_create_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_backbuffer</name></name> <operator>=</operator> <name>_al_ogl_get_backbuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_target_bitmap</name></name> <operator>=</operator> <name>_al_ogl_set_target_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_orientation</name></name> <operator>=</operator> <name>raspberrypi_get_orientation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>is_compatible_bitmap</name></name> <operator>=</operator> <name>raspberrypi_is_compatible_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>resize_display</name></name> <operator>=</operator> <name>raspberrypi_resize_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_icons</name></name> <operator>=</operator> <name>raspberrypi_set_icons</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_title</name></name> <operator>=</operator> <name>raspberrypi_set_window_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_position</name></name> <operator>=</operator> <name>raspberrypi_set_window_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_window_position</name></name> <operator>=</operator> <name>raspberrypi_get_window_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_window_constraints</name></name> <operator>=</operator> <name>raspberrypi_set_window_constraints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_window_constraints</name></name> <operator>=</operator> <name>raspberrypi_get_window_constraints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_display_flag</name></name> <operator>=</operator> <name>raspberrypi_set_display_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>wait_for_vsync</name></name> <operator>=</operator> <name>raspberrypi_wait_for_vsync</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>update_render_state</name></name> <operator>=</operator> <name>_al_ogl_update_render_state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_add_drawing_functions</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_mouse_cursor</name></name> <operator>=</operator> <name>raspberrypi_set_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_system_mouse_cursor</name></name> <operator>=</operator> <name>raspberrypi_set_system_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>show_mouse_cursor</name></name> <operator>=</operator> <name>raspberrypi_show_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>hide_mouse_cursor</name></name> <operator>=</operator> <name>raspberrypi_hide_mouse_cursor</name></expr>;</expr_stmt>

<return>return <expr><name>vt</name></expr>;</return>

</block_content>}</block></function>

</unit>
