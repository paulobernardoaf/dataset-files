<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\linux\lasyncio.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/linalleg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SIGIO_HOOK</name></type> <name>user_sigio_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ASYNC_IO_MODE</name></cpp:macro> <cpp:value>ASYNC_BSD</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name></type> <name>__al_linux_async_io_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>SIGIO_HOOK</name></type> <name>al_linux_install_sigio_hook</name> <parameter_list>(<parameter><decl><type><name>SIGIO_HOOK</name></type> <name>hook</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SIGIO_HOOK</name></type> <name>ret</name> <init>= <expr><name>user_sigio_hook</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>user_sigio_hook</name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>async_io_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>__al_linux_std_drivers</name><index>[<expr><name>STD_MOUSE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>__al_linux_std_drivers</name><index>[<expr><name>STD_MOUSE</name></expr>]</index></name><operator>-&gt;</operator><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>__al_linux_std_drivers</name><index>[<expr><name>STD_KBD</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>__al_linux_std_drivers</name><index>[<expr><name>STD_KBD</name></expr>]</index></name><operator>-&gt;</operator><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>user_sigio_hook</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>user_sigio_hook</name><argument_list>(<argument><expr><name>SIGIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_linux_set_async_mode</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sigaction</name></name></type> <name>org_sigio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ASYNC_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DEFAULT_ASYNC_IO_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>__al_linux_async_set_drivers</name> <argument_list>(<argument><expr><name>__al_linux_async_io_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>__al_linux_async_io_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ASYNC_BSD</name></expr>:</case>

<expr_stmt><expr><call><name>sigaction</name> <argument_list>(<argument><expr><name>SIGIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>org_sigio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>__al_linux_async_io_mode</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>__al_linux_async_io_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ASYNC_BSD</name></expr>:</case>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>async_io_event</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigfillset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name> <argument_list>(<argument><expr><name>SIGIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>org_sigio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>__al_linux_async_set_drivers</name> <argument_list>(<argument><expr><name>__al_linux_async_io_mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_linux_is_async_mode</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>__al_linux_async_io_mode</name> <operator>!=</operator> <name>ASYNC_OFF</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
