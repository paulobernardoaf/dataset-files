<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\linux\lstddrv.c"><cpp:error>#<cpp:directive>error</cpp:directive> This file is no longer used.</cpp:error>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/linalleg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>STD_DRIVER</name> <modifier>*</modifier></type><name><name>__al_linux_std_drivers</name><index>[<expr><name>N_STD_DRIVERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>std_drivers_suspended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>__al_linux_add_standard_driver</name> <parameter_list>(<parameter><decl><type><name>STD_DRIVER</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>N_STD_DRIVERS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>__al_linux_std_drivers</name><index>[<expr><name><name>spec</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>spec</name><operator>-&gt;</operator><name>resume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__al_linux_remove_standard_driver</name> <parameter_list>(<parameter><decl><type><name>STD_DRIVER</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>N_STD_DRIVERS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>__al_linux_std_drivers</name><index>[<expr><name><name>spec</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>__al_linux_std_drivers</name><index>[<expr><name><name>spec</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>!=</operator> <name>spec</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>spec</name><operator>-&gt;</operator><name>suspend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>__al_linux_std_drivers</name><index>[<expr><name><name>spec</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_update_standard_drivers</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>threaded</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>std_drivers_suspended</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_STD_DRIVERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>__al_linux_std_drivers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>__al_linux_std_drivers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_suspend_standard_drivers</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>std_drivers_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std_drivers_suspended</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_resume_standard_drivers</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>std_drivers_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std_drivers_suspended</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
