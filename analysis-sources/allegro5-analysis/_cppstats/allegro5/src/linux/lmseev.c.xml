<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\linux\lmseev.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_LINUX_INPUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><expr><literal type="string">"lmseev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintlnx.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_I</name></cpp:macro> <cpp:value>"al-evdev INFO: "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_W</name></cpp:macro> <cpp:value>"al-evdev WARNING: "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_E</name></cpp:macro> <cpp:value>"al-evdev ERROR: "</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AL_MOUSE_EVDEV</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_MOUSE</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>state</name></decl>;</decl_stmt>

}</block></struct></type> <name>AL_MOUSE_EVDEV</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>AL_MOUSE_EVDEV</name></type> <name>the_mouse</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_new_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_button_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_down</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_axis_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>generate_mouse_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>_al_evdev_set_mouse_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{

<decl><name>MODE_RELATIVE</name></decl>,

<decl><name>MODE_ABSOLUTE</name></decl>

}</block></enum></type> <name>MODE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TOOL</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>tool_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MODE</name></type> <name>mode</name></decl>;</decl_stmt> 

}</block></struct></type> <name>TOOL</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TOOL</name></type> <name><name>tools</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>BTN_TOOL_MOUSE</name></expr>, <expr><name>MODE_RELATIVE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_PEN</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_RUBBER</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_BRUSH</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_PENCIL</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_AIRBRUSH</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_FINGER</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>BTN_TOOL_LENS</name></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>MODE_ABSOLUTE</name></expr> }</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TOOL</name> <modifier>*</modifier></type><name>default_tool</name> <init>= <expr><name>tools</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TOOL</name> <modifier>*</modifier></type><name>no_tool</name> <init>= <expr><name>tools</name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tools</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tools</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TOOL</name> <modifier>*</modifier></type><name>current_tool</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>TOOL</name> <modifier>*</modifier></type><name>find_tool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tool_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TOOL</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name><operator>=</operator><name>tools</name></expr>;</init> <condition><expr><name>t</name><operator>!=</operator><name>no_tool</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>tool_id</name></name> <operator>==</operator> <name>tool_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>default_tool</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>AXIS</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>in_min</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_min</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>speed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mickeys</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_abs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_abs</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AXIS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_RANGE</name><parameter_list>(<parameter><type><name>axis</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (axis).in_max-(axis).in_min+1 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_RANGE</name><parameter_list>(<parameter><type><name>axis</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (axis).out_max-(axis).out_min+1 )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>in_to_screen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AXIS</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>v</name><operator>-</operator><name><name>axis</name><operator>-&gt;</operator><name>in_min</name></name><operator>)</operator> <operator>*</operator> <call><name>OUT_RANGE</name><argument_list>(<argument><expr><operator>*</operator><name>axis</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <call><name>IN_RANGE</name><argument_list>(<argument><expr><operator>*</operator><name>axis</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name><name>axis</name><operator>-&gt;</operator><name>out_min</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rel_event</name><parameter_list>(<parameter><decl><type><name>AXIS</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>out_abs</name></name> <operator>+</operator> <name>v</name><operator>*</operator><name><name>axis</name><operator>-&gt;</operator><name>speed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>mickeys</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_abs</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>abs_event</name><parameter_list>(<parameter><decl><type><name>AXIS</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><name>MODE</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_ABSOLUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_abs</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><call><name>in_to_screen</name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>v</name><operator>-</operator><name><name>axis</name><operator>-&gt;</operator><name>in_abs</name></name><operator>)</operator><operator>*</operator><name><name>axis</name><operator>-&gt;</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>mickeys</name></name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_abs</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><name><name>axis</name><operator>-&gt;</operator><name>out_abs</name></name> <operator>+</operator> <name>value</name><operator>*</operator><name><name>axis</name><operator>-&gt;</operator><name>speed</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_axis_value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>AXIS</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>abs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_abs</name></name> <operator>=</operator> <name><name>abs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>max</name> <init>= <expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>EV_MAX</name></expr></argument>, <argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>KEY_MAX</name></expr></argument>, <argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>REL_MAX</name></expr></argument>, <argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>ABS_MAX</name></expr></argument>, <argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>LED_MAX</name></expr></argument>, <argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>SND_MAX</name></expr></argument>, <argument><expr><name>FF_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>bits</name><index>[<expr><operator>(</operator><name>max</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>len</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>bits</name><index>[<expr><name>code</name><operator>/</operator><name>len</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>code</name><operator>%</operator><name>len</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_num_buttons</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><name>BTN_MIDDLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><name>BTN_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><name>BTN_MOUSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>AXIS</name></type> <name>x_axis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>AXIS</name></type> <name>y_axis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>AXIS</name></type> <name>z_axis</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>AXIS</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

char tmp1[256]; 

char tmp2[256]; 

char tmp3[256]; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name><name>abs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>config_speed</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>section</name></expr>;</expr_stmt>

<expr_stmt><expr><name>config_speed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>axis</name><operator>-&gt;</operator><name>in_min</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_min</name></name><operator>=</operator><name><name>abs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>axis</name><operator>-&gt;</operator><name>in_max</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_max</name></name><operator>=</operator><name><name>abs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_abs</name></name> <operator>=</operator> <name><name>abs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">320.0</literal><operator>*</operator><name>config_speed</name><operator>/</operator><call><name>IN_RANGE</name><argument_list>(<argument><expr><operator>*</operator><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>axis</name><operator>-&gt;</operator><name>in_min</name></name><operator>&gt;</operator><name><name>axis</name><operator>-&gt;</operator><name>in_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>in_min</name></name> <operator>=</operator> <name><name>axis</name><operator>-&gt;</operator><name>in_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>out_min</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>out_max</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>axis</name><operator>-&gt;</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_tablet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>default_abs</name> <init>= <expr><name><name>default_tool</name><operator>-&gt;</operator><name>mode</name></name><operator>==</operator><name>MODE_ABSOLUTE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>default_abs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>default_tool</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_ABSOLUTE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>default_tool</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_RELATIVE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_axis</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_axis</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="string">"mouse"</literal></expr></argument>, <argument><expr><name>ABS_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_axis</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_axis</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><literal type="string">"mouse"</literal></expr></argument>, <argument><expr><name>ABS_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_axis</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z_axis</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="string">"mouse"</literal></expr></argument>, <argument><expr><name>ABS_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BTN_LEFT</name></expr>:</case> 

<case>case <expr><name>BTN_TOUCH</name></expr>:</case> 

<expr_stmt><expr><call><name>handle_button_event</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BTN_RIGHT</name></expr>:</case> 

<case>case <expr><name>BTN_STYLUS</name></expr>:</case> 

<expr_stmt><expr><call><name>handle_button_event</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BTN_MIDDLE</name></expr>:</case> 

<case>case <expr><name>BTN_STYLUS2</name></expr>:</case> 

<expr_stmt><expr><call><name>handle_button_event</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BTN_TOOL_MOUSE</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_PEN</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_RUBBER</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_BRUSH</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_PENCIL</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_AIRBRUSH</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_FINGER</name></expr>:</case>

<case>case <expr><name>BTN_TOOL_LENS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_tool</name> <operator>=</operator> <call><name>find_tool</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_axis_value</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_axis</name></expr></argument>, <argument><expr><name>ABS_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_axis_value</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_axis</name></expr></argument>, <argument><expr><name>ABS_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_axis_value</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z_axis</name></expr></argument>, <argument><expr><name>ABS_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ABS_WHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>get_axis_value</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z_axis</name></expr></argument>, <argument><expr><name>ABS_WHEEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>current_tool</name> <operator>=</operator> <name>no_tool</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_button_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_down</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>event_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_down</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>buttons</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>buttons</name></name> <operator>&amp;=</operator><operator>~</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(

<argument><expr><name>event_type</name></expr></argument>,

<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_rel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_tool</name><operator>!=</operator><name>no_tool</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>REL_X</name></expr>:</case>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>rel_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_axis</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_axis_event</name><argument_list>(<argument><expr><name><name>x_axis</name><operator>.</operator><name>mickeys</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>REL_Y</name></expr>:</case>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>rel_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y_axis</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_axis_event</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>y_axis</name><operator>.</operator><name>mickeys</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REL_WHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>REL_WHEEL</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>REL_Z</name></expr>:</case>

<expr_stmt><expr><name><name>z_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>rel_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z_axis</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_axis_event</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z_axis</name><operator>.</operator><name>mickeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_axis</name><operator>.</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_abs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_tool</name><operator>!=</operator><name>no_tool</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ABS_X</name></expr>:</case>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>abs_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_axis</name></expr></argument>, <argument><expr><name><name>current_tool</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ABS_Y</name></expr>:</case>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>abs_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y_axis</name></expr></argument>, <argument><expr><name><name>current_tool</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ABS_WHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ABS_WHEEL</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ABS_Z</name></expr>:</case>

<expr_stmt><expr><name><name>z_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>abs_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z_axis</name></expr></argument>, <argument><expr><name><name>current_tool</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_axis_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_tool</name> <operator>!=</operator> <name>no_tool</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><name><name>x_axis</name><operator>.</operator><name>out_min</name></name></expr></argument>, <argument><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name></expr></argument>, <argument><expr><name><name>x_axis</name><operator>.</operator><name>out_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><name><name>y_axis</name><operator>.</operator><name>out_min</name></name></expr></argument>, <argument><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name></expr></argument>, <argument><expr><name><name>y_axis</name><operator>.</operator><name>out_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>x_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>y_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>z_axis</name><operator>.</operator><name>out_abs</name></name> <operator>*</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dz</name> <operator>*=</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(

<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,

<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><name>dz</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_mouse_device</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name>device_file</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Opened device %s\n"</literal></expr></argument>, <argument><expr><name>device_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><name>BTN_MOUSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device %s was a mouse.\n"</literal></expr></argument>, <argument><expr><name>device_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device %s was not mouse, closing.\n"</literal></expr></argument>, <argument><expr><name>device_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mouse_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>current_tool</name> <operator>=</operator> <name>default_tool</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>device_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"/dev/input/event0"</literal></expr>,

<expr><literal type="string">"/dev/input/event1"</literal></expr>,

<expr><literal type="string">"/dev/input/event2"</literal></expr>,

<expr><literal type="string">"/dev/input/event3"</literal></expr>,

<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Trying /dev/input/event[0-3] devices\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>device_name</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open_mouse_device</name> <argument_list>(<argument><expr><name><name>device_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_tablet</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unix_start_watching_fd</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>process_new_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>the_mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mouse_exit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_unix_stop_watching_fd</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_mouse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_mouse</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse_get_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_MOUSE</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>the_mouse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mouse_get_mouse_num_buttons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_num_buttons</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mouse_get_mouse_num_axes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mouse_set_mouse_xy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><name><name>x_axis</name><operator>.</operator><name>out_min</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>x_axis</name><operator>.</operator><name>out_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><name><name>y_axis</name><operator>.</operator><name>out_min</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>y_axis</name><operator>.</operator><name>out_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>mickeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dx</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dy</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>x_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>y_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(

<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,

<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mouse_set_mouse_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dz</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dz</name> <operator>=</operator> <name><name>z_axis</name><operator>.</operator><name>out_abs</name></name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>z_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(

<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,

<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dz</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_evdev_set_mouse_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_min</name></name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_min</name></name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_max</name></name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_max</name></name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><name><name>x_axis</name><operator>.</operator><name>out_min</name></name></expr></argument>, <argument><expr><name><name>x_axis</name><operator>.</operator><name>out_abs</name></name></expr></argument>, <argument><expr><name><name>x_axis</name><operator>.</operator><name>out_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>=</operator> <call><name>_ALLEGRO_CLAMP</name><argument_list>(<argument><expr><name><name>y_axis</name><operator>.</operator><name>out_min</name></name></expr></argument>, <argument><expr><name><name>y_axis</name><operator>.</operator><name>out_abs</name></name></expr></argument>, <argument><expr><name><name>y_axis</name><operator>.</operator><name>out_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>x_axis</name><operator>.</operator><name>out_abs</name></name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>y_axis</name><operator>.</operator><name>out_abs</name></name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dx</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dy</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>x_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>y_axis</name><operator>.</operator><name>out_abs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(

<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,

<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mouse_get_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_new_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>AL_MOUSE_EVDEV</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>==</operator> <operator>&amp;</operator><name>the_mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name><name>events</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>bytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>the_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><sizeof>sizeof <name>events</name></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>bytes</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>events</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>process_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EV_KEY</name></expr>:</case>

<expr_stmt><expr><call><name>process_key</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EV_REL</name></expr>:</case>

<expr_stmt><expr><call><name>process_rel</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EV_ABS</name></expr>:</case>

<expr_stmt><expr><call><name>process_abs</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_mouse_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dy</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dz</name></name> <operator>=</operator> <name>dz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_DRIVER</name></type> <name>_al_mousedrv_linux_evdev</name> <init>=

<expr><block>{

<expr><name>AL_MOUSEDRV_LINUX_EVDEV</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"Linux EVDEV mouse (and tablet)"</literal></expr>,

<expr><name>mouse_init</name></expr>,

<expr><name>mouse_exit</name></expr>,

<expr><name>mouse_get_mouse</name></expr>,

<expr><name>mouse_get_mouse_num_buttons</name></expr>,

<expr><name>mouse_get_mouse_num_axes</name></expr>,

<expr><name>mouse_set_mouse_xy</name></expr>,

<expr><name>mouse_set_mouse_axis</name></expr>,

<expr><name>mouse_get_state</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
