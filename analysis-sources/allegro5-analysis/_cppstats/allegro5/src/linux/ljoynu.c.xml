<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\linux\ljoynu.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_KEY_DEFINES</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_LINUX_INPUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_INOTIFY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPORT_HOTPLUG</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/inotify.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KEY_CNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CNT</name></cpp:macro> <cpp:value>(KEY_MAX+1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ABS_CNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS_CNT</name></cpp:macro> <cpp:value>(ABS_MAX+1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><expr><literal type="string">"ljoy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_ljoynu.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BITS</name></cpp:macro> <cpp:value>(sizeof(long) * 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLONGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + LONG_BITS - 1) / LONG_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BIT</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1UL &lt;&lt; ((nr) % LONG_BITS)) &amp; (addr)[(nr) / LONG_BITS])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJOY_AXIS_RANGE_START</name></cpp:macro> <cpp:value>(ABS_X)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJOY_AXIS_RANGE_END</name></cpp:macro> <cpp:value>(ABS_HAT3Y + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJOY_BTN_RANGE_START</name></cpp:macro> <cpp:value>(BTN_MISC)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BTN_TRIGGER_HAPPY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJOY_BTN_RANGE_END</name></cpp:macro> <cpp:value>(BTN_TRIGGER_HAPPY40 + 1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJOY_BTN_RANGE_END</name></cpp:macro> <cpp:value>(BTN_GEAR_UP + 1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_init_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_exit_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_reconfigure_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ljoy_num_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>ljoy_get_joystick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_release_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_get_joystick_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ljoy_get_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_process_new_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_generate_axis_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stick</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_generate_button_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_EVENT_TYPE</name></type> <name>event_type</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_DRIVER</name></type> <name>_al_joydrv_linux</name> <init>=

<expr><block>{

<expr><name>_ALLEGRO_JOYDRV_LINUX</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"Linux joystick(s)"</literal></expr>,

<expr><name>ljoy_init_joystick</name></expr>,

<expr><name>ljoy_exit_joystick</name></expr>,

<expr><name>ljoy_reconfigure_joysticks</name></expr>,

<expr><name>ljoy_num_joysticks</name></expr>,

<expr><name>ljoy_get_joystick</name></expr>,

<expr><name>ljoy_release_joystick</name></expr>,

<expr><name>ljoy_get_joystick_state</name></expr>,

<expr><name>ljoy_get_name</name></expr>,

<expr><name>ljoy_get_active</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>num_joysticks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>joysticks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>bool</name></type> <name>config_needs_merging</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>config_mutex</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HOTPLUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inotify_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>hotplug_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>hotplug_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>hotplug_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>hotplug_ended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_joystick_button</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <name>LJOY_BTN_RANGE_START</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>LJOY_BTN_RANGE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>BTN_MISC</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>BTN_9</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>BTN_JOYSTICK</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>BTN_DEAD</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>BTN_GAMEPAD</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>BTN_THUMBR</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>BTN_WHEEL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>BTN_GEAR_UP</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BTN_TRIGGER_HAPPY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>BTN_TRIGGER_HAPPY</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>BTN_TRIGGER_HAPPY40</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_single_axis_throttle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <name>LJOY_AXIS_RANGE_START</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>LJOY_AXIS_RANGE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>==</operator> <name>ABS_THROTTLE</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_RUDDER</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_WHEEL</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_GAS</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_BRAKE</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_PRESSURE</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_DISTANCE</name>

<operator>||</operator> <name>i</name> <operator>==</operator> <name>ABS_TOOL_WIDTH</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_hat_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>ABS_HAT0X</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>ABS_HAT3Y</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>have_joystick_button</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>key_bits</name><index>[<expr><call><name>NLONGS</name><argument_list>(<argument><expr><name>KEY_CNT</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_bits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LJOY_BTN_RANGE_START</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LJOY_BTN_RANGE_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>key_bits</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_joystick_button</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>have_joystick_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>abs_bits</name><index>[<expr><call><name>NLONGS</name><argument_list>(<argument><expr><name>ABS_CNT</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_ABS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abs_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs_bits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LJOY_AXIS_RANGE_START</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LJOY_AXIS_RANGE_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>abs_bits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_detect_device_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"device%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"joystick"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>stat</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>ljoy_by_device_name</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name> <operator>&amp;&amp;</operator> <call><name>al_ustr_equal</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><name><name>joy</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>joy</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_generate_configure_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_generate_joystick_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>ljoy_allocate_structure</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>joy</name> <operator>=</operator> <operator>*</operator><name>slot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>==</operator> <name>LJOY_STATE_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>joy</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>joy</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <name>joy</name></expr>;</expr_stmt>

<return>return <expr><name>joy</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inactivate_joy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>==</operator> <name>LJOY_STATE_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>=</operator> <name>LJOY_STATE_UNUSED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unix_stop_watching_fd</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>num_sticks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>num_buttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>button</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>joystate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>joystate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>device_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_axis_mapping</name><parameter_list>(<parameter><decl><type><name>AXIS_MAPPING</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stick</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_absinfo</name></name> <modifier>*</modifier></type><name>absinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>stick</name></name> <operator>=</operator> <name>stick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>axis</name></name> <operator>=</operator> <name>axis</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>absinfo</name><operator>-&gt;</operator><name>minimum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>absinfo</name><operator>-&gt;</operator><name>maximum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>absinfo</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>fuzz</name></name> <operator>=</operator> <name><name>absinfo</name><operator>-&gt;</operator><name>fuzz</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>flat</name></name> <operator>=</operator> <name><name>absinfo</name><operator>-&gt;</operator><name>flat</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fill_joystick_axes</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>abs_bits</name><index>[<expr><call><name>NLONGS</name><argument_list>(<argument><expr><name>ABS_CNT</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>axis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_sticks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_throttles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_ABS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abs_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stick</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>axis</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name_sticks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name_throttles</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LJOY_AXIS_RANGE_START</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LJOY_AXIS_RANGE_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_absinfo</name></name></type> <name>absinfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>abs_bits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGABS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_single_axis_throttle</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_throttles</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>ALLEGRO_JOYFLAG_ANALOGUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>num_axes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"X"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><literal type="string">"Throttle %d"</literal></expr></argument>, <argument><expr><name>name_throttles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_axis_mapping</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>axis_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stick</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>axis</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_sticks</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_hat_axis</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>ALLEGRO_JOYFLAG_DIGITAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>ALLEGRO_JOYFLAG_ANALOGUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>num_axes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"X"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Y"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><literal type="string">"Stick %d"</literal></expr></argument>, <argument><expr><name>name_sticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_axis_mapping</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>axis_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>axis</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>axis</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_axis_mapping</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>axis_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>absinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stick</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>axis</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>num_sticks</name></name> <operator>=</operator> <name>stick</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fill_joystick_buttons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>key_bits</name><index>[<expr><call><name>NLONGS</name><argument_list>(<argument><expr><name>KEY_CNT</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGBIT</name><argument_list>(<argument><expr><name>EV_KEY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_bits</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LJOY_BTN_RANGE_START</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LJOY_BTN_RANGE_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TEST_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>key_bits</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_joystick_button</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>button_mapping</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>ev_code</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Input event code %d maps to button %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>button</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>button</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"B%d"</literal></expr></argument>, <argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>_AL_MAX_JOYSTICK_BUTTONS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name><operator>.</operator><name>num_buttons</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>_AL_MAX_JOYSTICK_BUTTONS</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>button_mapping</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>ev_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_device</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><call><name>ljoy_by_device_name</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device %s still exists\n"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to open device %s\n"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_joystick_button</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>have_joystick_axis</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device %s not a joystick\n"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device %s is new\n"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>joy</name> <operator>=</operator> <call><name>ljoy_allocate_structure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>device_name</name></name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>=</operator> <name>LJOY_STATE_BORN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>config_needs_merging</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>EVIOCGNAME</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>joy</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fill_joystick_axes</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>fill_joystick_buttons</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"fill_joystick_info failed %s\n"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inactivate_joy</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_unix_start_watching_fd</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ljoy_process_new_data</name></expr></argument>, <argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_scan</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>configure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>device_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>joypp</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>joypp</name><operator>)</operator><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>device_name</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>num</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ljoy_detect_device_name</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ljoy_device</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>folders</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"/dev/input/by-path"</literal></expr>, <expr><literal type="string">"/dev/input"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>al_create_fs_entry</name><argument_list>(<argument><expr><name><name>folders</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_open_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><literal type="string">"-event-joystick"</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>al_read_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_fs_entry_mode</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_get_fs_entry_name</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator><literal type="number">1</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ljoy_device</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_close_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not find joysticks in %s\n"</literal></expr></argument>, <argument><expr><name><name>folders</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>joypp</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>*</operator><name>joypp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>==</operator> <name>LJOY_STATE_ALIVE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>joy</name><operator>-&gt;</operator><name>marked</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Device %s to be inactivated\n"</literal></expr></argument>,

<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>=</operator> <name>LJOY_STATE_DYING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>config_needs_merging</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>config_needs_merging</name> <operator>&amp;&amp;</operator> <name>configure</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ljoy_generate_configure_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_merge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>config_needs_merging</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_joysticks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LJOY_STATE_UNUSED</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>LJOY_STATE_BORN</name></expr>:</case>

<case>case <expr><name>LJOY_STATE_ALIVE</name></expr>:</case>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name> <operator>=</operator> <name>LJOY_STATE_ALIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_joysticks</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LJOY_STATE_DYING</name></expr>:</case>

<expr_stmt><expr><call><name>inactivate_joy</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Merge done, num_joysticks=%d\n"</literal></expr></argument>, <argument><expr><name>num_joysticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HOTPLUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_config_dev_changed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>hotplug_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hotplug_proc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hotplug_ended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name>hotplug_cond</name></expr></argument>, <argument><expr><name>hotplug_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hotplug_ended</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ljoy_scan</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>hotplug_ended</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_init_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_JOYSTICK_LINUX</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_joysticks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>config_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ljoy_scan</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ljoy_merge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HOTPLUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hotplug_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hotplug_cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>hotplug_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hotplug_thread</name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>hotplug_proc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>hotplug_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>hotplug_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name>hotplug_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inotify_fd</name> <operator>=</operator> <call><name>inotify_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inotify_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inotify_add_watch</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>, <argument><expr><literal type="string">"/dev/input"</literal></expr></argument>, <argument><expr><name>IN_CREATE</name><operator>|</operator><name>IN_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unix_start_watching_fd</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>, <argument><expr><name>ljoy_config_dev_changed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Hotplugging enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Hotplugging not enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inotify_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inotify_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_exit_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_HOTPLUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inotify_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_unix_stop_watching_fd</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>inotify_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inotify_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hotplug_ended</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>hotplug_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name>hotplug_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>config_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>inactivate_joy</name><argument_list>(<argument><expr><operator>*</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>*</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_joysticks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_reconfigure_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_needs_merging</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ljoy_merge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ljoy_num_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>num_joysticks</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>ljoy_get_joystick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joysticks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ACTIVE_STATE</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator><name>joy</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>config_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_release_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>joy_</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_get_joystick_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_LINUX</name> <operator>*</operator><operator>)</operator> <name>joy_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name><name>joy</name><operator>-&gt;</operator><name>joystate</name></name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ljoy_get_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_LINUX</name> <operator>*</operator><operator>)</operator><name>joy_</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>joy</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ljoy_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_LINUX</name> <operator>*</operator><operator>)</operator><name>joy_</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ACTIVE_STATE</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>config_state</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_button_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ev_code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>_AL_MAX_JOYSTICK_BUTTONS</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>button_mapping</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>ev_code</name> <operator>==</operator> <name>ev_code</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>norm_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AXIS_MAPPING</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>range</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>min</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>value</name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator> <operator>/</operator> <name>range</name><operator>)</operator> <operator>*</operator> <literal type="number">2.0f</literal> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_process_new_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>es</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_event</name></name></type> <name><name>input_events</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>bytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_events</name></expr></argument>, <argument><expr><sizeof>sizeof <name>input_events</name></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>bytes</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>input_event</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>input_events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name><name>input_events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name><name>input_events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>EV_KEY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><call><name>map_button_number</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>joystate</name><operator>.</operator><name>button</name><index>[<expr><name>number</name></expr>]</index></name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>joystate</name><operator>.</operator><name>button</name><index>[<expr><name>number</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ljoy_generate_button_event</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>number</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>value</name></expr>

?</condition><then> <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</name></expr>

</then><else>: <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>EV_ABS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><name>code</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;</operator> <name>TOTAL_JOYSTICK_AXES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AXIS_MAPPING</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>axis_mapping</name><index>[<expr><name>number</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stick</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>stick</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>axis</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>axis</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><call><name>norm_pos</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>joy</name><operator>-&gt;</operator><name>joystate</name><operator>.</operator><name>stick</name><index>[<expr><name>stick</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><name>axis</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ljoy_generate_axis_event</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_generate_axis_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stick</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator><name>joy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>=</operator> <name>stick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>=</operator> <name>axis</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ljoy_generate_button_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_LINUX</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_EVENT_TYPE</name></type> <name>event_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator><name>joy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
