<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\linux\vtswitch.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/vt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/linalleg.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_MAPPED_FILES</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Sorry, mapped files are required for Allegro/Linux to work!"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>switch_mode</name> <init>= <expr><name>SWITCH_PAUSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vtswitch_initialised</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vt_mode</name></name></type> <name>startup_vtmode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>__al_linux_switching_blocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>console_active</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>console_should_be_active</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<function><type><name>int</name></type> <name>__al_linux_set_display_switch_mode</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>switch_mode</name> <operator>==</operator> <name>SWITCH_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>switch_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>switch_mode</name> <operator>==</operator> <name>SWITCH_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>go_away</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_switch_out</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>_unix_bg_man</name><operator>-&gt;</operator><name>disable_interrupts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>switch_mode</name> <operator>==</operator> <name>SWITCH_PAUSE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>switch_mode</name> <operator>==</operator> <name>SWITCH_AMNESIA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_suspend_old_timer_emulation</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_save_switch_state</name><argument_list>(<argument><expr><name>switch_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gfx_driver</name> <operator>&amp;&amp;</operator> <name><name>gfx_driver</name><operator>-&gt;</operator><name>save_video_state</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>gfx_driver</name><operator>-&gt;</operator><name>save_video_state</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ioctl</name> <argument_list>(<argument><expr><name>__al_linux_console_fd</name></expr></argument>, <argument><expr><name>VT_RELDISP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>console_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>switch_mode</name> <operator>==</operator> <name>SWITCH_PAUSE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>switch_mode</name> <operator>==</operator> <name>SWITCH_AMNESIA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__al_linux_wait_for_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_resume_old_timer_emulation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>_unix_bg_man</name><operator>-&gt;</operator><name>enable_interrupts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>come_back</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>_unix_bg_man</name><operator>-&gt;</operator><name>disable_interrupts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gfx_driver</name> <operator>&amp;&amp;</operator> <name><name>gfx_driver</name><operator>-&gt;</operator><name>restore_video_state</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>gfx_driver</name><operator>-&gt;</operator><name>restore_video_state</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_restore_switch_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>__al_linux_console_fd</name></expr></argument>, <argument><expr><name>VT_RELDISP</name></expr></argument>, <argument><expr><name>VT_ACKACQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>console_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>_unix_bg_man</name><operator>-&gt;</operator><name>enable_interrupts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_switch_in</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_console_switch</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>console_active</name> <operator>==</operator> <name>console_should_be_active</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__al_linux_switching_blocked</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>console_should_be_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>come_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>go_away</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vt_switch_requested</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>signo</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIGRELVT</name></expr>:</case>

<expr_stmt><expr><name>console_should_be_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGACQVT</name></expr>:</case>

<expr_stmt><expr><name>console_should_be_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>poll_console_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_acquire_bitmap</name><parameter_list>(<parameter><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_release_bitmap</name><parameter_list>(<parameter><decl><type><name>BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_console_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_display_switch_lock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>foreground</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>__al_linux_console_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foreground</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__al_linux_wait_for_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>__al_linux_switching_blocked</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_console_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__al_linux_init_vtswitch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vt_mode</name></name></type> <name>vtm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vtswitch_initialised</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>__al_linux_switching_blocked</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>switch_mode</name> <operator>==</operator> <name>SWITCH_NONE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>console_active</name> <operator>=</operator> <name>console_should_be_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>, <argument><expr><name>SIGIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>vt_switch_requested</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGRELVT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGACQVT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ustrzcpy</name> <argument_list>(<argument><expr><name>allegro_error</name></expr></argument>, <argument><expr><name>ALLEGRO_ERROR_SIZE</name></expr></argument>, <argument><expr><call><name>get_config_text</name> <argument_list>(<argument><expr><literal type="string">"Unable to control VT switching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>__al_linux_console_fd</name></expr></argument>, <argument><expr><name>VT_GETMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startup_vtmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtm</name> <operator>=</operator> <name>startup_vtmode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>VT_PROCESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>relsig</name></name> <operator>=</operator> <name>SIGRELVT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>acqsig</name></name> <operator>=</operator> <name>SIGACQVT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>__al_linux_console_fd</name></expr></argument>, <argument><expr><name>VT_SETMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtswitch_initialised</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__al_linux_done_vtswitch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtswitch_initialised</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>__al_linux_console_fd</name></expr></argument>, <argument><expr><name>VT_SETMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startup_vtmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigemptyset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name> <argument_list>(<argument><expr><name>SIGRELVT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name> <argument_list>(<argument><expr><name>SIGACQVT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtswitch_initialised</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
