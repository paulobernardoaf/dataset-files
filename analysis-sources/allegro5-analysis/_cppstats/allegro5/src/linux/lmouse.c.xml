<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\linux\lmouse.c"><cpp:error>#<cpp:directive>error</cpp:directive> This file is no longer used.</cpp:error>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/linalleg.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_my</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_sx</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_sy</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_minx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_miny</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_maxx</name> <init>= <expr><literal type="number">319</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_maxy</name> <init>= <expr><literal type="number">199</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mymickey_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mymickey_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICKEY_TO_COORD_X</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * mouse_sx / 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICKEY_TO_COORD_Y</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * mouse_sy / 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COORD_TO_MICKEY_X</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * 256 / mouse_sx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COORD_TO_MICKEY_Y</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * 256 / mouse_sy)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>__al_linux_mouse_position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_mx</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_X</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_my</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_Y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mymickey_x</name> <operator>=</operator> <name>mymickey_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_mouse_set_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>mouse_minx</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_miny</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_maxx</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_maxy</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_x</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>mouse_minx</name></expr></argument>, <argument><expr><name>_mouse_x</name></expr></argument>, <argument><expr><name>mouse_maxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_y</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>mouse_miny</name></expr></argument>, <argument><expr><name>_mouse_y</name></expr></argument>, <argument><expr><name>mouse_maxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_mx</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_X</name><argument_list>(<argument><expr><name>_mouse_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_my</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_Y</name><argument_list>(<argument><expr><name>_mouse_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_mouse_set_speed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xspeed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yspeed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gfx_driver</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">256</literal><operator>*</operator><name><name>gfx_driver</name><operator>-&gt;</operator><name>w</name></name><operator>/</operator><literal type="number">320</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_sx</name> <operator>=</operator> <name>scale</name> <operator>/</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xspeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_sy</name> <operator>=</operator> <name>scale</name> <operator>/</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>yspeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_mx</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_X</name><argument_list>(<argument><expr><name>_mouse_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_my</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_Y</name><argument_list>(<argument><expr><name>_mouse_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_mouse_get_mickeys</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mickeyx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mickeyy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp_x</name> <init>= <expr><name>mymickey_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp_y</name> <init>= <expr><name>mymickey_y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mymickey_x</name> <operator>-=</operator> <name>temp_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mymickey_y</name> <operator>-=</operator> <name>temp_y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mickeyx</name> <operator>=</operator> <name>temp_x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mickeyy</name> <operator>=</operator> <name>temp_y</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_mouse_handler</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>_mouse_b</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mymickey_x</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mymickey_y</name> <operator>-=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_mx</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_my</name> <operator>-=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_x</name> <operator>=</operator> <call><name>MICKEY_TO_COORD_X</name><argument_list>(<argument><expr><name>mouse_mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_y</name> <operator>=</operator> <call><name>MICKEY_TO_COORD_Y</name><argument_list>(<argument><expr><name>mouse_my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_z</name> <operator>+=</operator> <name>z</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>_mouse_x</name> <operator>&lt;</operator> <name>mouse_minx</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>_mouse_x</name> <operator>&gt;</operator> <name>mouse_maxx</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>_mouse_y</name> <operator>&lt;</operator> <name>mouse_miny</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>_mouse_y</name> <operator>&gt;</operator> <name>mouse_maxy</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>_mouse_x</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>mouse_minx</name></expr></argument>, <argument><expr><name>_mouse_x</name></expr></argument>, <argument><expr><name>mouse_maxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_mouse_y</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>mouse_miny</name></expr></argument>, <argument><expr><name>_mouse_y</name></expr></argument>, <argument><expr><name>mouse_maxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_mx</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_X</name><argument_list>(<argument><expr><name>_mouse_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_my</name> <operator>=</operator> <call><name>COORD_TO_MICKEY_Y</name><argument_list>(<argument><expr><name>_mouse_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_handle_mouse_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>update_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>resume_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>suspend_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>STD_DRIVER</name></type> <name>std_mouse</name> <init>= <expr><block>{

<expr><name>STD_MOUSE</name></expr>,

<expr><name>update_mouse</name></expr>,

<expr><name>resume_mouse</name></expr>,

<expr><name>suspend_mouse</name></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resume_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>INTERNAL_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>internal_driver</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bytes_in_buffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>resume_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>std_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>select</name> <argument_list>(<argument><expr><name>FD_SETSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>std_mouse</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>bytes_in_buffer</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>bytes_in_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_in_buffer</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytes_in_buffer</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes_read</name> <operator>=</operator> <call><name><name>internal_driver</name><operator>-&gt;</operator><name>process</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_in_buffer</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_in_buffer</name> <operator>-=</operator> <name>bytes_read</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytes_in_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><name>bytes_read</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>activate_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deactivate_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>suspend_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>resume_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resume_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deactivate_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resume_mouse</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>resume_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>activate_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>resume_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__al_linux_mouse_init</name> <parameter_list>(<parameter><decl><type><name>INTERNAL_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>drv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>internal_driver</name> <operator>=</operator> <name>drv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>std_mouse</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>resume_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__al_linux_add_standard_driver</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>std_mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>internal_driver</name><operator>-&gt;</operator><name>num_buttons</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__al_linux_mouse_exit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>__al_linux_remove_standard_driver</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>std_mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
