<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\sdl\sdl_keyboard.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/allegro_internal_sdl.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"SDL"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>ALLEGRO_KEYBOARD_SDL</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD</name></type> <name>keyboard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>inverse</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>unicode</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>inverse_unicode</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>create_extra_char</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_KEYBOARD_SDL</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_SDL</name> <modifier>*</modifier></type><name>keyboard</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>_al_sdl_keyboard_event</name><parameter_list>(<parameter><decl><type><name>SDL_Event</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyboard</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>event</name></name> <operator>==</operator> <name>SDL_WINDOWEVENT_FOCUS_GAINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>_al_sdl_find_display</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>windowID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>keyboard</name><operator>-&gt;</operator><name>keyboard</name><operator>.</operator><name>es</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SDL_TEXTINPUT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name><name>keyboard</name><operator>-&gt;</operator><name>inverse_unicode</name><index>[<expr><name>c</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>_al_sdl_find_display</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>windowID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SDL_KEYDOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name><name>keyboard</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>scancode</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <name><name>keyboard</name><operator>-&gt;</operator><name>unicode</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>scancode</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>_al_sdl_find_display</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>windowID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>repeat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>keyboard</name><operator>-&gt;</operator><name>create_extra_char</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>scancode</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SDL_KEYUP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name><name>keyboard</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>scancode</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <name><name>keyboard</name><operator>-&gt;</operator><name>unicode</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>scancode</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>_al_sdl_find_display</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>windowID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adde</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sdl_scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allegro_keycode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sdl_scancode</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot map SDL scancode %d.\n"</literal></expr></argument>, <argument><expr><name>sdl_scancode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>sdl_scancode</name></expr>]</index></name> <operator>=</operator> <name>allegro_keycode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>inverse</name><index>[<expr><name>allegro_keycode</name></expr>]</index></name> <operator>=</operator> <name>sdl_scancode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>unicode</name><index>[<expr><name>sdl_scancode</name></expr>]</index></name> <operator>=</operator> <name>unicode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>inverse_unicode</name><index>[<expr><name>unicode</name></expr>]</index></name> <operator>=</operator> <name>allegro_keycode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyboard</name><operator>-&gt;</operator><name>create_extra_char</name><index>[<expr><name>sdl_scancode</name></expr>]</index></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sdl_scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allegro_keycode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>adde</name><argument_list>(<argument><expr><name>sdl_scancode</name></expr></argument>, <argument><expr><name>allegro_keycode</name></expr></argument>, <argument><expr><name>unicode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SAME</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add(SDL_SCANCODE_##X, ALLEGRO_KEY_##X, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SAMEC</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add(SDL_SCANCODE_##X, ALLEGRO_KEY_##X, tolower(#X[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SAMEE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>adde(SDL_SCANCODE_##X, ALLEGRO_KEY_##X, c, true)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>keyboard</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>keyboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>keyboard</name><operator>-&gt;</operator><name>keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_UNKNOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adde</name><argument_list>(<argument><expr><name>SDL_SCANCODE_RETURN</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ENTER</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>ESCAPE</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>BACKSPACE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>TAB</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>SPACE</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>MINUS</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>EQUALS</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LEFTBRACKET</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_OPENBRACE</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_RIGHTBRACKET</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_CLOSEBRACE</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>BACKSLASH</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_NONUSHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>SEMICOLON</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_APOSTROPHE</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_QUOTE</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_GRAVE</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_TILDE</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_PERIOD</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_FULLSTOP</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>SLASH</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>CAPSLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F9</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F10</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>F12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>PRINTSCREEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>SCROLLLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>PAUSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>INSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>HOME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_PAGEUP</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PGUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>DELETE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>END</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_PAGEDOWN</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PGDN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>RIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>LEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>DOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAMEE</name><argument_list>(<argument><expr><name>UP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_NUMLOCKCLEAR</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_NUMLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_DIVIDE</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_SLASH</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MULTIPLY</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_ASTERISK</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MINUS</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_MINUS</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_PLUS</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_PLUS</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_ENTER</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_ENTER</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_1</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_1</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_2</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_2</name></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_3</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_3</name></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_4</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_4</name></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_5</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_5</name></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_6</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_6</name></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_7</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_7</name></expr></argument>, <argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_8</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_8</name></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_9</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_9</name></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_0</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_0</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_PERIOD</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_DELETE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_NONUSBACKSLASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_APPLICATION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_POWER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_EQUALS</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_PAD_EQUALS</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F13</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F14</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F15</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F17</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F18</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F19</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F20</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F21</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F22</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_F24</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_EXECUTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_HELP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>MENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_SELECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_STOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AGAIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_UNDO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_COPY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_PASTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_FIND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_MUTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_VOLUMEUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_VOLUMEDOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_COMMA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_EQUALSAS400</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_INTERNATIONAL9</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LANG9</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_ALTERASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_SYSREQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CANCEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_PRIOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_RETURN2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_SEPARATOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_OUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_OPER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CLEARAGAIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CRSEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_EXSEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_00</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_000</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_THOUSANDSSEPARATOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_DECIMALSEPARATOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CURRENCYUNIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CURRENCYSUBUNIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_LEFTPAREN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_RIGHTPAREN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_LEFTBRACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_RIGHTBRACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_TAB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_BACKSPACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_C</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_E</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_F</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_XOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_POWER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_PERCENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_LESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_GREATER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_AMPERSAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_DBLAMPERSAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_VERTICALBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_DBLVERTICALBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_COLON</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_HASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_SPACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_AT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_EXCLAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMSTORE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMRECALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMCLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMADD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMSUBTRACT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMMULTIPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_MEMDIVIDE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_PLUSMINUS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_CLEARENTRY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_OCTAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_DECIMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KP_HEXADECIMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>LCTRL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>LSHIFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LALT</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ALT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_LGUI</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_LWIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>RCTRL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_SAME</name><argument_list>(<argument><expr><name>RSHIFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_RALT</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ALTGR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_RGUI</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_RWIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_MODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AUDIONEXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AUDIOPREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AUDIOSTOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AUDIOPLAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AUDIOMUTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_MEDIASELECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_WWW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_MAIL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_CALCULATOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_COMPUTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_SEARCH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_HOME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_BACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_FORWARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_STOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_REFRESH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_AC_BOOKMARKS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_BRIGHTNESSDOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_BRIGHTNESSUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_DISPLAYSWITCH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KBDILLUMTOGGLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KBDILLUMDOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_KBDILLUMUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_EJECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>SDL_SCANCODE_SLEEP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_sdl_event_hack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>sdl_get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>keyboard</name><operator>-&gt;</operator><name>keyboard</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sdl_set_keyboard_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>leds</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sdl_keycode_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>SDL_GetScancodeName</name><argument_list>(<argument><expr><name><name>keyboard</name><operator>-&gt;</operator><name>inverse</name><index>[<expr><name>keycode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><call><name>_al_sdl_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>sdl</name><operator>-&gt;</operator><name>heartbeat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Uint8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>SDL_GetKeyboardState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_SET_KEY_DOWN</name><argument_list>(<argument><expr><operator>*</operator><name>ret_state</name></expr></argument>, <argument><expr><name><name>keyboard</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_CLEAR_KEY_DOWN</name><argument_list>(<argument><expr><operator>*</operator><name>ret_state</name></expr></argument>, <argument><expr><name><name>keyboard</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ret_state</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name><name>keyboard</name><operator>-&gt;</operator><name>display</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>_al_sdl_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>keydrv_id</name></name> <operator>=</operator> <call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>keydrv_name</name></name> <operator>=</operator> <literal type="string">"SDL2 Keyboard"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>keydrv_desc</name></name> <operator>=</operator> <literal type="string">"SDL2 Keyboard"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>keydrv_ascii_name</name></name> <operator>=</operator> <literal type="string">"SDL2 Keyboard"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>init_keyboard</name></name> <operator>=</operator> <name>sdl_init_keyboard</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>exit_keyboard</name></name> <operator>=</operator> <name>sdl_exit_keyboard</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_keyboard</name></name> <operator>=</operator> <name>sdl_get_keyboard</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_keyboard_leds</name></name> <operator>=</operator> <name>sdl_set_keyboard_leds</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>keycode_to_name</name></name> <operator>=</operator> <name>sdl_keycode_to_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_keyboard_state</name></name> <operator>=</operator> <name>sdl_get_keyboard_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>clear_keyboard_state</name></name> <operator>=</operator> <name>sdl_clear_keyboard_state</name></expr>;</expr_stmt>

<return>return <expr><name>vt</name></expr>;</return>

</block_content>}</block></function>

</unit>
