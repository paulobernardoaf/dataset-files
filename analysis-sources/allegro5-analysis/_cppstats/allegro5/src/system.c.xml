<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\system.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> ALLEGRO_INTERNAL_HEADER</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_tls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"system"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>active_sysdrv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>sys_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>_al_system_interfaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>_user_system_interfaces</name> <init>= <expr><call><name>_AL_VECTOR_INITIALIZER</name><argument_list>(<argument><expr><name>ALLEGRO_SYSTEM_INTERFACE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>_al_dtor_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>atexit_virgin</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>_al_app_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>_al_org_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>find_system</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier><modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>sys_interface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vector</name><operator>-&gt;</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_interface</name> <operator>=</operator> <operator>*</operator><name>sptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>system</name> <operator>=</operator> <call><name><name>sys_interface</name><operator>-&gt;</operator><name>initialize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>system</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shutdown_system_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>active_sysdrv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>shutdown_system</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>shutdown_system</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>active_sysdrv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>_al_vector_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>, <argument><expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_SYSTEM_INTERFACE</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>sys_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_config</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>early_get_exename_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>_al_win_get_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>_al_osx_get_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>_al_iphone_get_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>_al_unix_get_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>_al_android_get_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_SDL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>SDL_GetBasePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SDL_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> early_get_exename_path not implemented</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_allegro_cfg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_config</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sys_config</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><literal type="string">"/etc/allegro5rc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_merge_config_into</name><argument_list>(<argument><expr><name>sys_config</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>_al_unix_get_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_HOME_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"allegro5rc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_merge_config_into</name><argument_list>(<argument><expr><name>sys_config</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".allegro5rc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_merge_config_into</name><argument_list>(<argument><expr><name>sys_config</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>early_get_exename_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"allegro5.cfg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_merge_config_into</name><argument_list>(<argument><expr><name>sys_config</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_configure_logging</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>compatible_versions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a_unstable</name> <init>= <expr><name>a</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_major</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_sub</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_wip</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_major</name> <init>= <expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7f000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_sub</name> <init>= <expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_wip</name> <init>= <expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a_major</name> <operator>!=</operator> <name>b_major</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_unstable</name> <operator>&amp;&amp;</operator> <name>a_wip</name> <operator>!=</operator> <name>b_wip</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_sub</name> <operator>!=</operator> <name>b_sub</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_wip</name> <operator>&gt;</operator> <name>b_wip</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_install_system</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>atexit_ptr</name>)<parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name></type> <name>bootstrap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>real_system</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>library_version</name> <init>= <expr><call><name>al_get_allegro_version</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active_sysdrv</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compatible_versions</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>library_version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_tls_init_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_reinitialize_tls_values</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_SYSTEM_INTERFACE</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bootstrap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bootstrap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>active_sysdrv</name> <operator>=</operator> <operator>&amp;</operator><name>bootstrap</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_allegro_cfg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BCC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_control87</name><argument_list>(<argument><expr><name>MCW_EM</name></expr></argument>, <argument><expr><name>MCW_EM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_register_system_interfaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>real_system</name> <operator>=</operator> <call><name>find_system</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_user_system_interfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>real_system</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>real_system</name> <operator>=</operator> <call><name>find_system</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_system_interfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>real_system</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>active_sysdrv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>active_sysdrv</name> <operator>=</operator> <name>real_system</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>mouse_wheel_precision</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Allegro version: %s\n"</literal></expr></argument>, <argument><expr><name>ALLEGRO_VERSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_app_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>shutdown_system_driver</name></expr></argument>, <argument><expr><literal type="string">"shutdown_system_driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_dtor_list</name> <operator>=</operator> <call><name>_al_init_destructors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_init_events</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_init_pixels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_init_iio_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_init_convert_bitmap_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_init_timers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_glsl_init_shaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>heartbeat_init</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>heartbeat_init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atexit_ptr</name> <operator>&amp;&amp;</operator> <name>atexit_virgin</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atexit_ptr</name><argument_list>(<argument><expr><name>al_uninstall_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>atexit_virgin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>installed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_uninstall_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_run_destructors</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_run_exit_funcs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_shutdown_destructors</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_dtor_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_glsl_shutdown_shaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_shutdown_logging</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_system_installed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>active_sysdrv</name> <operator>&amp;&amp;</operator> <name><name>active_sysdrv</name><operator>-&gt;</operator><name>installed</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>al_get_system_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>active_sysdrv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SYSTEM_ID</name></type> <name>al_get_system_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>al_get_system_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_config</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sys_config</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sys_config</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>al_get_standard_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ALLEGRO_EXENAME_PATH</name> <operator>&amp;&amp;</operator> <name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>al_clone_path</name><argument_list>(<argument><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ALLEGRO_RESOURCES_PATH</name> <operator>&amp;&amp;</operator> <name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>exe_dir</name> <init>= <expr><call><name>al_clone_path</name><argument_list>(<argument><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>exe_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>exe_dir</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_path</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_path</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_exe_name</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>user_exe_path</name></name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_org_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>org_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>org_name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name>_al_org_name</name></expr></argument>, <argument><expr><name>org_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_al_org_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_app_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>app_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>app_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name>_al_app_name</name></expr></argument>, <argument><expr><name>app_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_al_app_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name>_al_app_name</name></expr></argument>, <argument><expr><call><name>al_get_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_al_app_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_org_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_al_org_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_app_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_al_app_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name><argument_list>(<argument><expr><name>inhibit</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>_al_open_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>open_library</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>open_library</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>_al_import_symbol</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>library</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>import_symbol</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>import_symbol</name></name><argument_list>(<argument><expr><name>library</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_close_library</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>library</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>close_library</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>close_library</name></name><argument_list>(<argument><expr><name>library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>al_get_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_time</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_rest</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>rest</name></name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_init_timeout</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>active_sysdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>init_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>active_sysdrv</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>init_timeout</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
