<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\mousenu.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>new_mouse_driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>al_is_mouse_installed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>new_mouse_driver</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_install_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_mouse_driver</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_mouse_driver</name> <operator>=</operator> <call><name>al_get_system_driver</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>init_mouse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_mouse_driver</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>al_uninstall_mouse</name></expr></argument>, <argument><expr><literal type="string">"al_uninstall_mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (system_driver &amp;&amp; system_driver-&gt;mouse_drivers)

driver_list = system_driver-&gt;mouse_drivers();

else

driver_list = _al_mouse_driver_list;

ASSERT(driver_list);

for (i=0; driver_list[i].driver; i++) {

new_mouse_driver = driver_list[i].driver;

name = new_mouse_driver-&gt;msedrv_ascii_name;

new_mouse_driver-&gt;msedrv_name = name;

new_mouse_driver-&gt;msedrv_desc = name;

if (new_mouse_driver-&gt;init_mouse()) {

break;

}

}

if (!driver_list[i].driver) {

new_mouse_driver = NULL;

return false;

}

_al_add_exit_func(al_uninstall_mouse, "al_uninstall_mouse");

return true;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_uninstall_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_mouse_driver</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>exit_mouse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_mouse_driver</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>al_get_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mse</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mse</name> <operator>=</operator> <call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>get_mouse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mse</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_mouse_num_buttons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>get_mouse_num_buttons</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_mouse_num_axes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>get_mouse_num_axes</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_mouse_xy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_xy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_xy</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_mouse_z</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_axis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_axis</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_mouse_w</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_axis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_axis</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_mouse_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_axis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>which</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>which</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <name>ALLEGRO_MOUSE_MAX_EXTRA_AXES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>which</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <name>ALLEGRO_MOUSE_MAX_EXTRA_AXES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>set_mouse_axis</name></name><argument_list>(<argument><expr><name>which</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_get_mouse_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_mouse_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>new_mouse_driver</name><operator>-&gt;</operator><name>get_mouse_state</name></name><argument_list>(<argument><expr><name>ret_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_mouse_state_axis</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>axis</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>axis</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>ALLEGRO_MOUSE_MAX_EXTRA_AXES</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>axis</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>x</name></name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>y</name></name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>z</name></name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>w</name></name></expr>;</return>

<default>default:</default>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>more_axes</name><index>[<expr><name>axis</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_mouse_button_down</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>button</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buttons</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_get_mouse_cursor_position</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>alsys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alsys</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_cursor_position</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>alsys</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>get_cursor_position</name></name><argument_list>(<argument><expr><name>ret_x</name></expr></argument>, <argument><expr><name>ret_y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_grab_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>alsys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alsys</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>grab_mouse</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>alsys</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>grab_mouse</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_ungrab_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>alsys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alsys</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ungrab_mouse</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>alsys</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ungrab_mouse</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_mouse_event_source</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name> <init>= <expr><call><name>al_get_mouse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>mouse</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>mouse</name><operator>-&gt;</operator><name>es</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_mouse_wheel_precision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>alsys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alsys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>alsys</name><operator>-&gt;</operator><name>mouse_wheel_precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_mouse_wheel_precision</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>alsys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alsys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>alsys</name><operator>-&gt;</operator><name>mouse_wheel_precision</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
