<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\x\xsystem.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_Xdebug</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xcursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xembed.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xevents.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xfullscreen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xkeyboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xmouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintxglx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xicon.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"system"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>xglx_vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>x11_xpm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xglx_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icon.xpm"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>x11_xpm_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>x11_xpm_rows</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitmap_to_xpm</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nrows_ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncolors</name></decl>, <decl><type ref="prev"/><name>nrows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xpm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name> <init>= <expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>ncolors</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nrows</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>ncolors</name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xpm</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nrows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%d %d %d 8"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>ncolors</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"00000000\tc None"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%08x\tc #%02x%02x%02x"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpm</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ncolors</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xpm</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpm</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pixel2</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel</name> <operator>==</operator> <name>pixel2</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xpm</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nrows_ret</name> <operator>=</operator> <name>nrows</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>xpm</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>al_x_set_initial_icon</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>x11_xpm_set</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x11_xpm_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>x11_xpm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x11_xpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x11_xpm_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x11_xpm</name> <operator>=</operator> <call><name>bitmap_to_xpm</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x11_xpm_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x11_xpm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x11_xpm_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>xglx_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>gfxdisplay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_Xdebug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XInitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x11display</name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x11display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gfxdisplay</name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gfxdisplay</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"XOpenDisplay failed second time.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XOpenDisplay failed; assuming headless mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gfxdisplay</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_unix_init_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_init_recursive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>resized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>screen_saver_query_available</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>vt</name></name> <operator>=</operator> <name>xglx_vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gfxdisplay</name></name> <operator>=</operator> <name>gfxdisplay</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name> <operator>=</operator> <name>x11display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XGLX driver connected to X11 (%s %d).\n"</literal></expr></argument>,

<argument><expr><call><name>ServerVendor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VendorRelease</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"X11 protocol version %d.%d.\n"</literal></expr></argument>,

<argument><expr><call><name>ProtocolVersion</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ProtocolRevision</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>AllegroAtom</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><literal type="string">"AllegroAtom"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>XEmbedAtom</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><literal type="string">"_XEMBED"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xevents_thread</name></name></expr></argument>, <argument><expr><name>_al_xwin_background_thread</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>have_xevents_thread</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"events thread spawned.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>binding</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"keyboard"</literal></expr></argument>, <argument><expr><literal type="string">"toggle_mouse_grab_key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>binding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name> <operator>=</operator> <call><name>_al_parse_key_binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>toggle_mouse_grab_modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Toggle mouse grab key: '%s'\n"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot parse key binding '%s'\n"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x11_xpm</name> <operator>=</operator> <name>icon_xpm</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xglx_shutdown_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>sx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"shutting down.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>have_xevents_thread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sx</name><operator>-&gt;</operator><name>xevents_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>have_xevents_thread</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xglx_inhibit_screensaver</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>x11display</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_xsys_mmon_exit</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>x11display</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>x11display</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xsys: close x11display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>gfxdisplay</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>xglx_get_display_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_al_display_xglx_driver</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>xglx_get_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_al_xwin_keyboard_driver</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>xglx_get_mouse_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_al_xwin_mouse_driver</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type><name>xglx_get_joystick_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>_al_joystick_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type><name>xglx_get_haptic_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>_al_haptic_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_TOUCH_INPUT_DRIVER</name> <modifier>*</modifier></type><name>xglx_get_touch_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>_al_touch_input_driver_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>driver</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xglx_get_num_video_adapters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>_al_xglx_get_num_video_adapters</name><argument_list>(<argument><expr><name>system</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xglx_get_monitor_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>_al_xglx_get_monitor_info</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xglx_get_cursor_position</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>root</name> <init>= <expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wx</name></decl>, <decl><type ref="prev"/><name>wy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XQueryPointer</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>ret_x</name></expr></argument>, <argument><expr><name>ret_y</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xglx_inhibit_screensaver</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>version_min</name></decl>, <decl><type ref="prev"/><name>version_max</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XSCREENSAVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XScreenSaverQueryExtension</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>XScreenSaverQueryVersion</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version_max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version_min</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name>version_max</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>version_max</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>version_min</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>screen_saver_query_available</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>screen_saver_query_available</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inhibit</name> <operator>!=</operator> <name><name>system</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XScreenSaverSuspend</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>inhibit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>inhibit</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xglx_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>_al_xglx_get_num_display_modes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>xglx_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>dm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>_al_xglx_get_display_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xglx_get_monitor_dpi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x2_mm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y2_mm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpi_hori</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpi_vert</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_al_xglx_get_monitor_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x2_mm</name> <operator>=</operator> <call><name>DisplayWidthMM</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y2_mm</name> <operator>=</operator> <call><name>DisplayHeightMM</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dpi_hori</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>x1</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>_AL_INCHES_PER_MM</name> <operator>*</operator> <name>x2_mm</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dpi_vert</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>y1</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>_AL_INCHES_PER_MM</name> <operator>*</operator> <name>y2_mm</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>dpi_hori</name> <operator>*</operator> <name>dpi_vert</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>_al_system_xglx_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>xglx_vt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>xglx_vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xglx_vt</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>xglx_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>ALLEGRO_SYSTEM_ID_XGLX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>initialize</name></name> <operator>=</operator> <name>xglx_initialize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_display_driver</name></name> <operator>=</operator> <name>xglx_get_display_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_keyboard_driver</name></name> <operator>=</operator> <name>xglx_get_keyboard_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_mouse_driver</name></name> <operator>=</operator> <name>xglx_get_mouse_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_joystick_driver</name></name> <operator>=</operator> <name>xglx_get_joystick_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_haptic_driver</name></name> <operator>=</operator> <name>xglx_get_haptic_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_touch_input_driver</name></name> <operator>=</operator> <name>xglx_get_touch_driver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_num_display_modes</name></name> <operator>=</operator> <name>xglx_get_num_display_modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_display_mode</name></name> <operator>=</operator> <name>xglx_get_display_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>shutdown_system</name></name> <operator>=</operator> <name>xglx_shutdown_system</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_num_video_adapters</name></name> <operator>=</operator> <name>xglx_get_num_video_adapters</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_monitor_info</name></name> <operator>=</operator> <name>xglx_get_monitor_info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_monitor_dpi</name></name> <operator>=</operator> <name>xglx_get_monitor_dpi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>create_mouse_cursor</name></name> <operator>=</operator> <name>_al_xwin_create_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>destroy_mouse_cursor</name></name> <operator>=</operator> <name>_al_xwin_destroy_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_cursor_position</name></name> <operator>=</operator> <name>xglx_get_cursor_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>grab_mouse</name></name> <operator>=</operator> <name>_al_xwin_grab_mouse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>ungrab_mouse</name></name> <operator>=</operator> <name>_al_xwin_ungrab_mouse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_path</name></name> <operator>=</operator> <name>_al_unix_get_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name> <operator>=</operator> <name>xglx_inhibit_screensaver</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>get_time</name></name> <operator>=</operator> <name>_al_unix_get_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>_al_unix_rest</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xglx_vt</name><operator>-&gt;</operator><name>init_timeout</name></name> <operator>=</operator> <name>_al_unix_init_timeout</name></expr>;</expr_stmt>

<return>return <expr><name>xglx_vt</name></expr>;</return>

</block_content>}</block></function>

</unit>
