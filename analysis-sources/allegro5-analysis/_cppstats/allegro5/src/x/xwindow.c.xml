<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\x\xwindow.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xwindow.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SYSTEM_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_SYSTEM_RASPBERRYPI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DISPLAY_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_DISPLAY_RASPBERRYPI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"xwindow"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X11_ATOM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XInternAtom(x11, #x, False);</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>_al_xwin_set_size_hints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XSizeHints</name> <modifier>*</modifier></type><name>sizehints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XWMHints</name> <modifier>*</modifier></type><name>wmhints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XClassHint</name> <modifier>*</modifier></type><name>classhints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sizehints</name> <operator>=</operator> <call><name>XAllocSizeHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_raspberrypi_get_screen_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PMinSize</name> <operator>|</operator> <name>PMaxSize</name> <operator>|</operator> <name>PBaseSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <name><name>sizehints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <name><name>sizehints</name><operator>-&gt;</operator><name>base_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <name><name>sizehints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <name><name>sizehints</name><operator>-&gt;</operator><name>base_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>use_constraints</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>min_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>min_h</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>max_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>max_h</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PMinSize</name> <operator>|</operator> <name>PMaxSize</name> <operator>|</operator> <name>PBaseSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>min_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>min_w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>min_h</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>min_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>max_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>max_w</name></name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>max_h</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>max_h</name></name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>base_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>base_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_off</name> <operator>!=</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>y_off</name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Force window position to %d, %d.\n"</literal></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PPosition</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y_off</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PBaseSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>base_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizehints</name><operator>-&gt;</operator><name>base_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wmhints</name> <operator>=</operator> <call><name>XAllocWMHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wmhints</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wmhints</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>InputHint</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>exepath</name> <init>= <expr><call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>classhints</name> <operator>=</operator> <call><name>XAllocClassHint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>classhints</name><operator>-&gt;</operator><name>res_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>al_get_path_basename</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>classhints</name><operator>-&gt;</operator><name>res_class</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>al_get_path_basename</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMProperties</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>sizehints</name></expr></argument>, <argument><expr><name>wmhints</name></expr></argument>, <argument><expr><name>classhints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>classhints</name><operator>-&gt;</operator><name>res_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>classhints</name><operator>-&gt;</operator><name>res_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>sizehints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>wmhints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>classhints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_reset_size_hints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XSizeHints</name> <modifier>*</modifier></type><name>hints</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hints</name> <operator>=</operator> <call><name>XAllocSizeHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>PMinSize</name> <operator>|</operator> <name>PMaxSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMNormalHints</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_set_fullscreen_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_resize_count</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>resize_count</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Toggling _NET_WM_STATE_FULLSCREEN hint: %d\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>xev</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ClientMessage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE_FULLSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(

<argument><expr><name>x11</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_RASPBERRYPI</name></expr></cpp:if>

<argument><expr><call><name>RootWindowOfScreen</name><argument_list>(<argument><expr><call><name>ScreenOfDisplay</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><call><name>RootWindowOfScreen</name><argument_list>(<argument><expr><call><name>ScreenOfDisplay</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name>x11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>False</name></expr></argument>,

<argument><expr><name>SubstructureRedirectMask</name> <operator>|</operator> <name>SubstructureNotifyMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_RASPBERRYPI</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_display_xglx_await_resize</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>old_resize_count</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_set_above</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Toggling _NET_WM_STATE_ABOVE hint: %d\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>xev</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ClientMessage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE_ABOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name>x11</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>SubstructureRedirectMask</name> <operator>|</operator> <name>SubstructureNotifyMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_set_frame</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>frame_on</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>hints</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>hints</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><literal type="string">"_MOTIF_WM_HINTS"</literal></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hints</name></expr>)</condition> <block>{<block_content>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>functions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>decorations</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>input_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>status</name></decl>;</decl_stmt>

}</block> <decl><name>motif</name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>frame_on</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>motif</name></expr></argument>, <argument><expr><sizeof>sizeof <name>motif</name></sizeof> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_on</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_FRAMELESS</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_FRAMELESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_icon_inner</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11display</name></decl></parameter>, <parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prop_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>w</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>data_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>_NET_WM_ICON</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>_NET_WM_ICON</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_ICON"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>_NET_WM_ICON</name></expr></argument>, <argument><expr><name>XA_CARDINAL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><name>prop_mode</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_set_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bitmaps</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prop_mode</name> <init>= <expr><name>PropModeReplace</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_icons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdpy_set_icon_inner</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>prop_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prop_mode</name> <operator>=</operator> <name>PropModeAppend</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_maximize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>maximized</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name><operator>)</operator> <operator>==</operator> <name>maximized</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_resize_count</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>resize_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>xev</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ClientMessage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>maximized</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE_MAXIMIZED_HORZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE_MAXIMIZED_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(

<argument><expr><name>x11</name></expr></argument>,

<argument><expr><call><name>RootWindowOfScreen</name><argument_list>(<argument><expr><call><name>ScreenOfDisplay</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>False</name></expr></argument>,

<argument><expr><name>SubstructureRedirectMask</name> <operator>|</operator> <name>SubstructureNotifyMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_display_xglx_await_resize</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>old_resize_count</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_check_maximized</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>horz</name> <init>= <expr><call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE_MAXIMIZED_HORZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>vert</name> <init>= <expr><call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE_MAXIMIZED_VERT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>property</name> <init>= <expr><call><name>X11_ATOM</name><argument_list>(<argument><expr><name>_NET_WM_STATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maximized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>remaining</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p8</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name>x11</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,

<argument><expr><name>False</name></expr></argument>, <argument><expr><name>AnyPropertyType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p8</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>Success</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p32</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name>p8</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>horz</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maximized</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>vert</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maximized</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>p8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maximized</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>XID</name></type> <name>al_get_x_window_id</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name><operator>*</operator><operator>)</operator><name>display</name><operator>)</operator><operator>-&gt;</operator><name>window</name></expr>;</return>

</block_content>}</block></function>

</unit>
