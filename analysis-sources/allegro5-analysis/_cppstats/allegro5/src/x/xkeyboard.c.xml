<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\x\xkeyboard.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlocale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xos.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xproto.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XKBlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_keyboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xkeyboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SYSTEM_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_SYSTEM_RASPBERRYPI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"keyboard"</literal></argument>)</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_press</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unichar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filtered</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>modifiers</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_key_shifts</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ALLEGRO_KEYBOARD_XWIN</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>three_finger_flag</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_KEYBOARD_XWIN</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_KEY_REPEAT_DATA</name> <block>{

<decl_stmt><decl><type><name>XKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_KEY_REPEAT_DATA</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_XWIN</name></type> <name>the_keyboard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_press_code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>XIM</name></type> <name>xim</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XIC</name></type> <name>xic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>XModifierKeymap</name> <modifier>*</modifier></type><name>xmodmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xkeyboard_installed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>used</name><index>[<expr><name>ALLEGRO_KEY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sym_per_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>min_keycode</name></decl>, <decl><type ref="prev"/><name>max_keycode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>KeySym</name> <modifier>*</modifier></type><name>keysyms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>main_pid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pause_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>keycode_to_scancode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name>KeySym</name></type> <name>keysym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allegro_key</name></decl>;</decl_stmt>

}</block>

<decl><name><name>translation_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>XK_a</name></expr>, <expr><name>ALLEGRO_KEY_A</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_b</name></expr>, <expr><name>ALLEGRO_KEY_B</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_c</name></expr>, <expr><name>ALLEGRO_KEY_C</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_d</name></expr>, <expr><name>ALLEGRO_KEY_D</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_e</name></expr>, <expr><name>ALLEGRO_KEY_E</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_f</name></expr>, <expr><name>ALLEGRO_KEY_F</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_g</name></expr>, <expr><name>ALLEGRO_KEY_G</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_h</name></expr>, <expr><name>ALLEGRO_KEY_H</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_i</name></expr>, <expr><name>ALLEGRO_KEY_I</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_j</name></expr>, <expr><name>ALLEGRO_KEY_J</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_k</name></expr>, <expr><name>ALLEGRO_KEY_K</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_l</name></expr>, <expr><name>ALLEGRO_KEY_L</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_m</name></expr>, <expr><name>ALLEGRO_KEY_M</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_n</name></expr>, <expr><name>ALLEGRO_KEY_N</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_o</name></expr>, <expr><name>ALLEGRO_KEY_O</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_p</name></expr>, <expr><name>ALLEGRO_KEY_P</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_q</name></expr>, <expr><name>ALLEGRO_KEY_Q</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_r</name></expr>, <expr><name>ALLEGRO_KEY_R</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_s</name></expr>, <expr><name>ALLEGRO_KEY_S</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_t</name></expr>, <expr><name>ALLEGRO_KEY_T</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_u</name></expr>, <expr><name>ALLEGRO_KEY_U</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_v</name></expr>, <expr><name>ALLEGRO_KEY_V</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_w</name></expr>, <expr><name>ALLEGRO_KEY_W</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_x</name></expr>, <expr><name>ALLEGRO_KEY_X</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_y</name></expr>, <expr><name>ALLEGRO_KEY_Y</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_z</name></expr>, <expr><name>ALLEGRO_KEY_Z</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_0</name></expr>, <expr><name>ALLEGRO_KEY_0</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_1</name></expr>, <expr><name>ALLEGRO_KEY_1</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_2</name></expr>, <expr><name>ALLEGRO_KEY_2</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_3</name></expr>, <expr><name>ALLEGRO_KEY_3</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_4</name></expr>, <expr><name>ALLEGRO_KEY_4</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_5</name></expr>, <expr><name>ALLEGRO_KEY_5</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_6</name></expr>, <expr><name>ALLEGRO_KEY_6</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_7</name></expr>, <expr><name>ALLEGRO_KEY_7</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_8</name></expr>, <expr><name>ALLEGRO_KEY_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_9</name></expr>, <expr><name>ALLEGRO_KEY_9</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_0</name></expr>, <expr><name>ALLEGRO_KEY_PAD_0</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Insert</name></expr>, <expr><name>ALLEGRO_KEY_PAD_0</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_1</name></expr>, <expr><name>ALLEGRO_KEY_PAD_1</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_End</name></expr>, <expr><name>ALLEGRO_KEY_PAD_1</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_2</name></expr>, <expr><name>ALLEGRO_KEY_PAD_2</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Down</name></expr>, <expr><name>ALLEGRO_KEY_PAD_2</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_3</name></expr>, <expr><name>ALLEGRO_KEY_PAD_3</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Page_Down</name></expr>, <expr><name>ALLEGRO_KEY_PAD_3</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_4</name></expr>, <expr><name>ALLEGRO_KEY_PAD_4</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Left</name></expr>, <expr><name>ALLEGRO_KEY_PAD_4</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_5</name></expr>, <expr><name>ALLEGRO_KEY_PAD_5</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Begin</name></expr>, <expr><name>ALLEGRO_KEY_PAD_5</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_6</name></expr>, <expr><name>ALLEGRO_KEY_PAD_6</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Right</name></expr>, <expr><name>ALLEGRO_KEY_PAD_6</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_7</name></expr>, <expr><name>ALLEGRO_KEY_PAD_7</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Home</name></expr>, <expr><name>ALLEGRO_KEY_PAD_7</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_8</name></expr>, <expr><name>ALLEGRO_KEY_PAD_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Up</name></expr>, <expr><name>ALLEGRO_KEY_PAD_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_9</name></expr>, <expr><name>ALLEGRO_KEY_PAD_9</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Page_Up</name></expr>, <expr><name>ALLEGRO_KEY_PAD_9</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Delete</name></expr>, <expr><name>ALLEGRO_KEY_PAD_DELETE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Decimal</name></expr>, <expr><name>ALLEGRO_KEY_PAD_DELETE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Pause</name></expr>, <expr><name>ALLEGRO_KEY_PAUSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Break</name></expr>, <expr><name>ALLEGRO_KEY_PAUSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F1</name></expr>, <expr><name>ALLEGRO_KEY_F1</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F2</name></expr>, <expr><name>ALLEGRO_KEY_F2</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F3</name></expr>, <expr><name>ALLEGRO_KEY_F3</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F4</name></expr>, <expr><name>ALLEGRO_KEY_F4</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F5</name></expr>, <expr><name>ALLEGRO_KEY_F5</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F6</name></expr>, <expr><name>ALLEGRO_KEY_F6</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F7</name></expr>, <expr><name>ALLEGRO_KEY_F7</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F8</name></expr>, <expr><name>ALLEGRO_KEY_F8</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F9</name></expr>, <expr><name>ALLEGRO_KEY_F9</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F10</name></expr>, <expr><name>ALLEGRO_KEY_F10</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F11</name></expr>, <expr><name>ALLEGRO_KEY_F11</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F12</name></expr>, <expr><name>ALLEGRO_KEY_F12</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Escape</name></expr>, <expr><name>ALLEGRO_KEY_ESCAPE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_grave</name></expr>, <expr><name>ALLEGRO_KEY_TILDE</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_minus</name></expr>, <expr><name>ALLEGRO_KEY_MINUS</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_equal</name></expr>, <expr><name>ALLEGRO_KEY_EQUALS</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_BackSpace</name></expr>, <expr><name>ALLEGRO_KEY_BACKSPACE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Tab</name></expr>, <expr><name>ALLEGRO_KEY_TAB</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_bracketleft</name></expr>, <expr><name>ALLEGRO_KEY_OPENBRACE</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_bracketright</name></expr>, <expr><name>ALLEGRO_KEY_CLOSEBRACE</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_Return</name></expr>, <expr><name>ALLEGRO_KEY_ENTER</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_semicolon</name></expr>, <expr><name>ALLEGRO_KEY_SEMICOLON</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_apostrophe</name></expr>, <expr><name>ALLEGRO_KEY_QUOTE</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_backslash</name></expr>, <expr><name>ALLEGRO_KEY_BACKSLASH</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_less</name></expr>, <expr><name>ALLEGRO_KEY_BACKSLASH2</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_comma</name></expr>, <expr><name>ALLEGRO_KEY_COMMA</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_period</name></expr>, <expr><name>ALLEGRO_KEY_FULLSTOP</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_slash</name></expr>, <expr><name>ALLEGRO_KEY_SLASH</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_space</name></expr>, <expr><name>ALLEGRO_KEY_SPACE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Insert</name></expr>, <expr><name>ALLEGRO_KEY_INSERT</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Delete</name></expr>, <expr><name>ALLEGRO_KEY_DELETE</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Home</name></expr>, <expr><name>ALLEGRO_KEY_HOME</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_End</name></expr>, <expr><name>ALLEGRO_KEY_END</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Page_Up</name></expr>, <expr><name>ALLEGRO_KEY_PGUP</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Page_Down</name></expr>, <expr><name>ALLEGRO_KEY_PGDN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Left</name></expr>, <expr><name>ALLEGRO_KEY_LEFT</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Right</name></expr>, <expr><name>ALLEGRO_KEY_RIGHT</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Up</name></expr>, <expr><name>ALLEGRO_KEY_UP</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Down</name></expr>, <expr><name>ALLEGRO_KEY_DOWN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Divide</name></expr>, <expr><name>ALLEGRO_KEY_PAD_SLASH</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Multiply</name></expr>, <expr><name>ALLEGRO_KEY_PAD_ASTERISK</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Subtract</name></expr>, <expr><name>ALLEGRO_KEY_PAD_MINUS</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Add</name></expr>, <expr><name>ALLEGRO_KEY_PAD_PLUS</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Enter</name></expr>, <expr><name>ALLEGRO_KEY_PAD_ENTER</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Print</name></expr>, <expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Equal</name></expr>, <expr><name>ALLEGRO_KEY_PAD_EQUALS</name></expr>}</block></expr>, 

<expr><block>{<expr><name>XK_Shift_L</name></expr>, <expr><name>ALLEGRO_KEY_LSHIFT</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Shift_R</name></expr>, <expr><name>ALLEGRO_KEY_RSHIFT</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Control_L</name></expr>, <expr><name>ALLEGRO_KEY_LCTRL</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Control_R</name></expr>, <expr><name>ALLEGRO_KEY_RCTRL</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Alt_L</name></expr>, <expr><name>ALLEGRO_KEY_ALT</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Alt_R</name></expr>, <expr><name>ALLEGRO_KEY_ALTGR</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_ISO_Level3_Shift</name></expr>, <expr><name>ALLEGRO_KEY_ALTGR</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Meta_L</name></expr>, <expr><name>ALLEGRO_KEY_LWIN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Super_L</name></expr>, <expr><name>ALLEGRO_KEY_LWIN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Meta_R</name></expr>, <expr><name>ALLEGRO_KEY_RWIN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Super_R</name></expr>, <expr><name>ALLEGRO_KEY_RWIN</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Menu</name></expr>, <expr><name>ALLEGRO_KEY_MENU</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Scroll_Lock</name></expr>, <expr><name>ALLEGRO_KEY_SCROLLLOCK</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Num_Lock</name></expr>, <expr><name>ALLEGRO_KEY_NUMLOCK</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Caps_Lock</name></expr>, <expr><name>ALLEGRO_KEY_CAPSLOCK</name></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>modifier_flags</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>ALLEGRO_KEYMOD_SHIFT</name></expr>, <expr><name>ShiftMask</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_KEYMOD_CAPSLOCK</name></expr>, <expr><name>LockMask</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_KEYMOD_CTRL</name></expr>, <expr><name>ControlMask</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_KEYMOD_ALT</name></expr>, <expr><name>Mod1Mask</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_KEYMOD_NUMLOCK</name></expr>, <expr><name>Mod2Mask</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_KEYMOD_SCROLLLOCK</name></expr>, <expr><name>Mod3Mask</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_KEYMOD_LWIN</name> <operator>|</operator> <name>ALLEGRO_KEYMOD_RWIN</name></expr>, <expr><name>Mod4Mask</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>ALLEGRO_KEYMOD_MENU</name></expr>, <expr><name>Mod5Mask</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>key_names</name><index>[<expr><name>ALLEGRO_KEY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_shifts</name><parameter_list>(<parameter><decl><type><name>XKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>xmodmap</name><operator>-&gt;</operator><name>max_keypermod</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>keycode</name></name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>keycode</name></name> <operator>==</operator>

<name><name>xmodmap</name><operator>-&gt;</operator><name>modifiermap</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>xmodmap</name><operator>-&gt;</operator><name>max_keypermod</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyPress</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>^=</operator> <name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyRelease</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>modifier_flags</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>_key_shifts</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_unknown_key_assignment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XKeysymToString</name><argument_list>(<argument><expr><name><name>keysyms</name><index>[<expr><name>sym_per_key</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>min_keycode</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>key_names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>key_names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>_al_keyboard_common_names</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>used</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>ALLEGRO_KEY_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"You have more keys reported by X than Allegro's "</literal>

<literal type="string">"maximum of %i keys. Please send a bug report.\n"</literal></expr></argument>, <argument><expr><name>ALLEGRO_KEY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"Key %i missing:"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sym_per_key</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sym_str</name> <init>= <expr><call><name>XKeysymToString</name><argument_list>(<argument><expr><name><name>keysyms</name><index>[<expr><name>sym_per_key</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>min_keycode</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sym_str</name></expr> ?</condition><then> <expr><name>sym_str</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s assigned to %i.\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bool</name></type> <name>check_for_repeat</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>XPointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_KEY_REPEAT_DATA</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_KEY_REPEAT_DATA</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyPress</name> <operator>&amp;&amp;</operator>

<name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>keycode</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>time</name></name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>False</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_keyboard_handler</name><parameter_list>(<parameter><decl><type><name>XKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keycode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xkeyboard_installed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>keycode</name> <operator>=</operator> <name><name>keycode_to_scancode</name><index>[<expr><name><name>event</name><operator>-&gt;</operator><name>keycode</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keycode</name> <operator>=</operator> <call><name>find_unknown_key_assignment</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>keycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_shifts</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>==</operator> <name>ALLEGRO_KEY_PAUSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyRelease</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pause_key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>KeyRelease</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pause_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>pause_key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>KeyPress</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unicode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filtered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>xic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Xutf8LookupString</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buffer</name></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>XLookupString</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buffer</name></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>unicode</name> <operator>=</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unicode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unicode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>filtered</name> <operator>=</operator> <call><name>XFilterEvent</name><argument_list>(<argument><expr><operator>(</operator><name>XEvent</name> <operator>*</operator><operator>)</operator><name>event</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>||</operator> <name>unicode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_key_press</name><argument_list>(<argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>unicode</name></expr></argument>, <argument><expr><name>filtered</name></expr></argument>, <argument><expr><name>_key_shifts</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>XPending</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_KEY_REPEAT_DATA</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>found</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XCheckIfEvent</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>check_for_repeat</name></expr></argument>, <argument><expr><operator>(</operator><name>XPointer</name><operator>)</operator><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>found</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>handle_key_release</name><argument_list>(<argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_keyboard_switch_handler</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>focus_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>focus_in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xic</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>display_glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XSetICValues</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>XNClientWindow</name></expr></argument>, <argument><expr><name><name>display_glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_allegro_key</name><parameter_list>(<parameter><decl><type><name>KeySym</name></type> <name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><sizeof>sizeof <name>translation_table</name></sizeof> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name>translation_table</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>translation_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keysym</name> <operator>==</operator> <name>sym</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>translation_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>allegro_key</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x_scancode_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>scancode</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scancode</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>key_names</name><index>[<expr><name>scancode</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_al_xwin_get_keyboard_mapping</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>missing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>used</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>keycode_to_scancode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>keycode_to_scancode</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDisplayKeycodes</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_keycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>max_keycode</name> <operator>-</operator> <name>min_keycode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keysyms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>keysyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>keysyms</name> <operator>=</operator> <call><name>XGetKeyboardMapping</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>min_keycode</name></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym_per_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i keys, %i symbols per key.\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>sym_per_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sym_per_key</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>missing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>min_keycode</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_keycode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>KeySym</name></type> <name>sym</name> <init>= <expr><name><name>keysyms</name><index>[<expr><name>sym_per_key</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>min_keycode</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>sym2</name> <init>= <expr><name><name>keysyms</name><index>[<expr><name>sym_per_key</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>min_keycode</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sym_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sym2_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allegro_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>sym_str</name> <operator>=</operator> <call><name>XKeysymToString</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym2_str</name> <operator>=</operator> <call><name>XKeysymToString</name><argument_list>(<argument><expr><name>sym2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <name>str</name></sizeof></expr></argument>, <argument><expr><literal type="string">"key [%i: %s %s]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>sym_str</name></expr> ?</condition><then> <expr><name>sym_str</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>sym2_str</name></expr> ?</condition><then> <expr><name>sym2_str</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sym2</name> <operator>&gt;=</operator> <name>XK_0</name> <operator>&amp;&amp;</operator> <name>sym2</name> <operator>&lt;=</operator> <name>XK_9</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allegro_key</name> <operator>=</operator> <call><name>find_allegro_key</name><argument_list>(<argument><expr><name>sym2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allegro_key</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>!=</operator> <name>NoSymbol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allegro_key</name> <operator>=</operator> <call><name>find_allegro_key</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>allegro_key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>missing</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s defering.\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s not assigned.\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allegro_key</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_double</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>used</name><index>[<expr><name>allegro_key</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>allegro_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_names</name><index>[<expr><name>allegro_key</name></expr>]</index></name> <operator>=</operator>

<call><name>XKeysymToString</name><argument_list>(<argument><expr><name><name>keysyms</name><index>[<expr><name>sym_per_key</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>min_keycode</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used</name><index>[<expr><name>allegro_key</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s%s assigned to %i.\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_double</name></expr> ?</condition><then> <expr><literal type="string">" *double*"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>allegro_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>missing</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>min_keycode</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_keycode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>keycode_to_scancode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_unknown_key_assignment</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xmodmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFreeModifiermap</name><argument_list>(<argument><expr><name>xmodmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xmodmap</name> <operator>=</operator> <call><name>XGetModifierMapping</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"Modifier %d:"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>xmodmap</name><operator>-&gt;</operator><name>max_keypermod</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>KeyCode</name></type> <name>keycode</name> <init>= <expr><name><name>xmodmap</name><operator>-&gt;</operator><name>modifiermap</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>xmodmap</name><operator>-&gt;</operator><name>max_keypermod</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>sym</name> <init>= <expr><call><name>XkbKeycodeToKeysym</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sym_str</name> <init>= <expr><call><name>XKeysymToString</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sym_str</name></expr> ?</condition><then> <expr><name>sym_str</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_first_config_entry</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"xkeymap"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"xkeymap"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keycode</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scancode</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keycode</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scancode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>keycode_to_scancode</name><index>[<expr><name>keycode</name></expr>]</index></name> <operator>=</operator> <name>scancode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"User override: KeySym %i assigned to %i.\n"</literal></expr></argument>,

<argument><expr><name>keycode</name></expr></argument>, <argument><expr><name>scancode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_next_config_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x_set_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XKeyboardControl</name></type> <name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xkeyboard_installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>led</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>led_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>leds</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_NUMLOCK</name></expr> ?</condition><then> <expr><name>LedModeOn</name></expr> </then><else>: <expr><name>LedModeOff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeKeyboardControl</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>KBLed</name> <operator>|</operator> <name>KBLedMode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>led</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>led_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>leds</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CAPSLOCK</name></expr> ?</condition><then> <expr><name>LedModeOn</name></expr> </then><else>: <expr><name>LedModeOff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeKeyboardControl</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>KBLed</name> <operator>|</operator> <name>KBLedMode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>led</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>led_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>leds</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_SCROLLLOCK</name></expr> ?</condition><then> <expr><name>LedModeOn</name></expr> </then><else>: <expr><name>LedModeOff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeKeyboardControl</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>KBLed</name> <operator>|</operator> <name>KBLedMode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x_keyboard_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_locale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XIMStyles</name> <modifier>*</modifier></type><name>xim_styles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XIMStyle</name></type> <name>xim_style</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>imvalret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xkeyboard_installed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>main_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key_names</name></expr></argument>, <argument><expr><name>_al_keyboard_common_names</name></expr></argument>, <argument><expr><sizeof>sizeof <name>key_names</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Bool</name></type> <name>supported</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XkbSetDetectableAutoRepeat</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>supported</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XkbSetDetectableAutoRepeat failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using X Input Method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_locale</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Old locale: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>old_locale</name></expr> ?</condition><then> <expr><name>old_locale</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_locale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old_locale</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>old_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not set default locale.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>modifiers</name> <init>= <expr><call><name>XSetLocaleModifiers</name><argument_list>(<argument><expr><literal type="string">"@im=none"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XSetLocaleModifiers failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xim</name> <operator>=</operator> <call><name>XOpenIM</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xim</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XOpenIM failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_locale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Restoring old locale: %s\n"</literal></expr></argument>, <argument><expr><name>old_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>old_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imvalret</name> <operator>=</operator> <call><name>XGetIMValues</name><argument_list>(<argument><expr><name>xim</name></expr></argument>, <argument><expr><name>XNQueryInputStyle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xim_styles</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>imvalret</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>xim_styles</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Input method doesn't support any styles.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim_styles</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xim_style</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xim_styles</name><operator>-&gt;</operator><name>count_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xim_styles</name><operator>-&gt;</operator><name>supported_styles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator>

<operator>(</operator><name>XIMPreeditNothing</name> <operator>|</operator> <name>XIMStatusNothing</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xim_style</name> <operator>=</operator> <name><name>xim_styles</name><operator>-&gt;</operator><name>supported_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>xim_style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Input method doesn't support the style we support.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Input method style = %ld\n"</literal></expr></argument>, <argument><expr><name>xim_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>xim_styles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim</name> <operator>&amp;&amp;</operator> <name>xim_style</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xic</name> <operator>=</operator> <call><name>XCreateIC</name><argument_list>(<argument><expr><name>xim</name></expr></argument>,

<argument><expr><name>XNInputStyle</name></expr></argument>, <argument><expr><name>xim_style</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XCreateIC failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XCreateIC succeeded.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>display_glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display_glx</name> <operator>&amp;&amp;</operator> <name>xic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XSetICValues</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>XNClientWindow</name></expr></argument>, <argument><expr><name><name>display_glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_xwin_get_keyboard_mapping</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xkeyboard_installed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x_keyboard_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xkeyboard_installed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xkeyboard_installed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XDestroyIC</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XCloseIM</name><argument_list>(<argument><expr><name>xim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xim</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>xmodmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFreeModifiermap</name><argument_list>(<argument><expr><name>xmodmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xmodmap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keysyms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>keysyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keysyms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xkeybd_init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xkeybd_exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>xkeybd_get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xkeybd_set_keyboard_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xkeybd_keycode_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xkeybd_get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xkeybd_clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYDRV_XWIN</name></cpp:macro> <cpp:value>AL_ID('X','W','I','N')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name></type> <name>keydrv_xwin</name> <init>=

<expr><block>{

<expr><name>KEYDRV_XWIN</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"X11 keyboard"</literal></expr>,

<expr><name>xkeybd_init_keyboard</name></expr>,

<expr><name>xkeybd_exit_keyboard</name></expr>,

<expr><name>xkeybd_get_keyboard</name></expr>,

<expr><name>xkeybd_set_keyboard_leds</name></expr>,

<expr><name>xkeybd_keycode_to_name</name></expr>,

<expr><name>xkeybd_get_keyboard_state</name></expr>,

<expr><name>xkeybd_clear_keyboard_state</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type><name>_al_xwin_keyboard_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>keydrv_xwin</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xkeybd_init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>x_keyboard_init</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_keyboard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_keyboard</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"keyboard"</literal></expr></argument>, <argument><expr><literal type="string">"enable_three_finger_exit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Three finger flag enabled: %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>main_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xkeybd_exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>x_keyboard_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>xkeybd_get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_KEYBOARD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>the_keyboard</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xkeybd_set_keyboard_leds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>x_set_leds</name><argument_list>(<argument><expr><name>leds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xkeybd_keycode_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>x_scancode_to_name</name><argument_list>(<argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xkeybd_get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xkeybd_clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>last_press_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_press</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unichar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filtered</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>modifiers</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_repeat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is_repeat</name> <operator>=</operator> <operator>(</operator><name>last_press_code</name> <operator>==</operator> <name>mycode</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mycode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_press_code</name> <operator>=</operator> <name>mycode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_SET_KEY_DOWN</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>last_press_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mycode</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_repeat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filtered</name> <operator>&amp;&amp;</operator> <name>mycode</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MODIFIERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <name>unichar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <name>is_repeat</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>last_press_code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_repeat</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name> <operator>&amp;&amp;</operator>

<name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name> <operator>==</operator> <name>mycode</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_modifiers</name></name><operator>)</operator>

<operator>==</operator> <name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_modifiers</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>==</operator> <name>display</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_ungrab_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_grab_mouse</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>the_keyboard</name><operator>.</operator><name>three_finger_flag</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mycode</name> <operator>==</operator> <name>ALLEGRO_KEY_DELETE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mycode</name> <operator>==</operator> <name>ALLEGRO_KEY_END</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CTRL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <operator>(</operator><name>ALLEGRO_KEYMOD_ALT</name> <operator>|</operator> <name>ALLEGRO_KEYMOD_ALTGR</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Three finger combo detected. SIGTERMing "</literal>

<literal type="string">"pid %d\n"</literal></expr></argument>, <argument><expr><name>main_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>main_pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mycode</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_press_code</name> <operator>==</operator> <name>mycode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_press_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_CLEAR_KEY_DOWN</name><argument_list>(<argument><expr><name><name>the_keyboard</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>mycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>mycode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
