<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\x\xclipboard.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xclipboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xcursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SYSTEM_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_SYSTEM_RASPBERRYPI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DISPLAY_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_DISPLAY_RASPBERRYPI</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"clipboard"</literal></argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>_al_xwin_display_selection_notify</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>XSelectionEvent</name> <modifier>*</modifier></type><name>xselection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>display</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>xselection</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_display_selection_request</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>XSelectionRequestEvent</name> <modifier>*</modifier></type><name>xselectionrequest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>display</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XSelectionRequestEvent</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>sevent</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seln_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nbytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seln_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name>xselectionrequest</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"window %p: SelectionRequest (requestor = %ld, target = %ld)\n"</literal></expr></argument>, <argument><expr><name>xdisplay</name></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sevent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sevent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xany</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SelectionNotify</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>selection</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>selection</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>requestor</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>requestor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XA_CUT_BUFFER0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seln_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seln_data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Success</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Atom</name></type> <name>XA_TARGETS</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><literal type="string">"TARGETS"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,

<argument><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name>seln_format</name></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>,

<argument><expr><name>seln_data</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>property</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>XA_TARGETS</name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Atom</name></type> <name><name>SupportedFormats</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>target</name></name></expr>, <expr><name>XA_TARGETS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>property</name></name></expr></argument>,

<argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>SupportedFormats</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SupportedFormats</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>SupportedFormats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>xselection</name><operator>.</operator><name>property</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>property</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>seln_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>requestor</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_al_display_xglx_await_selection_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Awaiting selection event\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glx</name><operator>-&gt;</operator><name>selectioned</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Timeout while waiting for selection event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_clipboard_text</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>xwindow</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>XA_CLIPBOARD</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><literal type="string">"CLIPBOARD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xwindow</name> <operator>==</operator> <name>None</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Couldn't find a window to own the selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><literal type="string">"UTF8_STRING"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XA_CUT_BUFFER0</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>XA_CLIPBOARD</name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator>

<call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>XA_CLIPBOARD</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>xwindow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XSetSelectionOwner</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>XA_CLIPBOARD</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>XA_PRIMARY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>xwindow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XSetSelectionOwner</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>XA_PRIMARY</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>xdpy_get_clipboard_text</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>xwindow</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>owner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>selection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>seln_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seln_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nbytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>XA_CLIPBOARD</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><literal type="string">"CLIPBOARD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>XA_CLIPBOARD</name> <operator>==</operator> <name>None</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Couldn't access X clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><literal type="string">"UTF8_STRING"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>owner</name> <operator>=</operator> <call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>XA_CLIPBOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>owner</name> <operator>==</operator> <name>None</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>owner</name> <operator>==</operator> <name>xwindow</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>owner</name> <operator>=</operator> <call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selection</name> <operator>=</operator> <name>XA_CUT_BUFFER0</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>owner</name> <operator>=</operator> <name>xwindow</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selection</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_SELECTION"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XConvertSelection</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>XA_CLIPBOARD</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>,

<argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>is_selectioned</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_display_xglx_await_selection_event</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seln_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seln_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>Success</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seln_type</name> <operator>==</operator> <name>format</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><name>nbytes</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>nbytes</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_has_clipboard_text</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>xdpy_get_clipboard_text</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_add_clipboard_functions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_clipboard_text</name></name> <operator>=</operator> <name>xdpy_set_clipboard_text</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>get_clipboard_text</name></name> <operator>=</operator> <name>xdpy_get_clipboard_text</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>has_clipboard_text</name></name> <operator>=</operator> <name>xdpy_has_clipboard_text</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
