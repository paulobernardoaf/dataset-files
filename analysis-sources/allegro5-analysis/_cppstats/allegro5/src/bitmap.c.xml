<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\bitmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"bitmap"</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>create_memory_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>current_display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><name>current_display</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch</name> <operator>=</operator> <name>w</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_VIDEO_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>use_bitmap_blender</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name><operator>.</operator><name>blend_color</name></name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_register_convert_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_memory_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_unregister_convert_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bmp</name><operator>-&gt;</operator><name>memory</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>bmp</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_create_bitmap_params</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>current_display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>mul</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>w</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mul</name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Rejecting %dx%d bitmap\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>||</operator>

<operator>!</operator><name>current_display</name> <operator>||</operator>

<operator>!</operator><name><name>current_display</name><operator>-&gt;</operator><name>vt</name></name> <operator>||</operator>

<name><name>current_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>create_bitmap</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_VIDEO_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>create_memory_bitmap</name><argument_list>(<argument><expr><name>current_display</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name><name>current_display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>create_bitmap</name></name><argument_list>(<argument><expr><name>current_display</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to create display bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_display</name></name> <operator>=</operator> <name>current_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name> <operator>|=</operator> <name>ALLEGRO_VIDEO_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>use_bitmap_blender</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name><operator>.</operator><name>blend_color</name></name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name> <operator>&gt;=</operator> <name>w</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>upload_bitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_VIDEO_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>create_memory_bitmap</name><argument_list>(<argument><expr><name>current_display</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current_display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>back</name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_create_bitmap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>_al_create_bitmap_params</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><call><name>al_get_new_bitmap_format</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_new_bitmap_flags</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><call><name>al_get_new_bitmap_depth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_new_bitmap_samples</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_register_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>,

<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>al_destroy_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_set_bitmap_shader_field</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unregister_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_sub_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>disp</name> <init>= <expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>destroy_memory_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>destroy_bitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_convert_mask_to_alpha</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>mask_color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>alpha_pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Couldn't lock bitmap."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_TARGET_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha_pixel</name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_color</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>alpha_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_width</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_height</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>_format</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>_format</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_get_bitmap_memory_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>_memory_format</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>_memory_format</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_flags</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>_flags</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>_al_get_bitmap_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>_display</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>_display</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_depth</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>_depth</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>_depth</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_samples</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>_samples</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>_samples</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_COLOR</name></type> <name>al_get_bitmap_blend_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmap</name><operator>-&gt;</operator><name>use_bitmap_blender</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_get_blend_color</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>blend_color</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_get_bitmap_blender</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_get_separate_bitmap_blender</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_get_separate_bitmap_blender</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alpha_op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alpha_src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alpha_dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmap</name><operator>-&gt;</operator><name>use_bitmap_blender</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_get_separate_blender</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>alpha_op</name></expr></argument>, <argument><expr><name>alpha_src</name></expr></argument>, <argument><expr><name>alpha_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_op</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_dest</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>alpha_op</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_alpha_op</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_src</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>alpha_src</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_alpha_source</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_dst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>alpha_dst</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>blend_alpha_dest</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_bitmap_blend_color</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_color</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_bitmap_blender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_separate_bitmap_blender</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_separate_bitmap_blender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BLENDER</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>use_bitmap_blender</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_source</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_dest</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_op</name></name> <operator>=</operator> <name>alpha_op</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_source</name></name> <operator>=</operator> <name>alpha_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>blend_alpha_dest</name></name> <operator>=</operator> <name>alpha_dst</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_reset_bitmap_blender</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>use_bitmap_blender</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>blender</name><operator>.</operator><name>blend_color</name></name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_clipping_rectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>height</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_clipping_rectangle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_clipping_rectangle</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_reset_clipping_rectangle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_get_clipping_rectangle</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_create_sub_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>parent</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>parent</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>vt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>_display</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>)</operator><literal type="number">0x1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>shader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_register_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><literal type="string">"sub_bitmap"</literal></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>,

<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>al_destroy_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_reparent_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>parent</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>parent</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_sub_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_get_parent_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_x</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_bitmap_y</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>transfer_bitmap_data</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>dst_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>src_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>src_compressed</name> <init>= <expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dst_compressed</name> <init>= <expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>dst_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_w</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_h</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_compressed</name> <operator>&amp;&amp;</operator> <name>dst_compressed</name> <operator>&amp;&amp;</operator> <name>src_format</name> <operator>==</operator> <name>dst_format</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src_region</name> <operator>=</operator> <call><name>al_lock_bitmap_blocked</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst_region</name> <operator>=</operator> <call><name>al_lock_bitmap_blocked</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>copy_w</name> <operator>=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name>copy_w</name></expr></argument>, <argument><expr><name>block_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_h</name> <operator>=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name>copy_h</name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Taking fast clone path.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lock_format</name> <init>= <expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_compressed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dst_compressed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lock_format</name> <operator>=</operator> <name>dst_format</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>src_compressed</name> <operator>&amp;&amp;</operator> <name>dst_compressed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lock_format</name> <operator>=</operator> <name>src_format</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src_region</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>lock_format</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst_region</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>lock_format</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(

<argument><expr><name><name>src_region</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src_region</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>src_region</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name><name>dst_region</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dst_region</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>dst_region</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>copy_w</name></expr></argument>, <argument><expr><name>copy_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_copy_bitmap_data</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><call><name>al_get_pixel_block_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_ptr</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst_ptr</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>width</name> <operator>%</operator> <name>block_width</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>height</name> <operator>%</operator> <name>block_height</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>sx</name> <operator>%</operator> <name>block_width</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>sy</name> <operator>%</operator> <name>block_height</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dx</name> <operator>%</operator> <name>block_width</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dy</name> <operator>%</operator> <name>block_height</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sx</name> <operator>/=</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>/=</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dx</name> <operator>/=</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>/=</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>/=</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>/=</operator> <name>block_height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src_ptr</name> <operator>==</operator> <name>dst_ptr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src_pitch</name> <operator>==</operator> <name>dst_pitch</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>sy</name> <operator>*</operator> <name>src_pitch</name> <operator>+</operator> <name>sx</name> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dy</name> <operator>*</operator> <name>dst_pitch</name> <operator>+</operator> <name>dx</name> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_ptr</name></expr></argument>, <argument><expr><name>src_ptr</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ptr</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_ptr</name> <operator>+=</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_convert_bitmap_data</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><name>dst_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_format</name> <operator>==</operator> <name>dst_format</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_copy_bitmap_data</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_pitch</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>,

<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name>dst_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>_al_convert_funcs</name><index>[<expr><name>src_format</name></expr>]</index><index>[<expr><name>dst_format</name></expr>]</index></name><operator>)</operator><operator>(</operator><name>src</name><operator>,</operator> <name>src_pitch</name><operator>,</operator>

<name>dst</name><operator>,</operator> <name>dst_pitch</name><operator>,</operator> <name>sx</name><operator>,</operator> <name>sy</name><operator>,</operator> <name>dx</name><operator>,</operator> <name>dy</name><operator>,</operator> <name>width</name><operator>,</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>al_clone_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transfer_bitmap_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>clone</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_backup_dirty_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>backup_dirty_bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>backup_dirty_bitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
