<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\fshook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_fshook.h"</cpp:file></cpp:include>

<function><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>al_create_fs_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call><name>al_get_fs_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>fs_create_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>vt</name><operator>-&gt;</operator><name>fs_create_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_fs_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>fh</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_destroy_entry</name></name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_fs_entry_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_name</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_update_fs_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_update_entry</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>al_get_fs_entry_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_mode</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>al_get_fs_entry_atime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_atime</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>al_get_fs_entry_mtime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_mtime</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>al_get_fs_entry_ctime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_ctime</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>al_get_fs_entry_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_size</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_remove_fs_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_remove_entry</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_fs_entry_exists</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_entry_exists</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_open_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_open_directory</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_close_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_close_directory</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>al_read_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_read_directory</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>al_get_current_directory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call><name>al_get_fs_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>fs_get_current_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>vt</name><operator>-&gt;</operator><name>fs_get_current_directory</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_change_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call><name>al_get_fs_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>fs_change_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>vt</name><operator>-&gt;</operator><name>fs_change_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_make_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call><name>al_get_fs_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>fs_make_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>vt</name><operator>-&gt;</operator><name>fs_make_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_filename_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call><name>al_get_fs_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>fs_filename_exists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>vt</name><operator>-&gt;</operator><name>fs_filename_exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_remove_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call><name>al_get_fs_interface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>fs_remove_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>vt</name><operator>-&gt;</operator><name>fs_remove_filename</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>al_open_fs_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_open_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fs_open_file</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_for_each_fs_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name> <operator>||</operator> <operator>!</operator><call><name>al_open_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ALLEGRO_FOR_EACH_FS_ENTRY_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <call><name>al_read_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>entry</name></expr>;</condition> <incr><expr><name>entry</name> <operator>=</operator> <call><name>al_read_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>callback</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ALLEGRO_FOR_EACH_FS_ENTRY_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_get_fs_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>al_for_each_fs_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>==</operator> <name>ALLEGRO_FOR_EACH_FS_ENTRY_STOP</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>result</name> <operator>==</operator> <name>ALLEGRO_FOR_EACH_FS_ENTRY_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ALLEGRO_FOR_EACH_FS_ENTRY_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
