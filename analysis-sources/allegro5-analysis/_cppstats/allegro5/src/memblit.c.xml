<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\memblit.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_NO_BLEND_INLINE_FUNC</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_blend.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_memblit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_transform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_tri_soft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name></cpp:macro> <cpp:value>_ALLEGRO_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>_ALLEGRO_MAX</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_al_draw_transformed_scaled_bitmap_memory</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dh</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_al_draw_bitmap_region_memory_fast</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIPPER</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>sx</name></type></parameter>, <parameter><type><name>sy</name></type></parameter>, <parameter><type><name>sw</name></type></parameter>, <parameter><type><name>sh</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>, <parameter><type><name>dx</name></type></parameter>, <parameter><type><name>dy</name></type></parameter>, <parameter><type><name>dw</name></type></parameter>, <parameter><type><name>dh</name></type></parameter>, <parameter><type><name>wr</name></type></parameter>, <parameter><type><name>hr</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ float cl = dest-&gt;cl, cr = dest-&gt;cr_excl; float ct = dest-&gt;ct, cb = dest-&gt;cb_excl; float sx_ = 0, sy_ = 0, sw_ = 0, sh_ = 0; bool hflip = false, vflip = false; if (dw &lt; 0) { hflip = true; dx += dw; dw = -dw; sx_ = sx; sw_ = sw; } if (dh &lt; 0) { vflip = true; dy += dh; dh = -dh; sy_ = sy; sh_ = sh; } if (dest-&gt;parent) { dx += dest-&gt;xofs; dy += dest-&gt;yofs; cl += dest-&gt;xofs; if (cl &gt;= dest-&gt;parent-&gt;w) { return; } else if (cl &lt; 0) { cl = 0; } ct += dest-&gt;yofs; if (ct &gt;= dest-&gt;parent-&gt;h) { return; } else if (ct &lt; 0) { ct = 0; } cr = MIN(dest-&gt;parent-&gt;w, cr + dest-&gt;xofs); cb = MIN(dest-&gt;parent-&gt;h, cb + dest-&gt;yofs); dest = dest-&gt;parent; } if (dx &lt; cl) { const int d = cl - dx; dx = cl; dw -= d; sx += d * wr; sw -= d * wr; } if (dx + dw &gt; cr) { const int d = dx + dw - cr; dw -= d; sw -= d * wr; } if (dy &lt; ct) { const int d = ct - dy; dy = ct; dh -= d; sy += d * hr; sh -= d * hr; } if (dy + dh &gt; cb) { const int d = dy + dh - cb; dh -= d; sh -= d * hr; } if (sh &lt;= 0 || sw &lt;= 0) return; if (hflip) {dx += dw; dw = -dw; sx = sx_ + sw_ - sw + sx_ - sx; dx--;} if (vflip) {dy += dh; dh = -dh; sy = sy_ + sh_ - sh + sy_ - sy; dy--;} }</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>_al_draw_bitmap_region_memory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>src_mode</name></decl>, <decl><type ref="prev"/><name>dst_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op_alpha</name></decl>, <decl><type ref="prev"/><name>src_alpha</name></decl>, <decl><type ref="prev"/><name>dst_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xtrans</name></decl>, <decl><type ref="prev"/><name>ytrans</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_separate_bitmap_blender</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>src_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_AL_DEST_IS_ZERO</name> <operator>&amp;&amp;</operator> <name>_AL_SRC_NOT_MODIFIED_TINT_WHITE</name> <operator>&amp;&amp;</operator>

<call><name>_al_transform_is_translation</name><argument_list>(<argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>xtrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ytrans</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_draw_bitmap_region_memory_fast</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>,

<argument><expr><name>dx</name> <operator>+</operator> <name>xtrans</name></expr></argument>, <argument><expr><name>dy</name> <operator>+</operator> <name>ytrans</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_draw_transformed_scaled_bitmap_memory</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>,

<argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_draw_transformed_bitmap_memory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dh</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>local_trans</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>xsf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ysf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bl</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>br</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FLIP_VERTICAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>br</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bl</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>br</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FLIP_HORIZONTAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>tr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>bl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bl</name> <operator>=</operator> <name>br</name></expr>;</expr_stmt>

<expr_stmt><expr><name>br</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ysf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ysf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ysf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>local_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ysf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>local_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ysf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>local_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ysf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>xsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>ysf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>tint</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>xsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>ysf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>sx</name> <operator>+</operator> <name>sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>tint</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>xsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>xsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>xsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>ysf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>ysf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ysf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>sx</name> <operator>+</operator> <name>sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>sy</name> <operator>+</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>tint</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>xsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>ysf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>sy</name> <operator>+</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>tint</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>tr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>tl</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>br</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>bl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_draw_transformed_scaled_bitmap_memory</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>local_trans</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_translate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_trans</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_compose_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_trans</name></expr></argument>, <argument><expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_draw_transformed_bitmap_memory</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>local_trans</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_draw_bitmap_region_memory_fast</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>src_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>dst_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dw</name> <init>= <expr><name>sw</name></expr></init></decl>, <decl><type ref="prev"/><name>dh</name> <init>= <expr><name>sh</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<macro><name>CLIPPER</name><argument_list>(<argument>bitmap</argument>, <argument>sx</argument>, <argument>sy</argument>, <argument>sw</argument>, <argument>sh</argument>, <argument>dest</argument>, <argument>dx</argument>, <argument>dy</argument>, <argument>dw</argument>, <argument>dh</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>flags</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src_region</name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>,

<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst_region</name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>,

<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(

<argument><expr><name><name>src_region</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src_region</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>src_region</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name><name>dst_region</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dst_region</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>dst_region</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
