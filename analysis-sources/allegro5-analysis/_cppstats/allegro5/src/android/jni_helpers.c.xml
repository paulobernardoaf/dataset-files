<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\android\jni_helpers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"jni"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSE_DEBUG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>__jni_checkException</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jthrowable</name></type> <name>exc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionOccurred</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"GOT AN EXCEPTION @ %s:%i %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionDescribe</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FatalError</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>jobject</name></type> <name>_jni_callObjectMethod</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>object</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VERBOSE_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>class_id</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jclass</name></expr></argument>, <argument><expr><name>GetObjectClass</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>method_id</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jmethodID</name></expr></argument>, <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>ret</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>CallObjectMethod</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>method_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>jobject</name></type> <name>_jni_callObjectMethodV</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>object</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VERBOSE_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>class_id</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jclass</name></expr></argument>, <argument><expr><name>GetObjectClass</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>method_id</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jmethodID</name></expr></argument>, <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>ret</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>CallObjectMethodV</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>method_id</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VERBOSE_DEBUG</name><argument_list>(<argument><expr><literal type="string">"callObjectMethodV end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>_jni_getString</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VERBOSE_DEBUG</name><argument_list>(<argument><expr><literal type="string">"GetStringUTFLength"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsize</name></expr></argument>, <argument><expr><name>GetStringUTFLength</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>GetStringUTFChars</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VERBOSE_DEBUG</name><argument_list>(<argument><expr><literal type="string">"al_ustr_new_from_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name> <init>= <expr><call><name>al_ustr_new_from_buffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ReleaseStringUTFChars</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ustr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>_jni_callStringMethod</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jobject</name></type> <name>str_obj</name> <init>= <expr><call><name>_jni_callObjectMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>_jni_getString</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>str_obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>jobject</name></type> <name>_jni_callStaticObjectMethodV</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>cls</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jmethodID</name></expr></argument>, <argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>CallStaticObjectMethodV</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>jint</name></type> <name>_jni_callStaticIntMethodV</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>cls</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>mid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jmethodID</name></expr></argument>, <argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jint</name></expr></argument>, <argument><expr><name>CallStaticIntMethodV</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
