<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\android\android_apk_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_android.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>streq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 == strcmp(a, b))</cpp:value></cpp:define>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"android"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FILE_APK</name></name></type> <name>ALLEGRO_FILE_APK</name>;</typedef>

<struct>struct <name>ALLEGRO_FILE_APK</name>

<block>{

<decl_stmt><decl><type><name>jobject</name></type> <name>apk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error_indicator</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>cast_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_FILE_APK</name> <operator>*</operator><operator>)</operator><call><name>al_get_file_userdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apk_set_errno</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>error_indicator</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jobject</name></type> <name>APK_openRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>jnienv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>is</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jboolean</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>jnienv</name> <operator>=</operator> <call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctor</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jclass</name></expr></argument>, <argument><expr><name>GetMethodID</name></expr></argument>,

<argument><expr><call><name>_al_android_apk_stream_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>,

<argument><expr><literal type="string">"(L"</literal> <name>ALLEGRO_ANDROID_PACKAGE_NAME_SLASH</name> <literal type="string">"/AllegroActivity;Ljava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>NewObject</name></expr></argument>, <argument><expr><call><name>_al_android_apk_stream_class</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>ctor</name></expr></argument>, <argument><expr><call><name>_al_android_activity_object</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>jobject</name></expr></argument>, <argument><expr><name>NewGlobalRef</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><literal type="string">"()Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>res</name><operator>)</operator></expr> ?</condition><then> <expr><name>is</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>APK_close</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>apk_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jboolean</name></type> <name>ret</name> <init>= <expr><call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>apk_stream</name></expr></argument>,

<argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="string">"()Z"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DeleteGlobalRef</name></expr></argument>, <argument><expr><name>apk_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apk_set_errno</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>APK_seek</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>apk_stream</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jboolean</name></type> <name>res</name> <init>= <expr><call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>apk_stream</name></expr></argument>, <argument><expr><literal type="string">"seek"</literal></expr></argument>, <argument><expr><literal type="string">"(J)Z"</literal></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>APK_tell</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>apk_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr><call><name>_jni_callLongMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>apk_stream</name></expr></argument>, <argument><expr><literal type="string">"tell"</literal></expr></argument>, <argument><expr><literal type="string">"()J"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>APK_read</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>apk_stream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>jnienv</name> <init>= <expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jbyteArray</name></type> <name>b</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>res</name> <init>= <expr><call><name>_jni_callIntMethodV</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>apk_stream</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">"([B)I"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>jnienv</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>jnienv</name></expr></argument>, <argument><expr><name>DeleteLocalRef</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>APK_size</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>apk_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr><call><name>_jni_callLongMethod</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>apk_stream</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>file_apk_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>apk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>apk</name> <operator>=</operator> <call><name>APK_openRead</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>apk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apk_set_errno</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APK_close</name><argument_list>(<argument><expr><name>apk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name> <operator>=</operator> <name>apk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>error_indicator</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>fp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_apk_fclose</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>APK_close</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>file_apk_fread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>APK_read</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apk_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>file_apk_fwrite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_apk_fflush</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>file_apk_ftell</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>APK_tell</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_apk_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>base</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_SEEK_SET</name></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SEEK_CUR</name></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>APK_tell</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apk_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_SEEK_END</name></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>APK_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apk_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>APK_seek</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>, <argument><expr><name>base</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apk_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_apk_feof</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jboolean</name></type> <name>res</name> <init>= <expr><call><name>_jni_callBooleanMethodV</name><argument_list>(<argument><expr><call><name>_al_android_get_jnienv</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>,

<argument><expr><literal type="string">"eof"</literal></expr></argument>, <argument><expr><literal type="string">"()Z"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_apk_ferror</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>error_indicator</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_apk_ferrmsg</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_apk_fclearerr</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>error_indicator</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type> <name>file_apk_fsize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE_APK</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>cast_stream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>APK_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>apk</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name></type> <name>file_apk_vtable</name> <init>=

<expr><block>{

<expr><name>file_apk_fopen</name></expr>,

<expr><name>file_apk_fclose</name></expr>,

<expr><name>file_apk_fread</name></expr>,

<expr><name>file_apk_fwrite</name></expr>,

<expr><name>file_apk_fflush</name></expr>,

<expr><name>file_apk_ftell</name></expr>,

<expr><name>file_apk_seek</name></expr>,

<expr><name>file_apk_feof</name></expr>,

<expr><name>file_apk_ferror</name></expr>,

<expr><name>file_apk_ferrmsg</name></expr>,

<expr><name>file_apk_fclearerr</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>file_apk_fsize</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>ALLEGRO_FILE_INTERFACE</name> <modifier>*</modifier></type><name>_al_get_apk_file_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>file_apk_vtable</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_android_set_apk_file_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_file_interface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_apk_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
