<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\android\android_input_stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"android"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>android</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jlong</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_FILE</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>JNI_FUNC</name><argument_list>(<argument>int</argument>, <argument>AllegroInputStream</argument>, <argument>nativeRead</argument>, <argument>(JNIEnv *env, jobject obj,

jlong handle, jbyteArray array, int offset, int length)</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jbyte</name> <modifier>*</modifier></type><name>array_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"nativeRead begin: handle:%lli fp:%p offset:%i length:%i"</literal></expr></argument>,

<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>array_len</name> <init>= <expr><call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>GetArrayLength</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"array length: %i"</literal></expr></argument>, <argument><expr><name>array_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>array_ptr</name> <operator>=</operator> <call><name>_jni_call</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jbyte</name> <operator>*</operator></expr></argument>, <argument><expr><name>GetByteArrayElements</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>array_ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"al_fread: p:%p, o:%i, l:%i"</literal></expr></argument>, <argument><expr><name>array_ptr</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>array_ptr</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>al_feof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_jni_callv</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ReleaseByteArrayElements</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>array_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"nativeRead end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<macro><name>JNI_FUNC</name><argument_list>(<argument>void</argument>, <argument>AllegroInputStream</argument>, <argument>nativeClose</argument>, <argument>(JNIEnv *env, jobject obj,

jlong handle)</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</unit>
