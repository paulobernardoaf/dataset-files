<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\bitmap_type.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"bitmap"</literal></argument>)</argument_list></macro>

<struct>struct <name>BITMAP_CONVERSION_LIST</name> <block>{

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>bitmaps</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>BITMAP_CONVERSION_LIST</name></name></type> <name>convert_bitmap_list</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_convert_bitmap_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_init_convert_bitmap_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex_recursive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>cleanup_convert_bitmap_list</name></expr></argument>,

<argument><expr><literal type="string">"cleanup_convert_bitmap_list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_register_convert_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_CONVERT_BITMAP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>back</name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_unregister_convert_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_CONVERT_BITMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_bitmaps</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>bitmap_dtor_item</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>other_dtor_item</name> <init>= <expr><name><name>other</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>bitmap_display</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other_display</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_unregister_convert_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_unregister_convert_bitmap</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_unregister_shader_bitmap</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>shader</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_unregister_shader_bitmap</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>shader</name></name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>*</operator><name>bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bitmap</name> <operator>=</operator> <operator>*</operator><name>other</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>other</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <name>bitmap_dtor_item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>other</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <name>other_dtor_item</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap_display</name> <operator>=</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>other_display</name> <operator>=</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_display</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>other_display</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>_al_vector_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap_display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap_display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>back</name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>other_display</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bitmap_display</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>_al_vector_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>other_display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>other_display</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>back</name> <operator>=</operator> <name>other</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_register_shader_bitmap</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>shader</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_register_shader_bitmap</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>shader</name></name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_register_convert_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_register_convert_bitmap</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>bitmap_pointer_changed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>bitmap_pointer_changed</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>vt</name></name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>bitmap_pointer_changed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>other</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>bitmap_pointer_changed</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_convert_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_bitmap_flags</name> <init>= <expr><call><name>al_get_new_bitmap_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>want_memory</name> <init>= <expr><operator>(</operator><name>new_bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>clone_memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target_bitmap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>_ALLEGRO_INTERNAL_OPENGL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>al_get_new_bitmap_format</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>

<name>bitmap_flags</name> <operator>==</operator> <name>new_bitmap_flags</name> <operator>&amp;&amp;</operator>

<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_convert_bitmap</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clone_memory</name> <operator>=</operator> <operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clone_memory</name> <operator>!=</operator> <name>want_memory</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>swap_bitmaps</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>cr_excl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>cb_excl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>transform</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>proj_transform</name></name> <operator>=</operator> <name><name>clone</name><operator>-&gt;</operator><name>proj_transform</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>target_bitmap</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target_bitmap</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target_parent</name> <init>=

<expr><ternary><condition><expr><name><name>target_bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>target_bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr> </then><else>: <expr><name>target_bitmap</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <name>target_parent</name> <operator>||</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>target_parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>target_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_convert_memory_bitmaps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>backup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>bptr2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bptr2</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bptr2</name> <operator>=</operator> <operator>*</operator><name>bptr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>convert_bitmap_list</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><operator>*</operator><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MEMORY_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><operator>*</operator><name>bptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"converting memory bitmap %p to display bitmap\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_convert_bitmap</name><argument_list>(<argument><expr><operator>*</operator><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>convert_bitmap_list</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_convert_to_display_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>backup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"converting memory bitmap %p to display bitmap\n"</literal></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap_flags</name> <operator>&amp;</operator> <operator>~</operator><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_convert_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_convert_to_memory_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>backup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"converting display bitmap %p to memory bitmap\n"</literal></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_NEW_BITMAP_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <operator>~</operator><name>ALLEGRO_VIDEO_BITMAP</name><operator>)</operator> <operator>|</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_convert_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
