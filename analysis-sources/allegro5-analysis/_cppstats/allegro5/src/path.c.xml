<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\path.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_path.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>get_segment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>*</operator><name>seg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_segment_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>replace_backslashes</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_find_replace_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_path_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>dot_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>dotdot_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type> <name>dot</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dot_info</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type> <name>dotdot</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dotdot_info</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>piece</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>on_windows</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>on_windows</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>on_windows</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>on_windows</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slash</name> <init>= <expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>slash</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>slash</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>colon</name> <init>= <expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>al_ustr_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slash</name> <init>= <expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>piece</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_equal</name><argument_list>(<argument><expr><name>piece</name></expr></argument>, <argument><expr><name>dot</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ustr_equal</name><argument_list>(<argument><expr><name>piece</name></expr></argument>, <argument><expr><name>dotdot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>piece</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>Error</name>:</label>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>al_create_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_PATH</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>basename</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>full_string</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>replace_backslashes</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_path_string</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>al_create_path_for_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_length</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>al_clone_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clone</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>slot</name><operator>)</operator> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>clone</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_path_num_components</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_path_component</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_segment_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_replace_path_component</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_remove_path_component</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_insert_path_component</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_alloc_mid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>slot</name><operator>)</operator> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_path_tail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_path_num_components</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>al_get_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_drop_path_tail</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_get_path_num_components</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_remove_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_append_path_component</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>slot</name><operator>)</operator> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>path_is_absolute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>al_ustr_size</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_join_paths</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>path_is_absolute</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>tail</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tail</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>get_segment_cstr</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_rebase_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>path_is_absolute</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_path_drive</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><call><name>al_get_path_drive</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_insert_path_component</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>get_segment_cstr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>path_to_ustr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>delim</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_path_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><call><name>al_path_ustr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>al_path_ustr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>path_to_ustr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>full_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>path</name><operator>-&gt;</operator><name>full_string</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_path</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>basename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>basename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>full_string</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>full_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>full_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_path_drive</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>drive</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>, <argument><expr><name>drive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_path_drive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>drive</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_path_filename</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_path_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_path_extension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_path_extension</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>al_get_path_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_make_path_canonical</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_segment_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_remove_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<call><name>al_ustr_size</name><argument_list>(<argument><expr><call><name>get_segment</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_segment_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>al_remove_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
