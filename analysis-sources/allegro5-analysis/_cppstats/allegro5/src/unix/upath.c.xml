<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\unix\upath.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/fshook.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/path.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SYS_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SV_PROCFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/procfs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"upath"</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_find_executable_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>finfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cwd</name> <operator>=</operator> <call><name>al_get_current_directory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cwd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>finfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>finfo</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>finfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>start_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_start_pos</name> <init>= <expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_pos</name> <init>= <expr><name>next_start_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_start_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>end_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>finfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>S_ISDIR</name> <argument_list>(<argument><expr><name><name>finfo</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name>next_start_pos</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>get_executable_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_GETEXECNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>getexecname</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>_find_executable_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>linkname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>finfo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/exe"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>readlink</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filename</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SV_PROCFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>prpsinfo</name></name></type> <name>psinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/exe"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>PIOCPSINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_PROCFS_ARGCV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>psinfo</name><operator>.</operator><name>pr_argv</name></name> <operator>&amp;&amp;</operator> <name><name>psinfo</name><operator>.</operator><name>pr_argc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>_find_executable_file</name><argument_list>(<argument><expr><name><name>psinfo</name><operator>.</operator><name>pr_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>psinfo</name><operator>.</operator><name>pr_psargs</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>_find_executable_file</name><argument_list>(<argument><expr><name><name>psinfo</name><operator>.</operator><name>pr_psargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>_find_executable_file</name><argument_list>(<argument><expr><name><name>psinfo</name><operator>.</operator><name>pr_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"ps -p %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>popen</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to read the name of the executable file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>linkname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>linkname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to read the name of the executable file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>linkname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>linkname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name><name>linkname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linkname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>_al_sane_strncpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>linkname</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></call><operator>-</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>_find_executable_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>al_create_path</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>follow_symlinks</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_str</name> <init>= <expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>readlink</name><argument_list>(<argument><expr><name>path_str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><call><name>al_get_current_directory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>cwd_path</name> <init>= <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_rebase_path</name><argument_list>(<argument><expr><name>cwd_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_make_path_canonical</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>cwd_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDG_MAX_PATH_LEN</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_get_xdg_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>location_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>xdg_config_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>xdg_config_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdg_config_home</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XDG_CONFIG_HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xdg_config_home</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xdg_config_path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>xdg_config_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>xdg_config_path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_HOME_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xdg_config_path</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>xdg_config_path</name></expr></argument>, <argument><expr><literal type="string">".config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>xdg_config_path</name></expr></argument>, <argument><expr><literal type="string">"user-dirs.dirs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>xdg_config_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xdg_config_file</name> <operator>=</operator> <call><name>al_fopen_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>xdg_config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xdg_config_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name>xdg_config_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>XDG_MAX_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>component</name><index>[<expr><name>XDG_MAX_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>al_fgets</name><argument_list>(<argument><expr><name>xdg_config_file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>XDG_MAX_PATH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"XDG_"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"_DIR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"$HOME"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>location_path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_HOME_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>location_path</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>component</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>location_path</name></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name><name>component</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>xdg_config_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>location_path</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_unix_find_home</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home_env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>home_env</name> <operator>||</operator> <name><name>home_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name> <init>= <expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pass</name> <init>= <expr><call><name>getpwuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pass</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pass</name><operator>-&gt;</operator><name>pw_dir</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name><name>pass</name><operator>-&gt;</operator><name>pw_dir</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>home_env</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_al_unix_get_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_TEMP_PATH</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>envs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"TMP"</literal></expr>, <expr><literal type="string">"TMPDIR"</literal></expr>, <expr><literal type="string">"TEMP"</literal></expr>, <expr><literal type="string">"TEMPDIR"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>envs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name><name>envs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>paths</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"/tmp/"</literal></expr>, <expr><literal type="string">"/var/tmp/"</literal></expr>, <expr><literal type="string">"/usr/tmp/"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name> <init>= <expr><call><name>al_create_fs_entry</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><operator>(</operator><call><name>al_get_fs_entry_mode</name><argument_list>(<argument><expr><name>fse</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>fse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ALLEGRO_RESOURCES_PATH</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>exe</name> <init>= <expr><call><name>get_executable_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exe</name> <operator>=</operator> <call><name>follow_symlinks</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>exe</name></expr>;</return>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ALLEGRO_USER_DATA_PATH</name></expr>:</case>

<case>case <expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>local_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org_name</name> <init>= <expr><call><name>al_get_org_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>app_name</name> <init>= <expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>app_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ALLEGRO_USER_DATA_PATH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdg_data_home</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XDG_DATA_HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>local_path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><ternary><condition><expr><name>xdg_data_home</name></expr> ?</condition><then> <expr><name>xdg_data_home</name></expr> </then><else>: <expr><literal type="string">".local/share"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdg_config_home</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XDG_CONFIG_HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>local_path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><ternary><condition><expr><name>xdg_config_home</name></expr> ?</condition><then> <expr><name>xdg_config_home</name></expr> </then><else>: <expr><literal type="string">".config"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_path</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>local_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>home_path</name> <init>= <expr><call><name>_unix_find_home</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>home_path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_rebase_path</name><argument_list>(<argument><expr><name>home_path</name></expr></argument>, <argument><expr><name>local_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>home_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>org_name</name> <operator>&amp;&amp;</operator> <name><name>org_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>local_path</name></expr></argument>, <argument><expr><call><name>al_get_org_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>local_path</name></expr></argument>, <argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>local_path</name></expr>;</return>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ALLEGRO_USER_HOME_PATH</name></expr>:</case>

<return>return <expr><call><name>_unix_find_home</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_USER_DOCUMENTS_PATH</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>local_path</name> <init>= <expr><call><name>_get_xdg_path</name><argument_list>(<argument><expr><literal type="string">"DOCUMENTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>local_path</name></expr> ?</condition><then> <expr><name>local_path</name></expr> </then><else>: <expr><call><name>_unix_find_home</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ALLEGRO_EXENAME_PATH</name></expr>:</case>

<return>return <expr><call><name>get_executable_name</name><argument_list>()</argument_list></call></expr>;</return>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
