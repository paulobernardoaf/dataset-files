<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\opengl\ogl_lock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_glformat</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_al_ogl_get_glformat((f), (c))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogl_pixel_alignment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pixel_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<return>return <expr><name>pixel_size</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case> 

<return>return <expr><literal type="number">4</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogl_pitch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><name>w</name> <operator>*</operator> <name>pixel_size</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>pitch</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>exactly_15bpp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pixel_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>pixel_format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_RGB_555</name>

<operator>||</operator> <name>pixel_format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_BGR_555</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_backbuffer</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_writeonly</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>restore_fbo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite_fbo</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite_nonfbo</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>_al_ogl_lock_region_new</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLint</name></type> <name>gl_y</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>old_target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>restore_fbo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>bitmap_format</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name> <operator>||</operator>

<operator>(</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>disp</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPushClientAttrib</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_alignment</name> <init>= <expr><call><name>ogl_pixel_alignment</name><argument_list>(<argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_PACK_ALIGNMENT</name></expr></argument>, <argument><expr><name>pixel_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei(GL_PACK_ALIGNMENT, %d) failed (%s).\n"</literal></expr></argument>,

<argument><expr><name>pixel_alignment</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking backbuffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_backbuffer</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking non-backbuffer WRITEONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_writeonly</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking non-backbuffer READWRITE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_readwrite</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>restore_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glPopClientAttrib</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restore_fbo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_target</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>old_target</name> <operator>!=</operator> <name>bitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_ogl_setup_fbo</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call> <operator>==</operator> <name>old_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to lock region\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_backbuffer</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glReadPixels for format %s failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_writeonly</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>gl_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>restore_fbo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>restore_fbo</name> <operator>=</operator>

<call><name>_al_ogl_setup_fbo_non_backbuffer</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking non-backbuffer READWRITE with fbo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_readwrite_fbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Locking non-backbuffer READWRITE no fbo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ogl_lock_region_nonbb_readwrite_nonfbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite_fbo</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>old_fbo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_BINDING_EXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGetIntegerv(GL_FRAMEBUFFER_BINDING_EXT) failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glBindFramebufferEXT failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glReadPixels for format %s failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>old_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator> <name>pitch</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogl_lock_region_nonbb_readwrite_nonfbo</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><call><name>ogl_pitch</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>pitch</name> <operator>*</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetTexImage</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGetTexImage for format %s failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>+</operator>

<name>pitch</name> <operator>*</operator> <operator>(</operator><name>gl_y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>pixel_size</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <name>pixel_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_non_readonly</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_fbo_writeonly</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_fbo_readwrite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_nonfbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>_al_ogl_unlock_region_new</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer READONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ogl_unlock_region_non_readonly</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_non_readonly</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gl_y</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>-</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>biased_alpha</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_format</name> <operator>=</operator> <call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>_al_get_bitmap_memory_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name> <operator>||</operator>

<operator>(</operator><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>disp</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>old_disp</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glPushClientAttrib</name><argument_list>(<argument><expr><name>GL_CLIENT_PIXEL_STORE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_alignment</name> <init>= <expr><call><name>ogl_pixel_alignment</name><argument_list>(<argument><expr><name>lock_pixel_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><name>pixel_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei(GL_UNPACK_ALIGNMENT, %d) failed (%s).\n"</literal></expr></argument>,

<argument><expr><name>pixel_alignment</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>exactly_15bpp</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glPixelTransferi</name><argument_list>(<argument><expr><name>GL_ALPHA_BIAS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>biased_alpha</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking backbuffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogl_unlock_region_backbuffer</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer (FBO)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_fbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer (non-FBO)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_nonfbo</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MIPMAP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_framebuffer_object</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>glGenerateMipmapEXT</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmapEXT for texture %d failed (%s).\n"</literal></expr></argument>,

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>biased_alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glPixelTransferi</name><argument_list>(<argument><expr><name>GL_ALPHA_BIAS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glPopClientAttrib</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>popmatrix</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>program</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_CURRENT_PROGRAM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_version</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>_ALLEGRO_OPENGL_VERSION_1_4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glWindowPos2i</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glRasterPos2f</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>+</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>-</operator> <literal type="number">1e-4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>popmatrix</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDrawPixels</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glDrawPixels for format %s failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>popmatrix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>program</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer FBO WRITEONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_fbo_writeonly</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,

<argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer FBO READWRITE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogl_unlock_region_nonbb_fbo_readwrite</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ogl_bitmap</name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_fbo_writeonly</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>orig_pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitch</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>*</operator> <name>orig_pixel_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>tmpbuf</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>dst_pitch</name> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>,

<argument><expr><operator>-</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name>tmpbuf</name></expr></argument>,

<argument><expr><name>orig_format</name></expr></argument>,

<argument><expr><name>dst_pitch</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>orig_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D for format %d failed (%s).\n"</literal></expr></argument>,

<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_fbo_readwrite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>tex_internalformat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D for format %s failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetTexLevelParameteriv</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>GL_TEXTURE_INTERNAL_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_internalformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"x/y/w/h: %d/%d/%d/%d, internal format: %d\n"</literal></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,

<argument><expr><name>tex_internalformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogl_unlock_region_nonbb_nonfbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gl_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lock_format</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer non-FBO WRITEONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_ptr</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>lock_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unlocking non-backbuffer non-FBO READWRITE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ROW_LENGTH</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>true_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>bitmap</name><operator>-&gt;</operator><name>lock_data</name></name>

<operator>+</operator> <operator>(</operator><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name>gl_y</name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_glformat</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>start_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D for format %s failed (%s).\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>lock_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
