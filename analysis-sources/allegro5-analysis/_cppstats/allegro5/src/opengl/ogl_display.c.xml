<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\opengl\ogl_display.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/transformations.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_iphone.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogl_helpers.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>_al_ogl_setup_gl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_ogl_resize_backbuffer</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>target</name> <operator>==</operator> <name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name> <operator>||</operator>

<name><name>target</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_transformation</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name> <operator>=</operator> <call><name>_al_ogl_create_backbuffer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_set_target_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>bitmap</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_setup_fbo</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_ogl_setup_bitmap_clipping</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_unset_target_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_finalize_fbo</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_current_opengl_context</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp</name> <operator>&amp;&amp;</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_setup_bitmap_clipping</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_1</name></decl>, <decl><type ref="prev"/><name>y_1</name></decl>, <decl><type ref="prev"/><name>x_2</name></decl>, <decl><type ref="prev"/><name>y_2</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_scissor</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x_1</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_1</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_2</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_2</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x_1</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_1</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_2</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_2</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y_1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x_2</name> <operator>==</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name>y_2</name> <operator>==</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>==</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>use_scissor</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>use_scissor</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_scissor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_SCISSOR_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_SCISSOR_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_iphone_clip</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x_1</name></expr></argument>, <argument><expr><name>y_1</name></expr></argument>, <argument><expr><name>x_2</name></expr></argument>, <argument><expr><name>y_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>glScissor</name><argument_list>(<argument><expr><name>x_1</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>y_2</name></expr></argument>, <argument><expr><name>x_2</name> <operator>-</operator> <name>x_1</name></expr></argument>, <argument><expr><name>y_2</name> <operator>-</operator> <name>y_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_ogl_get_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_BITMAP</name> <operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>backbuffer</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_ogl_resize_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pitch</name> <operator>=</operator> <name>w</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>true_w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>true_h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>_al_ogl_create_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_backbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>backbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Creating backbuffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>IS_OPENGLES</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_RGB_565</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>_al_deduce_color_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><call><name>ALLEGRO_TRACE_CHANNEL_LEVEL</name><argument_list>(<argument><expr><literal type="string">"display"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"Deduced format %s for backbuffer.\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_color_components</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name></name></expr></argument>, <argument><expr><name>ALLEGRO_REQUIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>backbuffer_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Creating backbuffer bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>backbuffer</name> <operator>=</operator> <call><name>_al_ogl_create_bitmap</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ALLEGRO_VIDEO_BITMAP</name> <operator>|</operator> <name>ALLEGRO_NO_PRESERVE_TEXTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>backbuffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Backbuffer bitmap creation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>cb_excl</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backbuffer</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backbuffer</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backbuffer</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ALLEGRO_TRACE_CHANNEL_LEVEL</name><argument_list>(<argument><expr><literal type="string">"display"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(

<argument><expr><literal type="string">"Created backbuffer bitmap (actual format: %s)\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>backbuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ogl_backbuffer</name> <operator>=</operator> <name><name>backbuffer</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_backbuffer</name><operator>-&gt;</operator><name>true_w</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_backbuffer</name><operator>-&gt;</operator><name>true_h</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_backbuffer</name><operator>-&gt;</operator><name>is_backbuffer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backbuffer</name><operator>-&gt;</operator><name>_display</name></name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

<return>return <expr><name>backbuffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_destroy_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
