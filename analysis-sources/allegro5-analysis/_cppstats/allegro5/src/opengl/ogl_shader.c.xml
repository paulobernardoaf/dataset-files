<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\opengl\ogl_shader.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_shader.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"shader"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>shaders</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>shaders_mutex</name></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SHADER_GLSL_S</name></name></type> <name>ALLEGRO_SHADER_GLSL_S</name>;</typedef>

<struct>struct <name>ALLEGRO_SHADER_GLSL_S</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_SHADER</name></type> <name>shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>vertex_shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>pixel_shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>program_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_OGL_VARLOCS</name></type> <name>varlocs</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ALLEGRO_SHADER_INTERFACE</name></name></type> <name>shader_glsl_vt</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lookup_varlocs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_OGL_VARLOCS</name> <modifier>*</modifier></type><name>varlocs</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_gl_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLenum</name></type> <name>err</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"%s (%s)\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>_al_create_shader_glsl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER_PLATFORM</name></type> <name>platform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_SHADER_GLSL_S</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>platform</name></name> <operator>=</operator> <name>platform</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>vt</name></name> <operator>=</operator> <operator>&amp;</operator><name>shader_glsl_vt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shader</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaders</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>back</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><operator>)</operator><name>shader</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><operator>)</operator><name>shader</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_attach_shader_source</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_SHADER_TYPE</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLchar</name></type> <name><name>error_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ALLEGRO_VERTEX_SHADER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>gl_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ALLEGRO_VERTEX_SHADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gl_type</name> <operator>=</operator> <name>GL_VERTEX_SHADER</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gl_type</name> <operator>=</operator> <name>GL_FRAGMENT_SHADER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <call><name>glCreateShader</name><argument_list>(<argument><expr><name>gl_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glShaderSource</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glCompileShader</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetShaderiv</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>GL_COMPILE_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glGetShaderInfoLog</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Compile error: %s\n"</literal></expr></argument>, <argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_build_shader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLchar</name></type> <name><name>error_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name> <operator>=</operator> <call><name>glCreateProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glAttachShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glAttachShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glLinkProgram</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetProgramiv</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>GL_LINK_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glGetProgramInfoLog</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Link error: %s\n"</literal></expr></argument>, <argument><expr><name>error_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lookup_varlocs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gl_shader</name><operator>-&gt;</operator><name>varlocs</name></name></expr></argument>, <argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_use_shader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>set_projview_matrix_from_display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>program_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gl_shader</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr>;</expr_stmt>

<expr_stmt><expr><name>program_object</name> <operator>=</operator> <name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name>program_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>GL_NO_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"glUseProgram(%u) failed: %s\n"</literal></expr></argument>, <argument><expr><name>program_object</name></expr></argument>,

<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>program_object</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>program_object</name></name> <operator>=</operator> <name>program_object</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name></name> <operator>=</operator> <name><name>gl_shader</name><operator>-&gt;</operator><name>varlocs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>set_projview_matrix_from_display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_glsl_set_projview_matrix</name><argument_list>(

<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>projview_matrix_loc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>projview_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_update_render_state</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glsl_unuse_shader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>shader</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>glsl_destroy_shader</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaders</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>pixel_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_sampler</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>texture</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>&amp;&amp;</operator> <call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot use memory bitmap for sampler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No uniform variable '%s' in shader program\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>texture</name> <operator>=</operator> <ternary><condition><expr><name>bitmap</name></expr> ?</condition><then> <expr><call><name>al_get_opengl_texture</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>check_gl_error</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_matrix</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No uniform variable '%s' in shader program\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>matrix</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>check_gl_error</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_int</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No uniform variable '%s' in shader program\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>check_gl_error</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_float</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No uniform variable '%s' in shader program\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glUniform1f</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>check_gl_error</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_int_vector</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_components</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_elems</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No uniform variable '%s' in shader program\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>num_components</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform1iv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform2iv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform3iv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform4iv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>check_gl_error</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_float_vector</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_components</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_elems</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SHADER_GLSL_S</name> <modifier>*</modifier></type><name>gl_shader</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>gl_shader</name><operator>-&gt;</operator><name>program_object</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No uniform variable '%s' in shader program\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>num_components</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform1fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform2fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform3fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>glUniform4fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>num_elems</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>check_gl_error</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>glsl_set_shader_bool</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>glsl_set_shader_int</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ALLEGRO_SHADER_INTERFACE</name></name></type> <name>shader_glsl_vt</name> <init>=

<expr><block>{

<expr><name>glsl_attach_shader_source</name></expr>,

<expr><name>glsl_build_shader</name></expr>,

<expr><name>glsl_use_shader</name></expr>,

<expr><name>glsl_unuse_shader</name></expr>,

<expr><name>glsl_destroy_shader</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>glsl_set_shader_sampler</name></expr>,

<expr><name>glsl_set_shader_matrix</name></expr>,

<expr><name>glsl_set_shader_int</name></expr>,

<expr><name>glsl_set_shader_float</name></expr>,

<expr><name>glsl_set_shader_int_vector</name></expr>,

<expr><name>glsl_set_shader_float_vector</name></expr>,

<expr><name>glsl_set_shader_bool</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lookup_varlocs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_OGL_VARLOCS</name> <modifier>*</modifier></type><name>varlocs</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>pos_loc</name></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>color_loc</name></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>projview_matrix_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>texcoord_loc</name></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_TEXCOORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>use_tex_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_USE_TEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>tex_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_TEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>use_tex_matrix_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_USE_TEX_MATRIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>tex_matrix_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_TEX_MATRIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>alpha_test_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_ALPHA_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>alpha_func_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_ALPHA_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>alpha_test_val_loc</name></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_ALPHA_TEST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_ALLEGRO_PRIM_MAX_USER_ATTR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>user_attr_name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_SHADER_VAR_USER_ATTR</name> <literal type="string">"999"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>user_attr_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user_attr_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ALLEGRO_SHADER_VAR_USER_ATTR</name> <literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>varlocs</name><operator>-&gt;</operator><name>user_attr_loc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>user_attr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_gl_error</name><argument_list>(<argument><expr><literal type="string">"glGetAttribLocation, glGetUniformLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_glsl_set_projview_matrix</name><parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>projview_matrix_loc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>projview_matrix_loc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name>projview_matrix_loc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_glsl_init_shaders</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaders</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_SHADER</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shaders_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_glsl_shutdown_shaders</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shaders_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_glsl_unuse_shaders</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaders</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ALLEGRO_SHADER</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaders</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shader</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name> <init>=

<expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ALLEGRO_BITMAP</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shader</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_set_bitmap_shader_field</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>shaders_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>GLuint</name></type> <name>al_get_opengl_program_object</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>-&gt;</operator><name>platform</name></name> <operator>!=</operator> <name>ALLEGRO_SHADER_GLSL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>ALLEGRO_SHADER_GLSL_S</name> <operator>*</operator><operator>)</operator><name>shader</name><operator>)</operator><operator>-&gt;</operator><name>program_object</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
