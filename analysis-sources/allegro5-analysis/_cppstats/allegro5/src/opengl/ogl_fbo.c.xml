<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\opengl\ogl_fbo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_android.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_iphone.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogl_helpers.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>)</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup_fbo_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>use_fbo_for_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>GLint</name></type> <name>_al_gl_curr_fbo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>GLint</name></type> <name>_al_android_get_curr_fbo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_al_gl_curr_fbo</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_android_set_curr_fbo</name><parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>fbo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>_al_gl_curr_fbo</name> <operator>=</operator> <name>fbo</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>GLint</name></type> <name>_al_ogl_bind_framebuffer</name><parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>fbo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>old_fbo</name> <init>= <expr><call><name>_al_android_get_curr_fbo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ANDROID_PROGRAMMABLE_PIPELINE</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"glBindFramebufferEXT failed (%s)"</literal></expr></argument>,

<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_android_set_curr_fbo</name><argument_list>(<argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>old_fbo</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>GLint</name></type> <name>_al_ogl_bind_framebuffer</name><parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>fbo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>old_fbo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_BINDING_EXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>old_fbo</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>_al_ogl_reset_fbo_info</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>=</operator> <name>FBO_INFO_UNUSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last_use_time</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name><operator>)</operator> <operator>||</operator> <name>defined</name> <name>ALLEGRO_CFG_OPENGLES3</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_gl_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>e</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"OpenGL call failed! (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>detach_depth_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Deleting depth render buffer: %u\n"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteRenderbuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>detach_multisample_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Deleting multisample render buffer: %u\n"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteRenderbuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attach_depth_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_RASPBERRYPI</name></expr></cpp:if>

<decl_stmt><decl><type><name>GLuint</name></type> <name>rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>gldepth</name> <init>= <expr><name>GL_DEPTH_COMPONENT16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>al_get_bitmap_depth</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth</name></name> <operator>!=</operator> <name>bits</name> <operator>||</operator>

<name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dw</name></name> <operator>!=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dh</name></name> <operator>!=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>detach_depth_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name> <operator>||</operator> <name>defined</name> <name>ALLEGRO_CFG_OPENGLES3</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gldepth</name> <operator>=</operator> <name>GL_DEPTH_COMPONENT24</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>glGenRenderbuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindRenderbufferEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><call><name>al_get_bitmap_samples</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extension_supported</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extension_supported</name> <operator>=</operator> <call><name>al_have_opengl_extension</name><argument_list>(<argument><expr><literal type="string">"EXT_multisampled_render_to_texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>extension_supported</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_list</name><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_framebuffer_multisample</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>extension_supported</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glRenderbufferStorageEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><name>gldepth</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name> <operator>||</operator> <name>defined</name> <name>ALLEGRO_CFG_OPENGLES3</name></expr></cpp:if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glRenderbufferStorageMultisampleEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>,

<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>gldepth</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><else>else <block>{<block_content>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name> <operator>=</operator> <name>rb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dw</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>dh</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>e</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorage failed! bits=%d w=%d h=%d (%s)\n"</literal></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Depth render buffer created: %u\n"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>depth_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glFramebufferRenderbufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>GL_DEPTH_ATTACHMENT_EXT</name></expr></argument>,

<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glCheckFramebufferStatusEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GL_FRAMEBUFFER_COMPLETE_EXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"attaching depth renderbuffer failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindRenderbufferEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attach_multisample_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name> <operator>||</operator> <name>defined</name> <name>ALLEGRO_CFG_OPENGLES3</name></expr></cpp:if>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><call><name>al_get_bitmap_samples</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>samples</name></name> <operator>!=</operator> <name>samples</name> <operator>||</operator>

<name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mw</name></name> <operator>!=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mh</name></name> <operator>!=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>detach_multisample_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samples</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_list</name><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_framebuffer_multisample</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGenRenderbuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindRenderbufferEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_gl_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glRenderbufferStorageMultisampleEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>,

<argument><expr><name>samples</name></expr></argument>, <argument><expr><call><name>_al_ogl_get_glformat</name><argument_list>(

<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name> <operator>=</operator> <name>rb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mw</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>mh</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorage failed! samples=%d w=%d h=%d (%s)\n"</literal></expr></argument>,

<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Multisample render buffer created: %u\n"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glFramebufferRenderbufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>,

<argument><expr><name>GL_COLOR_ATTACHMENT0_EXT</name></expr></argument>, <argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glCheckFramebufferStatusEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GL_FRAMEBUFFER_COMPLETE_EXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"attaching multisample renderbuffer failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindRenderbufferEXT</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER_EXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_ogl_create_persistent_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>old_fbo</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ogl_bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_FBO_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ANDROID_PROGRAMMABLE_PIPELINE</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glGenFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_fbo</name> <operator>=</operator> <call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ANDROID_PROGRAMMABLE_PIPELINE</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>,

<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glFramebufferTexture2DEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0_EXT</name></expr></argument>,

<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"glFrameBufferTexture2DEXT failed! fbo=%d texture=%d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>attach_depth_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLESS_ANDROID_OR_RPI</name><argument_list>(

<argument><expr><call><name>glCheckFramebufferStatusEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GL_FRAMEBUFFER_COMPLETE_EXT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"FBO incomplete.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><name>old_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><name>old_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>=</operator> <name>FBO_INFO_PERSISTENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last_use_time</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Persistent FBO: %u\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>_al_ogl_persist_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>transient_fbo_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>extras</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>transient_fbo_info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>==</operator> <name>FBO_INFO_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_MAX_OPENGL_FBOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>transient_fbo_info</name> <operator>==</operator> <operator>&amp;</operator><name><name>extras</name><operator>-&gt;</operator><name>fbos</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>new_info</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_FBO_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>new_info</name> <operator>=</operator> <operator>*</operator><name>transient_fbo_info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>=</operator> <name>FBO_INFO_PERSISTENT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_reset_fbo_info</name><argument_list>(<argument><expr><name>transient_fbo_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Persistent FBO: %u\n"</literal></expr></argument>, <argument><expr><name><name>new_info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_info</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not find FBO %u in pool\n"</literal></expr></argument>, <argument><expr><name><name>transient_fbo_info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>transient_fbo_info</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>ogl_find_unused_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>extras</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_time</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_time_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_MAX_OPENGL_FBOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>extras</name><operator>-&gt;</operator><name>fbos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fbo_state</name> <operator>==</operator> <name>FBO_INFO_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>extras</name><operator>-&gt;</operator><name>fbos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>extras</name><operator>-&gt;</operator><name>fbos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_use_time</name> <operator>&lt;</operator> <name>min_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_time</name> <operator>=</operator> <name><name>extras</name><operator>-&gt;</operator><name>fbos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_use_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_time_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>&amp;</operator><name><name>extras</name><operator>-&gt;</operator><name>fbos</name><index>[<expr><name>min_time_index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_del_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>owner</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fbo_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Deleting FBO: %u\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ANDROID_PROGRAMMABLE_PIPELINE</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDeleteFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glDeleteFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>detach_depth_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detach_multisample_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>ogl_new_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ogl_find_unused_fbo</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>!=</operator> <name>FBO_INFO_PERSISTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>==</operator> <name>FBO_INFO_TRANSIENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_ogl_del_fbo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_reset_fbo_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ANDROID_PROGRAMMABLE_PIPELINE</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glGenFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffersEXT failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_reset_fbo_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Created FBO: %u\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>info</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_setup_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ogl_bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>false</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>==</operator> <name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_unset_target_bitmap</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_fbo_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_ogl_setup_fbo_non_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_ogl_finalize_fbo</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extra</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>extra</name><operator>-&gt;</operator><name>fbo_info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>blit_fbo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGenFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>blit_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>blit_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glFramebufferTexture2DEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>,

<argument><expr><name>GL_COLOR_ATTACHMENT0_EXT</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>extra</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebufferEXT</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>blit_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBlitFramebufferEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>, <argument><expr><name>GL_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_gl_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>blit_fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_fbo_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>IS_OPENGLES</name> <operator>||</operator>

<name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_list</name><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_framebuffer_object</name></name> <operator>||</operator>

<name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_list</name><operator>-&gt;</operator><name>ALLEGRO_GL_OES_framebuffer_object</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_al_iphone_setup_opengl_view</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_ogl_setup_fbo_non_backbuffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>IS_OPENGLES</name> <operator>||</operator>

<call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_EXT_framebuffer_object</name> <operator>||</operator>

<call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_OES_framebuffer_object</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ogl_new_fbo</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>fbo</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>use_fbo_for_bitmap</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>use_fbo_for_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_FBO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>ogl_bitmap</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>==</operator> <name>FBO_INFO_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fbo_state</name></name> <operator>=</operator> <name>FBO_INFO_TRANSIENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>last_use_time</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attach_multisample_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attach_depth_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>buffers</name><operator>.</operator><name>multisample_buffer</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ANDROID_PROGRAMMABLE_PIPELINE</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_samples</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>al_have_opengl_extension</name><argument_list>(<argument><expr><literal type="string">"EXT_multisampled_render_to_texture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>,

<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name> <operator>||</operator> <name>defined</name> <name>ALLEGRO_CFG_OPENGLES3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>ALLEGRO_IPHONE</name><operator>)</operator></expr></cpp:if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glFramebufferTexture2DMultisampleEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>,

<argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_get_bitmap_samples</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>glFramebufferTexture2DEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0_EXT</name></expr></argument>,

<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"glFrameBufferTexture2DEXT failed! fbo=%d texture=%d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>, <argument><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLESS_ANDROID_OR_RPI</name><argument_list>(

<argument><expr><call><name>glCheckFramebufferStatusEXT</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER_EXT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GL_FRAMEBUFFER_COMPLETE_EXT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not use FBO for bitmap with format %s.\n"</literal></expr></argument>,

<argument><expr><call><name>_al_pixel_format_name</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"*** SWITCHING TO SOFTWARE MODE ***\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_bind_framebuffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteFramebuffersEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>fbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_reset_fbo_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogl_bitmap</name><operator>-&gt;</operator><name>fbo_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
