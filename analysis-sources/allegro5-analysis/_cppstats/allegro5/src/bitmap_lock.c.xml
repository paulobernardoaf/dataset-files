<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\bitmap_lock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<function><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>al_lock_bitmap_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xc</name></decl>, <decl><type ref="prev"/><name>yc</name></decl>, <decl><type ref="prev"/><name>wc</name></decl>, <decl><type ref="prev"/><name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_real</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name> <operator>&lt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><name>height</name> <operator>&lt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>/</operator> <name>block_width</name><operator>)</operator> <operator>*</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yc</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>/</operator> <name>block_height</name><operator>)</operator> <operator>*</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>block_width</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>xc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>height</name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>yc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name> <operator>=</operator> <name>xc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>=</operator> <name>yc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>=</operator> <name>hc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>ALLEGRO_LOCK_WRITEONLY</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>xc</name> <operator>!=</operator> <name>x</name> <operator>||</operator> <name>yc</name> <operator>!=</operator> <name>y</name> <operator>||</operator> <name>wc</name> <operator>!=</operator> <name>width</name> <operator>||</operator> <name>hc</name> <operator>!=</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>ALLEGRO_LOCK_READWRITE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>_al_get_real_pixel_format</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name> <operator>||</operator> <name>bitmap_format</name> <operator>==</operator> <name>format</name> <operator>||</operator> <name>bitmap_format</name> <operator>==</operator> <name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name>

<operator>+</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>yc</name> <operator>+</operator> <name>xc</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>bitmap_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>wc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name><operator>*</operator><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pixel_size</name></name> <operator>=</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_WRITEONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>yc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>lock_region</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>xc</name></expr></argument>, <argument><expr><name>yc</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_data</name></name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>xc</name><operator>)</operator> <operator>*</operator> <name><name>lr</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>yc</name><operator>)</operator> <operator>*</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>lr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>al_lock_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_unlock_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unlock_compressed_region</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>unlock_region</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>bitmap_format</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_convert_bitmap_data</name><argument_list>(

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_bitmap_locked</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>al_lock_bitmap_blocked</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_lock_bitmap_region_blocked</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>block_width</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>block_width</name></expr></argument>,

<argument><expr><call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>block_height</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>al_lock_bitmap_region_blocked</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_flags</name> <init>= <expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x_block</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y_block</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>width_block</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>height_block</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_width</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>block_height</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x_block</name></expr></argument>, <argument><expr><name>y_block</name></expr></argument>, <argument><expr><name>width_block</name></expr></argument>,

<argument><expr><name>height_block</name></expr></argument>, <argument><expr><name>bitmap_format</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>bitmap_flags</name> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>%</operator> <name>block_width</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>%</operator> <name>block_height</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x_block</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name> <operator>/</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_block</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name> <operator>/</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_LOCK_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x_block</name> <operator>+</operator> <name>width_block</name>

<operator>&lt;=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>block_width</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>block_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y_block</name> <operator>+</operator> <name>height_block</name>

<operator>&lt;=</operator> <call><name>_al_get_least_multiple</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>block_height</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>block_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name> <operator>=</operator> <name>x_block</name> <operator>*</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>=</operator> <name>y_block</name> <operator>*</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>=</operator> <name>width_block</name> <operator>*</operator> <name>block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name> <operator>=</operator> <name>height_block</name> <operator>*</operator> <name>block_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name><name>bitmap</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>lock_compressed_region</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>lr</name></expr>;</return>

</block_content>}</block></function>

</unit>
