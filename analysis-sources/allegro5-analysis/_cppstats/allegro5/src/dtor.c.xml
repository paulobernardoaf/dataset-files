<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\dtor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_tls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_list.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"dtor"</literal></argument>)</argument_list></macro>

<struct>struct <name>_AL_DTOR_LIST</name> <block>{

<decl_stmt><decl><type><name>_AL_MUTEX</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>dtors</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>DTOR</name> <block>{

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>DTOR</name>;</typedef>

<function><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>_al_init_destructors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>dtors</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dtors</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_AL_MARK_MUTEX_UNINITED</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name> <operator>=</operator> <call><name>_al_list_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dtors</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_push_destructor_owner</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dtor_owner_count</name> <init>= <expr><call><name>_al_tls_get_dtor_owner_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>dtor_owner_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_pop_destructor_owner</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dtor_owner_count</name> <init>= <expr><call><name>_al_tls_get_dtor_owner_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>dtor_owner_count</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>dtor_owner_count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_run_destructors</name><parameter_list>(<parameter><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>dtors</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dtors</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>_al_list_back</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DTOR</name> <modifier>*</modifier></type><name>dtor</name> <init>= <expr><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>dtor</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>dtor</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling dtor for %s %p, func %p\n"</literal></expr></argument>,

<argument><expr><name><name>dtor</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>_al_list_back</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_shutdown_destructors</name><parameter_list>(<parameter><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>dtors</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dtors</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>_al_list_is_empty</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>dtors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>_al_register_destructor</name><parameter_list>(<parameter><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>dtors</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dtor_owner_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dtor_owner_count</name> <operator>=</operator> <call><name>_al_tls_get_dtor_owner_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dtor_owner_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DTOR</name> <modifier>*</modifier></type><name>dtor</name> <init>= <expr><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>dtor</name><operator>-&gt;</operator><name>object</name></name> <operator>!=</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<decl_stmt><decl><type><name>DTOR</name> <modifier>*</modifier></type><name>new_dtor</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DTOR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_dtor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_dtor</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dtor</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dtor</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"added dtor for %s %p, func %p\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>object</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_list_push_back</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>, <argument><expr><name>new_dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"failed to add dtor for %s %p\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_unregister_destructor</name><parameter_list>(<parameter><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>dtors</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>dtor_item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dtor_item</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>DTOR</name> <modifier>*</modifier></type><name>dtor</name> <init>= <expr><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>dtor_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"removed dtor for %s %p\n"</literal></expr></argument>, <argument><expr><name><name>dtor</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dtor</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>, <argument><expr><name>dtor_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_foreach_destructor</name><parameter_list>(<parameter><decl><type><name>_AL_DTOR_LIST</name> <modifier>*</modifier></type><name>dtors</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DTOR</name> <modifier>*</modifier></type><name>dtor</name> <init>= <expr><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name><name>dtor</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>dtor</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name><name>dtors</name><operator>-&gt;</operator><name>dtors</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtors</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
