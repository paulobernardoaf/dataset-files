<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\whapall.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECTINPUT_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/haptic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_haptic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wjoyall.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"haptic"</literal></argument>)</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_init_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>hapall_exit_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_mouse_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_joystick_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_keyboard_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_display_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_touch_input_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_keyboard</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_touch_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_release</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hapall_get_capabilities</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>hapall_get_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_set_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hapall_get_max_effects</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_effect_ok</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>eff</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_upload_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>eff</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_play_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_stop_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_release_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>hapall_get_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_set_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name></type> <name>_al_hapdrv_windows_all</name> <init>=

<expr><block>{

<expr><name>AL_HAPTIC_TYPE_WINDOWS_ALL</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"Windows haptic(s)"</literal></expr>,

<expr><name>hapall_init_haptic</name></expr>,

<expr><name>hapall_exit_haptic</name></expr>,

<expr><name>hapall_is_mouse_haptic</name></expr>,

<expr><name>hapall_is_joystick_haptic</name></expr>,

<expr><name>hapall_is_keyboard_haptic</name></expr>,

<expr><name>hapall_is_display_haptic</name></expr>,

<expr><name>hapall_is_touch_input_haptic</name></expr>,

<expr><name>hapall_get_from_mouse</name></expr>,

<expr><name>hapall_get_from_joystick</name></expr>,

<expr><name>hapall_get_from_keyboard</name></expr>,

<expr><name>hapall_get_from_display</name></expr>,

<expr><name>hapall_get_from_touch_input</name></expr>,

<expr><name>hapall_get_active</name></expr>,

<expr><name>hapall_get_capabilities</name></expr>,

<expr><name>hapall_get_gain</name></expr>,

<expr><name>hapall_set_gain</name></expr>,

<expr><name>hapall_get_max_effects</name></expr>,

<expr><name>hapall_is_effect_ok</name></expr>,

<expr><name>hapall_upload_effect</name></expr>,

<expr><name>hapall_play_effect</name></expr>,

<expr><name>hapall_stop_effect</name></expr>,

<expr><name>hapall_is_effect_playing</name></expr>,

<expr><name>hapall_release_effect</name></expr>,

<expr><name>hapall_release</name></expr>,

<expr><name>hapall_get_autocenter</name></expr>,

<expr><name>hapall_set_autocenter</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>hapall_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_init_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>xi_ok</name></decl>, <decl><type ref="prev"/><name>di_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapall_mutex</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hapall_mutex</name> <operator>=</operator> <call><name>al_create_mutex_recursive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hapall_mutex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xi_ok</name> <operator>=</operator> <call><name><name>_al_hapdrv_xinput</name><operator>.</operator><name>init_haptic</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di_ok</name> <operator>=</operator> <call><name><name>_al_hapdrv_directx</name><operator>.</operator><name>init_haptic</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>xi_ok</name> <operator>||</operator> <name>di_ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hapall_exit_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>hapall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hapall_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>haptic</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_active</name></name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_mouse_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mouse</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_joystick_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>dx_ok</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>xi_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>joy</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>driver</name></name> <operator>==</operator> <operator>&amp;</operator><name>_al_joydrv_xinput</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dx_ok</name> <operator>=</operator> <call><name><name>_al_hapdrv_xinput</name><operator>.</operator><name>is_joystick_haptic</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>driver</name></name> <operator>==</operator> <operator>&amp;</operator><name>_al_joydrv_directx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xi_ok</name> <operator>=</operator> <call><name><name>_al_hapdrv_directx</name><operator>.</operator><name>is_joystick_haptic</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dx_ok</name> <operator>||</operator> <name>xi_ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_display_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_keyboard_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_touch_input_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mouse</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_haptic</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>driver</name></name> <operator>==</operator> <operator>&amp;</operator><name>_al_joydrv_xinput</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>haptic</name> <operator>=</operator> <call><name><name>_al_hapdrv_xinput</name><operator>.</operator><name>get_from_joystick</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>haptic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>haptic</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_hapdrv_xinput</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>joy</name><operator>-&gt;</operator><name>driver</name></name> <operator>==</operator> <operator>&amp;</operator><name>_al_joydrv_directx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>haptic</name> <operator>=</operator> <call><name><name>_al_hapdrv_directx</name><operator>.</operator><name>get_from_joystick</name></name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>haptic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>haptic</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_hapdrv_directx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapall_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>haptic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_keyboard</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapall_get_from_touch_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hapall_get_capabilities</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_capabilities</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hapall_get_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_gain</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_set_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>set_gain</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>hapall_get_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_autocenter</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_set_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>intensity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>set_autocenter</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hapall_get_max_effects</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>get_max_effects</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_effect_ok</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>is_effect_ok</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_upload_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <name><name>dev</name><operator>-&gt;</operator><name>driver</name></name></expr>;</expr_stmt>

<return>return <expr><call><name><name>dev</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>upload_effect</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_play_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loops</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>driver</name><operator>-&gt;</operator><name>play_effect</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>loops</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_stop_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>driver</name><operator>-&gt;</operator><name>stop_effect</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_is_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>driver</name><operator>-&gt;</operator><name>is_effect_playing</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_release_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>driver</name><operator>-&gt;</operator><name>release_effect</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapall_release</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haptic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>haptic</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
