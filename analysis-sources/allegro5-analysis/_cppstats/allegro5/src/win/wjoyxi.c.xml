<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\wjoyxi.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> something is wrong with the makefile</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MINGW32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKEFOURCC</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XINPUT_POLL_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_XINPUT_POLL_DELAY</name></cpp:macro> <cpp:value>0.01</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XINPUT_DISCONNECTED_POLL_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_XINPUT_DISCONNECTED_POLL_DELAY</name></cpp:macro> <cpp:value>1.50</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/joystick.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sal.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xinput.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"xinput"</literal></argument>)</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wjoyxi.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>joyxi_init_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_exit_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>joyxi_reconfigure_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>joyxi_get_num_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joyxi_get_joystick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_release_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_get_joystick_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joyxi_get_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>joyxi_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_DRIVER</name></type> <name>_al_joydrv_xinput</name> <init>=

<expr><block>{

<expr><name>AL_JOY_TYPE_XINPUT</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"XInput Joystick"</literal></expr>,

<expr><name>joyxi_init_joystick</name></expr>,

<expr><name>joyxi_exit_joystick</name></expr>,

<expr><name>joyxi_reconfigure_joysticks</name></expr>,

<expr><name>joyxi_get_num_joysticks</name></expr>,

<expr><name>joyxi_get_joystick</name></expr>,

<expr><name>joyxi_release_joystick</name></expr>,

<expr><name>joyxi_get_joystick_state</name></expr>,

<expr><name>joyxi_get_name</name></expr>,

<expr><name>joyxi_get_active</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_MIN_VERSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINPUT_MAX_VERSION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>XInputEnablePROC</name>)<parameter_list>(<parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>XInputSetStatePROC</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_VIBRATION</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>XInputGetStatePROC</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_STATE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>XInputGetCapabilitiesPROC</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_CAPABILITIES</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>_imp_xinput_module</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XInputEnablePROC</name></type> <name>_imp_XInputEnable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XInputGetStatePROC</name></type> <name>_imp_XInputGetState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XInputGetCapabilitiesPROC</name></type> <name>_imp_XInputGetCapabilities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XInputSetStatePROC</name></type> <name>_al_imp_XInputSetState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK_XINPUT</name></type> <name><name>joyxi_joysticks</name><index>[<expr><name>MAX_JOYSTICKS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>joyxi_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>joyxi_disconnected_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>joyxi_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>joyxi_cond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>joyxi_disconnected_cond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>joyxi_stick_names</name><index>[<expr><name>MAX_STICKS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Left Thumbstick"</literal></expr>,

<expr><literal type="string">"Right Thumbstick"</literal></expr>,

<expr><literal type="string">"Left Trigger"</literal></expr>,

<expr><literal type="string">"Right Trigger"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>joyxi_axis_names</name><index>[<expr><name>MAX_STICKS</name></expr>]</index><index>[<expr><name>MAX_AXES</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ramp"</literal></expr>, <expr><literal type="string">"Error"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ramp"</literal></expr>, <expr><literal type="string">"Error"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>joyxi_axis_per_stick</name><index>[<expr><name>MAX_STICKS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>_AL_XINPUT_BUTTON_MAPPING</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>_AL_XINPUT_BUTTON_MAPPING</name></name></type>

<name><name>joyxi_button_mapping</name><index>[<expr><name>MAX_BUTTONS</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>XINPUT_GAMEPAD_A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"A"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_B</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"B"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_X</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"X"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_Y</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"Y"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_RIGHT_SHOULDER</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"RB"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_LEFT_SHOULDER</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"LB"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_RIGHT_THUMB</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"RT"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_LEFT_THUMB</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="string">"LT"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_BACK</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"BACK"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_START</name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="string">"START"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_DPAD_RIGHT</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="string">"RIGHT DPAD"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_DPAD_LEFT</name></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="string">"LEFT DPAD"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_DPAD_DOWN</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="string">"DOWN DPAD"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>XINPUT_GAMEPAD_DPAD_UP</name></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="string">"UP DPAD"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unload_xinput_module</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>_imp_xinput_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_imp_xinput_module</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_imp_load_xinput_module_version</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>module_name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><literal type="string">"xinput1_%d.dll"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_imp_xinput_module</name> <operator>=</operator> <call><name>_al_win_safe_load_library</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>_imp_xinput_module</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>_imp_XInputEnable</name> <operator>=</operator> <operator>(</operator><name>XInputEnablePROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>_imp_xinput_module</name></expr></argument>, <argument><expr><literal type="string">"XInputEnable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>_imp_XInputEnable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>_imp_xinput_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_imp_xinput_module</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>_imp_XInputGetState</name> <operator>=</operator> <operator>(</operator><name>XInputGetStatePROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>_imp_xinput_module</name></expr></argument>, <argument><expr><literal type="string">"XInputGetState"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_imp_XInputGetCapabilities</name> <operator>=</operator> <operator>(</operator><name>XInputGetCapabilitiesPROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>_imp_xinput_module</name></expr></argument>, <argument><expr><literal type="string">"XInputGetCapabilities"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_imp_XInputSetState</name> <operator>=</operator> <operator>(</operator><name>XInputSetStatePROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>_imp_xinput_module</name></expr></argument>, <argument><expr><literal type="string">"XInputSetState"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Module \"%s\" loaded.\n"</literal></expr></argument>, <argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_xinput_module</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_imp_xinput_module</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"joystick"</literal></expr></argument>, <argument><expr><literal type="string">"force_xinput_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to override XInput version. \"%s\" is not valid integer number."</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>_imp_load_xinput_module_version</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>version</name> <operator>=</operator> <name>XINPUT_MAX_VERSION</name></expr>;</init> <condition><expr><name>version</name> <operator>&gt;=</operator> <name>XINPUT_MIN_VERSION</name></expr>;</condition> <incr><expr><name>version</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>_imp_load_xinput_module_version</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to load XInput library. Library is not installed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_generate_reconfigure_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>any</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>any</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_generate_axis_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stick</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>joy</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>=</operator> <name>stick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>=</operator> <name>axis</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Generating an axis event on stick %d axis %d value %f:\n"</literal></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_generate_button_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_EVENT_TYPE</name></type> <name>event_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator><name>joy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Generating an button event on button %d type %d:\n"</literal></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>joyxi_convert_axis</name><parameter_list>(<parameter><decl><type><name>SHORT</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>value</name><operator>)</operator> <operator>/</operator> <literal type="number">32767.0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>value</name><operator>)</operator> <operator>/</operator> <literal type="number">32768.0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>joyxi_convert_trigger</name><parameter_list>(<parameter><decl><type><name>BYTE</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>value</name><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_convert_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>alstate</name></decl></parameter>, <parameter><decl><type><name>XINPUT_STATE</name> <modifier>*</modifier></type><name>xistate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>alstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>alstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_BUTTONS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_AL_XINPUT_BUTTON_MAPPING</name></name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name>joyxi_button_mapping</name> <operator>+</operator> <name>index</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>wButtons</name></name> <operator>&amp;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>button</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>button</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>button</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>button</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>joyxi_convert_axis</name><argument_list>(<argument><expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>sThumbLX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>joyxi_convert_axis</name><argument_list>(<argument><expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>sThumbLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>joyxi_convert_axis</name><argument_list>(<argument><expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>sThumbRX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>joyxi_convert_axis</name><argument_list>(<argument><expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>sThumbRY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>joyxi_convert_trigger</name><argument_list>(<argument><expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>bLeftTrigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>joyxi_convert_trigger</name><argument_list>(<argument><expr><name><name>xistate</name><operator>-&gt;</operator><name>Gamepad</name><operator>.</operator><name>bRightTrigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_emit_events</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>newstate</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>oldstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>subdex</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_BUTTONS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newbutton</name> <init>= <expr><name><name>newstate</name><operator>-&gt;</operator><name>button</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldbutton</name> <init>= <expr><name><name>oldstate</name><operator>-&gt;</operator><name>button</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newbutton</name> <operator>!=</operator> <name>oldbutton</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>oldbutton</name> <operator>&gt;</operator> <name>newbutton</name></expr> ?</condition><then>

<expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</name></expr> </then><else>:

<expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>joyxi_generate_button_event</name><argument_list>(<argument><expr><name>xjoy</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_STICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>subdex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subdex</name> <operator>&lt;</operator> <name><name>joyxi_axis_per_stick</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</condition> <incr><expr><name>subdex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>oldaxis</name> <init>= <expr><name><name>oldstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><name>subdex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>newaxis</name> <init>= <expr><name><name>newstate</name><operator>-&gt;</operator><name>stick</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><name>subdex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldaxis</name> <operator>!=</operator> <name>newaxis</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>joyxi_generate_axis_event</name><argument_list>(<argument><expr><name>xjoy</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>subdex</name></expr></argument>, <argument><expr><name>newaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_poll_connected_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XINPUT_STATE</name></type> <name>xistate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_STATE</name></type> <name>alstate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>res</name> <init>= <expr><call><name>_imp_XInputGetState</name><argument_list>(<argument><expr><name><name>xjoy</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xistate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>joyxi_generate_reconfigure_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xistate</name><operator>.</operator><name>dwPacketNumber</name></name> <operator>==</operator> <name><name>xjoy</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>dwPacketNumber</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"XInput joystick state change detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>joyxi_convert_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xistate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>joyxi_emit_events</name><argument_list>(<argument><expr><name>xjoy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xjoy</name><operator>-&gt;</operator><name>joystate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xjoy</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>xistate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xjoy</name><operator>-&gt;</operator><name>joystate</name></name> <operator>=</operator> <name>alstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_poll_disconnected_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XINPUT_CAPABILITIES</name></type> <name>xicapas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_imp_XInputGetCapabilities</name><argument_list>(<argument><expr><name><name>xjoy</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xicapas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>joyxi_generate_reconfigure_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_poll_connected_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>joyxi_joysticks</name> <operator>+</operator> <name>index</name><operator>)</operator><operator>-&gt;</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>joyxi_poll_connected_joystick</name><argument_list>(<argument><expr><name>joyxi_joysticks</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_poll_disconnected_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>joyxi_joysticks</name> <operator>+</operator> <name>index</name><operator>)</operator><operator>-&gt;</operator><name>active</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>joyxi_poll_disconnected_joystick</name><argument_list>(<argument><expr><name>joyxi_joysticks</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>joyxi_poll_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_init_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>ALLEGRO_XINPUT_POLL_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_wait_cond_until</name><argument_list>(<argument><expr><name>joyxi_cond</name></expr></argument>, <argument><expr><name>joyxi_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>joyxi_poll_connected_joysticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>joyxi_poll_disconnected_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_init_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>ALLEGRO_XINPUT_DISCONNECTED_POLL_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_wait_cond_until</name><argument_list>(<argument><expr><name>joyxi_disconnected_cond</name></expr></argument>, <argument><expr><name>joyxi_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>joyxi_poll_disconnected_joysticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_init_joystick_info</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>subdex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_JOYSTICK_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>xjoy</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_sticks</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_buttons</name></name> <operator>=</operator> <name>MAX_BUTTONS</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_BUTTONS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>button</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>joyxi_button_mapping</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_STICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>stick</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>joyxi_stick_names</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>stick</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>num_axes</name> <operator>=</operator> <name><name>joyxi_axis_per_stick</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>stick</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>ALLEGRO_JOYFLAG_ANALOGUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>subdex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subdex</name> <operator>&lt;</operator> <name><name>joyxi_axis_per_stick</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</condition> <incr><expr><name>subdex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>stick</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><name>subdex</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>joyxi_axis_names</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>subdex</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>joyxi_init_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_xinput_module</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>joyxi_mutex</name> <operator>=</operator> <call><name>al_create_mutex_recursive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyxi_mutex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>joyxi_cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyxi_cond</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>joyxi_disconnected_cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyxi_disconnected_cond</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"XInput Joystick %d"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>joyxi_init_joystick_info</name><argument_list>(<argument><expr><name>joyxi_joysticks</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_imp_XInputEnable</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>res</name> <init>= <expr><call><name>_imp_XInputGetCapabilities</name><argument_list>(<argument><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>capabilities</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ERROR_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_imp_XInputGetState</name><argument_list>(<argument><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ERROR_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>joyxi_thread</name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>joyxi_poll_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>joyxi_disconnected_thread</name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>joyxi_poll_disconnected_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>joyxi_thread</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name>joyxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>joyxi_disconnected_thread</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name>joyxi_disconnected_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>joyxi_thread</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>joyxi_disconnected_thread</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_exit_joystick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyxi_mutex</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyxi_cond</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>joyxi_thread</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name>joyxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>joyxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name>joyxi_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name>joyxi_disconnected_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>joyxi_disconnected_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name>joyxi_disconnected_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name>joyxi_disconnected_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>joyxi_disconnected_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name>joyxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>joyxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_imp_XInputEnable</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unload_xinput_module</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>joyxi_reconfigure_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>res</name> <init>= <expr><call><name>_imp_XInputGetCapabilities</name><argument_list>(<argument><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>capabilities</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ERROR_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_imp_XInputGetState</name><argument_list>(<argument><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name>ERROR_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>joyxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>joyxi_disconnected_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>joyxi_get_num_joysticks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joyxi_get_joystick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>al_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>MAX_JOYSTICKS</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>al_number</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>joyxi_joysticks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>al_number</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_release_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>joy</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>joyxi_get_joystick_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_JOYSTICK_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_XINPUT</name> <operator>*</operator><operator>)</operator><name>joy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xjoy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ret_state</name><operator>)</operator> <operator>=</operator> <name><name>xjoy</name><operator>-&gt;</operator><name>joystate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>joyxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>joyxi_get_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_XINPUT</name> <operator>*</operator><operator>)</operator><name>joy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xjoy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>xjoy</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>joyxi_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_XINPUT</name> <operator>*</operator><operator>)</operator><name>joy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xjoy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>xjoy</name><operator>-&gt;</operator><name>active</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
