<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\wkeyboard.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_driver.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_keyboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAPVK_VSC_TO_VK_EX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPVK_VSC_TO_VK_EX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>installed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name></type> <name>the_keyboard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_STATE</name></type> <name>the_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>hw_to_mycode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">2</literal></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">3</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">4</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>ALLEGRO_KEY_BACKSPACE</name></expr>, <expr><name>ALLEGRO_KEY_TAB</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>ALLEGRO_KEY_PAD_5</name></expr>, <expr><name>ALLEGRO_KEY_ENTER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_LCTRL</name></expr>, <expr><name>ALLEGRO_KEY_ALT</name></expr>, <expr><name>ALLEGRO_KEY_PAUSE</name></expr>,

<expr><name>ALLEGRO_KEY_CAPSLOCK</name></expr>, <expr><name>ALLEGRO_KEY_KANA</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">6</literal></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">7</literal></expr>, <expr><name>ALLEGRO_KEY_KANJI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_ESCAPE</name></expr>,

<expr><name>ALLEGRO_KEY_CONVERT</name></expr>, <expr><name>ALLEGRO_KEY_NOCONVERT</name></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">8</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">9</literal></expr>,

<expr><name>ALLEGRO_KEY_SPACE</name></expr>, <expr><name>ALLEGRO_KEY_PAD_9</name></expr>, <expr><name>ALLEGRO_KEY_PAD_3</name></expr>, <expr><name>ALLEGRO_KEY_PAD_1</name></expr>,

<expr><name>ALLEGRO_KEY_PAD_7</name></expr>, <expr><name>ALLEGRO_KEY_PAD_4</name></expr>, <expr><name>ALLEGRO_KEY_PAD_8</name></expr>, <expr><name>ALLEGRO_KEY_PAD_6</name></expr>,

<expr><name>ALLEGRO_KEY_PAD_2</name></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">10</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">11</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">12</literal></expr>,

<expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>, <expr><name>ALLEGRO_KEY_PAD_0</name></expr>, <expr><name>ALLEGRO_KEY_PAD_DELETE</name></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">13</literal></expr>,

<expr><name>ALLEGRO_KEY_0</name></expr>, <expr><name>ALLEGRO_KEY_1</name></expr>, <expr><name>ALLEGRO_KEY_2</name></expr>, <expr><name>ALLEGRO_KEY_3</name></expr>,

<expr><name>ALLEGRO_KEY_4</name></expr>, <expr><name>ALLEGRO_KEY_5</name></expr>, <expr><name>ALLEGRO_KEY_6</name></expr>, <expr><name>ALLEGRO_KEY_7</name></expr>,

<expr><name>ALLEGRO_KEY_8</name></expr>, <expr><name>ALLEGRO_KEY_9</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_A</name></expr>, <expr><name>ALLEGRO_KEY_B</name></expr>, <expr><name>ALLEGRO_KEY_C</name></expr>,

<expr><name>ALLEGRO_KEY_D</name></expr>, <expr><name>ALLEGRO_KEY_E</name></expr>, <expr><name>ALLEGRO_KEY_F</name></expr>, <expr><name>ALLEGRO_KEY_G</name></expr>,

<expr><name>ALLEGRO_KEY_H</name></expr>, <expr><name>ALLEGRO_KEY_I</name></expr>, <expr><name>ALLEGRO_KEY_J</name></expr>, <expr><name>ALLEGRO_KEY_K</name></expr>,

<expr><name>ALLEGRO_KEY_L</name></expr>, <expr><name>ALLEGRO_KEY_M</name></expr>, <expr><name>ALLEGRO_KEY_N</name></expr>, <expr><name>ALLEGRO_KEY_O</name></expr>,

<expr><name>ALLEGRO_KEY_P</name></expr>, <expr><name>ALLEGRO_KEY_Q</name></expr>, <expr><name>ALLEGRO_KEY_R</name></expr>, <expr><name>ALLEGRO_KEY_S</name></expr>,

<expr><name>ALLEGRO_KEY_T</name></expr>, <expr><name>ALLEGRO_KEY_U</name></expr>, <expr><name>ALLEGRO_KEY_V</name></expr>, <expr><name>ALLEGRO_KEY_W</name></expr>,

<expr><name>ALLEGRO_KEY_X</name></expr>, <expr><name>ALLEGRO_KEY_Y</name></expr>, <expr><name>ALLEGRO_KEY_Z</name></expr>, <expr><name>ALLEGRO_KEY_LWIN</name></expr>,

<expr><name>ALLEGRO_KEY_RWIN</name></expr>, <expr><name>ALLEGRO_KEY_MENU</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>ALLEGRO_KEY_PAD_0</name></expr>, <expr><name>ALLEGRO_KEY_PAD_1</name></expr>, <expr><name>ALLEGRO_KEY_PAD_2</name></expr>, <expr><name>ALLEGRO_KEY_PAD_3</name></expr>,

<expr><name>ALLEGRO_KEY_PAD_4</name></expr>, <expr><name>ALLEGRO_KEY_PAD_5</name></expr>, <expr><name>ALLEGRO_KEY_PAD_6</name></expr>, <expr><name>ALLEGRO_KEY_PAD_7</name></expr>,

<expr><name>ALLEGRO_KEY_PAD_8</name></expr>, <expr><name>ALLEGRO_KEY_PAD_9</name></expr>, <expr><name>ALLEGRO_KEY_PAD_ASTERISK</name></expr>, <expr><name>ALLEGRO_KEY_PAD_PLUS</name></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">15</literal></expr>, <expr><name>ALLEGRO_KEY_PAD_MINUS</name></expr>, <expr><name>ALLEGRO_KEY_PAD_DELETE</name></expr>, <expr><name>ALLEGRO_KEY_PAD_SLASH</name></expr>,

<expr><name>ALLEGRO_KEY_F1</name></expr>, <expr><name>ALLEGRO_KEY_F2</name></expr>, <expr><name>ALLEGRO_KEY_F3</name></expr>, <expr><name>ALLEGRO_KEY_F4</name></expr>,

<expr><name>ALLEGRO_KEY_F5</name></expr>, <expr><name>ALLEGRO_KEY_F6</name></expr>, <expr><name>ALLEGRO_KEY_F7</name></expr>, <expr><name>ALLEGRO_KEY_F8</name></expr>,

<expr><name>ALLEGRO_KEY_F9</name></expr>, <expr><name>ALLEGRO_KEY_F10</name></expr>, <expr><name>ALLEGRO_KEY_F11</name></expr>, <expr><name>ALLEGRO_KEY_F12</name></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">17</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">18</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">19</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">20</literal></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">21</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">22</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">23</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">24</literal></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">25</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">26</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">27</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">28</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>ALLEGRO_KEY_NUMLOCK</name></expr>, <expr><name>ALLEGRO_KEY_SCROLLLOCK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>ALLEGRO_KEY_LSHIFT</name></expr>, <expr><name>ALLEGRO_KEY_RSHIFT</name></expr>, <expr><name>ALLEGRO_KEY_LCTRL</name></expr>, <expr><name>ALLEGRO_KEY_RCTRL</name></expr>,

<expr><name>ALLEGRO_KEY_ALT</name></expr>, <expr><name>ALLEGRO_KEY_ALTGR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_SEMICOLON</name></expr>, <expr><name>ALLEGRO_KEY_EQUALS</name></expr>,

<expr><name>ALLEGRO_KEY_COMMA</name></expr>, <expr><name>ALLEGRO_KEY_MINUS</name></expr>, <expr><name>ALLEGRO_KEY_FULLSTOP</name></expr>, <expr><name>ALLEGRO_KEY_SLASH</name></expr>,

<expr><name>ALLEGRO_KEY_TILDE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_OPENBRACE</name></expr>,

<expr><name>ALLEGRO_KEY_BACKSLASH</name></expr>, <expr><name>ALLEGRO_KEY_CLOSEBRACE</name></expr>, <expr><name>ALLEGRO_KEY_QUOTE</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_BACKSLASH2</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">29</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">30</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">31</literal></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">32</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">33</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">34</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">35</literal></expr>,

<expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">36</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">37</literal></expr>, <expr><name>ALLEGRO_KEY_UNKNOWN</name><operator>+</operator><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYBOARD_WINAPI</name></cpp:macro> <cpp:value>AL_ID('W','A','P','I')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD_DRIVER</name></type> <name>keyboard_winapi</name> <init>=

<expr><block>{

<expr><name>KEYBOARD_WINAPI</name></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"WinAPI keyboard"</literal></expr>,

<expr><name>init_keyboard</name></expr>,

<expr><name>exit_keyboard</name></expr>,

<expr><name>get_keyboard</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>get_keyboard_state</name></expr>,

<expr><name>clear_keyboard_state</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_DRIVER_INFO</name></type> <name><name>_al_keyboard_driver_list</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>KEYBOARD_WINAPI</name></expr>, <expr><operator>&amp;</operator><name>keyboard_winapi</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_keyboard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_keyboard</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_state</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>installed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_keyboard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_keyboard</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>installed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_fix_modifiers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>get_keyboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>the_keyboard</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_keyboard_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>d</name><operator>)</operator><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <call><name>GetForegroundWindow</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>*</operator><name>d</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>the_state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name>the_state</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_keyboard_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>the_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extkey_to_keycode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>vcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VK_CANCEL</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_PAUSE</name></expr>;</return>

<case>case <expr><name>VK_RETURN</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_PAD_ENTER</name></expr>;</return>

<case>case <expr><name>VK_CONTROL</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_RCTRL</name></expr>;</return>

<case>case <expr><name>VK_MENU</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_ALTGR</name></expr>;</return>

<case>case <expr><name>VK_PRIOR</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_PGUP</name></expr>;</return>

<case>case <expr><name>VK_NEXT</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_PGDN</name></expr>;</return>

<case>case <expr><name>VK_END</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_END</name></expr>;</return>

<case>case <expr><name>VK_HOME</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_HOME</name></expr>;</return>

<case>case <expr><name>VK_LEFT</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_LEFT</name></expr>;</return>

<case>case <expr><name>VK_UP</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_UP</name></expr>;</return>

<case>case <expr><name>VK_RIGHT</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_RIGHT</name></expr>;</return>

<case>case <expr><name>VK_DOWN</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_DOWN</name></expr>;</return>

<case>case <expr><name>VK_SNAPSHOT</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>;</return>

<case>case <expr><name>VK_INSERT</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_INSERT</name></expr>;</return>

<case>case <expr><name>VK_DELETE</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_DELETE</name></expr>;</return>

<case>case <expr><name>VK_LWIN</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_LWIN</name></expr>;</return>

<case>case <expr><name>VK_RWIN</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_RWIN</name></expr>;</return>

<case>case <expr><name>VK_APPS</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_MENU</name></expr>;</return>

<case>case <expr><name>VK_DIVIDE</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_PAD_SLASH</name></expr>;</return>

<case>case <expr><name>VK_NUMLOCK</name></expr>:</case> <return>return <expr><name>ALLEGRO_KEY_NUMLOCK</name></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_modifiers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pressed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_OFF2</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!pressed) modifiers &amp;= ~code; else modifiers |= code; break; }</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_KEY_LSHIFT</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_RSHIFT</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_RCTRL</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_CTRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_LCTRL</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_CTRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_ALT</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_ALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_ALTGR</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_ALTGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_LWIN</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_LWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_RWIN</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_RWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ALLEGRO_KEY_MENU</name></expr>:</case>

<expr_stmt><expr><call><name>ON_OFF2</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ON_OFF2</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_toggle_modifiers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_OFF</name><parameter_list>(<parameter><type><name>code</name></type></parameter>, <parameter><type><name>on</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (on) modifiers |= code; else modifiers &amp;= ~code; }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ON_OFF</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_NUMLOCK</name></expr></argument>, <argument><expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_NUMLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_OFF</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_CAPSLOCK</name></expr></argument>, <argument><expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CAPITAL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_OFF</name><argument_list>(<argument><expr><name>ALLEGRO_KEYMOD_SCROLLLOCK</name></expr></argument>, <argument><expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SCROLL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ON_OFF</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_kbd_handle_key_press</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vcode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>repeated</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>win_disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>actual_repeat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>char_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>event_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ks_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>ks</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>my_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extended</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>my_code</name> <operator>=</operator> <call><name>extkey_to_keycode</name><argument_list>(<argument><expr><name>vcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>my_code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vcode</name> <operator>==</operator> <name>VK_SHIFT</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vcode</name> <operator>=</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><name>MAPVK_VSC_TO_VK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>my_code</name> <operator>=</operator> <name><name>hw_to_mycode</name><index>[<expr><name>vcode</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_modifiers</name><argument_list>(<argument><expr><name>my_code</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>actual_repeat</name> <operator>=</operator> <name>repeated</name> <operator>&amp;&amp;</operator> <call><name>_AL_KEYBOARD_STATE_KEY_DOWN</name><argument_list>(<argument><expr><name>the_state</name></expr></argument>, <argument><expr><name>my_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_SET_KEY_DOWN</name><argument_list>(<argument><expr><name>the_state</name></expr></argument>, <argument><expr><name>my_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>my_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>my_code</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>actual_repeat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>my_code</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MODIFIERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ks_state</name> <operator>=</operator> <call><name>GetKeyboardState</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ks_state</name> <operator>&amp;&amp;</operator> <name><name>ks</name><index>[<expr><name>VK_CONTROL</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>ALLEGRO_KEYMOD_CTRL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ks</name><index>[<expr><name>VK_CONTROL</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>char_count</name> <operator>=</operator> <call><name>ToUnicode</name><argument_list>(<argument><expr><name>vcode</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ks_state</name></expr> ?</condition><then> <expr><name>ks</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>char_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vcode</name> <operator>==</operator> <name>VK_DELETE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>char_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char_count</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>event_count</name> <operator>=</operator> <ternary><condition><expr><name>char_count</name></expr> ?</condition><then> <expr><name>char_count</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_toggle_modifiers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <name>actual_repeat</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>event_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>my_code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>repeated</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name> <operator>&amp;&amp;</operator> <name>my_code</name> <operator>==</operator> <name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_keycode</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_modifiers</name></name><operator>)</operator> <operator>==</operator> <name><name>system</name><operator>-&gt;</operator><name>toggle_mouse_grab_modifiers</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>==</operator> <name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ungrab_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_grab_mouse</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_kbd_handle_key_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vcode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my_code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>my_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extended</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>my_code</name> <operator>=</operator> <call><name>extkey_to_keycode</name><argument_list>(<argument><expr><name>vcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>my_code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vcode</name> <operator>==</operator> <name>VK_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vcode</name> <operator>=</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><name>MAPVK_VSC_TO_VK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>my_code</name> <operator>=</operator> <name><name>hw_to_mycode</name><index>[<expr><name>vcode</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_modifiers</name><argument_list>(<argument><expr><name>my_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_AL_KEYBOARD_STATE_CLEAR_KEY_DOWN</name><argument_list>(<argument><expr><name>the_state</name></expr></argument>, <argument><expr><name>my_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>my_code</name> <operator>==</operator> <name>ALLEGRO_KEY_LSHIFT</name> <operator>&amp;&amp;</operator> <call><name>_AL_KEYBOARD_STATE_KEY_DOWN</name><argument_list>(<argument><expr><name>the_state</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_RSHIFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_kbd_handle_key_release</name><argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><name>VK_RSHIFT</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>, <argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>my_code</name> <operator>==</operator> <name>ALLEGRO_KEY_RSHIFT</name> <operator>&amp;&amp;</operator> <call><name>_AL_KEYBOARD_STATE_KEY_DOWN</name><argument_list>(<argument><expr><name>the_state</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_LSHIFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_kbd_handle_key_release</name><argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><name>VK_LSHIFT</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>, <argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>display</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_disp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>my_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_keyboard</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
