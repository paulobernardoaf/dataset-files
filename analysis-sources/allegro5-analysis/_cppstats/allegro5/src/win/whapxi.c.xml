<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\whapxi.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECTINPUT_VERSION</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/haptic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_haptic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_XINPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> something is wrong with the makefile</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XINPUT_POLL_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_XINPUT_POLL_DELAY</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MINGW32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKEFOURCC</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_HAVE_SAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sal.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xinput.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wjoyxi.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"haptic"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAPTICS_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAPTIC_EFFECTS_MAX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE</name>

<block>{

<decl><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_INACTIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STARTING</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_PLAYING</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_DELAYED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STOPPING</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

}</block></enum></type> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name></type> <name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XINPUT_VIBRATION</name></type> <name>vibration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>loop_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>stop_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay_repeated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>play_repeated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE</name></type> <name>state</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ALLEGRO_HAPTIC_XINPUT</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>xjoy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name></type> <name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALLEGRO_HAPTIC_XINPUT</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_init_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>hapxi_exit_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_mouse_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_joystick_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_keyboard_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_display_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_touch_input_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_keyboard</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_touch_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_release</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hapxi_get_capabilities</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>hapxi_get_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_set_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hapxi_get_max_effects</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_effect_ok</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>eff</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_upload_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>eff</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_play_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_stop_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_release_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>hapxi_get_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_set_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hapxi_poll_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_DRIVER</name></type> <name>_al_hapdrv_xinput</name> <init>=

<expr><block>{

<expr><name>AL_HAPTIC_TYPE_XINPUT</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"Windows XInput haptic(s)"</literal></expr>,

<expr><name>hapxi_init_haptic</name></expr>,

<expr><name>hapxi_exit_haptic</name></expr>,

<expr><name>hapxi_is_mouse_haptic</name></expr>,

<expr><name>hapxi_is_joystick_haptic</name></expr>,

<expr><name>hapxi_is_keyboard_haptic</name></expr>,

<expr><name>hapxi_is_display_haptic</name></expr>,

<expr><name>hapxi_is_touch_input_haptic</name></expr>,

<expr><name>hapxi_get_from_mouse</name></expr>,

<expr><name>hapxi_get_from_joystick</name></expr>,

<expr><name>hapxi_get_from_keyboard</name></expr>,

<expr><name>hapxi_get_from_display</name></expr>,

<expr><name>hapxi_get_from_touch_input</name></expr>,

<expr><name>hapxi_get_active</name></expr>,

<expr><name>hapxi_get_capabilities</name></expr>,

<expr><name>hapxi_get_gain</name></expr>,

<expr><name>hapxi_set_gain</name></expr>,

<expr><name>hapxi_get_max_effects</name></expr>,

<expr><name>hapxi_is_effect_ok</name></expr>,

<expr><name>hapxi_upload_effect</name></expr>,

<expr><name>hapxi_play_effect</name></expr>,

<expr><name>hapxi_stop_effect</name></expr>,

<expr><name>hapxi_is_effect_playing</name></expr>,

<expr><name>hapxi_release_effect</name></expr>,

<expr><name>hapxi_release</name></expr>,

<expr><name>hapxi_get_autocenter</name></expr>,

<expr><name>hapxi_set_autocenter</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_XINPUT</name></type> <name><name>haptics</name><index>[<expr><name>HAPTICS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>hapxi_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>hapxi_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>hapxi_cond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>DWORD</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>XInputSetStatePROC</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>XINPUT_VIBRATION</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>XInputSetStatePROC</name></type> <name>_al_imp_XInputSetState</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_force_stop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XINPUT_VIBRATION</name></type> <name>no_vibration</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"XInput haptic effect stopped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_imp_XInputSetState</name><argument_list>(<argument><expr><name><name>hapxi</name><operator>-&gt;</operator><name>xjoy</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>no_vibration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_force_play</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_al_imp_XInputSetState</name><argument_list>(<argument><expr><name><name>hapxi</name><operator>-&gt;</operator><name>xjoy</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>effxi</name><operator>-&gt;</operator><name>vibration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Starting to play back haptic effect: %d.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>res</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_PLAYING</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_poll_haptic_effect_ready</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hapxi</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>effxi</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_poll_haptic_effect_starting</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>effxi</name><operator>-&gt;</operator><name>start_time</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>effxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>replay</name><operator>.</operator><name>delay</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_DELAYED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>hapxi_force_play</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Polling XInput haptic effect. Really Starting: %d!\n"</literal></expr></argument>, <argument><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_poll_haptic_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>stop</name> <init>= <expr><name><name>effxi</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>+</operator> <name><name>effxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>replay</name><operator>.</operator><name>delay</name></name> <operator>+</operator>

<name><name>effxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>replay</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hapxi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <name>stop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>play_repeated</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>effxi</name><operator>-&gt;</operator><name>play_repeated</name></name> <operator>&lt;</operator> <name><name>effxi</name><operator>-&gt;</operator><name>repeats</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hapxi_force_stop</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_DELAYED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STOPPING</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_poll_haptic_effect_delayed</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <operator>(</operator><name><name>effxi</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>+</operator> <name><name>effxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>replay</name><operator>.</operator><name>delay</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>hapxi_force_play</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_poll_haptic_effect_stopping</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hapxi_force_stop</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_poll_haptic_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_INACTIVE</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name></expr>:</case>

<return>return <expr><call><name>hapxi_poll_haptic_effect_ready</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STARTING</name></expr>:</case>

<return>return <expr><call><name>hapxi_poll_haptic_effect_starting</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_PLAYING</name></expr>:</case>

<return>return <expr><call><name>hapxi_poll_haptic_effect_playing</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_DELAYED</name></expr>:</case>

<return>return <expr><call><name>hapxi_poll_haptic_effect_delayed</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STOPPING</name></expr>:</case>

<return>return <expr><call><name>hapxi_poll_haptic_effect_stopping</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"XInput haptic effect state not valid :%d.\n"</literal></expr></argument>, <argument><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hapxi_poll_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hapxi_poll_haptic_effect</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hapxi_poll_haptics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HAPTICS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>haptics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hapxi_poll_haptic</name><argument_list>(<argument><expr><name>haptics</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hapxi_poll_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_init_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>ALLEGRO_XINPUT_POLL_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_wait_cond_until</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>, <argument><expr><name>hapxi_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hapxi_poll_haptics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_init_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapxi_mutex</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapxi_thread</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapxi_cond</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hapxi_mutex</name> <operator>=</operator> <call><name>al_create_mutex_recursive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hapxi_mutex</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hapxi_cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hapxi_cond</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HAPTICS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>haptics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>hapxi_thread</name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>hapxi_poll_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hapxi_thread</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name>hapxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return<expr><operator>(</operator><name>hapxi_thread</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi_from_al</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_HAPTIC_XINPUT</name> <operator>*</operator><operator>)</operator><name>hap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hapxi_exit_haptic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret_value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name>hapxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name>hapxi_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name>hapxi_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hapxi_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_magnitude2win</name><parameter_list>(<parameter><decl><type><name>WORD</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>word</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>word</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><literal type="number">65535</literal> <operator>*</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_effect2win</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hapxi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>effect</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ALLEGRO_HAPTIC_RUMBLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return

<expr><call><name>hapxi_magnitude2win</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>effxi</name><operator>-&gt;</operator><name>vibration</name><operator>.</operator><name>wRightMotorSpeed</name></name></expr></argument>,

<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rumble</name><operator>.</operator><name>weak_magnitude</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>hapxi_magnitude2win</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>effxi</name><operator>-&gt;</operator><name>vibration</name><operator>.</operator><name>wLeftMotorSpeed</name></name></expr></argument>,

<argument><expr><name><name>effect</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rumble</name><operator>.</operator><name>strong_magnitude</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_get_active</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_from_al</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>hapxi</name><operator>-&gt;</operator><name>active</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_mouse_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mouse</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_joystick_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>joyxi</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_XINPUT</name> <operator>*</operator><operator>)</operator><name>joy</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_joystick_active</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XINPUT_CAPS_FFB_SUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>joyxi</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Compiled against older XInput library, assuming force feedback support is available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"joyxi-&gt;capabilities.Flags: %d &lt;-&gt; %d\n"</literal></expr></argument>, <argument><expr><name><name>joyxi</name><operator>-&gt;</operator><name>capabilities</name><operator>.</operator><name>Flags</name></name></expr></argument>, <argument><expr><name>XINPUT_CAPS_FFB_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name><name>joyxi</name><operator>-&gt;</operator><name>capabilities</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>XINPUT_CAPS_FFB_SUPPORTED</name><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_display_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_keyboard_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_touch_input_haptic</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mouse</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_joystick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_XINPUT</name> <modifier>*</modifier></type><name>joyxi</name> <init>= <expr><operator>(</operator><name>ALLEGRO_JOYSTICK_XINPUT</name> <operator>*</operator><operator>)</operator><name>joy</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_joystick_haptic</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hapxi</name> <operator>=</operator> <name>haptics</name> <operator>+</operator> <name><name>joyxi</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>driver</name></name> <operator>=</operator> <operator>&amp;</operator><name>_al_hapdrv_xinput</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>joyxi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>from</name></name> <operator>=</operator> <name>_AL_HAPTIC_FROM_JOYSTICK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_INACTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>autocenter</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_RUMBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>xjoy</name></name> <operator>=</operator> <name>joyxi</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_keyboard</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>hapxi_get_from_touch_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TOUCH_INPUT</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hapxi_get_capabilities</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>hapxi</name><operator>-&gt;</operator><name>flags</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hapxi_get_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_set_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>gain</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>hapxi_get_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_set_autocenter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>intensity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>intensity</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hapxi_get_max_effects</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_effect_ok</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>caps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>caps</name> <operator>=</operator> <call><name>al_get_haptic_capabilities</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>caps</name> <operator>&amp;</operator> <name><name>effect</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type>

<name>hapxi_get_available_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_INACTIVE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_release_effect_windows</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_INACTIVE</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_upload_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT</name> <modifier>*</modifier></type><name>effect</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_from_al</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_effect_duration</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_start_time</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_end_time</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_haptic_effect_ok</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>effxi</name> <operator>=</operator> <call><name>hapxi_get_available_effect</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>effxi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No free effect slot."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hapxi_effect2win</name><argument_list>(<argument><expr><name>effxi</name></expr></argument>, <argument><expr><name>effect</name></expr></argument>, <argument><expr><name>hapxi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot convert haptic effect to XINPUT effect.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>effect</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_pointer</name></name> <operator>=</operator> <name>effxi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>=</operator> <name><name>effxi</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_effect_duration</name></name> <operator>=</operator> <call><name>al_get_haptic_effect_duration</name><argument_list>(<argument><expr><name>effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type>

<name>hapxi_device_for_id</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_HAPTIC_XINPUT</name> <operator>*</operator><operator>)</operator><name><name>id</name><operator>-&gt;</operator><name>_haptic</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type>

<name>hapxi_effect_for_id</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <operator>*</operator><operator>)</operator><name><name>id</name><operator>-&gt;</operator><name>_pointer</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_play_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loops</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_device_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name> <init>= <expr><call><name>hapxi_effect_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>hapxi</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>effxi</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>loops</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STARTING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>=</operator> <name><name>effxi</name><operator>-&gt;</operator><name>start_time</name></name> <operator>+</operator> <call><name>al_get_haptic_effect_duration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>effxi</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>loops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>repeats</name></name> <operator>=</operator> <name>loops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>play_repeated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <name><name>effxi</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_start_time</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_start_time</name></name> <operator>=</operator> <name><name>effxi</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_end_time</name></name> <operator>=</operator> <name><name>effxi</name><operator>-&gt;</operator><name>stop_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_stop_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_device_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name> <init>= <expr><call><name>hapxi_effect_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>hapxi</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>effxi</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <operator>*</operator><operator>)</operator><name><name>id</name><operator>-&gt;</operator><name>_pointer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_STOPPING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_is_effect_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hapxi</name> <operator>=</operator> <call><name>hapxi_device_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>effxi</name> <operator>=</operator> <call><name>hapxi_effect_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>hapxi</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>_playing</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Playing effect state: %d %p %lf %lf\n"</literal></expr></argument>, <argument><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>, <argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>_end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_READY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name>hapxi_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_release_effect</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_device_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_EFFECT_XINPUT</name> <modifier>*</modifier></type><name>effxi</name> <init>= <expr><call><name>hapxi_effect_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>hapxi</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>effxi</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hapxi_force_stop</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>effxi</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ALLEGRO_HAPTIC_EFFECT_XINPUT_STATE_INACTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hapxi_release_effect_windows</name><argument_list>(<argument><expr><name>effxi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hapxi_release</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>haptic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_HAPTIC_XINPUT</name> <modifier>*</modifier></type><name>hapxi</name> <init>= <expr><call><name>hapxi_from_al</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>haptic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hapxi</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hapxi_force_stop</name><argument_list>(<argument><expr><name>hapxi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hapxi_release_effect_windows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hapxi</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hapxi</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>hapxi_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
