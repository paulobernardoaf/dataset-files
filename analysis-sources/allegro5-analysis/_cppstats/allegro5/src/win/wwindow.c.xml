<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\wwindow.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_MOUSEHWHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_MOUSEHWHEEL</name></cpp:macro> <cpp:value>0x020E</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_windows.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wunicode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"wwindow"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>WNDCLASS</name></type> <name>window_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>resize_postponed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>we_hid_the_mouse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>_al_win_msg_call_proc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>_al_win_msg_suicide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_DPICHANGED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_DPICHANGED</name></cpp:macro> <cpp:value>0x02E0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_flags_to_window_styles</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>style</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>ex_style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>style</name> <operator>=</operator> <name>WS_POPUP</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ex_style</name> <operator>=</operator> <name>WS_EX_APPWINDOW</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>style</name> <operator>=</operator> <name>WS_OVERLAPPEDWINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ex_style</name> <operator>=</operator> <name>WS_EX_APPWINDOW</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>style</name> <operator>=</operator> <name>WS_OVERLAPPEDWINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ex_style</name> <operator>=</operator> <name>WS_EX_APPWINDOW</name> <operator>|</operator> <name>WS_EX_OVERLAPPEDWINDOW</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>style</name> <operator>=</operator> <name>WS_CAPTION</name> <operator>|</operator> <name>WS_SYSMENU</name> <operator>|</operator> <name>WS_MINIMIZEBOX</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ex_style</name> <operator>=</operator> <name>WS_EX_APPWINDOW</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_window</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PAINTSTRUCT</name></type> <name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>BeginPaint</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><call><name>GetStockObject</name><argument_list>(<argument><expr><name>DC_BRUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDCBrushColor</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><call><name>RGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Rectangle</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>_al_win_create_hidden_window</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name> <init>= <expr><call><name>CreateWindowEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ALEX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WS_POPUP</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">5000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>window_class</name><operator>.</operator><name>hInstance</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>window</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_win_get_window_center</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>win_display</name><operator>-&gt;</operator><name>adapter</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_fullscreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>win_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fullscreen_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>al_get_num_video_adapters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_fullscreen</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>is_fullscreen</name><index>[<expr><name><name>win_display</name><operator>-&gt;</operator><name>adapter</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fullscreen_found</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fullscreen_found</name> <operator>&amp;&amp;</operator> <name>fullscreen_found</name> <operator>&lt;</operator> <name>num</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>is_fullscreen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>is_fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_monitor_info</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_size</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>x1</name></name> <operator>+</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>x1</name></name> <operator>-</operator> <name>width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_size</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>y1</name></name> <operator>+</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>y1</name></name> <operator>-</operator> <name>height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_x</name> <operator>=</operator> <name><name>win_size</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_y</name> <operator>=</operator> <name><name>win_size</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>_al_win_create_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>my_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ex_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_x</name></decl>, <decl><type ref="prev"/><name>pos_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>center</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOWINFO</name></type> <name>wi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lsize</name></decl>, <decl><type ref="prev"/><name>rsize</name></decl>, <decl><type ref="prev"/><name>tsize</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>window_title</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_flags_to_window_styles</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_new_window_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos_x</name> <operator>=</operator> <name>pos_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pos_x</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos_x</name> <operator>=</operator> <name>pos_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>center</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>center</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_win_get_window_center</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>window_title</name> <operator>=</operator> <call><name>_twin_utf8_to_tchar</name><argument_list>(<argument><expr><call><name>al_get_new_window_title</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my_window</name> <operator>=</operator> <call><name>CreateWindowEx</name><argument_list>(<argument><expr><name>ex_style</name></expr></argument>,

<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ALEX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window_title</name></expr></argument>, <argument><expr><name>style</name></expr></argument>,

<argument><expr><name>pos_x</name></expr></argument>, <argument><expr><name>pos_y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>window_class</name><operator>.</operator><name>hInstance</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_win_register_touch_window</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_register_touch_window</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetWindowInfo</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lsize</name> <operator>=</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tsize</name> <operator>=</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rsize</name> <operator>=</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>right</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>bottom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>width</name><operator>+</operator><name>lsize</name><operator>+</operator><name>rsize</name></expr></argument>,

<argument><expr><name>height</name><operator>+</operator><name>tsize</name><operator>+</operator><name>bsize</name></expr></argument>,

<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos_x</name><operator>-</operator><name>lsize</name></expr></argument>, <argument><expr><name>pos_y</name><operator>-</operator><name>tsize</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FRAMELESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>WS_VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>WS_EX_APPWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos_x</name></expr></argument>, <argument><expr><name>pos_y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_window</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HMENU</name></type> <name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>GetSystemMenu</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteMenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>SC_SIZE</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteMenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>SC_MAXIMIZE</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_WIN_CALLBACK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>my_window</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>_al_win_create_faux_fullscreen_window</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>devname</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>my_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ex_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DEVMODE</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>window_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_DISPLAY_WIN_CALLBACK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>style</name> <operator>=</operator> <name>WS_VISIBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ex_style</name> <operator>=</operator> <name>WS_EX_TOPMOST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>window_title</name> <operator>=</operator> <call><name>_twin_utf8_to_tchar</name><argument_list>(<argument><expr><call><name>al_get_new_window_title</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my_window</name> <operator>=</operator> <call><name>CreateWindowEx</name><argument_list>(<argument><expr><name>ex_style</name></expr></argument>,

<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ALEX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window_title</name></expr></argument>, <argument><expr><name>style</name></expr></argument>,

<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>window_class</name><operator>.</operator><name>hInstance</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_win_register_touch_window</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_register_touch_window</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>GetWindowLong</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>&amp;=</operator> <operator>~</operator><name>WS_CAPTION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DEVMODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DEVMODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmDriverExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>=</operator> <call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmPelsWidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmPelsHeight</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmDisplayFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmDisplayFrequency</name></name> <operator>=</operator> <name>refresh_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dmFields</name></name> <operator>=</operator> <name>DM_BITSPERPEL</name><operator>|</operator><name>DM_PELSWIDTH</name><operator>|</operator><name>DM_PELSHEIGHT</name><operator>|</operator><name>DM_DISPLAYFLAGS</name><operator>|</operator>

<name>DM_DISPLAYFREQUENCY</name><operator>|</operator><name>DM_POSITION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ChangeDisplaySettingsEx</name><argument_list>(<argument><expr><name>devname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_window</name><argument_list>(<argument><expr><name>my_window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>my_window</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_grab_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_win_wnd_schedule_proc</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name>_al_win_joystick_dinput_grab</name></expr></argument>,

<argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win_generate_resize_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>win_display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOWINFO</name></type> <name>wi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowInfo</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>use_constraints</name></name> <operator>||</operator> <name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name>w</name> <operator>||</operator> <name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_GENERATE_EXPOSE_EVENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>postpone_thread_proc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>ignore_resize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>ignore_resize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>win_generate_resize_event</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>resize_postponed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>can_acknowledge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_mouse_capture</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>down</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>any_button_down</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_mouse_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_get_mouse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>any_button_down</name> <operator>|=</operator> <call><name>al_mouse_button_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>down</name> <operator>&amp;&amp;</operator> <call><name>GetCapture</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>hWnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetCapture</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>any_button_down</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ReleaseCapture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>break_window_message_pump</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>wnd_thread_id</name> <init>= <expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>end_thread</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostThreadMessage</name><argument_list>(<argument><expr><name>wnd_thread_id</name></expr></argument>, <argument><expr><name>WM_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>accept_mouse_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_touch_input_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>GetMessageExtraInfo</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>_AL_MOUSEEVENTF_FROMTOUCH</name><operator>)</operator> <operator>==</operator> <name>_AL_MOUSEEVENTF_FROMTOUCH</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>window_callback</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>_al_win_msg_call_proc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>wParam</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>lParam</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>system</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>,<argument><expr><name>message</name></expr></argument>,<argument><expr><name>wParam</name></expr></argument>,<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>_al_win_msg_suicide</name> <operator>&amp;&amp;</operator> <name>wParam</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>win_display</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name><operator>*</operator><operator>)</operator><name>wParam</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>break_window_message_pump</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_win_unregister_touch_window</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_unregister_touch_window</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>system</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>dptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>win_display</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>hWnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>es</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>system</name><operator>-&gt;</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>,<argument><expr><name>message</name></expr></argument>,<argument><expr><name>wParam</name></expr></argument>,<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>_al_win_msg_suicide</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>break_window_message_pump</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_win_unregister_touch_window</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_unregister_touch_window</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>LRESULT</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN_CALLBACK</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>proc</name></name><operator>)</operator><operator>(</operator><name>d</name><operator>,</operator> <name>message</name><operator>,</operator> <name>wParam</name><operator>,</operator> <name>lParam</name><operator>,</operator> <operator>&amp;</operator><name>result</name><operator>,</operator> <name><name>ptr</name><operator>-&gt;</operator><name>userdata</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>message</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WM_INPUT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPBYTE</name></type> <name>lpb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAWINPUT</name><modifier>*</modifier></type> <name>raw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_mouse_installed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetRawInputData</name><argument_list>(<argument><expr><operator>(</operator><name>HRAWINPUT</name><operator>)</operator><name>lParam</name></expr></argument>, <argument><expr><name>RID_INPUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwSize</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lpb</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BYTE</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>dwSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lpb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetRawInputData</name><argument_list>(<argument><expr><operator>(</operator><name>HRAWINPUT</name><operator>)</operator><name>lParam</name></expr></argument>, <argument><expr><name>RID_INPUT</name></expr></argument>, <argument><expr><name>lpb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAWINPUTHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>raw</name> <operator>=</operator> <operator>(</operator><name>RAWINPUT</name><operator>*</operator><operator>)</operator><name>lpb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>dwType</name></name> <operator>!=</operator> <name>RIM_TYPEMOUSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>lpb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>RAWMOUSE</name> <modifier>*</modifier></type><name>rm</name> <init>= <expr><operator>&amp;</operator><name><name>raw</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>raw</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>lLastX</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>raw</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mouse</name><operator>.</operator><name>lLastY</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>abs</name> <init>= <expr><operator>(</operator><name><name>rm</name><operator>-&gt;</operator><name>usFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MOUSE_MOVE_ABSOLUTE</name>

<operator>|</operator> <name>MOUSE_VIRTUAL_DESKTOP</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>abs</name> <operator>||</operator> <name>x</name> <operator>||</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_move</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_1_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_1_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_2_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_2_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_3_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_3_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_4_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_4_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_5_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_BUTTON_5_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>usButtonFlags</name></name> <operator>&amp;</operator> <name>RI_MOUSE_WHEEL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SHORT</name></type> <name>z</name> <init>= <expr><operator>(</operator><name>SHORT</name><operator>)</operator><name><name>rm</name><operator>-&gt;</operator><name>usButtonData</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_wheel</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>lpb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_LBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_LBUTTONUP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>down</name> <init>= <expr><operator>(</operator><name>message</name> <operator>==</operator> <name>WM_LBUTTONDOWN</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>down</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_mouse_capture</name><argument_list>(<argument><expr><name>down</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_MBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_MBUTTONUP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>down</name> <init>= <expr><operator>(</operator><name>message</name> <operator>==</operator> <name>WM_MBUTTONDOWN</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>down</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_mouse_capture</name><argument_list>(<argument><expr><name>down</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_RBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_RBUTTONUP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>down</name> <init>= <expr><operator>(</operator><name>message</name> <operator>==</operator> <name>WM_RBUTTONDOWN</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>down</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_mouse_capture</name><argument_list>(<argument><expr><name>down</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_XBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_XBUTTONUP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>down</name> <init>= <expr><operator>(</operator><name>message</name> <operator>==</operator> <name>WM_XBUTTONDOWN</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>XBUTTON1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>down</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>button</name> <operator>==</operator> <name>XBUTTON2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>down</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>handle_mouse_capture</name><argument_list>(<argument><expr><name>down</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_MOUSEWHEEL</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>GET_WHEEL_DELTA_WPARAM</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_wheel</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_MOUSEHWHEEL</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>GET_WHEEL_DELTA_WPARAM</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_hwheel</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_MOUSEMOVE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TRACKMOUSEEVENT</name></type> <name>tme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name> <operator>&amp;&amp;</operator> <name>we_hid_the_mouse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>we_hid_the_mouse</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>vt</name><operator>-&gt;</operator><name>hide_mouse_cursor</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_move</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>my</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mx</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name>my</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tme</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>TME_QUERY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TrackMouseEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tme</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tme</name><operator>.</operator><name>hwndTrack</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>TME_LEAVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>hwndTrack</name></name> <operator>=</operator> <name>hWnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tme</name><operator>.</operator><name>dwHoverTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TrackMouseEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_mouse_handle_enter</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCapture</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hWnd</name> <operator>&amp;&amp;</operator> <name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_MOUSELEAVE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>accept_mouse_event</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_leave</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>_AL_WM_TOUCH</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>_al_win_get_touch_input_info</name> <operator>&amp;&amp;</operator> <name>_al_win_close_touch_input_handle</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number_of_touches</name> <init>= <expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TOUCHINPUT</name><modifier>*</modifier></type> <name>touches</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>number_of_touches</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TOUCHINPUT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_win_get_touch_input_info</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>lParam</name></expr></argument>, <argument><expr><name>number_of_touches</name></expr></argument>, <argument><expr><name>touches</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TOUCHINPUT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_is_touch_input_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>origin</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ClientToScreen</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_touch_input_set_time_stamp</name><argument_list>(<argument><expr><operator>(</operator><name>touches</name> <operator>+</operator> <name>number_of_touches</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>dwTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_of_touches</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TOUCHINPUT</name><modifier>*</modifier></type> <name>touch</name> <init>= <expr><name>touches</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>touch</name><operator>-&gt;</operator><name>x</name></name> <operator>/</operator> <literal type="number">100.0f</literal> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>touch</name><operator>-&gt;</operator><name>y</name></name> <operator>/</operator> <literal type="number">100.0f</literal> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>primary</name> <init>= <expr><ternary><condition><expr><name><name>touch</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>_AL_TOUCHEVENTF_PRIMARY</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>touch</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>_AL_TOUCHEVENTF_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_touch_input_handle_begin</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>dwID</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>dwTime</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>primary</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>touch</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>_AL_TOUCHEVENTF_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_touch_input_handle_end</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>dwID</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>dwTime</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>primary</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>touch</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>_AL_TOUCHEVENTF_MOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_touch_input_handle_move</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>dwID</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>touch</name><operator>-&gt;</operator><name>dwTime</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>primary</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_win_close_touch_input_handle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>touches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_CAPTURECHANGED</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_is_mouse_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lParam</name> <operator>||</operator> <operator>(</operator><name>HWND</name><operator>)</operator><name>lParam</name> <operator>==</operator> <name>hWnd</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_get_mouse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_mouse_button_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_win_mouse_handle_button</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_NCMOUSEMOVE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>we_hid_the_mouse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>vt</name><operator>-&gt;</operator><name>show_mouse_cursor</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_SYSKEYDOWN</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vcode</name> <init>= <expr><name>wParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extended</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>repeated</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_kbd_handle_key_press</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vcode</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>, <argument><expr><name>repeated</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_KEYDOWN</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vcode</name> <init>= <expr><name>wParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scode</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extended</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>repeated</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_kbd_handle_key_press</name><argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><name>vcode</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>, <argument><expr><name>repeated</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_SYSKEYUP</name></expr>:</case>

<case>case <expr><name>WM_KEYUP</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vcode</name> <init>= <expr><name>wParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scode</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extended</name> <init>= <expr><operator>(</operator><name>lParam</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_kbd_handle_key_release</name><argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><name>vcode</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>, <argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_SYSCOMMAND</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>_al_win_disable_screensaver</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <name>SC_MONITORPOWER</name> <operator>||</operator> <operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <name>SC_SCREENSAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <name>SC_KEYMENU</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <name>SC_MAXIMIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>WS_EX_APPWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <name>SC_RESTORE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>WS_EX_APPWINDOW</name> <operator>|</operator> <name>WS_EX_OVERLAPPEDWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_PAINT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_GENERATE_EXPOSE_EVENTS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRGN</name></type> <name>hrgn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hrgn</name> <operator>=</operator> <call><name>CreateRectRgn</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetUpdateRgn</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>hrgn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PAINTSTRUCT</name></type> <name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPRGNDATA</name></type> <name>rgndata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name> <modifier>*</modifier></type><name>rects</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BeginPaint</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GetRegionData</name><argument_list>(<argument><expr><name>hrgn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rgndata</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetRegionData</name><argument_list>(<argument><expr><name>hrgn</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>rgndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>rgndata</name><operator>-&gt;</operator><name>rdh</name><operator>.</operator><name>nCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rects</name> <operator>=</operator> <operator>(</operator><name>RECT</name> <operator>*</operator><operator>)</operator><name><name>rgndata</name><operator>-&gt;</operator><name>Buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>-</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>rgndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndPaint</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hrgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_SETCURSOR</name></expr>:</case>

<switch>switch <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HTLEFT</name></expr>:</case>

<case>case <expr><name>HTRIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZEWE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HTBOTTOM</name></expr>:</case>

<case>case <expr><name>HTTOP</name></expr>:</case>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZENS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HTBOTTOMLEFT</name></expr>:</case>

<case>case <expr><name>HTTOPRIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZENESW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HTBOTTOMRIGHT</name></expr>:</case>

<case>case <expr><name>HTTOPLEFT</name></expr>:</case>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZENWSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>WM_ACTIVATE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WA_INACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_MINIMIZED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MINIMIZED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WA_INACTIVE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>switch_in</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>switch_in</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_win_fix_modifiers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_IN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_grab_input</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_NOTOPMOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><call><name>GetForegroundWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>switch_out</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_MENUCHAR</name></expr> :</case>

<return>return <expr><operator>(</operator><name>MNC_CLOSE</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>wParam</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>WM_CLOSE</name></expr>:</case>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_GETMINMAXINFO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>use_constraints</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>LPMINMAXINFO</name></type> <name>p_info</name> <init>= <expr><operator>(</operator><name>LPMINMAXINFO</name><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>wRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>cRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cHeight</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wWidth</name> <operator>=</operator> <name><name>wRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wRect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wHeight</name> <operator>=</operator> <name><name>wRect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wRect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cWidth</name> <operator>=</operator> <name><name>cRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>cRect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cHeight</name> <operator>=</operator> <name><name>cRect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>cRect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cWidth</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cHeight</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>total_border_width</name> <init>= <expr><name>wWidth</name> <operator>-</operator> <name>cWidth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_border_height</name> <init>= <expr><name>wHeight</name> <operator>-</operator> <name>cHeight</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>wmin</name></decl>, <decl><type ref="prev"/><name>wmax</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wmin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>min_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>min_w</name></name> <operator>+</operator> <name>total_border_width</name></expr> </then><else>: <expr><name><name>p_info</name><operator>-&gt;</operator><name>ptMinTrackSize</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wmin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>min_h</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>min_h</name></name> <operator>+</operator> <name>total_border_height</name></expr> </then><else>: <expr><name><name>p_info</name><operator>-&gt;</operator><name>ptMinTrackSize</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wmax</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>ptMaxTrackSize</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wmax</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>ptMaxTrackSize</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>wmax</name><operator>.</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>max_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>max_w</name></name> <operator>+</operator> <name>total_border_width</name></expr> </then><else>: <expr><name><name>p_info</name><operator>-&gt;</operator><name>ptMaxTrackSize</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wmax</name><operator>.</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>max_h</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>d</name><operator>-&gt;</operator><name>max_h</name></name> <operator>+</operator> <name>total_border_height</name></expr> </then><else>: <expr><name><name>p_info</name><operator>-&gt;</operator><name>ptMaxTrackSize</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>ptMinTrackSize</name></name> <operator>=</operator> <name>wmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>ptMaxTrackSize</name></name> <operator>=</operator> <name>wmax</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_SIZE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>SIZE_RESTORED</name> <operator>||</operator> <name>wParam</name> <operator>==</operator> <name>SIZE_MAXIMIZED</name> <operator>||</operator> <name>wParam</name> <operator>==</operator> <name>SIZE_MINIMIZED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resize_postponed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>resize_postponed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_beginthread</name><argument_list>(<argument><expr><name>postpone_thread_proc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wParam</name> <operator>==</operator> <name>SIZE_MAXIMIZED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>use_constraints</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resize_postponed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>resize_postponed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_beginthread</name><argument_list>(<argument><expr><name>postpone_thread_proc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_ENTERSIZEMOVE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D_INTERNAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>resize_postponed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_EXITSIZEMOVE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>resize_postponed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_generate_resize_event</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>ignore_resize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>resize_postponed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>can_acknowledge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_DPICHANGED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RECT</name><modifier>*</modifier></type> <name>rect</name> <init>= <expr><operator>(</operator><name>RECT</name><operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(

<argument><expr><name>hWnd</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,

<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_generate_resize_event</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>,<argument><expr><name>message</name></expr></argument>,<argument><expr><name>wParam</name></expr></argument>,<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_win_init_window</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>window_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ALEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>window_class</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_VREDRAW</name><operator>|</operator><name>CS_HREDRAW</name><operator>|</operator><name>CS_OWNDC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegisterClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>window_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_win_msg_call_proc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>_al_win_msg_suicide</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>_al_win_msg_call_proc</name> <operator>=</operator> <call><name>RegisterWindowMessage</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Allegro call proc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_win_msg_suicide</name> <operator>=</operator> <call><name>RegisterWindowMessage</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Allegro window suicide"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win_choose_icon_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sys_w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sys_h</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bmps</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>best_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_icons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bmp_w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>bmps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmp_h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>bmps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp_w</name> <operator>==</operator> <name>sys_w</name> <operator>&amp;&amp;</operator> <name>bmp_h</name> <operator>==</operator> <name>sys_h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp_w</name> <operator>*</operator> <name>bmp_h</name> <operator>&lt;=</operator> <name>sys_w</name> <operator>*</operator> <name>sys_h</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <operator>(</operator><name>sys_w</name> <operator>*</operator> <name>sys_h</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>bmp_w</name> <operator>*</operator> <name>bmp_h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <name>bmp_w</name> <operator>*</operator> <name>bmp_h</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>best_i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win_set_display_icon</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>WPARAM</name></type> <name>icon_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sys_w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sys_h</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bmps</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HICON</name></type> <name>icon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HICON</name></type> <name>old_icon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmp_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmp_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>win_choose_icon_bitmap</name><argument_list>(<argument><expr><name>sys_w</name></expr></argument>, <argument><expr><name>sys_h</name></expr></argument>, <argument><expr><name>num_icons</name></expr></argument>, <argument><expr><name>bmps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <name><name>bmps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp_w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp_h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp_w</name> <operator>==</operator> <name>sys_w</name> <operator>&amp;&amp;</operator> <name>bmp_h</name> <operator>==</operator> <name>sys_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>_al_win_create_icon</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>tmp_bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>backup</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_bmp</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>sys_w</name></expr></argument>, <argument><expr><name>sys_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_bmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_BITMAP</name> <operator>|</operator> <name>ALLEGRO_STATE_BLENDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>tmp_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bmp_w</name></expr></argument>, <argument><expr><name>bmp_h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sys_w</name></expr></argument>, <argument><expr><name>sys_h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>_al_win_create_icon</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>tmp_bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>tmp_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>old_icon</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>,

<argument><expr><name>icon_type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_icon</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>old_icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_set_display_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bmps</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sys_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sys_h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sys_w</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSMICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_h</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSMICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_set_display_icon</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>ICON_SMALL</name></expr></argument>, <argument><expr><name>sys_w</name></expr></argument>, <argument><expr><name>sys_h</name></expr></argument>,

<argument><expr><name>num_icons</name></expr></argument>, <argument><expr><name>bmps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_w</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_h</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_set_display_icon</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name>ICON_BIG</name></expr></argument>, <argument><expr><name>sys_w</name></expr></argument>, <argument><expr><name>sys_h</name></expr></argument>,

<argument><expr><name>num_icons</name></expr></argument>, <argument><expr><name>bmps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_destroy_display_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HICON</name></type> <name>old_icon</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_icon</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>, <argument><expr><name>ICON_SMALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_icon</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>old_icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_icon</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>, <argument><expr><name>ICON_BIG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_icon</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>old_icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_set_window_position</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(

<argument><expr><name>window</name></expr></argument>,

<argument><expr><name>HWND_TOP</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>,

<argument><expr><name>y</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_get_window_position</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_set_window_frameless</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>frameless</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frameless</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>WS_VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>WS_EX_APPWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>exStyle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_flags_to_window_styles</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>style</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>WS_VISIBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>GetMenu</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>, <argument><expr><name>exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>mi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_FRAMELESS</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>onoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_FRAMELESS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_FRAMELESS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_win_set_window_frameless</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FRAMELESS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>onoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Already a fullscreen window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>onoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Already a non-fullscreen window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_win_set_window_frameless</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>_al_win_set_window_frameless</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FRAMELESS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onoff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><name><name>win_display</name><operator>-&gt;</operator><name>adapter</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_monitor_info</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>toggle_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>toggle_h</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator> <operator>==</operator> <name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_HIDEWINDOW</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_resize_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>onoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>, <argument><expr><name><name>mi</name><operator>.</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>mi</name><operator>.</operator><name>y1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOWINFO</name></type> <name>wi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_NOTOPMOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_get_window_center</name><argument_list>(<argument><expr><name>win_display</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowInfo</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>left</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>right</name></name><operator>)</operator></expr><operator>,</operator>

<expr><name>bh</name> <operator>=</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>top</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>wi</name><operator>.</operator><name>rcWindow</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>bottom</name></name><operator>)</operator></expr><operator>,</operator>

<expr><call><name>SetWindowPos</name><argument_list>(

<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name><operator>+</operator><name>bw</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name><operator>+</operator><name>bh</name></expr></argument>, <argument><expr><name>SWP_NOMOVE</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(

<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><name>pos_x</name><operator>-</operator><name>bw</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>pos_y</name><operator>-</operator><name>bh</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOSIZE</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_SHOWWINDOW</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_window</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator> <operator>==</operator> <name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>ALLEGRO_MAXIMIZED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>onoff</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onoff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>SW_SHOWMAXIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>SW_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>ttitle</name> <init>= <expr><call><name>_twin_utf8_to_tchar</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>ttitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ttitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_set_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>min_w</name></name> <operator>=</operator> <name>min_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>min_h</name></name> <operator>=</operator> <name>min_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>max_w</name></name> <operator>=</operator> <name>max_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>max_h</name></name> <operator>=</operator> <name>max_h</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_apply_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_resize_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_post_create_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MAXIMIZED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_display_flag</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>ALLEGRO_MAXIMIZED</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_get_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>min_w</name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>min_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>min_h</name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>min_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>max_w</name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>max_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>max_h</name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>max_h</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_wnd_call_proc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>wnd</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_al_win_msg_call_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>_al_win_msg_call_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>proc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_wnd_schedule_proc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>wnd</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_al_win_msg_call_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PostMessage</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>_al_win_msg_call_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>proc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"_al_win_wnd_schedule_proc failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>al_get_win_window_handle</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name><operator>)</operator><operator>-&gt;</operator><name>window</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_win_determine_adapter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_screens</name> <init>= <expr><call><name>al_get_num_video_adapters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cScreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>temp_info</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cScreen</name> <operator>&lt;</operator> <name>num_screens</name></expr>;</condition> <incr><expr><name>cScreen</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_get_monitor_info</name><argument_list>(<argument><expr><name>cScreen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>temp_info</name><operator>.</operator><name>x1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>temp_info</name><operator>.</operator><name>y1</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>cScreen</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_win_add_window_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>, <parameter><decl><type><name>LRESULT</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator> <name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN_CALLBACK</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name> <operator>||</operator> <operator>!</operator><name>callback</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN_CALLBACK</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>userdata</name></name> <operator>==</operator> <name>userdata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_win_remove_window_callback</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>, <parameter><decl><type><name>LRESULT</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator> <name>display</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <name>callback</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN_CALLBACK</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>userdata</name></name> <operator>==</operator> <name>userdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win_display</name><operator>-&gt;</operator><name>msg_callbacks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
