<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\wgl_disp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wclipboard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_wunicode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wgl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"display"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name></type> <name>vt</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>display_thread_proc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroy_display_internals</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>wgl_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>_wgl_do_not_change_display_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>WGL_DISPLAY_PARAMETERS</name> <block>{

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>init_failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>AckEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_x</name></decl>, <name>window_y</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>window_title</name></decl>;</decl_stmt>

}</block></struct></type> <name>WGL_DISPLAY_PARAMETERS</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_wgl_extension_supported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_ALLEGRO_wglGetExtensionsStringARB_t</name></type> <name>_wglGetExtensionsStringARB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>_wglGetExtensionsStringARB</name> <operator>=</operator> <operator>(</operator><name>_ALLEGRO_wglGetExtensionsStringARB_t</name><operator>)</operator>

<call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglGetExtensionsStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_wglGetExtensionsStringARB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_ogl_look_for_an_extension</name><argument_list>(<argument><expr><name>extension</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name><operator>*</operator><operator>)</operator><call><name>_wglGetExtensionsStringARB</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HGLRC</name></type> <name>init_temp_context</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>wnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>glrc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>nSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>PFD_DRAW_TO_WINDOW</name> <operator>|</operator> <name>PFD_SUPPORT_OPENGL</name>

<operator>|</operator> <name>PFD_DOUBLEBUFFER_DONTCARE</name> <operator>|</operator> <name>PFD_STEREO_DONTCARE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>iPixelType</name></name> <operator>=</operator> <name>PFD_TYPE_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>iLayerType</name></name> <operator>=</operator> <name>PFD_MAIN_PLANE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>cColorBits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to chose a temporary pixel format. %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to set a temporary pixel format. %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>glrc</name> <operator>=</operator> <call><name>wglCreateContext</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glrc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to create a render context. %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>glrc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to set the render context as current. %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>glrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>glrc</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>_ALLEGRO_wglGetPixelFormatAttribivARB_t</name></type> <name>_wglGetPixelFormatAttribivARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>_ALLEGRO_wglGetPixelFormatAttribivEXT_t</name></type> <name>_wglGetPixelFormatAttribivEXT</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_pixel_format_extensions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>_wglGetPixelFormatAttribivARB</name> <operator>=</operator>

<operator>(</operator><name>_ALLEGRO_wglGetPixelFormatAttribivARB_t</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_wglGetPixelFormatAttribivEXT</name> <operator>=</operator>

<operator>(</operator><name>_ALLEGRO_wglGetPixelFormatAttribivEXT_t</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttribivEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_wglGetPixelFormatAttribivARB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>_wglGetPixelFormatAttribivEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB/EXT_pf not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>_ALLEGRO_wglCreateContextAttribsARB_t</name></type> <name>_wglCreateContextAttribsARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_context_creation_extensions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>_wglCreateContextAttribsARB</name> <operator>=</operator>

<operator>(</operator><name>_ALLEGRO_wglCreateContextAttribsARB_t</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglCreateContextAttribsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_wglCreateContextAttribsARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"wglCreateContextAttribs not supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pixel_formats_count_old</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DescribePixelFormat</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"DescribePixelFormat failed! %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pixel_formats_count_ext</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>attrib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attrib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>WGL_NUMBER_PIXEL_FORMATS_ARB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>_wglGetPixelFormatAttribivARB</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GL_FALSE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>_wglGetPixelFormatAttribivEXT</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GL_FALSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB/EXT_pixel_format use failed! %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_pixel_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Accelerated: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Single-buffer: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Swap method: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"flip"</literal></expr> </then><else>: <expr><literal type="string">"copy"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Swap method: undefined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Color format: r%i g%i b%i a%i, %i bit\n"</literal></expr></argument>,

<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Depth buffer: %i bits\n"</literal></expr></argument>, <argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Sample buffers: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Samples: %i\n"</literal></expr></argument>, <argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pixel_format_old</name><parameter_list>(<parameter><decl><type><name>PIXELFORMATDESCRIPTOR</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Decoding:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_SUPPORT_OPENGL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"OpenGL Unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>iPixelType</name></name> <operator>!=</operator> <name>PFD_TYPE_RGBA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Not RGBA mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_GENERIC_ACCELERATED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_GENERIC_FORMAT</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_GENERIC_ACCELERATED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_GENERIC_FORMAT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cRedBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cGreenBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cBlueBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAlphaBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_RED_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAccumRedBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_GREEN_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAccumGreenBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_BLUE_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAccumBlueBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_ALPHA_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAccumAlphaBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_DOUBLEBUFFER</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cDepthBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STENCIL_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cStencilBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cColorBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STEREO</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>PFD_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_AUX_BUFFERS</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAuxBuffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cRedShift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cGreenShift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cBlueShift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>cAlphaShift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_COLOR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_DEPTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>decode_pixel_format_attrib</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_attribs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Decoding:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_DEPTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_COLOR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_attribs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SUPPORT_OPENGL_ARB</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"OpenGL Unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_DRAW_TO_WINDOW_ARB</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Can't draw to window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_PIXEL_TYPE_ARB</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>WGL_TYPE_RGBA_ARB</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>WGL_TYPE_RGBA_FLOAT_ARB</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Not RGBA mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ACCELERATION_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_NO_ACCELERATION_ARB</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_RED_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_GREEN_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_BLUE_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ALPHA_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_RED_SHIFT_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_GREEN_SHIFT_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_BLUE_SHIFT_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ALPHA_SHIFT_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SHIFT</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_DOUBLE_BUFFER_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SWAP_METHOD_ARB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SWAP_UNDEFINED_ARB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SWAP_COPY_ARB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SWAP_EXCHANGE_ARB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_STEREO_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STEREO</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_AUX_BUFFERS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_AUX_BUFFERS</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_STENCIL_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STENCIL_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ACCUM_RED_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_RED_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ACCUM_GREEN_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_GREEN_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ACCUM_BLUE_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_BLUE_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_ACCUM_ALPHA_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_ALPHA_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_DEPTH_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_COLOR_BITS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SAMPLE_BUFFERS_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_SAMPLES_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_PIXEL_TYPE_ARB</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_TYPE_RGBA_FLOAT_ARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_COLOR</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>attrib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WGL_DEPTH_FLOAT_EXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_DEPTH</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier></type> <name>read_pixel_format_old</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DescribePixelFormat</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>fmt</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"DescribePixelFormat() failed. %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_pixel_format_old</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>eds</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier></type> <name>read_pixel_format_ext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>attrib</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>WGL_SUPPORT_OPENGL_ARB</name></expr>,

<expr><name>WGL_DRAW_TO_WINDOW_ARB</name></expr>,

<expr><name>WGL_PIXEL_TYPE_ARB</name></expr>,

<expr><name>WGL_ACCELERATION_ARB</name></expr>,

<expr><name>WGL_DOUBLE_BUFFER_ARB</name></expr>,

<expr><name>WGL_DEPTH_BITS_ARB</name></expr>,

<expr><name>WGL_SWAP_METHOD_ARB</name></expr>,

<expr><name>WGL_COLOR_BITS_ARB</name></expr>,

<expr><name>WGL_RED_BITS_ARB</name></expr>,

<expr><name>WGL_GREEN_BITS_ARB</name></expr>,

<expr><name>WGL_BLUE_BITS_ARB</name></expr>,

<expr><name>WGL_ALPHA_BITS_ARB</name></expr>,

<expr><name>WGL_RED_SHIFT_ARB</name></expr>,

<expr><name>WGL_GREEN_SHIFT_ARB</name></expr>,

<expr><name>WGL_BLUE_SHIFT_ARB</name></expr>,

<expr><name>WGL_ALPHA_SHIFT_ARB</name></expr>,

<expr><name>WGL_STENCIL_BITS_ARB</name></expr>,

<expr><name>WGL_STEREO_ARB</name></expr>,

<expr><name>WGL_ACCUM_BITS_ARB</name></expr>,

<expr><name>WGL_ACCUM_RED_BITS_ARB</name></expr>,

<expr><name>WGL_ACCUM_GREEN_BITS_ARB</name></expr>,

<expr><name>WGL_ACCUM_BLUE_BITS_ARB</name></expr>,

<expr><name>WGL_ACCUM_ALPHA_BITS_ARB</name></expr>,

<expr><name>WGL_AUX_BUFFERS_ARB</name></expr>,

<expr><name>WGL_AUX_BUFFERS_ARB</name></expr>, 

<expr><name>WGL_AUX_BUFFERS_ARB</name></expr>, 

<expr><name>WGL_AUX_BUFFERS_ARB</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_attribs</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>attrib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_attribs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_wgl_extension_supported</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_multisample"</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>num_attribs</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>WGL_SAMPLE_BUFFERS_ARB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>num_attribs</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>WGL_SAMPLES_ARB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_wgl_extension_supported</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_depth_float"</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>num_attribs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>WGL_DEPTH_FLOAT_EXT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>_wglGetPixelFormatAttribivARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wglGetPixelFormatAttribivARB</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>fmt</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_attribs</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>_wglGetPixelFormatAttribivEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wglGetPixelFormatAttribivEXT</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>fmt</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_attribs</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"wglGetPixelFormatAttrib failed! %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_pixel_format_attrib</name><argument_list>(<argument><expr><name>eds</name></expr></argument>, <argument><expr><name>num_attribs</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eds</name> <operator>&amp;&amp;</operator>

<name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SHIFT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SHIFT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SHIFT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SHIFT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>eds</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>change_display_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DEVMODE</name></type> <name>dm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DEVMODE</name></type> <name>fallback_dm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DISPLAY_DEVICE</name></type> <name>dd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>dev_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>modeswitch</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fallback_dm_valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dd</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EnumDisplayDevices</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dev_name</name> <operator>=</operator> <name><name>dd</name><operator>.</operator><name>DeviceName</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fallback_dm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fallback_dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DEVMODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bpp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>modeswitch</name> <operator>=</operator> <call><name>EnumDisplaySettings</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modeswitch</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>bpp</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>refresh_rate</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fallback_dm_valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fallback_dm</name> <operator>=</operator> <name>dm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fallback_dm_valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name> <operator>&lt;</operator> <name><name>fallback_dm</name><operator>.</operator><name>dmDisplayFrequency</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fallback_dm</name> <operator>=</operator> <name>dm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>(</operator><name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>bpp</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>refresh_rate</name></name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modeswitch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fallback_dm_valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Mode not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modeswitch</name> <operator>&amp;&amp;</operator> <name>fallback_dm_valid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dm</name> <operator>=</operator> <name>fallback_dm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmFields</name></name> <operator>=</operator> <name>DM_PELSWIDTH</name> <operator>|</operator> <name>DM_PELSHEIGHT</name> <operator>|</operator> <name>DM_BITSPERPEL</name> <operator>|</operator> <name>DM_DISPLAYFREQUENCY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ChangeDisplaySettingsEx</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CDS_FULLSCREEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DISP_CHANGE_SUCCESSFUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to set mode. %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Mode seccessfuly set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HGLRC</name></type> <name>init_ogl_context_ex</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>testwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>testdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>testrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>old_rc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>old_dc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>glrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>testwnd</name> <operator>=</operator> <call><name>_al_win_create_hidden_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>testwnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_rc</name> <operator>=</operator> <call><name>wglGetCurrentContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_dc</name> <operator>=</operator> <call><name>wglGetCurrentDC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>testdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>init_temp_context</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>testrc</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_wgl_extension_supported</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_create_context"</literal></expr></argument>, <argument><expr><name>testdc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>attrib</name><index>[]</index></name> <init>= <expr><block>{<expr><name>WGL_CONTEXT_MAJOR_VERSION_ARB</name></expr>, <expr><name>major</name></expr>,

<expr><name>WGL_CONTEXT_MINOR_VERSION_ARB</name></expr>, <expr><name>minor</name></expr>,

<expr><name>WGL_CONTEXT_FLAGS_ARB</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>attrib</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_context_creation_extensions</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glrc</name> <operator>=</operator> <call><name>_wglCreateContextAttribsARB</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></else></if_stmt>

<label><name>bail</name>:</label>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>testrc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>testrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>old_dc</name></expr></argument>, <argument><expr><name>old_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_wglCreateContextAttribsARB</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>testwnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>, <argument><expr><name>testdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>glrc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier><modifier>*</modifier></type> <name>get_available_pixel_formats_ext</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>testwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>testdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>testrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>old_rc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>old_dc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>testwnd</name> <operator>=</operator> <call><name>_al_win_create_hidden_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>testwnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_rc</name> <operator>=</operator> <call><name>wglGetCurrentContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_dc</name> <operator>=</operator> <call><name>wglGetCurrentDC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>testdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>init_temp_context</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>testrc</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_wgl_extension_supported</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB_pixel_format"</literal></expr></argument>, <argument><expr><name>testdc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>is_wgl_extension_supported</name><argument_list>(<argument><expr><literal type="string">"WGL_EXT_pixel_format"</literal></expr></argument>, <argument><expr><name>testdc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"WGL_ARB/EXT_pf not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>bail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_pixel_format_extensions</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxindex</name> <operator>=</operator> <call><name>get_pixel_formats_count_ext</name><argument_list>(<argument><expr><name>testdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxindex</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Got %i visuals.\n"</literal></expr></argument>, <argument><expr><name>maxindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eds_list</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>maxindex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eds_list</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxindex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"-- \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Decoding visual no. %i...\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>read_pixel_format_ext</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>testdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_pixel_format</name><argument_list>(<argument><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>=</operator> <call><name>_al_score_display_settings</name><argument_list>(<argument><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i visuals are good enough.\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<label><name>bail</name>:</label>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>testrc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>testrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>old_dc</name></expr></argument>, <argument><expr><name>old_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_wglGetPixelFormatAttribivARB</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_wglGetPixelFormatAttribivEXT</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>testwnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>, <argument><expr><name>testdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>testwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>eds_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier><modifier>*</modifier></type> <name>get_available_pixel_formats_old</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxindex</name> <operator>=</operator> <call><name>get_pixel_formats_count_old</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxindex</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Got %i visuals.\n"</literal></expr></argument>, <argument><expr><name>maxindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eds_list</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>maxindex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eds_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxindex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"-- \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Decoding visual no. %i...\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>read_pixel_format_old</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>display_pixel_format</name><argument_list>(<argument><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>=</operator> <call><name>_al_score_display_settings</name><argument_list>(<argument><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eds_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i visuals are good enough.\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<return>return <expr><name>eds_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>select_pixel_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>sys_cfg</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eds_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_old</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>selection_mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>selection_mode</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>sys_cfg</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>,

<argument><expr><literal type="string">"config_selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selection_mode</name> <operator>&amp;&amp;</operator> <name><name>selection_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>selection_mode</name></expr></argument>, <argument><expr><literal type="string">"old"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Forcing OLD visual selection method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>force_old</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>selection_mode</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_old</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_old</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>get_available_pixel_formats_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eds_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eds</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>get_available_pixel_formats_old</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eds_count</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eds</name> <operator>||</operator> <operator>!</operator><name>eds_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Didn't find any suitable pixel format!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>eds</name></expr></argument>, <argument><expr><name>eds_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_al_display_settings_sorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>eds_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Chose visual no. %i\n\n"</literal></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_pixel_format</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Unable to set pixel format! %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Trying next one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>eds_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to set any pixel format! %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>eds_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>win_display</name><operator>.</operator><name>display</name><operator>.</operator><name>extra_settings</name></name></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>eds_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>eds</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_display_internals</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>wgl_disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>wgl_disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WGL_DISPLAY_PARAMETERS</name></type> <name>ndp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_x</name></decl>, <decl><type ref="prev"/><name>window_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_new_window_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>window_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>.</operator><name>window_x</name></name> <operator>=</operator> <name>window_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>.</operator><name>window_y</name></name> <operator>=</operator> <name>window_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>.</operator><name>window_title</name></name> <operator>=</operator> <call><name>al_get_new_window_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>wgl_disp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>.</operator><name>init_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>.</operator><name>AckEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_beginthread</name><argument_list>(<argument><expr><name>display_thread_proc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ndp</name><operator>.</operator><name>AckEvent</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ndp</name><operator>.</operator><name>AckEvent</name></name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ndp</name><operator>.</operator><name>AckEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ndp</name><operator>.</operator><name>init_failed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>select_pixel_format</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>, <argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL_3_0</name><operator>)</operator> <operator>||</operator> <name>major</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>major</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>major</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fc</name> <init>= <expr><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL_FORWARD_COMPATIBLE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name> <operator>=</operator> <call><name>init_ogl_context_ex</name><argument_list>(<argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name>fc</name></expr></argument>, <argument><expr><name>major</name></expr></argument>,

<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name> <operator>=</operator> <call><name>wglCreateContext</name><argument_list>(<argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to create a render context! %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to make the context current! %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_manage_extensions</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name>_ALLEGRO_OPENGL_VERSION_1_2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name> <init>= <expr><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>required</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ALLEGRO_COMPATIBLE_DISPLAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Allegro requires at least OpenGL version 1.2 to work.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>wglSwapIntervalEXT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglSwapIntervalEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglSwapIntervalEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>can_acknowledge</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_grab_input</name><argument_list>(<argument><expr><name>win_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>wgl_create_display</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_WIN</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_display</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>wgl_display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>ogl_display</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>wgl_display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>ogl_display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>adapter</name></name> <operator>=</operator> <call><name>_al_win_determine_adapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>refresh_rate</name></name> <operator>=</operator> <call><name>al_get_new_display_refresh_rate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <operator>&amp;</operator><name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_OGL_EXTRAS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_display_internals</name><argument_list>(<argument><expr><name>wgl_display</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"OpenGL Version: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Vendor: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Renderer: %s\n\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_RENDERER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <name>wgl_display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_set_system_mouse_cursor</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_show_mouse_cursor</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_post_create_window</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>display</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_display_internals</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>wgl_disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>wgl_disp</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_convert_to_memory_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>backbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_ogl_destroy_backbuffer</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>backbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>backbuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_unmanage_extensions</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>_al_win_msg_suicide</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>win_disp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>win_disp</name><operator>-&gt;</operator><name>thread_ended</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>_wgl_do_not_change_display_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ChangeDisplaySettings</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_WIN</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_WIN</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WGL</name> <operator>*</operator><operator>)</operator><name>disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>old_disp</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name> <operator>!=</operator> <name>disp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>==</operator> <name>disp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_win_destroy_display_icons</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>disp</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name><operator>*</operator><operator>)</operator> <name>disp</name><operator>)</operator><operator>-&gt;</operator><name>msg_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_disp</name> <operator>!=</operator> <name>disp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_set_current_display_only</name><argument_list>(<argument><expr><name>old_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wgl_set_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WGL</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HGLRC</name></type> <name>current_glrc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_glrc</name> <operator>=</operator> <call><name>wglGetCurrentContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_glrc</name> <operator>||</operator> <operator>(</operator><name>current_glrc</name> <operator>&amp;&amp;</operator> <name>current_glrc</name> <operator>!=</operator> <name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>glrc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to make the context current! %s\n"</literal></expr></argument>,

<argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_update_render_state</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_unset_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable unset the current context! %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_win_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_thread_proc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WGL_DISPLAY_PARAMETERS</name> <modifier>*</modifier></type><name>ndp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name><operator>*</operator><operator>)</operator><name><name>ndp</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>disp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_window_position</name><argument_list>(<argument><expr><name><name>ndp</name><operator>-&gt;</operator><name>window_x</name></name></expr></argument>, <argument><expr><name><name>ndp</name><operator>-&gt;</operator><name>window_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_window_title</name><argument_list>(<argument><expr><name><name>ndp</name><operator>-&gt;</operator><name>window_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>change_display_mode</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>thread_ended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ndp</name><operator>-&gt;</operator><name>AckEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><name><name>win_disp</name><operator>-&gt;</operator><name>adapter</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_monitor_info</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_w</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_h</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_w</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_h</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>_al_win_create_window</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>thread_ended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ndp</name><operator>-&gt;</operator><name>AckEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>disp</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,

<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>frameless</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_win_set_window_frameless</name><argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>frameless</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>lock_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>wnd</name> <init>= <expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPI_GETFOREGROUNDLOCKTIMEOUT</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPI_SETFOREGROUNDLOCKTIMEOUT</name></cpp:macro> <cpp:value>0x2001</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_GETFOREGROUNDLOCKTIMEOUT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><operator>&amp;</operator><name>lock_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_SETFOREGROUNDLOCKTIMEOUT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SPIF_SENDWININICHANGE</name> <operator>|</operator> <name>SPIF_UPDATEINIFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>SW_SHOWNORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>GetForegroundWindow</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>wnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UpdateWindow</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_SETFOREGROUNDLOCKTIMEOUT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><operator>&amp;</operator><name>lock_time</name></expr></argument>, <argument><expr><name>SPIF_SENDWININICHANGE</name> <operator>|</operator> <name>SPIF_UPDATEINIFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPI_GETFOREGROUNDLOCKTIMEOUT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPI_SETFOREGROUNDLOCKTIMEOUT</name></cpp:undef>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (disp-&gt;flags &amp; ALLEGRO_FULLSCREEN &amp;&amp; al_is_mouse_installed()) {

RAWINPUTDEVICE rid[1];

rid[0].usUsagePage = 0x01;

rid[0].usUsage = 0x02;

rid[0].dwFlags = RIDEV_NOLEGACY;

rid[0].hwndTarget = 0;

if (RegisterRawInputDevices(rid, 1, sizeof(rid[0])) == FALSE) {

ALLEGRO_ERROR(

"Failed to init mouse. %s\n", get_error_desc(GetLastError()));

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>wgl_disp</name><operator>-&gt;</operator><name>dc</name></name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>thread_ended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>end_thread</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ndp</name><operator>-&gt;</operator><name>init_failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ndp</name><operator>-&gt;</operator><name>AckEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>win_disp</name><operator>-&gt;</operator><name>end_thread</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"wgl display thread exits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>thread_ended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_flip_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name><modifier>*</modifier></type> <name>disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WGL</name><operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SwapBuffers</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_update_display_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_WGL_WIN_swap_hint</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name><modifier>*</modifier></type> <name>disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WGL</name><operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wglAddSwapHintRectWIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SwapBuffers</name><argument_list>(<argument><expr><name><name>disp</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wgl_flip_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wgl_resize_helper</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WGL</name> <modifier>*</modifier></type><name>wgl_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WGL</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>full_w</name></decl>, <decl><type ref="prev"/><name>full_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>adapter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_get_monitor_info</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>full_w</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>x1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>full_h</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>mi</name><operator>.</operator><name>y1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>full_w</name> <operator>!=</operator> <name>width</name> <operator>||</operator> <name>full_h</name> <operator>!=</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_w</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_h</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>can_acknowledge</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target_bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>disp_bmps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>was_backbuffer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>target_bmp</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target_bmp</name> <operator>&amp;&amp;</operator> <name><name>target_bmp</name><operator>-&gt;</operator><name>vt</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><ternary><condition><expr><name><name>target_bmp</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then>

<expr><name><name>target_bmp</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>extra</name></name></expr> </then><else>: <expr><name><name>target_bmp</name><operator>-&gt;</operator><name>extra</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>was_backbuffer</name> <operator>=</operator> <name><name>extra</name><operator>-&gt;</operator><name>is_backbuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_bmps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>dis</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>mem</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_bmps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>mem</name> <operator>=</operator> <operator>*</operator><name>dis</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>_wgl_do_not_change_display_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_wgl_do_not_change_display_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_display_internals</name><argument_list>(<argument><expr><name>wgl_disp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_backbuffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>_al_vector_is_nonempty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_bmps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>back</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_bmps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_convert_to_display_bitmap</name><argument_list>(<argument><expr><operator>*</operator><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_bmps</name></expr></argument>, <argument><expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>disp_bmps</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>win_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOWINFO</name></type> <name>wi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>win_size</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_size</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_size</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_size</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowInfo</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win_size</name></expr></argument>, <argument><expr><name><name>wi</name><operator>.</operator><name>dwStyle</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>GetMenu</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>wi</name><operator>.</operator><name>dwExStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>win_size</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>win_size</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>win_size</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>win_size</name><operator>.</operator><name>top</name></name></expr></argument>,

<argument><expr><name>SWP_NOMOVE</name><operator>|</operator><name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_w</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_disp</name><operator>-&gt;</operator><name>toggle_h</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wgl_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_w</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_h</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>ignore_resize</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wgl_resize_helper</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wgl_resize_helper</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>orig_w</name></expr></argument>, <argument><expr><name>orig_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wgl_acknowledge_resize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>ignore_resize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wgl_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WINDOWINFO</name></type> <name>wi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowInfo</name><argument_list>(<argument><expr><name><name>win_disp</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wi</name><operator>.</operator><name>rcClient</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_update_render_state</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_DISPLAY</name> <operator>|</operator> <name>ALLEGRO_STATE_TARGET_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>wgl_is_compatible_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>display</name> <operator>==</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_switch_in</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_switch_out</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_set_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_win_set_window_position</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name><operator>)</operator><operator>-&gt;</operator><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wgl_get_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_win_get_window_position</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator><name>display</name><operator>)</operator><operator>-&gt;</operator><name>window</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_display_wgl_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>.</operator><name>create_display</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>create_display</name></name> <operator>=</operator> <name>wgl_create_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>destroy_display</name></name> <operator>=</operator> <name>wgl_destroy_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>resize_display</name></name> <operator>=</operator> <name>wgl_resize_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_current_display</name></name> <operator>=</operator> <name>wgl_set_current_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>unset_current_display</name></name> <operator>=</operator> <name>wgl_unset_current_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>flip_display</name></name> <operator>=</operator> <name>wgl_flip_display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>update_display_region</name></name> <operator>=</operator> <name>wgl_update_display_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>acknowledge_resize</name></name> <operator>=</operator> <name>wgl_acknowledge_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>create_bitmap</name></name> <operator>=</operator> <name>_al_ogl_create_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_backbuffer</name></name> <operator>=</operator> <name>_al_ogl_get_backbuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_target_bitmap</name></name> <operator>=</operator> <name>_al_ogl_set_target_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>is_compatible_bitmap</name></name> <operator>=</operator> <name>wgl_is_compatible_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>switch_in</name></name> <operator>=</operator> <name>wgl_switch_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>switch_out</name></name> <operator>=</operator> <name>wgl_switch_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_mouse_cursor</name></name> <operator>=</operator> <name>_al_win_set_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_system_mouse_cursor</name></name> <operator>=</operator> <name>_al_win_set_system_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>show_mouse_cursor</name></name> <operator>=</operator> <name>_al_win_show_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>hide_mouse_cursor</name></name> <operator>=</operator> <name>_al_win_hide_mouse_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_icons</name></name> <operator>=</operator> <name>_al_win_set_display_icons</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_window_position</name></name> <operator>=</operator> <name>wgl_set_window_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_window_position</name></name> <operator>=</operator> <name>wgl_get_window_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_window_constraints</name></name> <operator>=</operator> <name>_al_win_set_window_constraints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>get_window_constraints</name></name> <operator>=</operator> <name>_al_win_get_window_constraints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>apply_window_constraints</name></name> <operator>=</operator> <name>_al_win_apply_window_constraints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_display_flag</name></name> <operator>=</operator> <name>_al_win_set_display_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>set_window_title</name></name> <operator>=</operator> <name>_al_win_set_window_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>.</operator><name>update_render_state</name></name> <operator>=</operator> <name>_al_ogl_update_render_state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_ogl_add_drawing_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_add_clipboard_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>vt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_wgl_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DEVMODE</name></type> <name>dm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>refresh_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>EnumDisplaySettings</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>_al_wgl_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DEVMODE</name></type> <name>dm</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>refresh_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dm</name><operator>.</operator><name>dmSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnumDisplaySettings</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPelsWidth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmPelsHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>refresh_rate</name></name> <operator>=</operator> <name><name>dm</name><operator>.</operator><name>dmDisplayFrequency</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>dm</name><operator>.</operator><name>dmBitsPerPel</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>mode</name></expr>;</return>

</block_content>}</block></function>

</unit>
