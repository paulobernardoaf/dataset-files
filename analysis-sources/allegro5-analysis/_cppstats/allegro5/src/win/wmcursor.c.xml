<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\win\wmcursor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwin.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>local_stretch_blit_to_hdc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dest_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>local_draw_to_hdc</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>HICON</name></type> <name>_al_win_create_icon</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>wnd</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sprite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xfocus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yfocus</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cursor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>resize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sys_sm_cx</name></decl>, <decl><type ref="prev"/><name>sys_sm_cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>h_dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>h_and_dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>h_xor_dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ICONINFO</name></type> <name>iconinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>and_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>xor_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hOldAndMaskBitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hOldXorMaskBitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HICON</name></type> <name>icon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>was_locked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>sprite</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>resize</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_cursor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sys_sm_cx</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXCURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_sm_cy</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>sys_sm_cx</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_sm_cy</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <name>sys_sm_cx</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <name>sys_sm_cy</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>sys_sm_cx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>sys_sm_cy</name> <operator>/</operator> <name>ratio</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>sys_sm_cx</name> <operator>*</operator> <name>ratio</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>sys_sm_cy</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_TARGET_BITMAP</name> <operator>|</operator>

<name>ALLEGRO_STATE_BLENDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>_al_create_bitmap_params</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(

<argument><expr><name>sprite</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sprite</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>sprite</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>sys_sm_cx</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_sm_cy</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>h_dc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h_xor_dc</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>h_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h_and_dc</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>h_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>and_mask</name> <operator>=</operator> <call><name>CreateBitmap</name><argument_list>(<argument><expr><name>sys_sm_cx</name></expr></argument>, <argument><expr><name>sys_sm_cy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xor_mask</name> <operator>=</operator> <call><name>CreateCompatibleBitmap</name><argument_list>(<argument><expr><name>h_dc</name></expr></argument>, <argument><expr><name>sys_sm_cx</name></expr></argument>, <argument><expr><name>sys_sm_cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hOldAndMaskBitmap</name> <operator>=</operator> <operator>(</operator><name>HBITMAP</name><operator>)</operator> <call><name>SelectObject</name><argument_list>(<argument><expr><name>h_and_dc</name></expr></argument>, <argument><expr><name>and_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hOldXorMaskBitmap</name> <operator>=</operator> <operator>(</operator><name>HBITMAP</name><operator>)</operator> <call><name>SelectObject</name><argument_list>(<argument><expr><name>h_xor_dc</name></expr></argument>, <argument><expr><name>xor_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sys_sm_cy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>sys_sm_cx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>h_and_dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>WINDOWS_RGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>h_xor_dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>WINDOWS_RGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>was_locked</name> <operator>=</operator> <call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_locked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>local_draw_to_hdc</name><argument_list>(<argument><expr><name>h_xor_dc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>h_and_dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>h_xor_dc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>WINDOWS_RGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_locked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>h_and_dc</name></expr></argument>, <argument><expr><name>hOldAndMaskBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>h_xor_dc</name></expr></argument>, <argument><expr><name>hOldXorMaskBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>h_and_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>h_xor_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>h_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconinfo</name><operator>.</operator><name>fIcon</name></name> <operator>=</operator> <ternary><condition><expr><name>is_cursor</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconinfo</name><operator>.</operator><name>xHotspot</name></name> <operator>=</operator> <name>xfocus</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconinfo</name><operator>.</operator><name>yHotspot</name></name> <operator>=</operator> <name>yfocus</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconinfo</name><operator>.</operator><name>hbmMask</name></name> <operator>=</operator> <name>and_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconinfo</name><operator>.</operator><name>hbmColor</name></name> <operator>=</operator> <name>xor_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>CreateIconIndirect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iconinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>and_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>xor_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sprite</name> <operator>!=</operator> <name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>icon</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>_al_win_create_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sprite</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>xfocus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yfocus</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>wnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HCURSOR</name></type> <name>hcursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <modifier>*</modifier></type><name>win_cursor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wnd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hcursor</name> <operator>=</operator> <operator>(</operator><name>HCURSOR</name><operator>)</operator><call><name>_al_win_create_icon</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>sprite</name></expr></argument>, <argument><expr><name>xfocus</name></expr></argument>, <argument><expr><name>yfocus</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hcursor</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>win_cursor</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>win_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win_cursor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>hcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>win_cursor</name><operator>-&gt;</operator><name>hcursor</name></name> <operator>=</operator> <name>hcursor</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR</name> <operator>*</operator><operator>)</operator><name>win_cursor</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_win_destroy_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <modifier>*</modifier></type><name>win_cursor</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <operator>*</operator><operator>)</operator> <name>cursor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>win_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_cursor</name><operator>-&gt;</operator><name>hcursor</name></name> <operator>==</operator> <name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_win_set_system_mouse_cursor</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>win_display</name></expr></argument>,

<argument><expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name><name>win_cursor</name><operator>-&gt;</operator><name>hcursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>win_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_set_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator> <name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <modifier>*</modifier></type><name>win_cursor</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <operator>*</operator><operator>)</operator> <name>cursor</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>win_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>win_cursor</name><operator>-&gt;</operator><name>hcursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name> <operator>=</operator> <name><name>win_cursor</name><operator>-&gt;</operator><name>hcursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name><name>win_cursor</name><operator>-&gt;</operator><name>hcursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetCursorPos</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_show_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator> <name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name></type> <name>tmp_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <modifier>*</modifier></type><name>tmp_cursor_ptr</name> <init>= <expr><operator>&amp;</operator><name>tmp_cursor</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_win_set_system_mouse_cursor</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_cursor</name><operator>.</operator><name>hcursor</name></name> <operator>=</operator> <name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_set_mouse_cursor</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR</name> <operator>*</operator><operator>)</operator><name>tmp_cursor_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_hide_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator> <name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>win_display</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_SETCURSOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HCURSOR</name></type> <name>system_cursor_to_hcursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>cursor_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cursor_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT</name></expr>:</case>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_WAIT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_HELP</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_IBEAM</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZEALL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N</name></expr>:</case>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZENS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E</name></expr>:</case>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZEWE</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE</name></expr>:</case>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZENESW</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW</name></expr>:</case>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZENWSE</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_APPSTARTING</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_CROSS</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_HAND</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_UPARROW</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE</name></expr>:</case>

<return>return <expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_NO</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_win_set_system_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>cursor_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_WIN</name> <operator>*</operator><operator>)</operator> <name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HCURSOR</name></type> <name>wc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>system_cursor_to_hcursor</name><argument_list>(<argument><expr><name>cursor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_selected_hcursor</name></name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win_display</name><operator>-&gt;</operator><name>mouse_cursor_shown</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name></type> <name>tmp_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_WIN</name> <modifier>*</modifier></type><name>tmp_cursor_ptr</name> <init>= <expr><operator>&amp;</operator><name>tmp_cursor</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp_cursor</name><operator>.</operator><name>hcursor</name></name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_win_set_mouse_cursor</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR</name> <operator>*</operator><operator>)</operator><name>tmp_cursor_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BITMAPINFO</name> <modifier>*</modifier></type><name>get_bitmap_info</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BITMAPINFO</name> <modifier>*</modifier></type><name>bi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bi</name> <operator>=</operator> <operator>(</operator><name>BITMAPINFO</name> <operator>*</operator><operator>)</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RGBQUAD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <operator>-</operator><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biClrUsed</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name> <operator>=</operator> <name>BI_RGB</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiColors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rgbRed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiColors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rgbGreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiColors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rgbBlue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiColors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rgbReserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>bi</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BYTE</name> <modifier>*</modifier></type><name>get_dib_from_bitmap_32</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>h</name> <operator>*</operator> <name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pixels</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>pixels</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>pitch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>pixels</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>local_draw_to_hdc</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>local_stretch_blit_to_hdc</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>local_stretch_blit_to_hdc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>HDC</name></type> <name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dest_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bitmap_h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bottom_up_src_y</name> <init>= <expr><name>bitmap_h</name> <operator>-</operator> <name>src_y</name> <operator>-</operator> <name>src_h</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BITMAPINFO</name> <modifier>*</modifier></type><name>bi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bi</name> <operator>=</operator> <call><name>get_bitmap_info</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <call><name>get_dib_from_bitmap_32</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom_up_src_y</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src_h</name> <operator>!=</operator> <name>bitmap_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>StretchDIBits</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dest_x</name></expr></argument>, <argument><expr><name>dest_h</name><operator>+</operator><name>dest_y</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_w</name></expr></argument>, <argument><expr><operator>-</operator><name>dest_h</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>bitmap_h</name> <operator>-</operator> <name>src_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>src_w</name></expr></argument>, <argument><expr><operator>-</operator><name>src_h</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>bi</name></expr></argument>,

<argument><expr><name>DIB_RGB_COLORS</name></expr></argument>, <argument><expr><name>SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StretchDIBits</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dest_x</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_w</name></expr></argument>, <argument><expr><name>dest_h</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>bottom_up_src_y</name></expr></argument>, <argument><expr><name>src_w</name></expr></argument>, <argument><expr><name>src_h</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>bi</name></expr></argument>,

<argument><expr><name>DIB_RGB_COLORS</name></expr></argument>, <argument><expr><name>SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
