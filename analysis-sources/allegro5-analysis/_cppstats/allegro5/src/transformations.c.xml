<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\src\transformations.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_transform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>al_copy_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_TRANSFORM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_use_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trans</name> <operator>!=</operator> <operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_bitmap_drawing_held</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_transformation</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_use_projection_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trans</name> <operator>!=</operator> <operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>proj_transform</name></name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>display</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>update_transformation</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>al_get_current_transform</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>al_get_current_projection_transform</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>proj_transform</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>al_get_current_inverse_transform</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>inverse_transform_dirty</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_invert_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>inverse_transform</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_identity_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_build_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sx</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sy</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>sx</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sy</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_build_camera_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>position_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>position_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>position_z</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>look_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>look_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>look_z</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>up_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>up_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>up_z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>position_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>position_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name>position_z</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xx</name></decl>, <decl><type ref="prev"/><name>xy</name></decl>, <decl><type ref="prev"/><name>xz</name></decl>, <decl><type ref="prev"/><name>xnorm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>yx</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>, <decl><type ref="prev"/><name>yz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>zx</name></decl>, <decl><type ref="prev"/><name>zy</name></decl>, <decl><type ref="prev"/><name>zz</name></decl>, <decl><type ref="prev"/><name>znorm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zx</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>look_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zy</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>look_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zz</name> <operator>=</operator> <name>z</name> <operator>-</operator> <name>look_z</name></expr>;</expr_stmt>

<expr_stmt><expr><name>znorm</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>zx</name> <operator>*</operator> <name>zx</name> <operator>+</operator> <name>zy</name> <operator>*</operator> <name>zy</name> <operator>+</operator> <name>zz</name> <operator>*</operator> <name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>znorm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zx</name> <operator>/=</operator> <name>znorm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zy</name> <operator>/=</operator> <name>znorm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zz</name> <operator>/=</operator> <name>znorm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xx</name> <operator>=</operator> <name>up_y</name> <operator>*</operator> <name>zz</name> <operator>-</operator> <name>zy</name> <operator>*</operator> <name>up_z</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xy</name> <operator>=</operator> <name>up_z</name> <operator>*</operator> <name>zx</name> <operator>-</operator> <name>zz</name> <operator>*</operator> <name>up_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xz</name> <operator>=</operator> <name>up_x</name> <operator>*</operator> <name>zy</name> <operator>-</operator> <name>zx</name> <operator>*</operator> <name>up_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xnorm</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>xx</name> <operator>*</operator> <name>xx</name> <operator>+</operator> <name>xy</name> <operator>*</operator> <name>xy</name> <operator>+</operator> <name>xz</name> <operator>*</operator> <name>xz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xnorm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xx</name> <operator>/=</operator> <name>xnorm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xy</name> <operator>/=</operator> <name>xnorm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xz</name> <operator>/=</operator> <name>xnorm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yx</name> <operator>=</operator> <name>zy</name> <operator>*</operator> <name>xz</name> <operator>-</operator> <name>xy</name> <operator>*</operator> <name>zz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yy</name> <operator>=</operator> <name>zz</name> <operator>*</operator> <name>xx</name> <operator>-</operator> <name>xz</name> <operator>*</operator> <name>zx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yz</name> <operator>=</operator> <name>zx</name> <operator>*</operator> <name>xy</name> <operator>-</operator> <name>xx</name> <operator>*</operator> <name>zy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xx</name> <operator>*</operator> <operator>-</operator><name>x</name> <operator>+</operator> <name>xy</name> <operator>*</operator> <operator>-</operator><name>y</name> <operator>+</operator> <name>xz</name> <operator>*</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yx</name> <operator>*</operator> <operator>-</operator><name>x</name> <operator>+</operator> <name>yy</name> <operator>*</operator> <operator>-</operator><name>y</name> <operator>+</operator> <name>yz</name> <operator>*</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zx</name> <operator>*</operator> <operator>-</operator><name>x</name> <operator>+</operator> <name>zy</name> <operator>*</operator> <operator>-</operator><name>y</name> <operator>+</operator> <name>zz</name> <operator>*</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_invert_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>det</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>t</name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_transpose_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>trans</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>m</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_check_inverse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>tol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>det</name></decl>, <decl><type ref="prev"/><name>norm</name></decl>, <decl><type ref="prev"/><name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_ALLEGRO_MAX</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>det</name> <operator>&gt;</operator> <name>tol</name> <operator>*</operator> <name>norm</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_translate_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_translate_transform_3d</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_rotate_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>c</name> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>s</name> <operator>+</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>c</name> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>s</name> <operator>+</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>c</name> <operator>-</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>s</name> <operator>+</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_scale_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_scale_transform_3d</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sy</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_transform_coordinates</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>*</operator><name>y</name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>t</name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>*</operator><name>y</name> <operator>*</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_transform_coordinates_3d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rx</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>trans-&gt;m[i][j]</cpp:value></cpp:define>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ry</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rz</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M</name></cpp:undef>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>rz</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_transform_coordinates_4d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rx</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rz</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>trans-&gt;m[i][j]</cpp:value></cpp:define>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ry</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rz</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rw</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>x</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>y</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>z</name> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>w</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M</name></cpp:undef>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>rz</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>rw</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_transform_coordinates_3d_projective</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates_4d</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>/=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>/=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>/=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_compose_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(other-&gt;m[0][y] * trans-&gt;m[x][0] + other-&gt;m[1][y] * trans-&gt;m[x][1] + other-&gt;m[2][y] * trans-&gt;m[x][2] + other-&gt;m[3][y] * trans-&gt;m[x][3])</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name></type> <name>tmp</name> <init>= <expr><block>{<expr><block>{

<expr><block>{ <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <macro><name>E</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <macro><name>E</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <macro><name>E</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <macro><name>E</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> }</block></expr>

}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>trans</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>E</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_transform_is_translation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dx</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dy</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_orthographic_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>delta_x</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta_y</name> <init>= <expr><name>top</name> <operator>-</operator> <name>bottom</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta_z</name> <init>= <expr><name>f</name> <operator>-</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>delta_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>delta_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>delta_z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>right</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>/</operator> <name>delta_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>top</name> <operator>+</operator> <name>bottom</name><operator>)</operator> <operator>/</operator> <name>delta_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>f</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>/</operator> <name>delta_z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_compose_transform</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_rotate_transform_3d</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cc</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>z</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>z</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>z</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>z</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc</name> <operator>*</operator> <name>z</name> <operator>*</operator> <name>z</name><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_compose_transform</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_perspective_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>trans</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>delta_x</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta_y</name> <init>= <expr><name>top</name> <operator>-</operator> <name>bottom</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta_z</name> <init>= <expr><name>f</name> <operator>-</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>n</name> <operator>/</operator> <name>delta_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>n</name> <operator>/</operator> <name>delta_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>right</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>/</operator> <name>delta_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>top</name> <operator>+</operator> <name>bottom</name><operator>)</operator> <operator>/</operator> <name>delta_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>f</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>/</operator> <name>delta_z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>f</name> <operator>*</operator> <name>n</name> <operator>/</operator> <name>delta_z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_compose_transform</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_horizontal_shear_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><call><name>tanf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_vertical_shear_transform</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tanf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>trans</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
