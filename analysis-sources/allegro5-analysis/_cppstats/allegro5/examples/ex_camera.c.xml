<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_camera.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_color.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>ALLEGRO_PI</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>, <name>z</name>;</decl_stmt>

}</block></struct></type> <name>Vector</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Vector</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector</name></type> <name>xaxis</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector</name></type> <name>yaxis</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector</name></type> <name>zaxis</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>vertical_field_of_view</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Camera</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mouse_look_speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>movement_speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>button</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>keystate</name><index>[<expr><name>ALLEGRO_KEY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_dx</name></decl>, <name>mouse_dy</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>controls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>controls_names</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <name>v_size</name>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>skybox</name></decl>;</decl_stmt>

}</block></struct></type> <name>Example</name>;</typedef>

<decl_stmt><decl><type><name>Example</name></type> <name>ex</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>double</name></type> <name>vector_dot_product</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>z</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector</name></type> <name>vector_cross_product</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>v</name> <init>= <expr><block>{<expr><name><name>a</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>a</name><operator>.</operator><name>z</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>z</name></name></expr>, <expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector</name></type> <name>vector_mul</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>v</name> <init>= <expr><block>{<expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>s</name></expr>, <expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>s</name></expr>, <expr><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name>s</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>vector_norm</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>vector_dot_product</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector</name></type> <name>vector_normalize</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><call><name>vector_norm</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vector_mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_iadd</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>z</name></name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>camera_rotate_around_axis</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>axis</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radians</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_rotate_transform_3d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name><name>axis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>axis</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>axis</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates_3d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yaxis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yaxis</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yaxis</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates_3d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zaxis</name></name> <operator>=</operator> <call><name>vector_normalize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>zaxis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xaxis</name></name> <operator>=</operator> <call><name>vector_cross_product</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yaxis</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>zaxis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xaxis</name></name> <operator>=</operator> <call><name>vector_normalize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>xaxis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yaxis</name></name> <operator>=</operator> <call><name>vector_cross_product</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>zaxis</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xaxis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>camera_move_along_direction</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>forward</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vector_iadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>vector_mul</name><argument_list>(<argument><expr><name><name>camera</name><operator>-&gt;</operator><name>xaxis</name></name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vector_iadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>camera</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>vector_mul</name><argument_list>(<argument><expr><name><name>camera</name><operator>-&gt;</operator><name>zaxis</name></name></expr></argument>, <argument><expr><operator>-</operator><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector</name></type> <name>get_ground_forward_vector</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>move</name> <init>= <expr><call><name>vector_mul</name><argument_list>(<argument><expr><name><name>camera</name><operator>-&gt;</operator><name>zaxis</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>move</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>vector_normalize</name><argument_list>(<argument><expr><name>move</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector</name></type> <name>get_ground_right_vector</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>move</name> <init>= <expr><name><name>camera</name><operator>-&gt;</operator><name>xaxis</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>move</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>vector_normalize</name><argument_list>(<argument><expr><name>move</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>camera_move_along_ground</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>forward</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>f</name> <init>= <expr><call><name>get_ground_forward_vector</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector</name></type> <name>r</name> <init>= <expr><call><name>get_ground_right_vector</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>f</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>forward</name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name><name>f</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name>forward</name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_pitch</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>f</name> <init>= <expr><call><name>get_ground_forward_vector</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>asin</name><argument_list>(<argument><expr><call><name>vector_dot_product</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yaxis</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_yaw</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_roll</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>r</name> <init>= <expr><call><name>get_ground_right_vector</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>asin</name><argument_list>(<argument><expr><call><name>vector_dot_product</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yaxis</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_3d_projection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>projection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dw</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dh</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_translate_transform_3d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projection</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tan</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_perspective_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projection</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>dw</name> <operator>/</operator> <name>dh</name> <operator>*</operator> <name>f</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>f</name> <operator>*</operator> <name>dw</name> <operator>/</operator> <name>dh</name></expr></argument>, <argument><expr><operator>-</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_projection_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_vertex</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>n</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ex</name><operator>.</operator><name>v_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v_size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>v_size</name></name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>ex</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_quad</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>ux</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>uy</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>uz</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>uu</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>uv</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>vx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>vy</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>vz</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>vu</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>vv</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>ux</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>uy</name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>uz</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>uu</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <name>uv</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>vx</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>vy</name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>vz</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>vu</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <name>vv</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>vx</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>vy</name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>vz</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>vu</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <name>vv</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>ux</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>uy</name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>uz</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>uu</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <name>uv</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>ux</name> <operator>+</operator> <name>vx</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>uy</name> <operator>+</operator> <name>vy</name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>uz</name> <operator>+</operator> <name>vz</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>uu</name> <operator>+</operator> <name>vu</name></expr></argument>,

<argument><expr><name>v</name> <operator>+</operator> <name>uv</name> <operator>+</operator> <name>vv</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_checkerboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c1</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"yellow"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c2</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"green"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>px</name> <init>= <expr><name>x</name> <operator>-</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>py</name> <init>= <expr><literal type="number">0.2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>pz</name> <init>= <expr><name>y</name> <operator>-</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name> <init>= <expr><name>c1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>py</name> <operator>-=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_quad</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>pz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_skybox</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>p</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c1</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c2</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"blue"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c3</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"white"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_quad</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>b</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_quad</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>b</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_quad</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>b</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_quad</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>-</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>b</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">1.5</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">1.5</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">1.5</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vertex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <literal type="number">1.5</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_scene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Camera</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>projection</name> <init>= <expr><operator>*</operator><call><name>al_get_current_projection_transform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>back</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>front</name> <init>= <expr><call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"white"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>th</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>pitch</name></decl>, <decl><type ref="prev"/><name>yaw</name></decl>, <decl><type ref="prev"/><name>roll</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_3d_projection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_render_state</name><argument_list>(<argument><expr><name>ALLEGRO_DEPTH_TEST</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_depth_buffer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_checkerboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_skybox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_camera_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, 

<argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>zaxis</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>zaxis</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>zaxis</name><operator>.</operator><name>z</name></name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>yaxis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>yaxis</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>yaxis</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_projection_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_render_state</name><argument_list>(<argument><expr><name>ALLEGRO_DEPTH_TEST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>th</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"look: %+3.1f/%+3.1f/%+3.1f (change with left mouse button and drag)"</literal></expr></argument>,

<argument><expr><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>zaxis</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch</name> <operator>=</operator> <call><name>get_pitch</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">180</literal> <operator>/</operator> <name>pi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yaw</name> <operator>=</operator> <call><name>get_yaw</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">180</literal> <operator>/</operator> <name>pi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>roll</name> <operator>=</operator> <call><name>get_roll</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">180</literal> <operator>/</operator> <name>pi</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>th</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"pitch: %+4.0f yaw: %+4.0f roll: %+4.0f"</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>yaw</name></expr></argument>, <argument><expr><name>roll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>th</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"vertical field of view: %3.1f (change with Z/X)"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>vertical_field_of_view</name></name> <operator>*</operator> <literal type="number">180</literal> <operator>/</operator> <name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>th</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"move with WASD or cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>th</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"control style: %s (space to change)"</literal></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>controls_names</name><index>[<expr><name><name>ex</name><operator>.</operator><name>controls</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_scene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>xaxis</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>yaxis</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>zaxis</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <name>pi</name> <operator>/</operator> <literal type="number">180</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mouse_look_speed</name></name> <operator>=</operator> <literal type="number">0.03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>movement_speed</name></name> <operator>=</operator> <literal type="number">0.05</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>controls_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"FPS"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>controls_names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"airplane"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>controls_names</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"spaceship"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>font</name></name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>xy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_A</name></expr>]</index></name> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_S</name></expr>]</index></name> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_DOWN</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_D</name></expr>]</index></name> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_RIGHT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_W</name></expr>]</index></name> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_UP</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_Z</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>m</name> <init>= <expr><literal type="number">20</literal> <operator>*</operator> <name>pi</name> <operator>/</operator> <literal type="number">180</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>-=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>&lt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>ALLEGRO_KEY_X</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>m</name> <init>= <expr><literal type="number">120</literal> <operator>*</operator> <name>pi</name> <operator>/</operator> <literal type="number">180</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>+=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>vertical_field_of_view</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>roll</name> <init>= <expr><call><name>get_roll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>camera_rotate_around_axis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>zaxis</name></name></expr></argument>, <argument><expr><name>roll</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xy</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>/=</operator> <name>xy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>/=</operator> <name>xy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>camera_move_along_ground</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>movement_speed</name></name> <operator>*</operator> <name>x</name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>movement_speed</name></name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>camera_move_along_direction</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>movement_speed</name></name> <operator>*</operator> <name>x</name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>movement_speed</name></name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>button</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Vector</name></type> <name>up</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>camera_rotate_around_axis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>xaxis</name></name></expr></argument>,

<argument><expr><operator>-</operator><name><name>ex</name><operator>.</operator><name>mouse_look_speed</name></name> <operator>*</operator> <name><name>ex</name><operator>.</operator><name>mouse_dy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>camera_rotate_around_axis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name>up</name></expr></argument>,

<argument><expr><operator>-</operator><name><name>ex</name><operator>.</operator><name>mouse_look_speed</name></name> <operator>*</operator> <name><name>ex</name><operator>.</operator><name>mouse_dx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>camera_rotate_around_axis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>xaxis</name></name></expr></argument>,

<argument><expr><operator>-</operator><name><name>ex</name><operator>.</operator><name>mouse_look_speed</name></name> <operator>*</operator> <name><name>ex</name><operator>.</operator><name>mouse_dy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>camera_rotate_around_axis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>camera</name><operator>.</operator><name>zaxis</name></name></expr></argument>,

<argument><expr><operator>-</operator><name><name>ex</name><operator>.</operator><name>mouse_look_speed</name></name> <operator>*</operator> <name><name>ex</name><operator>.</operator><name>mouse_dx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>redraw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>skybox_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skybox_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_DEPTH_SIZE</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_RESIZABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skybox_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>skybox</name></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>skybox_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Loaded skybox %s: %d x %d\n"</literal></expr></argument>, <argument><expr><name>skybox_name</name></expr></argument>,

<argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>skybox</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed loading skybox %s\n"</literal></expr></argument>, <argument><expr><name>skybox_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_scene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_acknowledge_resize</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_SPACE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>controls</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>controls</name></name> <operator>%=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>keystate</name><index>[<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_UP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>keystate</name><index>[<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>handle_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALLEGRO_KEY_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>keystate</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mouse_dx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mouse_dy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>button</name><index>[<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>button</name><index>[<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mouse_dx</name></name> <operator>+=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mouse_dy</name></name> <operator>+=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dy</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>draw_scene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
