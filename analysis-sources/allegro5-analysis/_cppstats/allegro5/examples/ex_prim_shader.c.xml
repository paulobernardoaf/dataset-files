<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_prim_shader.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>nx</name></decl>, <name>ny</name>, <name>nz</name>;</decl_stmt>

}</block></struct></type> <name>CUSTOM_VERTEX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_SIZE</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPHERE_RADIUS</name></cpp:macro> <cpp:value>150.1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_WIDTH</name></cpp:macro> <cpp:value>640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_HEIGHT</name></cpp:macro> <cpp:value>480</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_RINGS</name></cpp:macro> <cpp:value>(SCREEN_WIDTH / RING_SIZE + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SEGMENTS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_VERTICES</name></cpp:macro> <cpp:value>(NUM_RINGS * NUM_SEGMENTS * 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_OUTSIDE_RING</name></cpp:macro> <cpp:value>((int)(SPHERE_RADIUS / RING_SIZE))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_vertex</name><parameter_list>(<parameter><decl><type><name>CUSTOM_VERTEX</name><modifier>*</modifier></type> <name>vtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ring</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inside</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>ring</name> <operator>*</operator> <name>RING_SIZE</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <name>segment</name> <operator>/</operator> <name>NUM_SEGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ring</name> <operator>*</operator> <name>RING_SIZE</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <name>segment</name> <operator>/</operator> <name>NUM_SEGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>SCREEN_WIDTH</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>SCREEN_HEIGHT</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inside</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>SPHERE_RADIUS</name> <operator>*</operator> <name>SPHERE_RADIUS</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>nx</name></name> <operator>=</operator> <name>x</name> <operator>/</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>ny</name></name> <operator>=</operator> <name>y</name> <operator>/</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>nx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>ny</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>nz</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>vtx</name><operator>-&gt;</operator><name>nx</name></name> <operator>*</operator> <name><name>vtx</name><operator>-&gt;</operator><name>nx</name></name> <operator>+</operator> <name><name>vtx</name><operator>-&gt;</operator><name>ny</name></name> <operator>*</operator> <name><name>vtx</name><operator>-&gt;</operator><name>ny</name></name> <operator>+</operator> <name><name>vtx</name><operator>-&gt;</operator><name>nz</name></name> <operator>*</operator> <name><name>vtx</name><operator>-&gt;</operator><name>nz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>nx</name></name> <operator>/=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>ny</name></name> <operator>/=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><operator>-&gt;</operator><name>nz</name></name> <operator>/=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_DECL</name> <modifier>*</modifier></type><name>vertex_decl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_ELEMENT</name></type> <name><name>vertex_elems</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>ALLEGRO_PRIM_POSITION</name></expr>, <expr><name>ALLEGRO_PRIM_FLOAT_2</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>CUSTOM_VERTEX</argument>, <argument>x</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_PRIM_USER_ATTR</name></expr>, <expr><name>ALLEGRO_PRIM_FLOAT_3</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>CUSTOM_VERTEX</argument>, <argument>nx</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUSTOM_VERTEX</name></type> <name><name>vertices</name><index>[<expr><name>NUM_VERTICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>vertex_shader_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pixel_shader_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertex_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ring</name></decl>, <decl><type ref="prev"/><name>segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>diffuse_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>light_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init primitives addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>SCREEN_WIDTH</name></expr></argument>, <argument><expr><name>SCREEN_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vertex_decl</name> <operator>=</operator> <call><name>al_create_vertex_decl</name><argument_list>(<argument><expr><name>vertex_elems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CUSTOM_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vertex_decl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating vertex declaration.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ring</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ring</name> <operator>&lt;</operator> <name>NUM_RINGS</name></expr>;</condition> <incr><expr><name>ring</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>segment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>segment</name> <operator>&lt;</operator> <name>NUM_SEGMENTS</name></expr>;</condition> <incr><expr><name>segment</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>inside</name> <init>= <expr><name>ring</name> <operator>&lt;</operator> <name>FIRST_OUTSIDE_RING</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>vertex_idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ring</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>vertex_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ring</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>vertex_idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ring</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>vertex_idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ring</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>vertex_idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ring</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_vertex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vertices</name><index>[<expr><name>vertex_idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ring</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vertex_idx</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name>al_create_shader</name><argument_list>(<argument><expr><name>ALLEGRO_SHADER_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to create shader."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_shader_platform</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ALLEGRO_SHADER_GLSL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vertex_shader_file</name> <operator>=</operator> <literal type="string">"data/ex_prim_shader_vertex.glsl"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_shader_file</name> <operator>=</operator> <literal type="string">"data/ex_prim_shader_pixel.glsl"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>vertex_shader_file</name> <operator>=</operator> <literal type="string">"data/ex_prim_shader_vertex.hlsl"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_shader_file</name> <operator>=</operator> <literal type="string">"data/ex_prim_shader_pixel.hlsl"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_shader_source_file</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>ALLEGRO_VERTEX_SHADER</name></expr></argument>, <argument><expr><name>vertex_shader_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_attach_shader_source_file for vertex shader failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>al_get_shader_log</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_shader_source_file</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_SHADER</name></expr></argument>, <argument><expr><name>pixel_shader_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_attach_shader_source_file for pixel shader failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>al_get_shader_log</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_build_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_build_shader for link failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>al_get_shader_log</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_shader_float_vector</name><argument_list>(<argument><expr><literal type="string">"diffuse_color"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>diffuse_color</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_shader_float</name><argument_list>(<argument><expr><literal type="string">"alpha"</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_is_touch_input_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,

<argument><expr><call><name>al_get_touch_input_mouse_emulation_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>quit</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>

<expr_stmt><expr><name>quit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>:</case>

<expr_stmt><expr><name><name>light_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>light_position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>quit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_shader_float_vector</name><argument_list>(<argument><expr><literal type="string">"light_position"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>light_position</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>vertex_decl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NUM_VERTICES</name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_vertex_decl</name><argument_list>(<argument><expr><name>vertex_decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
