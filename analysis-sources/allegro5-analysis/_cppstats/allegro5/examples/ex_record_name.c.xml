<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_record_name.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_acodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>recorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frequency</name> <init>= <expr><literal type="number">44100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>channels</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>latency</name> <init>= <expr><literal type="number">0.10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_seconds</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>name_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>name_buffer_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>name_buffer_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>begin_gain</name> <init>= <expr><literal type="number">0.3f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>is_recording</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_audio</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to initialize audio addon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_acodec_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to initialize acoded addon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to initialize image addon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to initialize primitives addon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_bitmap_font</name><argument_list>(<argument><expr><literal type="string">"data/bmpfont.tga"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to load data/a4_font.tga\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>font_height</name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recorder</name> <operator>=</operator> <call><name>al_create_audio_recorder</name><argument_list>(

<argument><expr><literal type="number">5</literal> <operator>/</operator> <name>latency</name></expr></argument>, 

<argument><expr><name>frequency</name> <operator>*</operator> <name>latency</name></expr></argument>, 

<argument><expr><name>frequency</name></expr></argument>, 

<argument><expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr></argument>, 

<argument><expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr></argument> 

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recorder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to create audio recorder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to create display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_reserve_samples</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_buffer</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><name>channels</name> <operator>*</operator> <name>frequency</name> <operator>*</operator> <name>max_seconds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_buffer_pos</name> <operator>=</operator> <name>name_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name_buffer_end</name> <operator>=</operator> <name>name_buffer</name> <operator>+</operator> <name>channels</name> <operator>*</operator> <name>frequency</name> <operator>*</operator> <name>max_seconds</name></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_audio_recorder_event_source</name><argument_list>(<argument><expr><name>recorder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_audio_recorder</name><argument_list>(<argument><expr><name>recorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>do_draw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name> <operator>||</operator> 

<operator>(</operator><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_UP</name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>spl</name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name> <operator>!=</operator> <literal type="number">27</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>do_draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</name> <operator>&amp;&amp;</operator> <name>recorder</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <modifier>*</modifier></type><name>re</name> <init>= <expr><call><name>al_get_audio_recorder_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>re</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name> <operator>*</operator> <name><name>re</name><operator>-&gt;</operator><name>samples</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>low</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>gain</name> <operator>*</operator> <literal type="number">0.25</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_recording</name> <operator>&amp;&amp;</operator> <name>gain</name> <operator>&gt;=</operator> <name>begin_gain</name> <operator>&amp;&amp;</operator> <name>name_buffer_pos</name> <operator>==</operator> <name>name_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_recording</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>is_recording</name> <operator>&amp;&amp;</operator> <name>gain</name> <operator>&lt;=</operator> <literal type="number">0.10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_recording</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_recording</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>samples_to_copy</name> <init>= <expr><name>channels</name> <operator>*</operator> <name><name>re</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samples_to_copy</name> <operator>&gt;</operator> <name>name_buffer_end</name> <operator>-</operator> <name>name_buffer_pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>samples_to_copy</name> <operator>=</operator> <name>name_buffer_end</name> <operator>-</operator> <name>name_buffer_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samples_to_copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name_buffer_pos</name></expr></argument>, <argument><expr><name><name>re</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>samples_to_copy</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_buffer_pos</name> <operator>+=</operator> <name>samples_to_copy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_buffer_pos</name> <operator>&gt;=</operator> <name>name_buffer_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_recording</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_recording</name> <operator>&amp;&amp;</operator> <name>name_buffer_pos</name> <operator>!=</operator> <name>name_buffer</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>spl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>al_create_sample</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>name_buffer_pos</name> <operator>-</operator> <name>name_buffer</name></expr></argument>, <argument><expr><name>frequency</name></expr></argument>, 

<argument><expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr></argument>, <argument><expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_audio_recorder</name><argument_list>(<argument><expr><name>recorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recorder</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_draw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"Say Your Name"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>al_get_text_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">240</literal> <operator>-</operator> <name>font_height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><literal type="number">320</literal> <operator>-</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">242</literal> <operator>+</operator> <name>font_height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">320</literal> <operator>-</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>gain</name> <operator>*</operator> <name>width</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">242</literal> <operator>+</operator> <name>font_height</name></expr></argument>, 

<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">320</literal> <operator>-</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>begin_gain</name> <operator>*</operator> <name>width</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">242</literal> <operator>+</operator> <name>font_height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">320</literal> <operator>-</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>begin_gain</name> <operator>*</operator> <name>width</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">242</literal> <operator>+</operator> <name>font_height</name></expr></argument>,

<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">240</literal> <operator>-</operator> <name>font_height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"Press Any Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>recorder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_audio_recorder</name><argument_list>(<argument><expr><name>recorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
