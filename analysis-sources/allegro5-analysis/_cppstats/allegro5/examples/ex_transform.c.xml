<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_transform.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bitmap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>subbitmap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer_subbitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>overlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>transform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>software</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>blend</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_subbitmap</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>soft_font</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"data/mysha.pcx"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subbitmap</name> <operator>=</operator> <call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">640</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">480</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>overlay</name> <operator>=</operator> <call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_window_title</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"%s not found or failed to load\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/bmpfont.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"data/bmpfont.tga not found or failed to load\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_subbitmap</name> <operator>=</operator> <call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">640</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">480</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>soft_font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/bmpfont.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>soft_font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"data/bmpfont.tga not found or failed to load\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_rotate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_S</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>software</name> <operator>=</operator> <operator>!</operator><name>software</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>software</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>identity</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_L</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blend</name> <operator>=</operator> <operator>!</operator><name>blend</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_subbitmap</name> <operator>=</operator> <operator>!</operator><name>use_subbitmap</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><literal type="number">3.0</literal> <operator>+</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl>;</decl_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>software</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>use_subbitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>buffer_subbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>use_subbitmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>subbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_translate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">640</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">480</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_scale_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><literal type="number">0.15</literal> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name>t</name> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.15</literal> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>t</name> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_rotate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><name>t</name> <operator>/</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_translate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><literal type="number">640</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">480</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_tinted_scaled_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>ALLEGRO_FLIP_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_tinted_scaled_rotated_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_pixel</name><argument_list>(<argument><expr><name>w</name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name>w</name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_circle</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>software</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>soft_font</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">640</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"Software Rendering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">640</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"Hardware Rendering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_LEFT</name></expr></argument>, <argument><expr><literal type="string">"hello!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
