<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_glext.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_opengl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/glu.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glu.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_W</name></cpp:macro> <cpp:value>640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_H</name></cpp:macro> <cpp:value>480</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MESH_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GLfloat</name></type> <name><name>mesh</name><index>[<expr><name>MESH_SIZE</name></expr>]</index><index>[<expr><name>MESH_SIZE</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLfloat</name></type> <name>wave_movement</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIN</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"MAD "d", "s", one_over_pi, 0.5;\n" "FRC "d","d";\n" "MAD "d","d", two_pi, -pi;\n" "MUL "d","d", 0.98;\n" "MUL "t".x, "d", "d";\n" "MUL "t".y, "t".x, "d";\n" "MUL "t".z, "t".y, "t".x;\n" "MUL "t".w, "t".z, "t".x;\n" "MAD "d", "t".y,-inv_3_fact, "d";\n" "MAD "d", "t".z, inv_5_fact, "d";\n" "MAD "d", "t".w,-inv_7_fact, "d";\n"</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program</name> <init>=

<expr><literal type="string">"!!ARBvp1.0\n"</literal>

<literal type="string">"ATTRIB pos = vertex.position;\n"</literal>

<literal type="string">"ATTRIB wave = vertex.attrib[1];\n"</literal>

<literal type="string">"PARAM modelview[4] = { state.matrix.mvp };\n"</literal>

<literal type="string">"PARAM one_over_pi = 0.1591549;\n"</literal>

<literal type="string">"PARAM pi = 3.1415926;\n"</literal>

<literal type="string">"PARAM two_pi = 6.2831853;\n"</literal>

<literal type="string">"PARAM inv_3_fact = 0.1666666;\n"</literal>

<literal type="string">"PARAM inv_5_fact = 0.00833333333;\n"</literal>

<literal type="string">"PARAM inv_7_fact = 0.00019841269841269;\n"</literal>

<literal type="string">"TEMP temp, temp2;\n"</literal>

<literal type="string">"MAD temp.y, pos.x, 0.2, wave.x;\n"</literal>

<call><name>SIN</name><argument_list>(<argument><expr><literal type="string">"temp.y"</literal></expr></argument>, <argument><expr><literal type="string">"temp.y"</literal></expr></argument>, <argument><expr><literal type="string">"temp2"</literal></expr></argument>)</argument_list></call>

<literal type="string">"MAD temp.x, pos.z, 0.25, wave.x;\n"</literal>

<call><name>SIN</name><argument_list>(<argument><expr><literal type="string">"temp.x"</literal></expr></argument>, <argument><expr><literal type="string">"temp.x"</literal></expr></argument>, <argument><expr><literal type="string">"temp2"</literal></expr></argument>)</argument_list></call>

<literal type="string">"ADD temp.y, temp.x, temp.y;\n"</literal>

<literal type="string">"MOV temp2, pos;\n"</literal>

<literal type="string">"MUL temp2.y, temp.y, 2.5;\n"</literal>

<literal type="string">"DP4 result.position.w, temp2, modelview[3];\n"</literal>

<literal type="string">"DP4 result.position.x, temp2, modelview[0];\n"</literal>

<literal type="string">"DP4 result.position.y, temp2, modelview[1];\n"</literal>

<literal type="string">"DP4 result.position.z, temp2, modelview[2];\n"</literal>

<literal type="string">"MOV result.color, vertex.color;\n"</literal>

<literal type="string">"END"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program_nv</name> <init>= 

<expr><literal type="string">"!!ARBvp1.0"</literal>

<literal type="string">"OPTION NV_vertex_program2;"</literal>

<literal type="string">"ATTRIB wave = vertex.attrib[1];"</literal>

<literal type="string">"PARAM modelview[4] = { state.matrix.mvp };"</literal>

<literal type="string">"TEMP temp;"</literal>

<literal type="string">"TEMP pos;"</literal>

<literal type="string">"MOV pos, vertex.position;"</literal>

<literal type="string">"MAD temp.xz, pos, {0.2, 1.0, 0.25, 1.0}, wave.x;"</literal>

<literal type="string">"SIN temp.x, temp.x;"</literal>

<literal type="string">"SIN temp.z, temp.z;"</literal>

<literal type="string">"ADD temp.y, temp.x, temp.z;"</literal>

<literal type="string">"MUL pos.y, temp.y, 2.5;"</literal>

<literal type="string">"DP4 result.position.w, pos, modelview[3];"</literal>

<literal type="string">"DP4 result.position.x, pos, modelview[0];"</literal>

<literal type="string">"DP4 result.position.y, pos, modelview[1];"</literal>

<literal type="string">"DP4 result.position.z, pos, modelview[2];"</literal>

<literal type="string">"MOV result.color, vertex.color;"</literal>

<literal type="string">"END"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_mesh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MESH_SIZE</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>MESH_SIZE</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mesh</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>MESH_SIZE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>MESH_SIZE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_mesh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glColor4f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MESH_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>glBegin</name><argument_list>(<argument><expr><name>GL_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>MESH_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttrib1fARB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wave_movement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glVertex3fv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mesh</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glVertex3fv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mesh</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wave_movement</name> <operator>+=</operator> <literal type="number">0.00001f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wave_movement</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wave_movement</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>glEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>limited</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-nolimit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>limited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>WINDOW_W</name></expr></argument>, <argument><expr><name>WINDOW_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to open a OpenGL display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_display_option</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"With multisampling, level %i\n"</literal></expr></argument>, <argument><expr><call><name>al_get_display_option</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Without multisampling.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>limited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_ARB_multisample</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_MULTISAMPLE_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_ARB_vertex_program</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"This example requires a video card that supports "</literal>

<literal type="string">" the ARB_vertex_program extension.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glShadeModel</name><argument_list>(<argument><expr><name>GL_SMOOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glHint</name><argument_list>(<argument><expr><name>GL_PERSPECTIVE_CORRECTION_HINT</name></expr></argument>, <argument><expr><name>GL_NICEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPolygonMode</name><argument_list>(<argument><expr><name>GL_FRONT_AND_BACK</name></expr></argument>, <argument><expr><name>GL_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gluPerspective</name><argument_list>(<argument><expr><literal type="number">45.0</literal></expr></argument>, <argument><expr><name>WINDOW_W</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>WINDOW_H</name></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gluLookAt</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">20.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">45.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>create_mesh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_VERTEX_PROGRAM_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGenProgramsARB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindProgramARB</name><argument_list>(<argument><expr><name>GL_VERTEX_PROGRAM_ARB</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_NV_vertex_program2_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glProgramStringARB</name><argument_list>(<argument><expr><name>GL_VERTEX_PROGRAM_ARB</name></expr></argument>, <argument><expr><name>GL_PROGRAM_FORMAT_ASCII_ARB</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>program_nv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>program_nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>glProgramStringARB</name><argument_list>(<argument><expr><name>GL_VERTEX_PROGRAM_ARB</name></expr></argument>, <argument><expr><name>GL_PROGRAM_FORMAT_ASCII_ARB</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgm</name> <init>= <expr><ternary><condition><expr><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GL_NV_vertex_program2_option</name></expr>

?</condition><then> <expr><name>program_nv</name></expr> </then><else>: <expr><name>program</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>error_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type><name>error_str</name> <init>= <expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_PROGRAM_ERROR_STRING_ARB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_PROGRAM_ERROR_POSITION_ARB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error compiling the vertex program:\n%s\n\nat "</literal>

<literal type="string">"character: %i\n%s\n"</literal></expr></argument>, <argument><expr><name>error_str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>error_pos</name></expr></argument>,

<argument><expr><name>pgm</name> <operator>+</operator> <name>error_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>limited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>al_get_next_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>

<goto>goto <name>done</name>;</goto>

<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_mesh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%.1f FPS\n"</literal></expr></argument>, <argument><expr><name>frames</name> <operator>/</operator> <operator>(</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteProgramsARB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
