<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_get_path.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path_str</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>path</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"&lt;none&gt;"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>path_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_org_name</name><argument_list>(<argument><expr><literal type="string">"liballeg.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_app_name</name><argument_list>(<argument><expr><literal type="string">"ex_get_path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"With default exe name:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\nOverriding exe name to blahblah\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_exe_name</name><argument_list>(<argument><expr><literal type="string">"blahblah"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\nOverriding exe name to /tmp/blahblah.exe:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_exe_name</name><argument_list>(<argument><expr><literal type="string">"/tmp/blahblah.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_RESOURCES_PATH</name></expr></argument>, <argument><expr><literal type="string">"RESOURCES_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_TEMP_PATH</name></expr></argument>, <argument><expr><literal type="string">"TEMP_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DATA_PATH</name></expr></argument>, <argument><expr><literal type="string">"USER_DATA_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr></argument>, <argument><expr><literal type="string">"USER_SETTINGS_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_HOME_PATH</name></expr></argument>, <argument><expr><literal type="string">"USER_HOME_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DOCUMENTS_PATH</name></expr></argument>, <argument><expr><literal type="string">"USER_DOCUMENTS_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>, <argument><expr><literal type="string">"EXENAME_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
