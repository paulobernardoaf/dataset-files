<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_drawpixels.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>480</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_STARS</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_FPS</name></cpp:macro> <cpp:value>9999</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Point</name>

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

}</block></struct></type> <name>Point</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>key_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Point</name></type> <name><name>stars</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NUM_STARS</name><operator>/</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>speeds</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.0001f</literal></expr>, <expr><literal type="number">0.05f</literal></expr>, <expr><literal type="number">0.15f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name><name>colors</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>now</name></decl>, <decl><type ref="prev"/><name>elapsed</name></decl>, <decl><type ref="prev"/><name>frame_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>program_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layer</name></decl>, <decl><type ref="prev"/><name>star</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>WIDTH</name></expr></argument>, <argument><expr><name>HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not create display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colors</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>star</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>star</name> <operator>&lt;</operator> <name>NUM_STARS</name><operator>/</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>star</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>star</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>HEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>program_start</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frame_count</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1000</literal><operator>/</operator><name>TARGET_FPS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_count</name> <operator>+=</operator> <name>elapsed</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame_count</name> <operator>-=</operator> <operator>(</operator><literal type="number">1000</literal><operator>/</operator><name>TARGET_FPS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>star</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>star</name> <operator>&lt;</operator> <name>NUM_STARS</name><operator>/</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>star</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>star</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_pixel</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>star</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>star</name> <operator>&lt;</operator> <name>NUM_STARS</name><operator>/</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>star</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>star</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>layer</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>X</name> <operator>=</operator> <name>WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name>HEIGHT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_frames</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>star</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>star</name> <operator>&lt;</operator> <name>NUM_STARS</name><operator>/</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>star</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>stars</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>star</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>-=</operator> <name><name>speeds</name><index>[<expr><name>layer</name></expr>]</index></name> <operator>*</operator> <name>elapsed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>HEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_keyboard_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_key_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_state</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ESCAPE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>program_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%d FPS\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>total_frames</name> <operator>/</operator> <name>length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
