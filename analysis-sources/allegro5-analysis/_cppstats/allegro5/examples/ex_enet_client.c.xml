<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_enet_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;enet/enet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"enet_common.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ENetHost</name><modifier>*</modifier></type> <name>create_client</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ENetHost</name> <modifier>*</modifier></type> <name>client</name></decl>;</decl_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>enet_host_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><literal type="number">1</literal></expr></argument> ,

<argument><expr><literal type="number">2</literal></expr></argument> ,

<argument><expr><literal type="number">57600</literal> <operator>/</operator> <literal type="number">8</literal></expr></argument> ,

<argument><expr><literal type="number">14400</literal> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Client: Failed to create the client.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>client</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>disconnect_client</name><parameter_list>(<parameter><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>ENetPeer</name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>enet_peer_disconnect</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ENetEvent</name></type> <name>event</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>enet_host_service</name> <argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ENET_EVENT_TYPE_RECEIVE</name></expr>:</case>

<expr_stmt><expr><call><name>enet_packet_destroy</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ENET_EVENT_TYPE_DISCONNECT</name></expr>:</case>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Client: Disconnect succeeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>ENET_EVENT_TYPE_NONE</name></expr>:</case>

<case>case <expr><name>ENET_EVENT_TYPE_CONNECT</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>enet_peer_reset</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ENetPeer</name><modifier>*</modifier></type> <name>connect_client</name><parameter_list>(<parameter><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ENetAddress</name></type> <name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENetEvent</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENetPeer</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>enet_address_set_host</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>address</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>enet_host_connect</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Client: No available peers for initiating an ENet connection.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>enet_host_service</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ENET_EVENT_TYPE_CONNECT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Client: Connected to %x:%u.\n"</literal></expr></argument>,

<argument><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>host</name></name></expr></argument>,

<argument><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>enet_peer_reset</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Client: Connection to server failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>server</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_receive</name><parameter_list>(<parameter><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ENetEvent</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ServerMessage</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>enet_host_service</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ENET_EVENT_TYPE_RECEIVE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>ServerMessage</name><operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>POSITION_UPDATE</name></expr>:</case>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PLAYER_JOIN</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Client: player #%d joined\n"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PLAYER_LEAVE</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Client: player #%d left\n"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>player_id</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>enet_packet_destroy</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENetPeer</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>update</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><name>DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [portnum]"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>FPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>enet_initialize</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"An error occurred while initializing ENet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>create_client</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>connect_client</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>direction_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_KEY_UP</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_W</name></expr>:</case> <expr_stmt><expr><name>dy</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ALLEGRO_KEY_DOWN</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_S</name></expr>:</case> <expr_stmt><expr><name>dy</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ALLEGRO_KEY_LEFT</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_A</name></expr>:</case> <expr_stmt><expr><name>dx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ALLEGRO_KEY_RIGHT</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_D</name></expr>:</case> <expr_stmt><expr><name>dx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_UP</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_KEY_UP</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_W</name></expr>:</case> <expr_stmt><expr><name>dy</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ALLEGRO_KEY_DOWN</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_S</name></expr>:</case> <expr_stmt><expr><name>dy</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ALLEGRO_KEY_LEFT</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_A</name></expr>:</case> <expr_stmt><expr><name>dx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ALLEGRO_KEY_RIGHT</name></expr>:</case>

<case>case <expr><name>ALLEGRO_KEY_D</name></expr>:</case> <expr_stmt><expr><name>dx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><operator>(</operator><name>ALLEGRO_EVENT_TIMER</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>update</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>direction_changed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>direction_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ClientMessage</name></type> <name>msg</name> <init>= <expr><block>{ <expr><name>dx</name></expr>, <expr><name>dy</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENetPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>enet_packet_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ENET_PACKET_FLAG_RELIABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>enet_peer_send</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>send_receive</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYER_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>PLAYER_SIZE</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>disconnect_client</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enet_host_destroy</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enet_deinitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
