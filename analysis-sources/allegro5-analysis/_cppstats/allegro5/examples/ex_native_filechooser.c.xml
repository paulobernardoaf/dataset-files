<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_native_filechooser.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_native_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_color.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_DIALOG_EVENT1</name></cpp:macro> <cpp:value>ALLEGRO_GET_EVENT_TYPE('e', 'N', 'F', '1')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_DIALOG_EVENT2</name></cpp:macro> <cpp:value>ALLEGRO_GET_EVENT_TYPE('e', 'N', 'F', '2')</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FILECHOOSER</name> <modifier>*</modifier></type><name>file_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name></type> <name>event_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>

}</block></struct></type> <name>AsyncDialog</name>;</typedef>

<decl_stmt><decl><type><name>ALLEGRO_TEXTLOG</name> <modifier>*</modifier></type><name>textlog</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <name>str</name></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_append_native_text_log</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>async_file_dialog_thread_func</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_show_native_file_dialog</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>file_dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ASYNC_DIALOG_EVENT1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>message_box_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>al_show_native_message_box</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"Warning"</literal></expr></argument>,

<argument><expr><literal type="string">"Click Detected"</literal></expr></argument>,

<argument><expr><literal type="string">"That does nothing. Stop clicking there."</literal></expr></argument>,

<argument><expr><literal type="string">"Oh no!|Don't press|Ok"</literal></expr></argument>, <argument><expr><name>ALLEGRO_MESSAGEBOX_WARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>al_show_native_message_box</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><literal type="string">"Hey!"</literal></expr></argument>,

<argument><expr><literal type="string">"Stop it! I told you not to click there."</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ALLEGRO_MESSAGEBOX_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ASYNC_DIALOG_EVENT2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AsyncDialog</name> <modifier>*</modifier></type><name>spawn_async_file_dialog</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initial_path</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>save</name></expr> ?</condition><then> <expr><name>ALLEGRO_FILECHOOSER_SAVE</name></expr> </then><else>: <expr><name>ALLEGRO_FILECHOOSER_MULTIPLE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name> <init>= <expr><ternary><condition><expr><name>save</name></expr> ?</condition><then> <expr><literal type="string">"Save (no files will be changed)"</literal></expr> </then><else>: <expr><literal type="string">"Choose files"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file_dialog</name></name> <operator>=</operator> <call><name>al_create_native_file_dialog</name><argument_list>(

<argument><expr><name>initial_path</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>async_file_dialog_thread_func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AsyncDialog</name> <modifier>*</modifier></type><name>spawn_async_message_dialog</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>message_box_thread</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_async_dialog</name><parameter_list>(<parameter><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>file_dialog</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_destroy_native_file_dialog</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>file_dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_files_list</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILECHOOSER</name> <modifier>*</modifier></type><name>dialog</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>al_get_native_file_dialog_count</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>th</name> <init>= <expr><call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>count</name> <operator>*</operator> <name>th</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>al_get_native_file_dialog_path</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>th</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>background</name></decl>, <decl><type ref="prev"/><name>active</name></decl>, <decl><type ref="prev"/><name>inactive</name></decl>, <decl><type ref="prev"/><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>old_dialog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>cur_dialog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AsyncDialog</name> <modifier>*</modifier></type><name>message_box</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>close_log</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>message_log</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>touch</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_native_dialog_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init native dialog addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>textlog</name> <operator>=</operator> <call><name>al_open_native_text_log</name><argument_list>(<argument><expr><literal type="string">"Log"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Starting up log window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>background</name> <operator>=</operator> <call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"white"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>=</operator> <call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inactive</name> <operator>=</operator> <call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"gray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>al_color_name</name><argument_list>(<argument><expr><literal type="string">"red"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>touch</name> <operator>=</operator> <call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>touch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_mouse_emulation_mode</name><argument_list>(<argument><expr><name>ALLEGRO_MOUSE_EMULATION_5_0_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Creating window..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"failure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"success.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Loading font '%s'..."</literal></expr></argument>, <argument><expr><literal type="string">"data/fixed_font.tga"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/fixed_font.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"failure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error loading data/fixed_font.tga\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"success.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>restart</name>:</label>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Starting main loop.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>touch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_touch_input_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_touch_input_mouse_emulation_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textlog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_native_text_log_event_source</name><argument_list>(

<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>h</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cur_dialog</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cur_dialog</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Mouse clicked at %d,%d.\n"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>h</name> <operator>-</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>message_log</name> <operator>=</operator> <operator>!</operator><name>message_log</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>message_log</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>textlog</name> <operator>=</operator> <call><name>al_open_native_text_log</name><argument_list>(<argument><expr><literal type="string">"Log"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textlog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,

<argument><expr><call><name>al_get_native_text_log_event_source</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>close_log</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>message_box</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>message_box</name> <operator>=</operator> <call><name>spawn_async_message_dialog</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>message_box</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>cur_dialog</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>save</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_dialog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_path</name> <operator>=</operator> <call><name>al_get_native_file_dialog_path</name><argument_list>(

<argument><expr><name><name>old_dialog</name><operator>-&gt;</operator><name>file_dialog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_dialog</name> <operator>=</operator> <call><name>spawn_async_file_dialog</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>last_path</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_dialog</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ASYNC_DIALOG_EVENT1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unregister_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_dialog</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_native_file_dialog_count</name><argument_list>(<argument><expr><name><name>cur_dialog</name><operator>-&gt;</operator><name>file_dialog</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_dialog</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stop_async_dialog</name><argument_list>(<argument><expr><name>old_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_dialog</name> <operator>=</operator> <name>cur_dialog</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>stop_async_dialog</name><argument_list>(<argument><expr><name>cur_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cur_dialog</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ASYNC_DIALOG_EVENT2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unregister_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>message_box</name><operator>-&gt;</operator><name>event_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_async_dialog</name><argument_list>(<argument><expr><name>message_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>message_box</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>close_log</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cur_dialog</name></expr> ?</condition><then> <expr><name>inactive</name></expr> </then><else>: <expr><name>active</name></expr></else></ternary></expr></argument>, <argument><expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"Open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cur_dialog</name></expr> ?</condition><then> <expr><name>inactive</name></expr> </then><else>: <expr><name>active</name></expr></else></ternary></expr></argument>, <argument><expr><name>x</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"Save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cur_dialog</name></expr> ?</condition><then> <expr><name>inactive</name></expr> </then><else>: <expr><name>active</name></expr></else></ternary></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">30</literal></expr></argument>,

<argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>message_log</name></expr> ?</condition><then> <expr><literal type="string">"Close Message Log"</literal></expr> </then><else>: <expr><literal type="string">"Open Message Log"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_dialog</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_files_list</name><argument_list>(<argument><expr><name><name>old_dialog</name><operator>-&gt;</operator><name>file_dialog</name></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>close_log</name> <operator>&amp;&amp;</operator> <name>textlog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>close_log</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>message_log</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unregister_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,

<argument><expr><call><name>al_get_native_text_log_event_source</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_close_native_text_log</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlog</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>al_show_native_message_box</name><argument_list>(<argument><expr><name>display</name></expr></argument>,

<argument><expr><literal type="string">"Warning"</literal></expr></argument>,

<argument><expr><literal type="string">"Are you sure?"</literal></expr></argument>,

<argument><expr><literal type="string">"If you click yes then this example will inevitably close."</literal>

<literal type="string">" This is your last chance to rethink your decision."</literal>

<literal type="string">" Do you really want to quit?"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>ALLEGRO_MESSAGEBOX_YES_NO</name> <operator>|</operator> <name>ALLEGRO_MESSAGEBOX_QUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stop_async_dialog</name><argument_list>(<argument><expr><name>old_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_async_dialog</name><argument_list>(<argument><expr><name>cur_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
