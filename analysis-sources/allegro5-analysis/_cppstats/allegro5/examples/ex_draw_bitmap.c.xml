<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_draw_bitmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"main"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SPRITES</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Sprite</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>, <name>dx</name>, <name>dy</name>;</decl_stmt>

}</block></struct></type> <name>Sprite</name>;</typedef>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>text</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"H - toggle held drawing"</literal></expr>,

<expr><literal type="string">"Space - toggle use of textures"</literal></expr>,

<expr><literal type="string">"B - toggle alpha blending"</literal></expr>,

<expr><literal type="string">"Left/Right - change bitmap size"</literal></expr>,

<expr><literal type="string">"Up/Down - change bitmap count"</literal></expr>,

<expr><literal type="string">"F1 - toggle help text"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>Example</name> <block>{

<decl_stmt><decl><type><name>Sprite</name></type> <name><name>sprites</name><index>[<expr><name>MAX_SPRITES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_memory_bitmaps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>mysha</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hold_bitmap_drawing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sprite_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>show_help</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>half_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>dark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>red</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>direct_speed_measure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ftpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>frame_times</name><index>[<expr><name>FPS</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>example</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>frame_times</name><index>[<expr><name><name>example</name><operator>.</operator><name>ftpos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>ftpos</name></name> <operator>&gt;=</operator> <name>FPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>ftpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_fps</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>average</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minmax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name>FPS</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_dt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>max_dt</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>av</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>example</name><operator>.</operator><name>ftpos</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>dt</name> <init>= <expr><name><name>example</name><operator>.</operator><name>frame_times</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>frame_times</name><index>[<expr><name>prev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dt</name> <operator>&lt;</operator> <name>min_dt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min_dt</name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dt</name> <operator>&gt;</operator> <name>max_dt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_dt</name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>av</name> <operator>+=</operator> <name>dt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>av</name> <operator>/=</operator> <operator>(</operator><name>FPS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>average</name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <name>min_dt</name> <operator>-</operator> <literal type="number">1</literal> <operator>/</operator> <name>max_dt</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>minmax</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>d</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_sprite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name> <operator>&lt;</operator> <name>MAX_SPRITES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>example</name><operator>.</operator><name>sprites</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">360</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>FPS</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>FPS</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_sprites</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_sprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_sprites</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>change_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(

<argument><expr><ternary><condition><expr><name><name>example</name><operator>.</operator><name>use_memory_bitmaps</name></name></expr> ?</condition><then> <expr><name>ALLEGRO_MEMORY_BITMAP</name></expr> </then><else>: <expr><name>ALLEGRO_VIDEO_BITMAP</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>mysha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bh</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>mysha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>mysha</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name>bh</name> <operator>/</operator> <name>bw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprite_update</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>dx</name></name> <operator>/</operator> <name>FPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>dy</name></name> <operator>/</operator> <name>FPS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>dx</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>&gt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>dx</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>dy</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>&gt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>dy</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>&gt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>&gt;</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>example</name><operator>.</operator><name>sprite_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprite_update</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>sprites</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>t</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>t</name></name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"tick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>t</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fh</name> <init>= <expr><call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>info</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"textures"</literal></expr>, <expr><literal type="string">"memory buffers"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>binfo</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"alpha"</literal></expr>, <expr><literal type="string">"additive"</literal></expr>, <expr><literal type="string">"tinted"</literal></expr>, <expr><literal type="string">"solid"</literal></expr>, <expr><literal type="string">"alpha test"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name> <init>= <expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <name><name>example</name><operator>.</operator><name>half_white</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <name><name>example</name><operator>.</operator><name>dark</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <name><name>example</name><operator>.</operator><name>red</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_render_state</name><argument_list>(<argument><expr><name>ALLEGRO_ALPHA_TEST</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_render_state</name><argument_list>(<argument><expr><name>ALLEGRO_ALPHA_FUNCTION</name></expr></argument>, <argument><expr><name>ALLEGRO_RENDER_GREATER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_render_state</name><argument_list>(<argument><expr><name>ALLEGRO_ALPHA_TEST_VALUE</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_set_render_state</name><argument_list>(<argument><expr><name>ALLEGRO_ALPHA_TEST</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>hold_bitmap_drawing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>example</name><operator>.</operator><name>sprite_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>example</name><operator>.</operator><name>sprites</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>hold_bitmap_drawing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>show_help</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dh</name> <init>= <expr><name>fh</name> <operator>*</operator> <literal type="number">3.5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>dh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dh</name> <operator>+=</operator> <name>fh</name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"count: %d"</literal></expr></argument>,

<argument><expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"size: %d"</literal></expr></argument>,

<argument><expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fh</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>info</name><index>[<expr><name><name>example</name><operator>.</operator><name>use_memory_bitmaps</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fh</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>binfo</name><index>[<expr><name><name>example</name><operator>.</operator><name>blending</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_fps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>, <argument><expr><literal type="string">"FPS: %4d +- %-4d"</literal></expr></argument>,

<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>fh</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>, <argument><expr><literal type="string">"%4d / sec"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name><name>example</name><operator>.</operator><name>direct_speed_measure</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bitmap_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">640</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>background</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>show_help</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>hold_bitmap_drawing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitmap_filename</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>bitmap_filename</name> <operator>=</operator> <literal type="string">"data/mysha256x256.png"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init IIO addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_num_video_adapters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_monitor_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SUPPORTED_ORIENTATIONS</name></expr></argument>,

<argument><expr><name>ALLEGRO_DISPLAY_ORIENTATION_ALL</name></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>example</name><operator>.</operator><name>display</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_display_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error installing keyboard.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error installing mouse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>font</name></name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>example</name><operator>.</operator><name>font</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>mysha</name></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>bitmap_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>example</name><operator>.</operator><name>mysha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error loading %s\n"</literal></expr></argument>, <argument><expr><name>bitmap_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>white</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>half_white</name></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>dark</name></name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>red</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_size</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_sprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_sprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>FPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_touch_input_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_display_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>background</name> <operator>&amp;&amp;</operator> <name>need_redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><operator>-</operator><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>direct_speed_measure</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_UP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_sprites</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_sprites</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>change_size</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>change_size</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_F1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>show_help</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_SPACE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>use_memory_bitmaps</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_size</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>blending</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_H</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>hold_bitmap_drawing</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</name></expr>:</case>

<expr_stmt><expr><name>background</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_acknowledge_drawing_halt</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</name></expr>:</case>

<expr_stmt><expr><name>background</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_acknowledge_drawing_resume</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>:</case>

<expr_stmt><expr><call><name>al_acknowledge_resize</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>

<expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_BEGIN</name></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<goto>goto <name>click</name>;</goto>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<goto>goto <name>click</name>;</goto>

<label><name>click</name>:</label>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fh</name> <init>= <expr><call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>fh</name> <operator>*</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name>h</name> <operator>-</operator> <name>fh</name> <operator>*</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><operator>(</operator><name>y</name> <operator>-</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>fh</name> <operator>*</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>fh</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>use_memory_bitmaps</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_size</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>blending</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>blending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>fh</name> <operator>*</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_sprites</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_sprites</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>sprite_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>fh</name> <operator>*</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>example</name><operator>.</operator><name>bitmap_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>change_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>show_help</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
