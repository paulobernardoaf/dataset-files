<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_ttf.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_ttf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RANGES</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>font_file</name> <init>= <expr><literal type="string">"data/DejaVuSans.ttf"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Example</name>

<block>{

<decl_stmt><decl><type><name>double</name></type> <name>fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f4</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f_alex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ranges_count</name></decl>;</decl_stmt>

}</block> <decl><name>ex</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_ranges</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>ranges</name><index>[<expr><name>MAX_RANGES</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>al_get_font_ranges</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>MAX_RANGES</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>begin</name> <init>= <expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"range %3d: %08x-%08x (%d glyph%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><ternary><condition><expr><name>begin</name> <operator>==</operator> <name>end</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>v</name><operator>)</operator></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><name>key</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ustr_at</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>white</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>black</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>red</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>green</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>blue</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>purple</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>as</name></decl>, <decl><type ref="prev"/><name>de</name></decl>, <decl><type ref="prev"/><name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_w</name></decl>, <decl><type ref="prev"/><name>target_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>, <decl><type ref="prev"/><name>sub_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>tulip</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Tulip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>dimension_text</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Tulip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>vertical_text</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Rose."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>dimension_label</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"(dimensions)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_cp</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f1</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Tulip (kerning)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f2</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Tulip (no kerning)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">140</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>dimension_text</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>dimension_text</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbx</name></decl>, <decl><type ref="prev"/><name>bby</name></decl>, <decl><type ref="prev"/><name>bbw</name></decl>, <decl><type ref="prev"/><name>bbh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f2</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>bbx</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>bby</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>bbx</name> <operator>+</operator> <name>bbw</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>bby</name> <operator>+</operator> <name>bbh</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>bbx</name> <operator>+</operator> <name>bbw</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>bby</name> <operator>+</operator> <name>bbh</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f2</name></name></expr></argument>, <argument><expr><name>purple</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f2</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ALLEGRO_NO_KERNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><literal type="number">50.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>dimension_label</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>dimension_label</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_GLYPH</name></type> <name>g</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f2</name></name></expr></argument>, <argument><expr><name>prev_cp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap_region</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>g</name><operator>.</operator><name>kerning</name></name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>offset_x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>offset_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>g</name><operator>.</operator><name>advance</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_cp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"This font has a size of 12 pixels, "</literal>

<literal type="string">"the one above has 48 pixels."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">220</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"The color can simply be changed.ðâ fallback glyph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Some unicode symbols:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">260</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"symbols1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">280</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"symbols2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"symbols3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>al_ustr_offset(u, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>al_ref_ustr(&amp;sub_info, u, OFF(x), OFF(y))</cpp:value></cpp:define>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"substr1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SUB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"substr2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">340</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SUB</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"substr3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SUB</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><call><name>get_string</name><argument_list>(<argument><expr><literal type="string">"substr4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">380</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SUB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f5</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">395</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"forced monochrome"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">410</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Glyph adv Tu: %d, draw: "</literal></expr></argument>,

<argument><expr><call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">425</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ALLEGRO_NO_KERNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">440</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tulip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>&lt;</operator> <operator>(</operator><call><name>al_ustr_length</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then>

<expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ALLEGRO_NO_KERNING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ncp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">466</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tulip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>tulip</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbx</name></decl>, <decl><type ref="prev"/><name>bby</name></decl>, <decl><type ref="prev"/><name>bbw</name></decl>, <decl><type ref="prev"/><name>bbh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>bbx</name> <operator>+</operator> <name>bbw</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>vertical_text</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bbx</name></decl>, <decl><type ref="prev"/><name>bby</name></decl>, <decl><type ref="prev"/><name>bbw</name></decl>, <decl><type ref="prev"/><name>bbh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>vertical_text</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>bby</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>bbh</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>vertical_text</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bbx</name></decl>, <decl><type ref="prev"/><name>bby</name></decl>, <decl><type ref="prev"/><name>bbw</name></decl>, <decl><type ref="prev"/><name>bbh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name>ustr_at</name><argument_list>(<argument><expr><name>vertical_text</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>bbh</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target_w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target_h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xpos</name> <operator>=</operator> <name>target_w</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ypos</name> <operator>=</operator> <name>target_h</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_text_dimensions</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f4</name></name></expr></argument>, <argument><expr><literal type="string">"Allegro"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <call><name>al_get_font_ascent</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>al_get_font_descent</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xpos</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ypos</name> <operator>-=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>xpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>ypos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>as</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>as</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>as</name> <operator>+</operator> <name>de</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>as</name> <operator>+</operator> <name>de</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f4</name></name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>xpos</name></expr></argument>, <argument><expr><name>ypos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Allegro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>target_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>,

<argument><expr><literal type="string">"%.1f FPS"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>fps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s: %d unicode ranges"</literal></expr></argument>, <argument><expr><name>font_file</name></expr></argument>,

<argument><expr><name><name>ex</name><operator>.</operator><name>ranges_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>redraw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log_monospace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_ttf_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not create display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>font_file</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>f1</name></name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><name>font_file</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>f2</name></name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><name>font_file</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>ALLEGRO_TTF_NO_KERNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>f3</name></name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><name>font_file</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>f4</name></name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><name>font_file</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>f5</name></name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><name>font_file</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>ALLEGRO_TTF_MONOCHROME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>ranges</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1F40A</literal></expr>, <expr><literal type="number">0x1F40A</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>icon</name> <init>= <expr><call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/icon.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icon</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't load data/icon.png.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>glyph</name> <init>= <expr><call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">49.5</literal></expr></argument>, <argument><expr><literal type="number">49.5</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>f_alex</name></name> <operator>=</operator> <call><name>al_grab_font_from_bitmap</name><argument_list>(<argument><expr><name>glyph</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>f1</name></name> <operator>||</operator> <operator>!</operator><name><name>ex</name><operator>.</operator><name>f2</name></name> <operator>||</operator> <operator>!</operator><name><name>ex</name><operator>.</operator><name>f3</name></name> <operator>||</operator> <operator>!</operator><name><name>ex</name><operator>.</operator><name>f4</name></name> <operator>||</operator> <operator>!</operator><name><name>ex</name><operator>.</operator><name>f_alex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not load font: %s\n"</literal></expr></argument>, <argument><expr><name>font_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_fallback_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>f_alex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>ranges_count</name></name> <operator>=</operator> <call><name>al_get_font_ranges</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_ranges</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><literal type="string">"data/ex_ttf.ini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>config</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not data/ex_ttf.ini\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name> <operator>&amp;&amp;</operator>

<name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>redraw</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>dt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>redraw</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>dt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0.99</literal> <operator>*</operator> <name>t</name> <operator>+</operator> <literal type="number">0.01</literal> <operator>*</operator> <name>dt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>fps</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>f5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
