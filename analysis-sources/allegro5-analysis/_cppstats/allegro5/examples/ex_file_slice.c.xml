<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_file_slice.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_object</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_fwrite32le</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>get_next_chunk</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>length</name> <init>= <expr><call><name>al_fread32le</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>al_fopen_slice</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="string">"rw"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>master</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>tmp_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first_string</name> <init>= <expr><literal type="string">"Hello, World!"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second_string</name> <init>= <expr><literal type="string">"The quick brown fox jumps over the lazy dog."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>argc</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>al_make_temp_file</name><argument_list>(<argument><expr><literal type="string">"ex_file_slice_XXXX"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>master</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to create temporary file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pack_object</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>first_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>first_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_object</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>second_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>second_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fseek</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>slice</name> <operator>=</operator> <call><name>get_next_chunk</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_fsize</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_fread</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>al_fsize</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><call><name>al_fsize</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Chunk of size %d: '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>al_fsize</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_remove_filename</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
