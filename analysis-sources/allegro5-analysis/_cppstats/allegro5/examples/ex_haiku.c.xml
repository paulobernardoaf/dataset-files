<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_haiku.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_audio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_acodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>PI</name> <init>= <expr><name>ALLEGRO_PI</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>TWOPI</name> <init>= <expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>TYPE_EARTH</name></decl>,

<decl><name>TYPE_WIND</name></decl>,

<decl><name>TYPE_WATER</name></decl>,

<decl><name>TYPE_FIRE</name></decl>,

<decl><name>NUM_TYPES</name></decl>,

<decl><name>TYPE_NONE</name> <init>= <expr><name>NUM_TYPES</name></expr></init></decl>

}</block>;</enum>

<enum>enum <block>{

<decl><name>IMG_EARTH</name> <init>= <expr><name>TYPE_EARTH</name></expr></init></decl>,

<decl><name>IMG_WIND</name> <init>= <expr><name>TYPE_WIND</name></expr></init></decl>,

<decl><name>IMG_WATER</name> <init>= <expr><name>TYPE_WATER</name></expr></init></decl>,

<decl><name>IMG_FIRE</name> <init>= <expr><name>TYPE_FIRE</name></expr></init></decl>,

<decl><name>IMG_BLACK</name></decl>,

<decl><name>IMG_DROPSHADOW</name></decl>,

<decl><name>IMG_GLOW</name></decl>,

<decl><name>IMG_GLOW_OVERLAY</name></decl>,

<decl><name>IMG_AIR_EFFECT</name></decl>,

<decl><name>IMG_WATER_DROPS</name></decl>,

<decl><name>IMG_FLAME</name></decl>,

<decl><name>IMG_MAIN_FLAME</name></decl>,

<decl><name>IMG_MAX</name></decl>

}</block>;</enum>

<typedef>typedef <type><enum>enum <block>{

<decl><name>INTERP_LINEAR</name></decl>,

<decl><name>INTERP_FAST</name></decl>,

<decl><name>INTERP_DOUBLE_FAST</name></decl>,

<decl><name>INTERP_SLOW</name></decl>,

<decl><name>INTERP_DOUBLE_SLOW</name></decl>,

<decl><name>INTERP_SLOW_IN_OUT</name></decl>,

<decl><name>INTERP_BOUNCE</name></decl>

}</block></enum></type> <name>Interp</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Anim</name></name></type> <name>Anim</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Token</name></name></type> <name>Token</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Flair</name></name></type> <name>Flair</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Sprite</name></name></type> <name>Sprite</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ANIMS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>Anim</name> <block>{

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lval</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>start_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>end_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Interp</name></type> <name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>end_time</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>Sprite</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>image</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>scale_x</name></decl>, <decl><type ref="prev"/><name>align_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>scale_y</name></decl>, <decl><type ref="prev"/><name>align_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>opacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Anim</name></type> <name><name>anims</name><index>[<expr><name>MAX_ANIMS</name></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>Token</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Sprite</name></type> <name>bot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name></type> <name>top</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>Flair</name> <block>{

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>end_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name></type> <name>sprite</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <block>{

<decl><name>NUM_PITCH</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>TOKENS_X</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>TOKENS_Y</name> <init>= <expr><name>NUM_PITCH</name></expr></init></decl>,

<decl><name>NUM_TOKENS</name> <init>= <expr><name>TOKENS_X</name> <operator>*</operator> <name>TOKENS_Y</name></expr></init></decl>,

}</block>;</enum>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>refresh_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>playback_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>images</name><index>[<expr><name>IMG_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name><name>element_samples</name><index>[<expr><name>NUM_TYPES</name></expr>]</index><index>[<expr><name>NUM_PITCH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>select_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Token</name></type> <name><name>tokens</name><index>[<expr><name>NUM_TOKENS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Token</name></type> <name><name>buttons</name><index>[<expr><name>NUM_TYPES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name></type> <name>glow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name></type> <name>glow_overlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name><name>glow_color</name><index>[<expr><name>NUM_TYPES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>flairs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>hover_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>selected_button</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>playback_column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screen_w</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screen_h</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>game_board_x</name> <init>= <expr><literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>token_size</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>token_scale</name> <init>= <expr><literal type="number">0.8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>button_size</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>button_unsel_scale</name> <init>= <expr><literal type="number">0.8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>button_sel_scale</name> <init>= <expr><literal type="number">1.1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>dropshadow_unsel_scale</name> <init>= <expr><literal type="number">0.6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>dropshadow_sel_scale</name> <init>= <expr><literal type="number">0.9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>refresh_rate</name> <init>= <expr><literal type="number">60.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>playback_period</name> <init>= <expr><literal type="number">2.7333</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAIKU_DATA</name></cpp:macro> <cpp:value>"data/haiku/"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_images</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_EARTH</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"earth4.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_WIND</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"wind3.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_WATER</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"water.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_FIRE</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"fire.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_BLACK</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"black_bead_opaque_A.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_DROPSHADOW</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"dropshadow.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_AIR_EFFECT</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"air_effect.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_WATER_DROPS</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"water_droplets.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_FLAME</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"flame2.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_MAIN_FLAME</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"main_flame2.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_GLOW</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"healthy_glow.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>images</name><index>[<expr><name>IMG_GLOW_OVERLAY</name></expr>]</index></name><operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"overlay_pretty.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IMG_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>images</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error loading image.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_samples</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>base</name><index>[<expr><name>NUM_TYPES</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"earth"</literal></expr>, <expr><literal type="string">"air"</literal></expr>, <expr><literal type="string">"water"</literal></expr>, <expr><literal type="string">"fire"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>NUM_TYPES</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>NUM_PITCH</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>HAIKU_DATA</name> <literal type="string">"%s_%d.ogg"</literal></expr></argument>, <argument><expr><name><name>base</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>element_samples</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>al_load_sample</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>element_samples</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error loading %s.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>select_sample</name> <operator>=</operator> <call><name>al_load_sample</name><argument_list>(<argument><expr><name>HAIKU_DATA</name> <literal type="string">"select.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>select_sample</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error loading select.ogg.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_sprite</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>image</name></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name> <operator>=</operator> <name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>align_x</name></name> <operator>=</operator> <name><name>spr</name><operator>-&gt;</operator><name>align_y</name></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>spr</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>spr</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name> <operator>=</operator> <name>opacity</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ANIMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>anims</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_tokens</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>token_w</name> <init>= <expr><name>token_size</name> <operator>*</operator> <name>token_scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>token_x</name> <init>= <expr><name>game_board_x</name> <operator>+</operator> <name>token_w</name><operator>/</operator><literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>token_y</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TOKENS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><name>i</name> <operator>%</operator> <name>TOKENS_X</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ty</name> <init>= <expr><name>i</name> <operator>/</operator> <name>TOKENS_X</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>px</name> <init>= <expr><name>token_x</name> <operator>+</operator> <name>tx</name> <operator>*</operator> <name>token_w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>py</name> <init>= <expr><name>token_y</name> <operator>+</operator> <name>ty</name> <operator>*</operator> <name>token_w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>py</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>=</operator> <name>NUM_PITCH</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ty</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>&lt;</operator> <name>NUM_PITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bot</name></expr></argument>, <argument><expr><name>IMG_BLACK</name></expr></argument>, <argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>token_scale</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>top</name></expr></argument>, <argument><expr><name>IMG_BLACK</name></expr></argument>, <argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>token_scale</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_buttons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>dist</name><index>[<expr><name>NUM_TYPES</name></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1.5</literal></expr>, <expr><operator>-</operator><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>screen_w</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">150</literal> <operator>*</operator> <name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>screen_h</name> <operator>-</operator> <literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bot</name></expr></argument>, <argument><expr><name>IMG_DROPSHADOW</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>dropshadow_unsel_scale</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bot</name><operator>.</operator><name>align_y</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>top</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>button_unsel_scale</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_glow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow</name></expr></argument>, <argument><expr><name>IMG_GLOW</name></expr></argument>, <argument><expr><name>screen_w</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screen_h</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glow</name><operator>.</operator><name>align_y</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glow</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>glow</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>glow</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow_overlay</name></expr></argument>, <argument><expr><name>IMG_GLOW_OVERLAY</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glow_overlay</name><operator>.</operator><name>align_x</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glow_overlay</name><operator>.</operator><name>align_y</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glow_overlay</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>glow_overlay</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>glow_overlay</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glow_color</name><index>[<expr><name>TYPE_EARTH</name></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0x6b</literal></expr></argument>, <argument><expr><literal type="number">0x8e</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>glow_color</name><index>[<expr><name>TYPE_WIND</name></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0xad</literal></expr></argument>, <argument><expr><literal type="number">0xd8</literal></expr></argument>, <argument><expr><literal type="number">0xe6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>glow_color</name><index>[<expr><name>TYPE_WATER</name></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><literal type="number">0xe1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>glow_color</name><index>[<expr><name>TYPE_FIRE</name></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sprite</name> <modifier>*</modifier></type><name>make_flair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>fl</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>fl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fl</name><operator>-&gt;</operator><name>sprite</name></name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fl</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name>end_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>flairs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flairs</name> <operator>=</operator> <name>fl</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>fl</name><operator>-&gt;</operator><name>sprite</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_old_flairs</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>fl</name> <operator>=</operator> <name>flairs</name></expr>;</init> <condition><expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fl</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>fl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fl</name><operator>-&gt;</operator><name>end_time</name></name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>fl</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flairs</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all_flairs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>flairs</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>flairs</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>flairs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Anim</name> <modifier>*</modifier></type><name>get_next_anim</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>Anim</name></type> <name>dummy_anim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ANIMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spr</name><operator>-&gt;</operator><name>anims</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>anims</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>dummy_anim</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_conflicting_anims</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lval</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_time</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>start_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ANIMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Anim</name> <modifier>*</modifier></type><name>anim</name> <init>= <expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>anims</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anim</name><operator>-&gt;</operator><name>lval</name></name> <operator>!=</operator> <name>lval</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anim</name><operator>-&gt;</operator><name>end_time</name></name> <operator>&gt;</operator> <name>start_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name>start_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>end_val</name></name> <operator>=</operator> <name>start_val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anim</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&gt;=</operator> <name>start_time</name> <operator>||</operator>

<name><name>anim</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&gt;=</operator> <name><name>anim</name><operator>-&gt;</operator><name>end_time</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>anims</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anim_full</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lval</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_val</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end_val</name></decl></parameter>,

<parameter><decl><type><name>Interp</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Anim</name> <modifier>*</modifier></type><name>anim</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fix_conflicting_anims</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>start_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anim</name> <operator>=</operator> <call><name>get_next_anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>lval</name></name> <operator>=</operator> <name>lval</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>start_val</name></name> <operator>=</operator> <name>start_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>end_val</name></name> <operator>=</operator> <name>end_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>start_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name>start_time</name> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anim</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lval</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>start_val</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end_val</name></decl></parameter>,

<parameter><decl><type><name>Interp</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>start_val</name></expr></argument>, <argument><expr><name>end_val</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anim_to</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lval</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>end_val</name></decl></parameter>,

<parameter><decl><type><name>Interp</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><operator>*</operator><name>lval</name></expr></argument>, <argument><expr><name>end_val</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anim_delta</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lval</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>,

<parameter><decl><type><name>Interp</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><operator>*</operator><name>lval</name></expr></argument>, <argument><expr><operator>*</operator><name>lval</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anim_tint</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>Interp</name></type> <name>func</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_unmap_rgb_f</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>interpolate</name><parameter_list>(<parameter><decl><type><name>Interp</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INTERP_LINEAR</name></expr>:</case>

<return>return <expr><name>t</name></expr>;</return>

<case>case <expr><name>INTERP_FAST</name></expr>:</case>

<return>return <expr><operator>-</operator><name>t</name><operator>*</operator><operator>(</operator><name>t</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>INTERP_DOUBLE_FAST</name></expr>:</case>

<expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

<case>case <expr><name>INTERP_SLOW</name></expr>:</case>

<return>return <expr><name>t</name><operator>*</operator><name>t</name></expr>;</return>

<case>case <expr><name>INTERP_DOUBLE_SLOW</name></expr>:</case>

<return>return <expr><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name></expr>;</return>

<case>case <expr><name>INTERP_SLOW_IN_OUT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>/=</operator> <name>d</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <name>t</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>b</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><name>c</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>t</name><operator>*</operator><operator>(</operator><name>t</name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<case>case <expr><name>INTERP_BOUNCE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">7.5625</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <operator>(</operator><literal type="number">1.5</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">7.5625</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">0.75</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2.5</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <operator>(</operator><literal type="number">2.25</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">7.5625</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">0.9375</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <operator>(</operator><literal type="number">2.625</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">7.5625</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">0.984375</literal><operator>)</operator></expr>;</return>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_anim</name><parameter_list>(<parameter><decl><type><name>Anim</name> <modifier>*</modifier></type><name>anim</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>dt</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>range</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>anim</name><operator>-&gt;</operator><name>lval</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name><name>anim</name><operator>-&gt;</operator><name>start_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>anim</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>dt</name> <operator>/</operator> <operator>(</operator><name><name>anim</name><operator>-&gt;</operator><name>end_time</name></name> <operator>-</operator> <name><name>anim</name><operator>-&gt;</operator><name>start_time</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>anim</name><operator>-&gt;</operator><name>lval</name></name> <operator>=</operator> <name><name>anim</name><operator>-&gt;</operator><name>end_val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anim</name><operator>-&gt;</operator><name>lval</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>anim</name><operator>-&gt;</operator><name>end_val</name></name> <operator>-</operator> <name><name>anim</name><operator>-&gt;</operator><name>start_val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>anim</name><operator>-&gt;</operator><name>lval</name></name> <operator>=</operator> <name><name>anim</name><operator>-&gt;</operator><name>start_val</name></name> <operator>+</operator> <call><name>interpolate</name><argument_list>(<argument><expr><name><name>anim</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>range</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sprite_anims</name><parameter_list>(<parameter><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ANIMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_anim</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>anims</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_token_anims</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>update_sprite_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_sprite_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_anims</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>fl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TOKENS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_token_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_token_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>update_sprite_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_sprite_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow_overlay</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>fl</name> <operator>=</operator> <name>flairs</name></expr>;</init> <condition><expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fl</name> <operator>=</operator> <name><name>fl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_sprite_anims</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fl</name><operator>-&gt;</operator><name>sprite</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_sprite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <name><name>images</name><index>[<expr><name><name>spr</name><operator>-&gt;</operator><name>image</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>spr</name><operator>-&gt;</operator><name>align_x</name></name> <operator>*</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>spr</name><operator>-&gt;</operator><name>align_y</name></name> <operator>*</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><name><name>spr</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_tinted_scaled_rotated_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>,

<argument><expr><name><name>spr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>draw_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Flair</name> <modifier>*</modifier></type><name>fl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ALPHA</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow_overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TOKENS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ALPHA</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>fl</name> <operator>=</operator> <name>flairs</name></expr>;</init> <condition><expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fl</name> <operator>=</operator> <name><name>fl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_sprite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fl</name><operator>-&gt;</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spawn_wind_effects</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>make_flair</name><argument_list>(<argument><expr><name>IMG_AIR_EFFECT</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>make_flair</name><argument_list>(<argument><expr><name>IMG_AIR_EFFECT</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_LINEAR</name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_delta</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spawn_fire_effects</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>make_flair</name><argument_list>(<argument><expr><name>IMG_MAIN_FLAME</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">0.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>align_y</name></name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>, <argument><expr><literal type="number">1.4</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><literal type="number">1.3</literal></expr></argument>, <argument><expr><literal type="number">1.4</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>make_flair</name><argument_list>(<argument><expr><name>IMG_FLAME</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>align_x</name></name> <operator>=</operator> <literal type="number">1.3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <name>TWOPI</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_delta</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>, <argument><expr><operator>-</operator><name>PI</name></expr></argument>, <argument><expr><name>INTERP_DOUBLE_FAST</name></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>random_sign</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>random_float</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>/</operator><name>RAND_MAX</name><operator>)</operator><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name>min</name><operator>)</operator> <operator>+</operator> <name>min</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spawn_water_effects</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(random_float((a), (b)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRAND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(random_float((a), (b)) * max_duration)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN</name></cpp:macro> <cpp:value>(random_sign())</cpp:value></cpp:define>

<decl_stmt><decl><type><name>float</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max_duration</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>make_flair</name><argument_list>(<argument><expr><name>IMG_WATER</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <name>max_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <call><name>make_flair</name><argument_list>(<argument><expr><name>IMG_WATER_DROPS</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <name>max_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name> <operator>=</operator> <call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>SIGN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name> <operator>=</operator> <call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">1.2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>SIGN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>TWOPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_LINEAR</name></expr></argument>, <argument><expr><name>max_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_DOUBLE_SLOW</name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><call><name>RAND</name><argument_list>(<argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_delta</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call><operator>*</operator><name>SIGN</name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_delta</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call><operator>*</operator><name>SIGN</name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><call><name>MRAND</name><argument_list>(<argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RAND</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MRAND</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIGN</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>play_element</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pan</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name><name>element_samples</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>vol</name></expr></argument>, <argument><expr><name>pan</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,

<argument><expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>activate_token</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>sc</name> <init>= <expr><name>token_scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name> <init>= <expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_EARTH</name></expr>:</case>

<expr_stmt><expr><call><name>play_element</name><argument_list>(<argument><expr><name>TYPE_EARTH</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name><operator>+</operator><literal type="number">0.4</literal></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name><operator>+</operator><literal type="number">0.4</literal></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_WIND</name></expr>:</case>

<expr_stmt><expr><call><name>play_element</name><argument_list>(<argument><expr><name>TYPE_WIND</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spawn_wind_effects</name><argument_list>(<argument><expr><name><name>spr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_WATER</name></expr>:</case>

<expr_stmt><expr><call><name>play_element</name><argument_list>(<argument><expr><name>TYPE_WATER</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">0.8</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_BOUNCE</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spawn_water_effects</name><argument_list>(<argument><expr><name><name>spr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_FIRE</name></expr>:</case>

<expr_stmt><expr><call><name>play_element</name><argument_list>(<argument><expr><name>TYPE_FIRE</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>sc</name><operator>*</operator><literal type="number">1.3</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spawn_fire_effects</name><argument_list>(<argument><expr><name><name>spr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_playback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>TOKENS_Y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>activate_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>y</name> <operator>*</operator> <name>TOKENS_X</name> <operator>+</operator> <name>playback_column</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>playback_column</name> <operator>&gt;=</operator> <name>TOKENS_X</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>playback_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_touched</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>half</name> <init>= <expr><name>size</name><operator>/</operator><literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>half</name> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name><name>token</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>half</name>

<operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name>half</name> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>token</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>half</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Token</name> <modifier>*</modifier></type><name>get_touched_token</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TOKENS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_touched</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token_size</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Token</name> <modifier>*</modifier></type><name>get_touched_button</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_touched</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>button_size</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unselect_token</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name> <init>= <expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>anim_full</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>INTERP_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.15</literal></expr></argument>, <argument><expr><literal type="number">0.15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unselect_all_tokens</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TOKENS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unselect_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>select_token</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>prev_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>selected_button</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_type</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unselect_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_type</name> <operator>!=</operator> <name><name>selected_button</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name> <init>= <expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spr</name><operator>-&gt;</operator><name>image</name></name> <operator>=</operator> <name><name>selected_button</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>selected_button</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>change_healthy_glow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>anim_tint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow</name></expr></argument>, <argument><expr><name><name>glow_color</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glow</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_tint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow_overlay</name></expr></argument>, <argument><expr><name><name>glow_color</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glow_overlay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glow_overlay</name><operator>.</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_SLOW_IN_OUT</name></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>select_button</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>button</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>selected_button</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selected_button</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <operator>&amp;</operator><name><name>selected_button</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>button_unsel_scale</name></expr></argument>, <argument><expr><name>INTERP_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>button_unsel_scale</name></expr></argument>, <argument><expr><name>INTERP_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>INTERP_DOUBLE_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <operator>&amp;</operator><name><name>selected_button</name><operator>-&gt;</operator><name>bot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>dropshadow_unsel_scale</name></expr></argument>, <argument><expr><name>INTERP_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>dropshadow_unsel_scale</name></expr></argument>, <argument><expr><name>INTERP_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>selected_button</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <operator>&amp;</operator><name><name>button</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>button_sel_scale</name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>button_sel_scale</name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spr</name> <operator>=</operator> <operator>&amp;</operator><name><name>button</name><operator>-&gt;</operator><name>bot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_x</name></name></expr></argument>, <argument><expr><name>dropshadow_sel_scale</name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>scale_y</name></name></expr></argument>, <argument><expr><name>dropshadow_sel_scale</name></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_healthy_glow</name><argument_list>(<argument><expr><name><name>button</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>button</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name>select_sample</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_mouse_down</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mbut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>button</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mbut</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <call><name>get_touched_token</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>select_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>button</name> <operator>=</operator> <call><name>get_touched_button</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>select_button</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>mbut</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <call><name>get_touched_token</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unselect_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_mouse_axes</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>get_touched_token</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>hover_token</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hover_token</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name> <init>= <expr><operator>&amp;</operator><name><name>hover_token</name><operator>-&gt;</operator><name>bot</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><name>INTERP_DOUBLE_SLOW</name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hover_token</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hover_token</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>spr</name> <init>= <expr><operator>&amp;</operator><name><name>hover_token</name><operator>-&gt;</operator><name>bot</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>anim_to</name><argument_list>(<argument><expr><name>spr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spr</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><name>INTERP_FAST</name></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_old_flairs</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_anims</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>timer</name><operator>.</operator><name>source</name></name> <operator>==</operator> <name>refresh_timer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>timer</name><operator>.</operator><name>source</name></name> <operator>==</operator> <name>playback_timer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_playback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>on_mouse_axes</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>on_mouse_down</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_C</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unselect_all_tokens</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error initialising Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_audio</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>al_reserve_samples</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error initialising audio.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_acodec_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MIN_LINEAR</name> <operator>|</operator> <name>ALLEGRO_MAG_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>screen_w</name></expr></argument>, <argument><expr><name>screen_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_window_title</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="string">"Haiku - A Musical Instrument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_images</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_samples</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_tokens</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_buttons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_glow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>select_button</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buttons</name><index>[<expr><name>TYPE_EARTH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>refresh_timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>refresh_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>playback_timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><name>playback_period</name> <operator>/</operator> <name>TOKENS_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>refresh_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>playback_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_is_touch_input_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,

<argument><expr><call><name>al_get_touch_input_mouse_emulation_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>refresh_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>playback_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>main_loop</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_all_flairs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
