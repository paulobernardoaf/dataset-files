<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_joystick_events.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AXES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STICKS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUTTONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>event_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>black</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>grey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_sticks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_buttons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>num_axes</name><index>[<expr><name>MAX_STICKS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>joys</name><index>[<expr><name>MAX_STICKS</name></expr>]</index><index>[<expr><name>MAX_AXES</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>joys_buttons</name><index>[<expr><name>MAX_BUTTONS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_joystick_values</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_STATE</name></type> <name>jst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_sticks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_buttons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_get_joystick_state</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_sticks</name> <operator>=</operator> <call><name>al_get_joystick_num_sticks</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_sticks</name> <operator>&gt;</operator> <name>MAX_STICKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_sticks</name> <operator>=</operator> <name>MAX_STICKS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_sticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>num_axes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_get_joystick_num_axes</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>num_axes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>joys</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>jst</name><operator>.</operator><name>stick</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>axis</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>num_buttons</name> <operator>=</operator> <call><name>al_get_joystick_num_buttons</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_buttons</name> <operator>&gt;</operator> <name>MAX_BUTTONS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_buttons</name> <operator>=</operator> <name>MAX_BUTTONS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_buttons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>joys_buttons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>jst</name><operator>.</operator><name>button</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">16384</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_joystick_axes</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stick</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>csize</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>osize</name> <init>= <expr><name>size</name> <operator>+</operator> <name>csize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zx</name> <init>= <expr><name>cx</name> <operator>+</operator> <name>osize</name> <operator>+</operator> <name>csize</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>cx</name> <operator>+</operator> <name><name>joys</name><index>[<expr><name>stick</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>cy</name> <operator>+</operator> <name><name>joys</name><index>[<expr><name>stick</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>cy</name> <operator>+</operator> <name><name>joys</name><index>[<expr><name>stick</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>cx</name><operator>-</operator><name>osize</name></expr></argument>, <argument><expr><name>cy</name><operator>-</operator><name>osize</name></expr></argument>, <argument><expr><name>cx</name><operator>+</operator><name>osize</name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name>osize</name></expr></argument>, <argument><expr><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>cx</name><operator>-</operator><name>osize</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>cy</name><operator>-</operator><name>osize</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>cx</name><operator>+</operator><name>osize</name><operator>-</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name>osize</name><operator>-</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>num_axes</name><index>[<expr><name>stick</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>zx</name><operator>-</operator><name>csize</name></expr></argument>, <argument><expr><name>cy</name><operator>-</operator><name>osize</name></expr></argument>, <argument><expr><name>zx</name><operator>+</operator><name>csize</name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name>osize</name></expr></argument>, <argument><expr><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>zx</name><operator>-</operator><name>csize</name><operator>+</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>cy</name><operator>-</operator><name>osize</name><operator>+</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>zx</name><operator>+</operator><name>csize</name><operator>-</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name>osize</name><operator>-</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>zx</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>zx</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name> <operator>+</operator> <name>osize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>,

<argument><expr><call><name>al_get_joystick_stick_name</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>num_axes</name><index>[<expr><name>stick</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name> <operator>+</operator> <name>osize</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr></argument>,

<argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>,

<argument><expr><call><name>al_get_joystick_axis_name</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>stick</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_joystick_button</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>down</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">120</literal> <operator>+</operator> <operator>(</operator><name>button</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">120</literal> <operator>+</operator> <operator>(</operator><name>button</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>fg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">24.5</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">24.5</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>down</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">23</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">23</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>white</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>black</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>al_get_joystick_button_name</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_all</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>,

<argument><expr><literal type="string">"Joystick: %s"</literal></expr></argument>, <argument><expr><call><name>al_get_joystick_name</name><argument_list>(<argument><expr><name>joy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_sticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name>i</name><operator>%</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>i</name><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><operator>(</operator><name>u</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name>width</name><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name>height</name><operator>/</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_joystick_axes</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_buttons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>draw_joystick_button</name><argument_list>(<argument><expr><name>joy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>joys_buttons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_loop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_all</name><argument_list>(<argument><expr><call><name>al_get_joystick</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>&lt;</operator> <name>MAX_STICKS</name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>&lt;</operator> <name>MAX_AXES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>joys</name><index>[<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name></expr>]</index><index>[<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</name></expr>:</case>

<expr_stmt><expr><name><name>joys_buttons</name><index>[<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</name></expr>:</case>

<expr_stmt><expr><name><name>joys_buttons</name><index>[<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>

<return>return;</return>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_CONFIGURATION</name></expr>:</case>

<expr_stmt><expr><call><name>al_reconfigure_joysticks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_joystick_values</name><argument_list>(<argument><expr><call><name>al_get_joystick</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_create_display failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>black</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>grey</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>white</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_joystick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event_queue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_create_event_queue failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_joystick_values</name><argument_list>(<argument><expr><call><name>al_get_joystick</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>main_loop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
