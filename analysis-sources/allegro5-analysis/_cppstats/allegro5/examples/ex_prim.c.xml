<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\examples\ex_prim.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Screen</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>int</name></type> <name>ScreenW</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>, <decl><type ref="prev"/><name>ScreenH</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SCREENS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_SPEED</name></cpp:macro> <cpp:value>0.0001f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Screen</name></type> <name><name>Screens</name><index>[<expr><name>NUM_SCREENS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ScreenName</name><index>[<expr><name>NUM_SCREENS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>Font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>Identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>Buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>Texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>solid_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Soft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Blend</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>Speed</name> <init>= <expr><name>ROTATE_SPEED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>Theta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Background</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>Thickness</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>MainTrans</name></decl>;</decl_stmt>

<enum>enum <name>MODE</name> <block>{

<decl><name>INIT</name></decl>,

<decl><name>LOGIC</name></decl>,

<decl><name>DRAW</name></decl>,

<decl><name>DEINIT</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>u</name></decl>, <name>v</name>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>junk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>CUSTOM_VERTEX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CustomVertexFormatPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>CUSTOM_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_ELEMENT</name></type> <name><name>elems</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>ALLEGRO_PRIM_POSITION</name></expr>, <expr><name>ALLEGRO_PRIM_SHORT_2</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>CUSTOM_VERTEX</argument>, <argument>x</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_PRIM_TEX_COORD_PIXEL</name></expr>, <expr><name>ALLEGRO_PRIM_SHORT_2</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>CUSTOM_VERTEX</argument>, <argument>u</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>ALLEGRO_PRIM_COLOR_ATTR</name></expr>, <expr><literal type="number">0</literal></expr>, <macro><name>offsetof</name><argument_list>(<argument>CUSTOM_VERTEX</argument>, <argument>color</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <call><name>al_create_vertex_decl</name><argument_list>(<argument><expr><name>elems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CUSTOM_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">4.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">4.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TexturePrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ii</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilledTexturePrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">150</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">150</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ii</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Texture</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilledPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">150</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">150</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IndexedFilledPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>indices1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>indices2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>indices3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">150</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">150</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>indices1</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">20</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indices2</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ii</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>%</operator> <literal type="number">20</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>indices3</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ii</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator> <operator>%</operator> <literal type="number">20</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HighPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>points</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">300</literal></expr>, <expr><operator>-</operator><literal type="number">200</literal></expr>,

<expr><literal type="number">700</literal></expr>, <expr><literal type="number">200</literal></expr>,

<expr><operator>-</operator><literal type="number">700</literal></expr>, <expr><literal type="number">200</literal></expr>,

<expr><literal type="number">300</literal></expr>, <expr><operator>-</operator><literal type="number">200</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">300</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_triangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">150</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">300</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rounded_rectangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">200</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ellipse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_elliptical_arc</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_arc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_spline</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_pieslice</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HighFilledPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_triangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_ellipse</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_rounded_rectangle</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">350</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">75</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_pieslice</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TransformationsPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>t</name> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>t</name> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>points</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">300</literal></expr>, <expr><operator>-</operator><literal type="number">200</literal></expr>,

<expr><literal type="number">700</literal></expr>, <expr><literal type="number">200</literal></expr>,

<expr><operator>-</operator><literal type="number">700</literal></expr>, <expr><literal type="number">200</literal></expr>,

<expr><literal type="number">300</literal></expr>, <expr><operator>-</operator><literal type="number">200</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">300</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_triangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">150</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">300</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rounded_rectangle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">200</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ellipse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_elliptical_arc</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_arc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_spline</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.2</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_pieslice</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LowPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtx2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IndexedPrimitives</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>indices1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>indices2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>indices3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>indices1</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indices2</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ii</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>%</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>indices3</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>+</operator> <name>ii</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>%</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_prim</name><argument_list>(<argument><expr><name>vtx2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indices3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VertexBuffers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX</name></type> <name><name>vtx2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vbuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vbuff2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>no_soft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>no_soft2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx2</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vbuff</name> <operator>=</operator> <call><name>al_create_vertex_buffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_BUFFER_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vbuff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vbuff</name> <operator>=</operator> <call><name>al_create_vertex_buffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_soft</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>no_soft</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vbuff2</name> <operator>=</operator> <call><name>al_create_vertex_buffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vtx2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_BUFFER_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vbuff2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vbuff2</name> <operator>=</operator> <call><name>al_create_vertex_buffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vtx2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_soft2</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>no_soft2</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vbuff</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>Soft</name> <operator>&amp;&amp;</operator> <name>no_soft</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Vertex buffers not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vbuff2</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>Soft</name> <operator>&amp;&amp;</operator> <name>no_soft2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Vertex buffers not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DEINIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IndexedBuffers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vbuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>ibuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>soft</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>INIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type> <name>vtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>ALLEGRO_PRIM_BUFFER_READWRITE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vbuff</name> <operator>=</operator> <call><name>al_create_vertex_buffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_BUFFER_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vbuff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vbuff</name> <operator>=</operator> <call><name>al_create_vertex_buffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>soft</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ibuff</name> <operator>=</operator> <call><name>al_create_index_buffer</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vbuff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vtx</name> <operator>=</operator> <call><name>al_lock_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>ii</name> <operator>/</operator> <literal type="number">13.0f</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtx</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LOGIC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ibuff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name><modifier>*</modifier></type> <name>indices</name> <init>= <expr><call><name>al_lock_index_buffer</name><argument_list>(<argument><expr><name>ibuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>ii</name><operator>)</operator> <operator>%</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_index_buffer</name><argument_list>(<argument><expr><name>ibuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Theta</name> <operator>+=</operator> <name>Speed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DRAW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Blend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MainTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>Soft</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>soft</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>vbuff</name> <operator>&amp;&amp;</operator> <name>ibuff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_indexed_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ibuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_indexed_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ibuff</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Indexed buffers not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>DEINIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_vertex_buffer</name><argument_list>(<argument><expr><name>vbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_index_buffer</name><argument_list>(<argument><expr><name>ibuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>bkg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>black</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_shader</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--shader"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_shader</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Invalid command line option: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_shader</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>ScreenW</name></expr></argument>, <argument><expr><name>ScreenH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error installing keyboard.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error installing mouse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/fixed_font.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error loading \"data/fixed_font.tga\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>solid_white</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bkg</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/bkg.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Texture</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/texture.tga"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>black</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_window_title</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="string">"Primitives Example"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>refresh_rate</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frames_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>time_diff</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fixed_timestep</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>refresh_rate</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>real_time</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>game_time</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_screen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>timer_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><call><name>ALLEGRO_BPS_TO_SECS</name><argument_list>(<argument><expr><name>refresh_rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer_queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>timer_queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>al_get_new_bitmap_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Buffer</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>ScreenW</name></expr></argument>, <argument><expr><name>ScreenH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LowPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>IndexedPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>HighPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>TransformationsPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>FilledPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>IndexedFilledPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>HighFilledPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>TexturePrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>FilledTexturePrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>CustomVertexFormatPrimitives</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>VertexBuffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>IndexedBuffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Low Level Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Indexed Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"High Level Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Transformations"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Low Level Filled Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Indexed Filled Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"High Level Filled Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Textured Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Filled Textured Primitives"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Custom Vertex Format"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Vertex Buffers"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenName</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Indexed Buffers"</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>NUM_SCREENS</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><name>ii</name></expr>]</index></name><operator>(</operator><name>INIT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><name>ii</name></expr>]</index></name><operator>(</operator><name>LOGIC</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>frame_duration</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>real_time</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><name>fixed_timestep</name> <operator>-</operator> <name>frame_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>real_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>real_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>real_time</name> <operator>-</operator> <name>game_time</name> <operator>&gt;</operator> <name>frame_duration</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>game_time</name> <operator>+=</operator> <name>fixed_timestep</name> <operator>*</operator> <call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><name>real_time</name> <operator>-</operator> <name>game_time</name><operator>)</operator> <operator>/</operator> <name>fixed_timestep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>real_time</name> <operator>-</operator> <name>game_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>key_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>start_time</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>game_time</name> <operator>+=</operator> <name>fixed_timestep</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><name>cur_screen</name></expr>]</index></name><operator>(</operator><name>LOGIC</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>al_get_next_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>key_event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>cur_screen</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_screen</name> <operator>&gt;=</operator> <name>NUM_SCREENS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_screen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>:</case> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>key_event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_KEY_ESCAPE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_S</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Soft</name> <operator>=</operator> <operator>!</operator><name>Soft</name></expr>;</expr_stmt>

<expr_stmt><expr><name>time_diff</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_C</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>clip</name> <operator>=</operator> <operator>!</operator><name>clip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>time_diff</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_L</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Blend</name> <operator>=</operator> <operator>!</operator><name>Blend</name></expr>;</expr_stmt>

<expr_stmt><expr><name>time_diff</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_B</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Background</name> <operator>=</operator> <operator>!</operator><name>Background</name></expr>;</expr_stmt>

<expr_stmt><expr><name>time_diff</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_LEFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Speed</name> <operator>-=</operator> <name>ROTATE_SPEED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_RIGHT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Speed</name> <operator>+=</operator> <name>ROTATE_SPEED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_PGUP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Thickness</name> <operator>+=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Thickness</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Thickness</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_PGDN</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Thickness</name> <operator>-=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Thickness</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Thickness</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_UP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>cur_screen</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_screen</name> <operator>&gt;=</operator> <name>NUM_SCREENS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_screen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_SPACE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>Speed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_KEY_DOWN</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>cur_screen</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_screen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_screen</name> <operator>=</operator> <name>NUM_SCREENS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_time</name> <operator>&gt;=</operator> <name>fixed_timestep</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>Soft</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Background</name> <operator>&amp;&amp;</operator> <name>bkg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(<argument><expr><name>bkg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bkg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bkg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ScreenW</name></expr></argument>, <argument><expr><name>ScreenH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clip</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><name>cur_screen</name></expr>]</index></name><operator>(</operator><name>DRAW</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ScreenW</name></expr></argument>, <argument><expr><name>ScreenH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Soft</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><name>ScreenW</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ScreenH</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ScreenName</name><index>[<expr><name>cur_screen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"FPS: %f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>frames_done</name> <operator>/</operator> <operator>(</operator><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>time_diff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Change Screen (Up/Down). Esc to Quit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Rotation (Left/Right/Space): %f"</literal></expr></argument>, <argument><expr><name>Speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Thickness (PgUp/PgDown): %f"</literal></expr></argument>, <argument><expr><name>Thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Software (S): %d"</literal></expr></argument>, <argument><expr><name>Soft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Blending (L): %d"</literal></expr></argument>, <argument><expr><name>Blend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Background (B): %d"</literal></expr></argument>, <argument><expr><name>Background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>Font</name></expr></argument>, <argument><expr><name>solid_white</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Clip (C): %d"</literal></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_done</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>NUM_SCREENS</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Screens</name><index>[<expr><name>ii</name></expr>]</index></name><operator>(</operator><name>DEINIT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
