<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\speed\view.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_VIEWS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name><name>pos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name><name>VIEWPOS</name><index>[<expr><name>NUM_VIEWS</name></expr>]</index></name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name><name>pos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>vel</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name><name>VIEWINFO</name><index>[<expr><name>NUM_VIEWS</name></expr>]</index></name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_TL</name></cpp:macro> <cpp:value>{{ -0.1, -0.1, -0.1, -0.1 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_TR</name></cpp:macro> <cpp:value>{{ 1.1, -0.1, 1.1, -0.1 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_BL</name></cpp:macro> <cpp:value>{{ -0.1, 1.1, -0.1, 1.1 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_BR</name></cpp:macro> <cpp:value>{{ 1.1, 1.1, 1.1, 1.1 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QTR_TL</name></cpp:macro> <cpp:value>{{ 0, 0, 0.5, 0.5 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QTR_TR</name></cpp:macro> <cpp:value>{{ 0.5, 0, 1.0, 0.5 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QTR_BL</name></cpp:macro> <cpp:value>{{ 0, 0.5, 0.5, 1.0 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QTR_BR</name></cpp:macro> <cpp:value>{{ 0.5, 0.5, 1.0, 1.0 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_TL</name></cpp:macro> <cpp:value>{{ 0, 0, 0.7, 0.7 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_TR</name></cpp:macro> <cpp:value>{{ 0.3, 0, 1.0, 0.7 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_BL</name></cpp:macro> <cpp:value>{{ 0, 0.3, 0.7, 1.0 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_BR</name></cpp:macro> <cpp:value>{{ 0.3, 0.3, 1.0, 1.0 }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULL</name></cpp:macro> <cpp:value>{{ 0, 0, 1.0, 1.0 }}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>VIEWPOS</name></type> <name><name>viewpos</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>BIG_TL</name></expr>, <expr><name>BIG_BR</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>BIG_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>BIG_BR</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>BIG_TR</name></expr>, <expr><name>BIG_BL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>FULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><name>BIG_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>BIG_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>BIG_TL</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>BIG_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>FULL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>QTR_TL</name></expr>, <expr><name>QTR_TR</name></expr>, <expr><name>QTR_BL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>BIG_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>BIG_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>QTR_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>QTR_BL</name></expr>, <expr><name>QTR_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>BIG_TL</name></expr>, <expr><name>BIG_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>QTR_TR</name></expr>, <expr><name>BIG_BL</name></expr>, <expr><name>QTR_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>QTR_TR</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>QTR_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BL</name></expr>, <expr><name>FULL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>QTR_TL</name></expr>, <expr><name>QTR_TR</name></expr>, <expr><name>QTR_BL</name></expr>, <expr><name>QTR_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>OFF_BR</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>OFF_TR</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>OFF_TL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr>, <expr><name>FULL</name></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VIEWINFO</name></type> <name>viewinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>viewnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>view_left</name></decl>, <decl><type ref="prev"/><name>view_top</name></decl>, <decl><type ref="prev"/><name>view_right</name></decl>, <decl><type ref="prev"/><name>view_bottom</name></decl>;</decl_stmt>

<function><type><name>float</name></type> <name>view_size</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>view_right</name> <operator>-</operator> <name>view_left</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>view_bottom</name> <operator>-</operator> <name>view_top</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_view</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>viewnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>shutdown_view</name><parameter_list>()</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>advance_view</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cycled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>viewnum</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>viewnum</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>viewpos</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VIEWPOS</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>viewnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cycled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cycled</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_view</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>vel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>viewpos</name><index>[<expr><name>viewnum</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vel</name> <operator>=</operator> <name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vel</name> <operator>*=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>ABS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>SGN</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">64.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vel</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ABS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.00001</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ABS</name><argument_list>(<argument><expr><name>vel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.00001</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>viewpos</name><index>[<expr><name>viewnum</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>vel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vel</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>vel</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>project_flat</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>view_left</name> <operator>+</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>view_right</name> <operator>-</operator> <name>view_left</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>view_top</name> <operator>+</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>view_bottom</name> <operator>-</operator> <name>view_top</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>project_spherical</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ang</name> <init>= <expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xsize</name> <init>= <expr><name>view_right</name> <operator>-</operator> <name>view_left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ysize</name> <init>= <expr><name>view_bottom</name> <operator>-</operator> <name>view_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.99</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.9</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>ff</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>ff</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dx</name> <operator>+</operator> <operator>(</operator><name>view_left</name> <operator>+</operator> <name>view_right</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dy</name> <operator>+</operator> <operator>(</operator><name>view_top</name> <operator>+</operator> <name>view_bottom</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>project_tube</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ang</name> <init>= <expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>+</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xsize</name> <init>= <expr><name>view_right</name> <operator>-</operator> <name>view_left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ysize</name> <init>= <expr><name>view_bottom</name> <operator>-</operator> <name>view_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">1.0</literal> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">8.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name><operator>/</operator><name>z</name> <operator>*</operator> <name>size</name> <operator>+</operator> <operator>(</operator><name>view_left</name> <operator>+</operator> <name>view_right</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name><operator>/</operator><name>z</name> <operator>*</operator> <name>size</name> <operator>+</operator> <operator>(</operator><name>view_top</name> <operator>+</operator> <name>view_bottom</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>project_cylinder</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>MATRIX_f</name></type> <name>mtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>virgin</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>virgin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MATRIX_f</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_z_rotate_matrix_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qtranslate_matrix_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.75</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_scaling_matrix_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>matrix_mul_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virgin</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ang</name> <init>= <expr><operator>(</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>player_pos</name><argument_list>()</argument_list></call><operator>)</operator> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xsize</name> <init>= <expr><name>view_right</name> <operator>-</operator> <name>view_left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ysize</name> <init>= <expr><name>view_bottom</name> <operator>-</operator> <name>view_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">1.0</literal> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">4.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xout</name></decl>, <decl><type ref="prev"/><name>yout</name></decl>, <decl><type ref="prev"/><name>zout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_matrix_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yout</name> <operator>&gt;</operator> <literal type="number">1.5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xout</name><operator>/</operator><name>zout</name> <operator>*</operator> <name>size</name> <operator>+</operator> <operator>(</operator><name>view_left</name> <operator>+</operator> <name>view_right</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yout</name><operator>/</operator><name>zout</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>size</name> <operator>+</operator> <operator>(</operator><name>view_top</name> <operator>+</operator> <name>view_bottom</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>draw_view</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_H</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>project</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ipoint</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>view_left</name> <operator>=</operator> <name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>SCREEN_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name>view_top</name> <operator>=</operator> <name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>SCREEN_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>view_right</name> <operator>=</operator> <name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>SCREEN_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name>view_bottom</name> <operator>=</operator> <name><name>viewinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>SCREEN_H</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>view_right</name> <operator>&gt;</operator> <name>view_left</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>view_bottom</name> <operator>&gt;</operator> <name>view_top</name><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name>view_right</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>view_bottom</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>view_left</name> <operator>&lt;</operator> <name>SCREEN_W</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>view_top</name> <operator>&lt;</operator> <name>SCREEN_H</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>project</name> <operator>=</operator> <name>project_flat</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>project</name> <operator>=</operator> <name>project_spherical</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>project</name> <operator>=</operator> <name>project_tube</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>project</name> <operator>=</operator> <name>project_cylinder</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_grid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><name>r</name><operator>/</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>g</name><operator>/</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>low_detail</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>project</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>ipoint</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>n</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipoint</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_player</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_badguys</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bullets</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_explode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>solid_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font_video</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Lives: %d"</literal></expr></argument>, <argument><expr><name>lives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font_video</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Score: %d"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font_video</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Hiscore: %d"</literal></expr></argument>, <argument><expr><call><name>get_hiscore</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
