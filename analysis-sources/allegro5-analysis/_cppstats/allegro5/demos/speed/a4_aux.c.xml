<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\speed\a4_aux.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_audio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"a4_aux.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_config_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>v</name><operator>)</operator></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_config_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>v</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_config_int</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEYBUF</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>joy_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>joy_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>joy_b1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>keybuf</name><index>[<expr><name>MAX_KEYBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>keybuf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>keybuf_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>input_queue</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init_input</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK</name> <modifier>*</modifier></type><name>joy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keybuf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>keybuf_mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input_queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_num_joysticks</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>joy</name> <operator>=</operator> <call><name>al_get_joystick</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>joy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>, <argument><expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>shutdown_input</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keybuf_mutex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input_queue</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_key</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_KEYBOARD_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>unichar</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>unichar</name></name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keybuf_len</name> <operator>&lt;</operator> <name>MAX_KEYBUF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>keybuf</name><index>[<expr><name>keybuf_len</name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>unichar</name></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>keycode</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>keybuf_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>poll_input</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>al_get_next_event</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>

<expr_stmt><expr><name><name>key</name><index>[<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_UP</name></expr>:</case>

<expr_stmt><expr><name><name>key</name><index>[<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>:</case>

<expr_stmt><expr><call><name>add_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>keyboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>joy_b1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>joy_b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>joy_left</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>&lt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>joy_right</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>&gt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>poll_input_wait</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>keypressed</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>poll_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>keybuf_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>readkey</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>poll_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keybuf_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>keybuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>keybuf_len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><name>keybuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>keybuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keybuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_keybuf</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keybuf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>keybuf_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POLYGON_VERTICES</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font_video</name></decl>;</decl_stmt>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>create_memory_bitmap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>oldflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oldflags</name> <operator>=</operator> <call><name>al_get_new_bitmap_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newflags</name> <operator>=</operator> <operator>(</operator><name>oldflags</name> <operator>&amp;</operator><operator>~</operator> <name>ALLEGRO_VIDEO_BITMAP</name><operator>)</operator> <operator>|</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>newflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>replace_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>solid_mode</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_COLOR</name></type> <name>makecol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x2</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y1</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y2</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y1</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>x2</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y2</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rectfill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>circle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_circle</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>circlefill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>stretch_sprite</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sprite</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_TARGET_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(<argument><expr><name>sprite</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>sprite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>sprite</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>polygon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtxs</name><index>[<expr><name>MAX_POLYGON_VERTICES</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vertices</name> <operator>&lt;=</operator> <name>MAX_POLYGON_VERTICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vertices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <name><name>points</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+=</operator> <name><name>points</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>/=</operator> <name>vertices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>/=</operator> <name>vertices</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>vertices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vtxs</name><index>[<expr><name>vertices</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vtxs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vertices</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>textout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_LEFT</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>textout_centre</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>textprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MATRIX_f</name></type> <name>identity_matrix_f</name> <init>= 

<expr><block>{

<expr><block>{

<expr><block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>get_scaling_matrix_f</name><parameter_list>(<parameter><decl><type><name>MATRIX_f</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>m</name> <operator>=</operator> <name>identity_matrix_f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_z_rotate_matrix_f</name><parameter_list>(<parameter><decl><type><name>MATRIX_f</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">128.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">128.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>m</name> <operator>=</operator> <name>identity_matrix_f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>qtranslate_matrix_f</name><parameter_list>(<parameter><decl><type><name>MATRIX_f</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>z</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>matrix_mul_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MATRIX_f</name> <modifier>*</modifier></type><name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MATRIX_f</name> <modifier>*</modifier></type><name>m2</name></decl></parameter>, <parameter><decl><type><name>MATRIX_f</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MATRIX_f</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m1</name> <operator>==</operator> <name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>*</operator><name>m1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m1</name> <operator>=</operator> <operator>&amp;</operator><name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>m2</name> <operator>==</operator> <name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>*</operator><name>m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m2</name> <operator>=</operator> <operator>&amp;</operator><name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>m1</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>m2</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>m1</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>m2</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>m1</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>m2</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>m1</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>m2</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>m1</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>m2</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>m1</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>m2</name><operator>-&gt;</operator><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<name><name>m2</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_matrix_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MATRIX_f</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>xout</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>yout</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>zout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_ROW</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x * m-&gt;v[(n)][0] + y * m-&gt;v[(n)][1] + z * m-&gt;v[(n)][2] + m-&gt;t[(n)])</cpp:value></cpp:define>

<expr_stmt><expr><operator>*</operator><name>xout</name> <operator>=</operator> <call><name>CALC_ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yout</name> <operator>=</operator> <call><name>CALC_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>zout</name> <operator>=</operator> <call><name>CALC_ROW</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CALC_ROW</name></cpp:undef>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>retrace_counter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>start_retrace_count</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>retrace_counter</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><literal type="number">70.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>input_queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>retrace_counter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>retrace_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>stop_retrace_count</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>retrace_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retrace_counter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>retrace_count</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_get_timer_count</name><argument_list>(<argument><expr><name>retrace_counter</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal> <operator>*</operator> <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>create_sample_u8</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>freq</name> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_create_sample</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr></argument>,

<argument><expr><name>ALLEGRO_CHANNEL_CONF_1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>play_sample</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>playmode</name> <init>= <expr><ternary><condition><expr><name>loop</name></expr> ?</condition><then> <expr><name>ALLEGRO_PLAYMODE_LOOP</name></expr> </then><else>: <expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name>spl</name></expr></argument>, <argument><expr><name>vol</name><operator>/</operator><literal type="number">255.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>pan</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">128.0</literal></expr></argument>, <argument><expr><name>freq</name><operator>/</operator><literal type="number">1000.0</literal></expr></argument>,

<argument><expr><name>playmode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
