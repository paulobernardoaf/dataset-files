<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\speed\message.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MESSAGE</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MESSAGE</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>MESSAGE</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>MESSAGE</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init_message</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>shutdown_message</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MESSAGE</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MESSAGE</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MESSAGE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_message</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_H</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MESSAGE</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>msg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MESSAGE</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MESSAGE</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>x</name></name> <operator>*=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>SCREEN_W</name> <operator>*</operator> <literal type="number">0.05</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>time</name></name> <operator>-</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>y</name></name> <operator>*=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>y</name> <operator>*</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>time</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name>SCREEN_W</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>draw_message</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MESSAGE</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>textout_centre</name><argument_list>(<argument><expr><name>font_video</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

</unit>
