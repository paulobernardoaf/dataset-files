<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\speed\player.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>lives</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>die_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fire_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>vel</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENTS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ganja</name><index>[<expr><name>SEGMENTS</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>float</name></type> <name>player_pos</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>find_target</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seg</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name> <operator>*</operator> <name>SEGMENTS</name><operator>)</operator> <operator>%</operator> <name>SEGMENTS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seg</name> <operator>+=</operator> <name>SEGMENTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SEGMENTS</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>seg</name><operator>+</operator><name>i</name><operator>)</operator> <operator>%</operator> <name>SEGMENTS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ganja</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>j</name> <operator>/</operator> <name>SEGMENTS</name> <operator>+</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>/</operator> <name>SEGMENTS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>seg</name><operator>-</operator><name>i</name><operator>)</operator> <operator>%</operator> <name>SEGMENTS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>SEGMENTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ganja</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>j</name> <operator>/</operator> <name>SEGMENTS</name> <operator>+</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>/</operator> <name>SEGMENTS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pos</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>pos</name> <operator>-</operator> <literal type="number">0.5</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>player_dying</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>die_time</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lives</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_player</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0.97</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seg</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name> <operator>*</operator> <name>SEGMENTS</name><operator>)</operator> <operator>%</operator> <name>SEGMENTS</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ganja</name><index>[<expr><name>seg</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ganja</name><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>explode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0.98</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sfx_explode_block</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&gt;=</operator> <literal type="number">0.95</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>init_time</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>die_time</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>cheat</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name>pos</name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ABS</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.06</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>die_time</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>explode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0.98</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>explode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0.98</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sfx_explode_player</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Ship Destroyed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_player</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lives</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>init_time</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>die_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fire_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ganja</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>shutdown_player</name><parameter_list>()</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>advance_player</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cycle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bonus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_score</name> <init>= <expr><name>score</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ganja</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bonus</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ganja</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bonus</name> <operator>==</operator> <name>SEGMENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Bonus: 100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cycle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Bonus: 1000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Score: %d"</literal></expr></argument>, <argument><expr><name>bonus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>bonus</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_hiscore</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>score</name> <operator>&gt;</operator> <call><name>get_hiscore</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>old_score</name> <operator>&lt;=</operator> <call><name>get_hiscore</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"New Record Score!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>bonus</name> <operator>==</operator> <name>SEGMENTS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cycle</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>update_player</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>poll_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>init_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>init_time</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>die_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>die_time</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>die_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lives</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lives</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>init_time</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lives</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"This Is Your Final Life"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"One Life Remaining"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>die_time</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>joy_left</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_LEFT</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vel</name> <operator>-=</operator> <literal type="number">0.005</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>joy_right</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_RIGHT</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vel</name> <operator>+=</operator> <literal type="number">0.005</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>vel</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>-=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vel</name> <operator>*=</operator> <literal type="number">0.67</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>die_time</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>init_time</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>fire_time</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>joy_b1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fire_bullet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fire_time</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fire_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fire_time</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>draw_player</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>project</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>shape</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ishape</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ganja</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i</name> <operator>/</operator> <name>SEGMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.98</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>SEGMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.98</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>SEGMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i</name> <operator>/</operator> <name>SEGMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>project</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>polygon</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><name>r</name><operator>/</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>g</name><operator>/</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>init_time</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>die_time</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pos</name> <operator>-</operator> <literal type="number">0.04</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.98</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pos</name> <operator>-</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.97</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.95</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.97</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">0.04</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.98</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.98</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>project</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>polygon</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
