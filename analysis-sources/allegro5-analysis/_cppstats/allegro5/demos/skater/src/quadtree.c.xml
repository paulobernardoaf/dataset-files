<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\quadtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CentreX</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((b)-&gt;TL.Pos[0]+(b)-&gt;BR.Pos[0]) * 0.5f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CentreY</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((b)-&gt;TL.Pos[1]+(b)-&gt;BR.Pos[1]) * 0.5f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_BOUNDARY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetChild</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>qx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>qy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>qx</name> <operator>&gt;</operator> <call><name>CentreX</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qy</name> <operator>&gt;</operator> <call><name>CentreY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>GetX1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>child</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>CentreX</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>GetX2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>child</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><call><name>CentreX</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>GetY1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>child</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>CentreY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>GetY2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>child</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><call><name>CentreY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ToggleChildPtrY</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>yvec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldchild</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yvec</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldchild</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>yvec</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>oldchild</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldchild</name> <operator>^=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>oldchild</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ToggleChildPtrX</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>xvec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldchild</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>xvec</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldchild</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>xvec</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>oldchild</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldchild</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>oldchild</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Separated</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>ERROR_BOUNDARY</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>ERROR_BOUNDARY</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>ERROR_BOUNDARY</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>ERROR_BOUNDARY</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetupQuadTree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Tree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>NumContents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeQuadTree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Tree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>CNext</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeQuadTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CNext</name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Contents</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <name>CNext</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddContent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Tree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>NewContent</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>divider</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>CPtr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Separated</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>NewContent</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddContent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>NewContent</name></expr></argument>, <argument><expr><name>divider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>NumContents</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>CPtr</name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <operator>(</operator>struct <name>Container</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name><operator>-&gt;</operator><name>Content</name></name> <operator>=</operator> <name><name>NewContent</name><operator>-&gt;</operator><name>Content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name><operator>-&gt;</operator><name>Type</name></name> <operator>=</operator> <name><name>NewContent</name><operator>-&gt;</operator><name>Type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name>CPtr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>Tree</name><operator>-&gt;</operator><name>NumContents</name></name> <operator>==</operator> <name>divider</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>screen_width</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>screen_height</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name> <operator>=</operator>

<operator>(</operator>struct <name>QuadTreeNode</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>QuadTreeNode</name></expr></argument>)</argument_list></sizeof>

<operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetupQuadTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>GetX1</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetY1</name><argument_list>(<argument><expr><name>c</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator>

<name>Bounder</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GetX2</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetY2</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>CPtr</name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>CPtr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Next</name> <operator>=</operator> <name><name>CPtr</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddContent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>CPtr</name></expr></argument>, <argument><expr><name>divider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>CPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CPtr</name> <operator>=</operator> <name>Next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>GetNode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>MidX</name></decl>, <decl><type ref="prev"/><name>MidY</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>Ptr</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Child</name> <operator>=</operator> <call><name>GetChild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ptr</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <call><name>CentreX</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ptr</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <call><name>CentreY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ptr</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>MidX</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ERROR_BOUNDARY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Child</name> <operator>=</operator> <call><name>ToggleChildPtrX</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>MidY</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ERROR_BOUNDARY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Child</name> <operator>=</operator> <call><name>ToggleChildPtrY</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>Ptr</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>Child</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>Ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>GetCollisionNode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>lvl</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GetNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lvl</name><operator>-&gt;</operator><name>CollisionTree</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_v</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawTriEdge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Triangle</name></name> <modifier>*</modifier></type><name>tri</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>PolyEdges</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Separated</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_EDGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>PolyEdges</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>w</name></expr></argument>, <argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>PolyEdges</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>w</name></expr></argument>, <argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Edge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c2</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c2</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c2</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>PolyEdges</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>w</name></expr></argument>, <argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c2</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>PolyEdges</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>w</name></expr></argument>, <argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c2</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Edge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>PolyEdges</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Edge</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setuv</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawTriangle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Triangle</name></name> <modifier>*</modifier></type><name>tri</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Separated</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tri</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setuv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setuv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setuv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tri</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Fill</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawObject</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>Separated</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>OBJFLAGS_VISIBLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_draw_scaled_rotated_bitmap</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Image</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.5f</literal> <operator>*</operator>

<operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>obj</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator>

<name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Image</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.5f</literal> <operator>*</operator>

<operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>obj</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator>

<name><name>ScrBounder</name><operator>-&gt;</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Image</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>Angle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetQuadTreeVisibilityList</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>TriTree</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Separated</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TriTree</name><operator>-&gt;</operator><name>Bounder</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>TriTree</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetQuadTreeVisibilityList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TriTree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>TriTree</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>VisibleList</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Lvl</name><operator>-&gt;</operator><name>VisibleList</name></name> <operator>=</operator> <name>TriTree</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawQuadTreePart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>framec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>PostContents</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>Thing</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>TriStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Visible</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Visible</name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>VisibleList</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>Visible</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Thing</name> <operator>=</operator> <ternary><condition><expr><name>PostContents</name></expr> ?</condition><then> <expr><name><name>Visible</name><operator>-&gt;</operator><name>PostContents</name></name></expr> </then><else>: <expr><name><name>Visible</name><operator>-&gt;</operator><name>Contents</name></name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>Thing</name> <operator>&amp;&amp;</operator> <name><name>Thing</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>OBJECT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>LastFrame</name></name> <operator>!=</operator> <name>framec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DrawObject</name><argument_list>(<argument><expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>LastFrame</name></name> <operator>=</operator> <name>framec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Thing</name> <operator>=</operator> <name><name>Thing</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>TriStart</name> <operator>=</operator> <name>Thing</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>Thing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name><operator>-&gt;</operator><name>LastFrame</name></name> <operator>!=</operator> <name>framec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Thing</name> <operator>=</operator> <name><name>Thing</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>Thing</name> <operator>=</operator> <name>TriStart</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>Thing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name><operator>-&gt;</operator><name>LastFrame</name></name> <operator>!=</operator> <name>framec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DrawTriEdge</name><argument_list>(<argument><expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name></name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Thing</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name><operator>-&gt;</operator><name>LastFrame</name></name> <operator>=</operator> <name>framec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Thing</name> <operator>=</operator> <name><name>Thing</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>Visible</name> <operator>=</operator> <name><name>Visible</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>BeginQuadTreeDraw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>TriTree</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>framec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>Lvl</name><operator>-&gt;</operator><name>VisibleList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetQuadTreeVisibilityList</name><argument_list>(<argument><expr><name>TriTree</name></expr></argument>, <argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawQuadTreePart</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>, <argument><expr><name>framec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>EndQuadTreeDraw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>BoundingBox</name></name> <modifier>*</modifier></type><name>ScrBounder</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>framec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawQuadTreePart</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>ScrBounder</name></expr></argument>, <argument><expr><name>framec</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COLL</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DISP</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>AddTriangle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>level</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Triangle</name></name> <modifier>*</modifier></type><name>NewTri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name></type> <name>Cont</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Cont</name><operator>.</operator><name>Content</name><operator>.</operator><name>T</name></name> <operator>=</operator> <name>NewTri</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Cont</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TRIANGLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddContent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>level</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cont</name></expr></argument>, <argument><expr><name>MAX_DISP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AddEdge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>level</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>NewEdge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name></type> <name>Cont</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Cont</name><operator>.</operator><name>Content</name><operator>.</operator><name>E</name></name> <operator>=</operator> <name>NewEdge</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Cont</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>EDGE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddContent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>level</name><operator>-&gt;</operator><name>CollisionTree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cont</name></expr></argument>, <argument><expr><name>MAX_COLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AddObject</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>level</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>NewObject</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>DisplayTree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name></type> <name>Cont</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Cont</name><operator>.</operator><name>Content</name><operator>.</operator><name>O</name></name> <operator>=</operator> <name>NewObject</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Cont</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>OBJECT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>DisplayTree</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>NewObject</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>OBJFLAGS_VISIBLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddContent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>level</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cont</name></expr></argument>, <argument><expr><name>MAX_DISP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>NewObject</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FLAGS_COLLIDABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddContent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>level</name><operator>-&gt;</operator><name>CollisionTree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cont</name></expr></argument>, <argument><expr><name>MAX_COLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SplitTree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Tree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>P</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>PNext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SplitTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>P</name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>PNext</name> <operator>=</operator> <name><name>P</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>OBJECT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>P</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FLAGS_FOREGROUND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>P</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name><operator>-&gt;</operator>

<name>EdgeFlags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>T</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator>

<operator>&amp;</operator> <name>FLAGS_FOREGROUND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>P</name> <operator>=</operator> <name>PNext</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>OrderTree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>Tree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>PostTree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>Objects</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>NonObjects</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>P</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>PNext</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ITree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tree</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OrderTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>PostTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ITree</name> <operator>=</operator> <ternary><condition><expr><name>PostTree</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>PostContents</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>Tree</name><operator>-&gt;</operator><name>Contents</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ITree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Objects</name> <operator>=</operator> <name>NonObjects</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>P</name> <operator>=</operator> <operator>*</operator><name>ITree</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>PNext</name> <operator>=</operator> <name><name>P</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>OBJECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name>Objects</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Objects</name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name>NonObjects</name></expr>;</expr_stmt>

<expr_stmt><expr><name>NonObjects</name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>P</name> <operator>=</operator> <name>PNext</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ITree</name> <operator>=</operator> <name>Objects</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ITree</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ITree</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ITree</name><operator>)</operator><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>ITree</name> <operator>=</operator> <name>NonObjects</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
