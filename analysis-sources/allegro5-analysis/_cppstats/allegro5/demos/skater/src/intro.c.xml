<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\intro.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"menus.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"music.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mouse.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_id</name> <init>= <expr><name>DEMO_STATE_INTRO</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>already_played_midi</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <literal type="number">4.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>progress</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>already_played_midi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>progress</name> <operator>+=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>logic_framerate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>&gt;=</operator> <name>duration</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DEMO_STATE_MAIN_MENU</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>key_pressed</name><argument_list>(<argument><expr><name>ALLEGRO_KEY_ESCAPE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DEMO_STATE_MAIN_MENU</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>key_pressed</name><argument_list>(<argument><expr><name>ALLEGRO_KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DEMO_STATE_MAIN_MENU</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>key_pressed</name><argument_list>(<argument><expr><name>ALLEGRO_KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DEMO_STATE_MAIN_MENU</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mouse_button_pressed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>DEMO_STATE_MAIN_MENU</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>id</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>offx</name></decl>, <decl><type ref="prev"/><name>offy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>logo_text1</name><index>[]</index></name> <init>= <expr><literal type="string">"Allegro"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>logo_text2</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>&lt;</operator> <literal type="number">0.5f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>progress</name> <operator>/</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>already_played_midi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>play_music</name><argument_list>(<argument><expr><name>DEMO_MIDI_INTRO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>already_played_midi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>screen_width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>screen_height</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offx</name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>al_get_text_width</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>, <argument><expr><name>logo_text1</name></expr></argument>)</argument_list></call> <operator>*</operator>

<operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>progress</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>demo_textprintf_centre</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal> <operator>-</operator> <name>offx</name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.125</literal></expr></argument>, <argument><expr><literal type="number">0.125</literal></expr></argument>, <argument><expr><literal type="number">0.125</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logo_text1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_centre</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>offx</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logo_text1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>&gt;=</operator> <literal type="number">1.5f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>&lt;</operator> <literal type="number">2.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offy</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>screen_height</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>progress</name> <operator>-</operator> <literal type="number">1.5f</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>demo_textprintf_centre</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>offy</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.125</literal></expr></argument>, <argument><expr><literal type="number">0.125</literal></expr></argument>, <argument><expr><literal type="number">0.125</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>logo_text2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_centre</name><argument_list>(<argument><expr><name>demo_font_logo</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>offy</name></expr></argument>,

<argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logo_text2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_intro</name><parameter_list>(<parameter><decl><type><name>GAMESTATE</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>draw</name></name> <operator>=</operator> <name>draw</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
