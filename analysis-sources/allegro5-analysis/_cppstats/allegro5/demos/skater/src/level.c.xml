<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\level.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"game.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level_alloc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level_file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>framec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>BoundingBox</name></name></type> <name>DispBox</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>DrawLevelBackground</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lev</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">480.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>screen_width</name> <operator>*</operator> <literal type="number">480</literal> <operator>/</operator> <name>screen_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framec</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DispBox</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DispBox</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DispBox</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>DispBox</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DispBox</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>DispBox</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginQuadTreeDraw</name><argument_list>(<argument><expr><name>lev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lev</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DispBox</name></expr></argument>, <argument><expr><name>framec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawLevelForeground</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lev</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EndQuadTreeDraw</name><argument_list>(<argument><expr><name>lev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DispBox</name></expr></argument>, <argument><expr><name>framec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>ObtainBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATA_ENTRY</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>demo_data</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>ObtainSample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATA_ENTRY</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>demo_data</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>min</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>max</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FreeList</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>sp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(lvl-&gt;name){Next = (void *)lvl-&gt;name-&gt;Next;sp(lvl-&gt;name);free(lvl-&gt;name);lvl-&gt;name = (struct type *)Next;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoAction</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<function><type><name>void</name></type> <name>FreeLevel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>lvl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lvl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FreeQuadTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lvl</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeQuadTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lvl</name><operator>-&gt;</operator><name>CollisionTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeList</name><argument_list>(<argument><expr><name>AllTris</name></expr></argument>, <argument><expr><name>Triangle</name></expr></argument>, <argument><expr><name>NoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeList</name><argument_list>(<argument><expr><name>AllEdges</name></expr></argument>, <argument><expr><name>Edge</name></expr></argument>, <argument><expr><name>NoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeList</name><argument_list>(<argument><expr><name>AllMats</name></expr></argument>, <argument><expr><name>Material</name></expr></argument>, <argument><expr><name>NoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeList</name><argument_list>(<argument><expr><name>AllObjectTypes</name></expr></argument>, <argument><expr><name>ObjectType</name></expr></argument>, <argument><expr><name>NoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeList</name><argument_list>(<argument><expr><name>AllVerts</name></expr></argument>, <argument><expr><name>Vertex</name></expr></argument>, <argument><expr><name>NoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeList</name><argument_list>(<argument><expr><name>AllObjects</name></expr></argument>, <argument><expr><name>Object</name></expr></argument>, <argument><expr><name>NoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeState</name><argument_list>(<argument><expr><name><name>lvl</name><operator>-&gt;</operator><name>InitialState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CalcIntersection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>e2</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>Inter</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator>

<operator>(</operator><name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>radius</name> <operator>*</operator> <name><name>e1</name><operator>-&gt;</operator><name>a</name></name><operator>)</operator> <operator>*</operator> <name><name>e2</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator>

<operator>(</operator><name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>radius</name> <operator>*</operator> <name><name>e1</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator> <operator>*</operator> <name><name>e2</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name><name>e2</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator>

<operator>(</operator><name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>radius</name> <operator>*</operator> <name><name>e1</name><operator>-&gt;</operator><name>a</name></name><operator>)</operator> <operator>*</operator> <name><name>e2</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator>

<operator>(</operator><name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>radius</name> <operator>*</operator> <name><name>e1</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator> <operator>*</operator> <name><name>e2</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name><name>e2</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>d1</name> <operator>-</operator> <name>d2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d1</name> <operator>/=</operator> <operator>(</operator><name>d1</name> <operator>-</operator> <name>d2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Inter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>radius</name> <operator>*</operator> <name><name>e1</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator>

<name>d1</name> <operator>*</operator> <operator>(</operator><name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Inter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>radius</name> <operator>*</operator> <name><name>e1</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator>

<name>d1</name> <operator>*</operator> <operator>(</operator><name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>e1</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FixVerts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Vertex</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllVerts</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CalcIntersection</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>Normal</name></name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>a</name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>b</name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>Direction</name> <init>= <expr><operator>-</operator><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Direction</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>v</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>a</name> <operator>*</operator> <name>radius</name> <operator>+</operator>

<name>radius</name> <operator>*</operator> <name>Direction</name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>v</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>b</name> <operator>*</operator> <name>radius</name> <operator>-</operator>

<name>radius</name> <operator>*</operator> <name>Direction</name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>a</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FixEdges</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>NotFinished</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>Failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Edge</name></name></type> <name>OldEdge</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>EdgePtr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>radius</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>OldEdge</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Failed</name> <operator>=</operator>

<call><name>GetNormal</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name>Normal</name></expr></argument>,

<argument><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><name>Normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Failed</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <name><name>OldEdge</name><operator>.</operator><name>a</name></name> <operator>+</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name><name>OldEdge</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NotFinished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>EdgePtr</name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>

<operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator>

<name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>e</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EdgePtr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>EdgePtr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>EdgePtr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>EdgePtr</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>EdgePtr</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>EdgePtr</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>EndPoints</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>EdgePtr</name> <operator>=</operator> <operator>*</operator><name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>EdgePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>Next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NotFinished</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddEdges</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>min</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>min</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>max</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>max</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddEdge</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ScaleAndAddObjects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>O</name> <init>= <expr><name><name>Lvl</name><operator>-&gt;</operator><name>AllObjects</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>O</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddObject</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>O</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddObject</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>O</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddTriangles</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Triangle</name></name> <modifier>*</modifier></type><name>Tri</name> <init>= <expr><name><name>Lvl</name><operator>-&gt;</operator><name>AllTris</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>Tri</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_EDGE</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>lc</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_EDGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_WIDTH</name><operator>)</operator> <operator>&lt;</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_WIDTH</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_WIDTH</name><operator>)</operator> <operator>&gt;</operator>

<name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>TRIFLAGS_WIDTH</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>AddTriangle</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>Tri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Tri</name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>GetLevelError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>LocTemp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Unspecified error at line %d"</literal></expr></argument>,

<argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>LocTemp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Level load - %s"</literal></expr></argument>, <argument><expr><name>LocTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>LocTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ErrorText</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>LoadLevel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ErrorText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>Lines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Unable to load %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>NewLev</name> <operator>=</operator> <call><name>NewLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LoadMaterials</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LoadVertices</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LoadTriangles</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FixVerts</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><call><name>FixEdges</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>AddEdges</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LoadObjectTypes</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>NewLev</name><operator>-&gt;</operator><name>DoorOpen</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"dooropen"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Unable to obtain dooropen sprite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>NewLev</name><operator>-&gt;</operator><name>DoorShut</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"doorshut"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Unable to obtain doorshut sprite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>Door</name><operator>.</operator><name>Image</name></name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>DoorShut</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>Door</name><operator>.</operator><name>CollectNoise</name></name> <operator>=</operator> <call><name>ObtainSample</name><argument_list>(<argument><expr><literal type="string">"dooropen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>Door</name><operator>.</operator><name>Radius</name></name> <operator>=</operator> <literal type="number">14</literal> <operator>+</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>TotalObjects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LoadObjects</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AddTriangles</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScaleAndAddObjects</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SplitTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OrderTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OrderTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>DisplayTree</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OrderTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>CollisionTree</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LoadStats</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Error</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>InitialState</name></name> <operator>=</operator> <call><name>BorrowState</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NewLev</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NewLev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLevel</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
