<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\physics.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"game.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"physics.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>double</name></type> <name>FixUp</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>normalx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>normaly</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>mul</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_JUMPING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>KEYFLAG_JUMPING</name> <operator>|</operator> <name>KEYFLAG_JUMP</name> <operator>|</operator> <name>KEYFLAG_JUMP_ISSUED</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>normalx</name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>normaly</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>mul</name> <operator>*</operator> <name>normalx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>mul</name> <operator>*</operator> <name>normaly</name></expr>;</expr_stmt>

<return>return <expr><name>mul</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetAngle</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>normalx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>normaly</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>JustDoIt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>NewAng</name> <init>= <expr><call><name>atan2</name><argument_list>(<argument><expr><name>normalx</name></expr></argument>, <argument><expr><operator>-</operator><name>normaly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>JustDoIt</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>NewAng</name> <operator>&lt;</operator> <operator>(</operator><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">0.25f</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>NewAng</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>NewAng</name> <operator>&gt;</operator> <operator>(</operator><operator>-</operator><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">0.25f</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>NewAng</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name>NewAng</name> <operator>-</operator> <operator>*</operator><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">0.25f</literal><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>NewAng</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoFriction</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ForwardSpeed</name> <init>=

<expr><operator>(</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>-</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>a</name></name><operator>)</operator> <operator>/</operator> <name><name>E</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Friction</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>UpSpeed</name> <init>= <expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>FricLevel</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ForwardSpeed</name> <operator>+=</operator> <name>Pusher</name></expr>;</expr_stmt>

<expr_stmt><expr><name>KeyFlags</name> <operator>|=</operator> <name>KEYFLAG_FLIP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ForwardSpeed</name> <operator>-=</operator> <name>Pusher</name></expr>;</expr_stmt>

<expr_stmt><expr><name>KeyFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>KEYFLAG_FLIP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>FricLevel</name> <operator>=</operator> <literal type="number">0.05f</literal> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Friction</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ForwardSpeed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ForwardSpeed</name> <operator>&lt;</operator> <name>FricLevel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ForwardSpeed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ForwardSpeed</name> <operator>-=</operator> <name>FricLevel</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ForwardSpeed</name> <operator>&gt;</operator> <operator>-</operator><name>FricLevel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ForwardSpeed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ForwardSpeed</name> <operator>+=</operator> <name>FricLevel</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>KeyFlags</name> <operator>&amp;</operator> <operator>(</operator><name>KEYFLAG_JUMP</name> <operator>|</operator> <name>KEYFLAG_JUMP_ISSUED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>KEYFLAG_JUMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>UpSpeed</name> <operator>+=</operator> <literal type="number">5.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>KeyFlags</name> <operator>|=</operator> <name>KEYFLAG_JUMP_ISSUED</name> <operator>|</operator> <name>KEYFLAG_JUMPING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>UpSpeed</name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name>ForwardSpeed</name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Friction</name></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>UpSpeed</name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>-</operator> <name>ForwardSpeed</name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Friction</name></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

struct QuadTreeNode *DoContinuousPhysics(struct Level *lvl, struct QuadTreeNode

*CollTree, double *pos,

double *vec, double TimeToGo,

struct Animation *PAnim)

{

double MoveVec[2];

double CollTime, NCollTime;

double End[2], ColPoint[2];

void *CollPtr;

double d1, d2;

struct Edge *E;

double r;

int Contact;

struct Container *EPtr, *FirstEdge;

CollTree = GetCollisionNode(lvl, pos, vec);

EPtr = CollTree-&gt;Contents;

while (EPtr &amp;&amp; EPtr-&gt;Type != EDGE)

EPtr = EPtr-&gt;Next;

FirstEdge = EPtr;

do {

Contact = false;

EPtr = FirstEdge;

while (EPtr) {

d1 =

EPtr-&gt;Content.E-&gt;a * pos[0] +

EPtr-&gt;Content.E-&gt;b * pos[1] + EPtr-&gt;Content.E-&gt;c;

if (d1 &gt;= (-0.5f) &amp;&amp; d1 &lt;= 0.05f &amp;&amp;

pos[0] &gt;= EPtr-&gt;Content.E-&gt;Bounder.TL.Pos[0]

&amp;&amp; pos[0] &lt;= EPtr-&gt;Content.E-&gt;Bounder.BR.Pos[0]

&amp;&amp; pos[1] &gt;= EPtr-&gt;Content.E-&gt;Bounder.TL.Pos[1]

&amp;&amp; pos[1] &lt;= EPtr-&gt;Content.E-&gt;Bounder.BR.Pos[1]

) {

pos[0] += EPtr-&gt;Content.E-&gt;a * (0.05f - d1);

pos[1] += EPtr-&gt;Content.E-&gt;b * (0.05f - d1);

Contact = true;

}

EPtr = EPtr-&gt;Next;

}

MoveVec[0] = TimeToGo * vec[0];

MoveVec[1] = TimeToGo * vec[1];

CollTime = TimeToGo + 1.0f;

End[0] = pos[0] + MoveVec[0];

End[1] = pos[1] + MoveVec[1];

CollPtr = NULL;

if (End[0] &gt; CollTree-&gt;Bounder.BR.Pos[0]) {

NCollTime = (End[0] - CollTree-&gt;Bounder.BR.Pos[0]) / MoveVec[0];

if (NCollTime &lt; CollTime) {

CollTime = NCollTime;

CollPtr = (void *)CollTree;

}

}

if (End[0] &lt; CollTree-&gt;Bounder.TL.Pos[0]) {

NCollTime = (End[0] - CollTree-&gt;Bounder.TL.Pos[0]) / MoveVec[0];

if (NCollTime &lt; CollTime) {

CollTime = NCollTime;

CollPtr = (void *)CollTree;

}

}

if (End[1] &gt; CollTree-&gt;Bounder.BR.Pos[1]) {

NCollTime = (End[1] - CollTree-&gt;Bounder.BR.Pos[1]) / MoveVec[1];

if (NCollTime &lt; CollTime) {

CollTime = NCollTime;

CollPtr = (void *)CollTree;

}

}

if (End[1] &lt; CollTree-&gt;Bounder.TL.Pos[1]) {

NCollTime = (End[1] - CollTree-&gt;Bounder.TL.Pos[1]) / MoveVec[1];

if (NCollTime &lt; CollTime) {

CollTime = NCollTime;

CollPtr = (void *)CollTree;

}

}

EPtr = FirstEdge;

while (EPtr) {

d1 =

EPtr-&gt;Content.E-&gt;a * pos[0] +

EPtr-&gt;Content.E-&gt;b * pos[1] + EPtr-&gt;Content.E-&gt;c;

d2 =

EPtr-&gt;Content.E-&gt;a * End[0] +

EPtr-&gt;Content.E-&gt;b * End[1] + EPtr-&gt;Content.E-&gt;c;

if ((d1 &gt;= (-0.05f)) &amp;&amp; (d2 &lt; 0)) {

NCollTime = d1 / (d1 - d2);

ColPoint[0] = pos[0] + NCollTime * MoveVec[0];

ColPoint[1] = pos[1] + NCollTime * MoveVec[1];

if (ColPoint[0] &gt;= EPtr-&gt;Content.E-&gt;Bounder.TL.Pos[0]

&amp;&amp; ColPoint[0] &lt;= EPtr-&gt;Content.E-&gt;Bounder.BR.Pos[0]

&amp;&amp; ColPoint[1] &gt;= EPtr-&gt;Content.E-&gt;Bounder.TL.Pos[1]

&amp;&amp; ColPoint[1] &lt;= EPtr-&gt;Content.E-&gt;Bounder.BR.Pos[1]

) {

CollTime = NCollTime;

CollPtr = (void *)EPtr;

}

}

EPtr = EPtr-&gt;Next;

}

pos[0] += MoveVec[0] * CollTime;

pos[1] += MoveVec[1] * CollTime;

if (!Contact)

AdvanceAnimation(PAnim, 0, false);

if (CollPtr) {

if (CollPtr == (void *)CollTree) {

CollTree = GetCollisionNode(lvl, pos, vec);

EPtr = CollTree-&gt;Contents;

while (EPtr &amp;&amp; EPtr-&gt;Type != EDGE)

EPtr = EPtr-&gt;Next;

FirstEdge = EPtr;

} else {

E = ((struct Container *)CollPtr)-&gt;Content.E;

r = FixUp(vec, E-&gt;a, E-&gt;b);

SetAngle(E-&gt;a, E-&gt;b, &amp;pos[2],

(fabs(vec[0] * E-&gt;b - vec[1] * E-&gt;a) &gt; 0.5f));

AdvanceAnimation(PAnim,

(vec[0] * E-&gt;b -

vec[1] * E-&gt;a) *

((KeyFlags &amp; KEYFLAG_FLIP) ? 1.0f : -1.0f),

true);

DoFriction(r, E, vec);

}

} else if (!Contact) {

if (KeyFlags &amp; KEYFLAG_LEFT) {

vec[0] -= 0.05f;

KeyFlags |= KEYFLAG_FLIP;

}

if (KeyFlags &amp; KEYFLAG_RIGHT) {

vec[0] += 0.05f;

KeyFlags &amp;= ~KEYFLAG_FLIP;

}

if (pos[2] &gt; 0) {

pos[2] -= TimeToGo * CollTime * 0.03f;

if (pos[2] &lt; 0)

pos[2] = 0;

}

if (pos[2] &lt; 0) {

pos[2] += TimeToGo * CollTime * 0.03f;

if (pos[2] &gt; 0)

pos[2] = 0;

}

}

TimeToGo -= TimeToGo * CollTime;

}

while (TimeToGo &gt; 0.01f);

return CollTree;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>RunPhysics</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>lvl</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>TimeToGo</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>PAnim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>MoveVec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>CollTree</name> <init>= <expr><call><name>GetCollisionNode</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>CollTime</name></decl>, <decl><type ref="prev"/><name>NCollTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>End</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ColPoint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>CollPtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>E</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Contact</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>EPtr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>FirstEdge</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">0.997f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">0.997f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>EPtr</name> <operator>&amp;&amp;</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Type</name></name> <operator>!=</operator> <name>EDGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>FirstEdge</name> <operator>=</operator> <name>EPtr</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>Contact</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name>FirstEdge</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>EPtr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;=</operator> <operator>(</operator><operator>-</operator><literal type="number">0.5f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">0.05f</literal> <operator>&amp;&amp;</operator>

<name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <operator>(</operator><literal type="number">0.05f</literal> <operator>-</operator> <name>d1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <operator>(</operator><literal type="number">0.05f</literal> <operator>-</operator> <name>d1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Contact</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>MoveVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TimeToGo</name> <operator>*</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>MoveVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>TimeToGo</name> <operator>*</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollTime</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>End</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>End</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollPtr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>End</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NCollTime</name> <operator>=</operator> <operator>(</operator><name><name>End</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NCollTime</name> <operator>&lt;</operator> <name>CollTime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CollTime</name> <operator>=</operator> <name>NCollTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollPtr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CollTree</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>End</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NCollTime</name> <operator>=</operator> <operator>(</operator><name><name>End</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NCollTime</name> <operator>&lt;</operator> <name>CollTime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CollTime</name> <operator>=</operator> <name>NCollTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollPtr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CollTree</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>End</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NCollTime</name> <operator>=</operator> <operator>(</operator><name><name>End</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NCollTime</name> <operator>&lt;</operator> <name>CollTime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CollTime</name> <operator>=</operator> <name>NCollTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollPtr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CollTree</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>End</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NCollTime</name> <operator>=</operator> <operator>(</operator><name><name>End</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NCollTime</name> <operator>&lt;</operator> <name>CollTime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CollTime</name> <operator>=</operator> <name>NCollTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollPtr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CollTree</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name>FirstEdge</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>EPtr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d1</name> <operator>=</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <name><name>End</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name><name>End</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d1</name> <operator>&gt;=</operator> <operator>(</operator><operator>-</operator><literal type="number">0.05f</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>d2</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>NCollTime</name> <operator>=</operator> <name>d1</name> <operator>/</operator> <operator>(</operator><name>d1</name> <operator>-</operator> <name>d2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ColPoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>NCollTime</name> <operator>*</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ColPoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>NCollTime</name> <operator>*</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ColPoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>ColPoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>ColPoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>ColPoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>E</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>CollTime</name> <operator>=</operator> <name>NCollTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CollPtr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>EPtr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>CollTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>MoveVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>CollTime</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Contact</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AdvanceAnimation</name><argument_list>(<argument><expr><name>PAnim</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CollPtr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>CollPtr</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CollTree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CollTree</name> <operator>=</operator> <call><name>GetCollisionNode</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>EPtr</name> <operator>&amp;&amp;</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Type</name></name> <operator>!=</operator> <name>EDGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>FirstEdge</name> <operator>=</operator> <name>EPtr</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>Container</name> <operator>*</operator><operator>)</operator><name>CollPtr</name><operator>)</operator><operator>-&gt;</operator><name><name>Content</name><operator>.</operator><name>E</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>FixUp</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>E</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetAngle</name><argument_list>(<argument><expr><name><name>E</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>-</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdvanceAnimation</name><argument_list>(<argument><expr><name>PAnim</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>b</name></name> <operator>-</operator>

<name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>E</name><operator>-&gt;</operator><name>a</name></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_FLIP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DoFriction</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>Contact</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>KeyFlags</name> <operator>|=</operator> <name>KEYFLAG_FLIP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">0.05f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>KeyFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>KEYFLAG_FLIP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <name>TimeToGo</name> <operator>*</operator> <name>CollTime</name> <operator>*</operator> <literal type="number">0.03f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>TimeToGo</name> <operator>*</operator> <name>CollTime</name> <operator>*</operator> <literal type="number">0.03f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>TimeToGo</name> <operator>-=</operator> <name>TimeToGo</name> <operator>*</operator> <name>CollTime</name></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>TimeToGo</name> <operator>&gt;</operator> <literal type="number">0.01f</literal></expr>)</condition>;</do>

<return>return <expr><name>CollTree</name></expr>;</return>

</block_content>}</block></function>

</unit>
