<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\gamepad.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gamepad.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>button_down</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>axis</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_config</name><parameter_list>(<parameter><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>al_load_config_file</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"button%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>private_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GAMEPAD"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>private_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>&gt;=</operator> <call><name>al_get_num_joysticks</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>private_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_config</name><parameter_list>(<parameter><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>al_load_config_file</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"button%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GAMEPAD"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>private_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_save_config_file</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>threshold</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll</name><parameter_list>(<parameter><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type> <name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_orientation</name> <operator>==</operator> <name>ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>axis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_orientation</name> <operator>==</operator> <name>ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>-</operator><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_orientation</name> <operator>==</operator> <name>ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>-</operator><name><name>axis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>button</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>&lt;</operator> <operator>-</operator><name>threshold</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>button</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>&gt;</operator> <name>threshold</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>button</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>button_down</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calibrate_button</name><parameter_list>(<parameter><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>this</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int stickc, axisc, joyc, buttonc;

poll_joystick();

joyc = al_get_num_joysticks();

while (joyc--) {

stickc = joy[joyc].num_sticks;

while (stickc--) {

axisc = joy[joyc].stick[stickc].num_axis;

while (axisc--) {

if (joy[joyc].stick[stickc].axis[axisc].d1) {

((int *)(this-&gt;private_data))[i] =

4 | 2 | (joyc &lt;&lt; 8) | (stickc &lt;&lt; 16) | (axisc &lt;&lt; 24);

return 1;

}

if (joy[joyc].stick[stickc].axis[axisc].d2) {

((int *)(this-&gt;private_data))[i] =

4 | (joyc &lt;&lt; 8) | (stickc &lt;&lt; 16) | (axisc &lt;&lt; 24);

return 1;

}

}

}

buttonc = joy[joyc].num_buttons;

while (buttonc--) {

if (joy[joyc].button[buttonc].b) {

((int *)(this-&gt;private_data))[i] =

4 | 1 | (joyc &lt;&lt; 8) | (buttonc &lt;&lt; 16);

return 1;

}

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_button_description</name><parameter_list>(<parameter><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>private_data</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>private_data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>RetMessage</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"Unassigned"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>RetMessage</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RetMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Pad %d Button %d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>RetMessage</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>RetMessage</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RetMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Pad %d Stick %d Axis %d (%s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>private_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">"+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>RetMessage</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VCONTROLLER</name> <modifier>*</modifier></type><name>create_gamepad_controller</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VCONTROLLER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>button</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>private_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>poll</name></name> <operator>=</operator> <name>poll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>calibrate_button</name></name> <operator>=</operator> <name>calibrate_button</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>get_button_description</name></name> <operator>=</operator> <name>get_button_description</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>read_config</name></name> <operator>=</operator> <name>read_config</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>write_config</name></name> <operator>=</operator> <name>write_config</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_config</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gamepad_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_BEGIN</name></expr>:</case>

<expr_stmt><expr><name>button_down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_END</name></expr>:</case>

<expr_stmt><expr><name>button_down</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>axis</name><index>[<expr><name><name>event</name><operator>-&gt;</operator><name>joystick</name><operator>.</operator><name>axis</name></name></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>joystick</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gamepad_button</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>button_down</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
