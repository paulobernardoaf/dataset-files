<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\global.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"background_scroller.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"demodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"game.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"music.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framework.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fullscreen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>controller_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>fullscreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>controller_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_width</name> <init>= <expr><literal type="number">640</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_height</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_orientation</name> <init>= <expr><name>ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_width</name> <init>= <expr><literal type="number">640</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_height</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_samples</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_vsync</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>logic_framerate</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_frame_skip</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit_framerate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_framerate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reduce_cpu_usage</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sound_volume</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>music_volume</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shadow_offset</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VCONTROLLER</name> <modifier>*</modifier></type><name><name>controller</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>config_path</name><index>[<expr><name>DEMO_PATH_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>data_path</name><index>[<expr><name>DEMO_PATH_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_ENTRY</name> <modifier>*</modifier></type><name>demo_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>GameError</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>load_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>demo_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DEMO_ERROR_ALLEGRO</name></expr>:</case>

<return>return <expr><literal type="string">"Allegro error"</literal></expr>;</return>

<case>case <expr><name>DEMO_ERROR_GFX</name></expr>:</case>

<return>return <expr><literal type="string">"can't find suitable screen update driver"</literal></expr>;</return>

<case>case <expr><name>DEMO_ERROR_MEMORY</name></expr>:</case>

<return>return <expr><literal type="string">"ran out of memory"</literal></expr>;</return>

<case>case <expr><name>DEMO_ERROR_VIDEOMEMORY</name></expr>:</case>

<return>return <expr><literal type="string">"not enough VRAM"</literal></expr>;</return>

<case>case <expr><name>DEMO_ERROR_TRIPLEBUFFER</name></expr>:</case>

<return>return <expr><literal type="string">"triple buffering not supported"</literal></expr>;</return>

<case>case <expr><name>DEMO_ERROR_DATA</name></expr>:</case>

<return>return <expr><literal type="string">"can't load menu data"</literal></expr>;</return>

<case>case <expr><name>DEMO_ERROR_GAMEDATA</name></expr>:</case>

<return>return <expr><name>GameError</name></expr>;</return>

<case>case <expr><name>DEMO_OK</name></expr>:</case>

<return>return <expr><literal type="string">"OK"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_config_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>v</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_config_int</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_global_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>al_load_config_file</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fullscreen</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"bit_depth"</literal></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_width</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"screen_width"</literal></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_height</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"screen_height"</literal></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window_width</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"window_width"</literal></expr></argument>, <argument><expr><name>window_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>window_height</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"window_height"</literal></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_samples</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name>screen_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_vsync</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"vsync"</literal></expr></argument>, <argument><expr><name>use_vsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>logic_framerate</name> <operator>=</operator>

<call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"logic_framerate"</literal></expr></argument>, <argument><expr><name>logic_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit_framerate</name> <operator>=</operator>

<call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"limit_framerate"</literal></expr></argument>, <argument><expr><name>limit_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_frame_skip</name> <operator>=</operator>

<call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"max_frame_skip"</literal></expr></argument>, <argument><expr><name>max_frame_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display_framerate</name> <operator>=</operator>

<call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"display_framerate"</literal></expr></argument>, <argument><expr><name>display_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reduce_cpu_usage</name> <operator>=</operator>

<call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"reduce_cpu_usage"</literal></expr></argument>, <argument><expr><name>reduce_cpu_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sound_volume</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SOUND"</literal></expr></argument>, <argument><expr><literal type="string">"sound_volume"</literal></expr></argument>, <argument><expr><name>sound_volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>music_volume</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SOUND"</literal></expr></argument>, <argument><expr><literal type="string">"music_volume"</literal></expr></argument>, <argument><expr><name>music_volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_sound_volume</name><argument_list>(<argument><expr><name>sound_volume</name> <operator>/</operator> <literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_music_volume</name><argument_list>(<argument><expr><name>music_volume</name> <operator>/</operator> <literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>controller_id</name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"CONTROLS"</literal></expr></argument>, <argument><expr><literal type="string">"controller_id"</literal></expr></argument>, <argument><expr><name>controller_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_global_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>al_load_config_file</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"bit_depth"</literal></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"screen_width"</literal></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"screen_height"</literal></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"window_width"</literal></expr></argument>, <argument><expr><name>window_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"window_height"</literal></expr></argument>, <argument><expr><name>window_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name>screen_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GFX"</literal></expr></argument>, <argument><expr><literal type="string">"vsync"</literal></expr></argument>, <argument><expr><name>use_vsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"logic_framerate"</literal></expr></argument>, <argument><expr><name>logic_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"max_frame_skip"</literal></expr></argument>, <argument><expr><name>max_frame_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"limit_framerate"</literal></expr></argument>, <argument><expr><name>limit_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"display_framerate"</literal></expr></argument>, <argument><expr><name>display_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"TIMING"</literal></expr></argument>, <argument><expr><literal type="string">"reduce_cpu_usage"</literal></expr></argument>, <argument><expr><name>reduce_cpu_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SOUND"</literal></expr></argument>, <argument><expr><literal type="string">"sound_volume"</literal></expr></argument>, <argument><expr><name>sound_volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SOUND"</literal></expr></argument>, <argument><expr><literal type="string">"music_volume"</literal></expr></argument>, <argument><expr><name>music_volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"CONTROLS"</literal></expr></argument>, <argument><expr><literal type="string">"controller_id"</literal></expr></argument>, <argument><expr><name>controller_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_save_config_file</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>DATA_ENTRY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>subfolder</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>spath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s.%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subfolder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Loading %s...\n"</literal></expr></argument>, <argument><expr><name>spath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>spath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name> <operator>=</operator> <call><name>al_load_sample</name><argument_list>(<argument><expr><name>spath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"music"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name> <operator>=</operator> <call><name>al_load_audio_stream</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed loading %s.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>subfolder</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>subfolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name><name>d</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>change_gfx_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>DEMO_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fullscreen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALLEGRO_WINDOWED</name> <operator>|</operator> <name>ALLEGRO_RESIZABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_width</name> <operator>=</operator> <name>window_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_height</name> <operator>=</operator> <name>window_height</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fullscreen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALLEGRO_FULLSCREEN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_samples</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>, <argument><expr><name>screen_samples</name></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SUPPORTED_ORIENTATIONS</name></expr></argument>,

<argument><expr><name>ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE</name></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DEMO_ERROR_ALLEGRO</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_window_constraints</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_width</name> <operator>=</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_height</name> <operator>=</operator> <call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_orientation</name> <operator>=</operator> <name>ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>load_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DEMO_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_background</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DATA_ENTRY</name> <modifier>*</modifier></type><name>load_data_entries</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATA_ENTRY</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>DEMO_DATA_COUNT</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_BACK</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"back"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_FONT</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"cancunsmall"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_FONT_LOGO</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"logofont"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_MIDI_INGAME</name></expr></argument>, <argument><expr><literal type="string">"music"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"skate2"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_MIDI_INTRO</name></expr></argument>, <argument><expr><literal type="string">"music"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"intro_music"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_MIDI_MENU</name></expr></argument>, <argument><expr><literal type="string">"music"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"menu_music"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_MIDI_SUCCESS</name></expr></argument>, <argument><expr><literal type="string">"music"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"endoflevel"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_BUTTON</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"button"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_WELCOME</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="string">"welcome"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_SKATING</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"skating"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_WAVE</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"wave"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_DING</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"ding"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_DOOROPEN</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"dooropen"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_SAMPLE_POP</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"pop"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_BANANAS</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"bananas"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_CHERRIES</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"cherries"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_CLOUD</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"cloud"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_DOOROPEN</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"dooropen"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_DOORSHUT</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"doorshut"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_EXITSIGN</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"exitsign"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_GRASS</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"grass"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_ICECREAM</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"icecream"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_ICE</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"ice"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_ICETIP</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"icetip"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_ORANGE</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"orange"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATEFAST</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skatefast"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATEMED</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skatemed"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATER1</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skater1"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATER2</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skater2"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATER3</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skater3"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATER4</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skater4"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SKATESLOW</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"skateslow"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SOIL</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"soil"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_SWEET</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"sweet"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEMO_BMP_WATER</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>, <argument><expr><literal type="string">"water"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>unload_data_entries</name><parameter_list>(<parameter><decl><type><name>DATA_ENTRY</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_destroy_sample</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"music"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_destroy_audio_stream</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>load_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>demo_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DEMO_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>demo_data</name> <operator>=</operator> <call><name>load_data_entries</name><argument_list>(<argument><expr><name>data_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>demo_data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DEMO_ERROR_DATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>GameError</name> <operator>=</operator> <call><name>load_game_resources</name><argument_list>(<argument><expr><name>data_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DEMO_ERROR_GAMEDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>DEMO_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>unload_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>demo_data</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unload_data_entries</name><argument_list>(<argument><expr><name>demo_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unload_game_resources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>demo_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>demo_textprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textout_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>demo_textprintf_right</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textout_centre</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>demo_textprintf_centre</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textprintf_centre</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_ex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textprintf_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_ex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_ex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demo_textprintf_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>align</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_LEFT</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>shadow_textprintf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_ex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>shadow_offset</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>shadow_offset</name></expr></argument>, <argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>align</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf_ex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>my_stricmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

</unit>
