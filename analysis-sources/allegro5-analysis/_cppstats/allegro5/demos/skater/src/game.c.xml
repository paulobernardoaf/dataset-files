<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\game.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"game.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"menus.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"music.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"physics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vcontroller.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>KeyFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>RequiredObjectsLeft</name></decl>, <decl><type ref="prev"/><name>TotalObjectsLeft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>PlayerPos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>PlayerVec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>ScrollPos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>PlayerAnim</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>LevelState</name></name> <modifier>*</modifier></type><name>LvlState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>LeftWindow</name> <init>= <expr><operator>-</operator><literal type="number">120</literal></expr></init></decl>, <decl><type ref="prev"/><name>RightWindow</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>Pusher</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_COLOR</name></type> <name>cloud_color</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_STRENGTH</name></cpp:macro> <cpp:value>0.14f</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_newid</name> <init>= <expr><name>DEMO_STATE_NEW_GAME</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>newid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_newid</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_continueid</name> <init>= <expr><name>DEMO_STATE_CONTINUE_GAME</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>continueid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>_continueid</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>CurrentID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>water</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>WaterVoice</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>WaterVoice2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>WaveNoise</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>cloud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>al_fixed</name> <modifier>*</modifier></type><name>TanTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CalibRes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>TexX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>WaveY</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

}</block> <decl><name><name>Clouds</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>double</name></type> <name>CloudX</name></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type><name>load_game_resources</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"load_game_resources\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_create_path_for_directory</name><argument_list>(<argument><expr><name>data_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"level.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Lvl</name> <operator>=</operator> <call><name>LoadLevel</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Lvl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GetLevelError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReturnState</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>LvlState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PlayerAnim</name> <operator>=</operator> <call><name>SeedPlayerAnimation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cloud</name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"cloud"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>water</name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"water"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">480</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>TanTable</name> <operator>=</operator> <operator>(</operator><name>al_fixed</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>al_fixed</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TanTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator>

<call><name>al_ftofix</name><argument_list>(<argument><expr><call><name>tan</name>

<argument_list>(<argument><expr><operator>(</operator><literal type="number">3.141592654f</literal> <operator>/</operator> <literal type="number">2.0f</literal> <operator>-</operator>

<call><name>atan2</name><argument_list>(<argument><expr><literal type="number">0.75f</literal> <operator>*</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">480</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>WaveNoise</name> <operator>=</operator> <call><name>ObtainSample</name><argument_list>(<argument><expr><literal type="string">"wave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cloud_color</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>unload_game_resources</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unload_game_resources\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreePlayerAnimation</name><argument_list>(<argument><expr><name>PlayerAnim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PlayerAnim</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeState</name><argument_list>(<argument><expr><name>LvlState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>LvlState</name> <operator>=</operator> <call><name>BorrowState</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLevel</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Lvl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>TanTable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>TanTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>TanTable</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>WaterVoice</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name>WaterVoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_sample_instance</name><argument_list>(<argument><expr><name>WaterVoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WaterVoice</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>WaterVoice2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name>WaterVoice2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_sample_instance</name><argument_list>(<argument><expr><name>WaterVoice2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WaterVoice2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PauseAnimation</name><argument_list>(<argument><expr><name>PlayerAnim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GenericInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>CloudX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Clouds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>Clouds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>Clouds</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator>

<call><name>rand</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>screen_width</name> <operator>*</operator> <literal type="number">480</literal> <operator>/</operator> <name>screen_height</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <name>RAND_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.5</literal> <operator>*</operator> <literal type="number">480</literal> <operator>/</operator> <name>RAND_MAX</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>WaterVoice</name> <operator>=</operator> <call><name>al_create_sample_instance</name><argument_list>(<argument><expr><name>WaveNoise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_sample_instance_playmode</name><argument_list>(<argument><expr><name>WaterVoice</name></expr></argument>, <argument><expr><name>ALLEGRO_PLAYMODE_BIDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_sample_instance_gain</name><argument_list>(<argument><expr><name>WaterVoice</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><name>WaterVoice</name></expr></argument>, <argument><expr><call><name>al_get_default_mixer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_play_sample_instance</name><argument_list>(<argument><expr><name>WaterVoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WaterVoice2</name> <operator>=</operator> <call><name>al_create_sample_instance</name><argument_list>(<argument><expr><name>WaveNoise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_sample_instance_playmode</name><argument_list>(<argument><expr><name>WaterVoice2</name></expr></argument>,

<argument><expr><name>ALLEGRO_PLAYMODE_BIDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_sample_instance_gain</name><argument_list>(<argument><expr><name>WaterVoice2</name></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><name>WaterVoice2</name></expr></argument>, <argument><expr><call><name>al_get_default_mixer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_play_sample_instance</name><argument_list>(<argument><expr><name>WaterVoice2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>play_music</name><argument_list>(<argument><expr><name>DEMO_MIDI_INGAME</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnpauseAnimation</name><argument_list>(<argument><expr><name>PlayerAnim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ContinueInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GenericInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CurrentID</name> <operator>=</operator> <call><name>continueid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GameInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enable_continue_game</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetInitialState</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>PlayerStartPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>PlayerStartPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>PlayerVec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>RequiredObjectsLeft</name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>ObjectsRequired</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>TotalObjectsLeft</name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>TotalObjects</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GenericInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CurrentID</name> <operator>=</operator> <call><name>newid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawClouds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>CloudX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>(</operator><name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>Clouds</name><index>[<expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator>

<operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">32.0</literal> <operator>/</operator> <name>RAND_MAX</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Clouds</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>screen_height</name> <operator>/</operator> <name>RAND_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>cloud</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>x1</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>y1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_v</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GameDraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>Points</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>transform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chw</name></decl>, <decl><type ref="prev"/><name>chh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_scale_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>, <argument><expr><name>screen_height</name> <operator>/</operator> <literal type="number">480.0</literal></expr></argument>, <argument><expr><name>screen_height</name> <operator>/</operator> <literal type="number">480.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>screen_width</name> <operator>*</operator> <literal type="number">480.0</literal> <operator>/</operator> <name>screen_height</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">480</literal> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>y2</name></decl>, <decl><type ref="prev"/><name>lowy</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>index</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">480</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>al_fixtof</name><argument_list>(<argument><expr><call><name>al_fixmul</name><argument_list>(<argument><expr><name><name>TanTable</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">240</literal><operator>)</operator> <operator>*</operator> <literal type="number">4096.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">261</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">5.0f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>depth</name> <operator>*</operator> <literal type="number">65536</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><literal type="number">256</literal> <operator>*</operator> <literal type="number">65536</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>lowy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">65536.0</literal> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">128.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>c</name> <operator>/</operator> <literal type="number">4.0</literal> <operator>-</operator> <literal type="number">125.0f</literal> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <name>WaveY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>depth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y2</name> <operator>&lt;</operator> <name>lowy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lowy</name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">64</literal> <operator>+</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name>TexX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>Points</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>depth</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>Points</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>u</name> <operator>-</operator> <name>depth</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>Points</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>u</name> <operator>-</operator> <name>depth</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_v</name><argument_list>(<argument><expr><name>Points</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>u</name> <operator>+</operator> <name>depth</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>Points</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>water</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>lowy</name> <operator>*</operator> <name>screen_height</name> <operator>/</operator> <literal type="number">480</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>cloud_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawClouds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>DrawLevelBackground</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>ScrollPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_EDGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>solid_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>E</name> <init>= <expr><name><name>Lvl</name><operator>-&gt;</operator><name>AllEdges</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>E</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,

<argument><expr><name><name>E</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>screen_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>E</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>screen_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>E</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>screen_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>E</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>screen_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name><name>E</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_OBJECTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>O</name> <init>= <expr><name><name>Lvl</name><operator>-&gt;</operator><name>AllObjects</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>O</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rect</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,

<argument><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>screen_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>TL</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>screen_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>screen_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>O</name><operator>-&gt;</operator><name>Bounder</name><operator>.</operator><name>BR</name><operator>.</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>screen_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>screen_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>screen_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>GetCurrentBitmap</name><argument_list>(<argument><expr><name>PlayerAnim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chw</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chh</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_scaled_rotated_bitmap</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>chw</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><name>chh</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">480.0</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>PlayerPos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_FLIP</name></expr> ?</condition><then> <expr><name>ALLEGRO_FLIP_HORIZONTAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLevelForeground</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf</name><argument_list>(<argument><expr><name>demo_font</name></expr></argument>,

<argument><expr><name>screen_width</name> <operator>-</operator> <call><name>al_get_text_width</name><argument_list>(<argument><expr><name>demo_font</name></expr></argument>,

<argument><expr><literal type="string">"Items Required: 1000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Items Required: %d"</literal></expr></argument>,

<argument><expr><name>RequiredObjectsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demo_textprintf</name><argument_list>(<argument><expr><name>demo_font</name></expr></argument>,

<argument><expr><name>screen_width</name> <operator>-</operator> <call><name>al_get_text_width</name><argument_list>(<argument><expr><name>demo_font</name></expr></argument>,

<argument><expr><literal type="string">"Items Remaining: 1000"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>+</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>demo_font</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"Items Remaining: %d"</literal></expr></argument>, <argument><expr><name>TotalObjectsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GameUpdate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>QuadTreeNode</name></name> <modifier>*</modifier></type><name>CollTree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Container</name></name> <modifier>*</modifier></type><name>EPtr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>RequiredObjectsLeft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DEMO_STATE_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>TexX</name> <operator>+=</operator> <literal type="number">0.3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>WaveY</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>CloudX</name> <operator>-=</operator> <literal type="number">0.125f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>LeftWindow</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>LeftWindow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>RightWindow</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScrollPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>RightWindow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>-</operator><literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScrollPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_FLIP</name><operator>)</operator> <operator>^</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">0.5f</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>PlayerPos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator>

<operator>-</operator><name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">0.5f</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>KEYFLAG_FLIP</name></expr></else></ternary><operator>)</operator></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>LeftWindow</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>LeftWindow</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RightWindow</name> <operator>&lt;</operator> <literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RightWindow</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>LeftWindow</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>LeftWindow</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RightWindow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RightWindow</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>controller</name><index>[<expr><name>controller_id</name></expr>]</index></name><operator>-&gt;</operator><call><name>poll</name><argument_list>(<argument><expr><name><name>controller</name><index>[<expr><name>controller_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>controller</name><index>[<expr><name>controller_id</name></expr>]</index></name><operator>-&gt;</operator><name><name>button</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Pusher</name> <operator>+=</operator> <literal type="number">0.005f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Pusher</name> <operator>&gt;=</operator> <name>PLAYER_STRENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Pusher</name> <operator>=</operator> <name>PLAYER_STRENGTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>|=</operator> <name>KEYFLAG_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Pusher</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>KEYFLAG_LEFT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>controller</name><index>[<expr><name>controller_id</name></expr>]</index></name><operator>-&gt;</operator><name><name>button</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Pusher</name> <operator>+=</operator> <literal type="number">0.005f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Pusher</name> <operator>&gt;=</operator> <name>PLAYER_STRENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Pusher</name> <operator>=</operator> <name>PLAYER_STRENGTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>|=</operator> <name>KEYFLAG_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Pusher</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>KEYFLAG_RIGHT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>controller</name><index>[<expr><name>controller_id</name></expr>]</index></name><operator>-&gt;</operator><name><name>button</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>KeyFlags</name> <operator>|=</operator> <name>KEYFLAG_JUMP</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>KeyFlags</name> <operator>&amp;</operator> <name>KEYFLAG_JUMPING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>PlayerVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>PlayerVec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>KeyFlags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>KEYFLAG_JUMP</name> <operator>|</operator> <name>KEYFLAG_JUMP_ISSUED</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>CollTree</name> <operator>=</operator> <call><name>RunPhysics</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>, <argument><expr><name>PlayerPos</name></expr></argument>, <argument><expr><name>PlayerVec</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>, <argument><expr><name>PlayerAnim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>CollTree</name><operator>-&gt;</operator><name>Contents</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>EPtr</name> <operator>&amp;&amp;</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>OBJECT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>OBJFLAGS_VISIBLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>SqDistance</name></decl>, <decl><type ref="prev"/><name>XDiff</name></decl>, <decl><type ref="prev"/><name>YDiff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>XDiff</name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>YDiff</name> <operator>=</operator> <name><name>PlayerPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>SqDistance</name> <operator>=</operator> <name>XDiff</name> <operator>*</operator> <name>XDiff</name> <operator>+</operator> <name>YDiff</name> <operator>*</operator> <name>YDiff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SqDistance</name> <operator>&lt;=</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name> <operator>*</operator>

<name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Radius</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>OBJFLAGS_DOOR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RequiredObjectsLeft</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>CollectNoise</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>play_sound</name><argument_list>(<argument><expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator>

<name>CollectNoise</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>RequiredObjectsLeft</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>OBJFLAGS_VISIBLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>CollectNoise</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>play_sound</name><argument_list>(<argument><expr><name><name>EPtr</name><operator>-&gt;</operator><name>Content</name><operator>.</operator><name>O</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>CollectNoise</name></name></expr></argument>,

<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RequiredObjectsLeft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>RequiredObjectsLeft</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RequiredObjectsLeft</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetDoorOpen</name><argument_list>(<argument><expr><name>Lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>TotalObjectsLeft</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EPtr</name> <operator>=</operator> <name><name>EPtr</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><call><name>key_pressed</name><argument_list>(<argument><expr><name>ALLEGRO_KEY_ESCAPE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DEMO_STATE_MAIN_MENU</name></expr> </then><else>: <expr><name>CurrentID</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroy_game</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeState</name><argument_list>(<argument><expr><name>LvlState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>LvlState</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_new_game</name><parameter_list>(<parameter><decl><type><name>GAMESTATE</name> <modifier>*</modifier></type> <name>game</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>newid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>GameInit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>GameUpdate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>draw</name></name> <operator>=</operator> <name>GameDraw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>deinit</name></name> <operator>=</operator> <name>DeInit</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_continue_game</name><parameter_list>(<parameter><decl><type><name>GAMESTATE</name> <modifier>*</modifier></type> <name>game</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>continueid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>ContinueInit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>GameUpdate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>draw</name></name> <operator>=</operator> <name>GameDraw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>game</name><operator>-&gt;</operator><name>deinit</name></name> <operator>=</operator> <name>DeInit</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
