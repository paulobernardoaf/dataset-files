<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\transition.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transition.h"</cpp:file></cpp:include>

<function><type><name>TRANSITION</name> <modifier>*</modifier></type><name>create_transition</name><parameter_list>(<parameter><decl><type><name>GAMESTATE</name> <modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>GAMESTATE</name> <modifier>*</modifier></type> <name>to</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TRANSITION</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TRANSITION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>from</name><operator>-&gt;</operator><name>draw</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>to_bmp</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>to_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>to</name><operator>-&gt;</operator><name>draw</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroy_transition</name><parameter_list>(<parameter><decl><type><name>TRANSITION</name> <modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>to_bmp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>to_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>update_transition</name><parameter_list>(<parameter><decl><type><name>TRANSITION</name> <modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>progress</name></name> <operator>+=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>logic_framerate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>progress</name></name> <operator>&gt;=</operator> <name><name>t</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>draw_transition</name><parameter_list>(<parameter><decl><type><name>TRANSITION</name> <modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>progress</name></name> <operator>*</operator> <name>screen_height</name> <operator>/</operator> <name><name>t</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>to_bmp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_height</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>from_bmp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>, <argument><expr><name>screen_height</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
