<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\demos\skater\src\anim.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"anim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"game.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>double</name></type> <name>LastSpeedStore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>LastSpeed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>OnLand</name></decl>;</decl_stmt>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>GetCurrentBitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>Anim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>LastSpeedStore</name> <operator>=</operator> <name>LastSpeed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>LastSpeed</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal> <operator>&amp;&amp;</operator> <name>OnLand</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_sample_instance_gain</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name>LastSpeed</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_set_sample_instance_gain</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>Anim</name><operator>-&gt;</operator><name>CBitmap</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AdvanceAnimation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>Anim</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Distance</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>OnPlatform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>TimeCount</name></name> <operator>+=</operator> <name>Distance</name></expr>;</expr_stmt>

<expr_stmt><expr><name>OnLand</name> <operator>=</operator> <name>OnPlatform</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>OnPlatform</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>CBitmap</name></name> <operator>=</operator> <name><name>Anim</name><operator>-&gt;</operator><name>Fast</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>LastSpeed</name> <operator>=</operator> <name>Distance</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>Distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>CBitmap</name></name> <operator>=</operator> <name><name>Anim</name><operator>-&gt;</operator><name>Fast</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Distance</name> <operator>&lt;</operator> <literal type="number">12.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>LastSpeedStore</name> <operator>&lt;</operator> <literal type="number">12.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>CBitmap</name></name> <operator>=</operator> <name><name>Anim</name><operator>-&gt;</operator><name>Medium</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Distance</name> <operator>&lt;</operator> <literal type="number">5.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>LastSpeedStore</name> <operator>&lt;</operator> <literal type="number">5.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>CBitmap</name></name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name>KeyFlags</name> <operator>&amp;</operator> <operator>(</operator><name>KEYFLAG_LEFT</name> <operator>|</operator> <name>KEYFLAG_RIGHT</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>Anim</name><operator>-&gt;</operator>

<name>Animation</name><index>[<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>Anim</name><operator>-&gt;</operator><name>TimeCount</name></name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>Anim</name><operator>-&gt;</operator><name>Slow</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>SeedPlayerAnimation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>Anim</name> <init>=

<expr><operator>(</operator>struct <name>Animation</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Animation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>Sound</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>Animation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skater2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>Animation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skater3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>Animation</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skater4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>CBitmap</name></name> <operator>=</operator> <name><name>Anim</name><operator>-&gt;</operator><name>Still</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skater1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>Slow</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skateslow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>Medium</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skatemed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>Fast</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><literal type="string">"skatefast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Sound</name> <operator>=</operator> <call><name>ObtainSample</name><argument_list>(<argument><expr><literal type="string">"skating"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name> <operator>=</operator> <call><name>al_create_sample_instance</name><argument_list>(<argument><expr><name>Sound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_sample_instance_playmode</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PLAYMODE_BIDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>Anim</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreePlayerAnimation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>Anim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Anim</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_sample_instance</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>Anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>PauseAnimation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>Anim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_stop_sample_instance</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnpauseAnimation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Animation</name></name> <modifier>*</modifier></type><name>Anim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_attach_sample_instance_to_mixer</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>, <argument><expr><call><name>al_get_default_mixer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_play_sample_instance</name><argument_list>(<argument><expr><name><name>Anim</name><operator>-&gt;</operator><name>SkateVoice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
