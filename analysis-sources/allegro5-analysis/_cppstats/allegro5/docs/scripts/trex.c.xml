<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\docs\scripts\trex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trex.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UINCODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scisprint</name></cpp:macro> <cpp:value>iswprint</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scstrlen</name></cpp:macro> <cpp:value>wcslen</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scprintf</name></cpp:macro> <cpp:value>wprintf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L(x)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scisprint</name></cpp:macro> <cpp:value>isprint</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scstrlen</name></cpp:macro> <cpp:value>strlen</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scprintf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TREX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name><name>g_nnames</name><index>[]</index></name> <init>=

<expr><block>{

<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_GREEDY"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_OR"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_EXPR"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_NOCAPEXPR"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_DOT"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_CLASS"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_CCLASS"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_NCLASS"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_RANGE"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_CHAR"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_EOL"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"OP_BOL"</literal></expr></argument>)</argument_list></call></expr>,<macro><name>_SC</name><argument_list>(<argument><literal type="string">"OP_WB"</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_GREEDY</name></cpp:macro> <cpp:value>(MAX_CHAR+1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_OR</name></cpp:macro> <cpp:value>(MAX_CHAR+2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_EXPR</name></cpp:macro> <cpp:value>(MAX_CHAR+3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_NOCAPEXPR</name></cpp:macro> <cpp:value>(MAX_CHAR+4)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_DOT</name></cpp:macro> <cpp:value>(MAX_CHAR+5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CLASS</name></cpp:macro> <cpp:value>(MAX_CHAR+6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CCLASS</name></cpp:macro> <cpp:value>(MAX_CHAR+7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_NCLASS</name></cpp:macro> <cpp:value>(MAX_CHAR+8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_RANGE</name></cpp:macro> <cpp:value>(MAX_CHAR+9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CHAR</name></cpp:macro> <cpp:value>(MAX_CHAR+10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_EOL</name></cpp:macro> <cpp:value>(MAX_CHAR+11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BOL</name></cpp:macro> <cpp:value>(MAX_CHAR+12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_WB</name></cpp:macro> <cpp:value>(MAX_CHAR+13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_ANY_CHAR</name></cpp:macro> <cpp:value>('.')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_GREEDY_ONE_OR_MORE</name></cpp:macro> <cpp:value>('+')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_GREEDY_ZERO_OR_MORE</name></cpp:macro> <cpp:value>('*')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_GREEDY_ZERO_OR_ONE</name></cpp:macro> <cpp:value>('?')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_BRANCH</name></cpp:macro> <cpp:value>('|')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_END_OF_STRING</name></cpp:macro> <cpp:value>('$')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_BEGINNING_OF_STRING</name></cpp:macro> <cpp:value>('^')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREX_SYMBOL_ESCAPE_CHAR</name></cpp:macro> <cpp:value>('\\')</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>TRexNodeType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tagTRexNode</name><block>{

<decl_stmt><decl><type><name>TRexNodeType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

}</block></struct></type><name>TRexNode</name>;</typedef>

<struct>struct <name>TRex</name><block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>_eol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>_bol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>_nodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_nallocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_nsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_nsubexpr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TRexMatch</name> <modifier>*</modifier></type><name>_matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_currsubexp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_jmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier><modifier>*</modifier></type><name>_error</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>trex_list</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_newnode</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>TRexNodeType</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TRexNode</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newid</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>OP_EXPR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nsubexpr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_nallocated</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>exp</name><operator>-&gt;</operator><name>_nsize</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nallocated</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name></name> <operator>=</operator> <operator>(</operator><name>TRexNode</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name></name></expr></argument>, <argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nallocated</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRexNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>exp</name><operator>-&gt;</operator><name>_nsize</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newid</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nsize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>newid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trex_error</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_error</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>jmp_buf</name><operator>*</operator><operator>)</operator><name><name>exp</name><operator>-&gt;</operator><name>_jmpbuf</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trex_expect</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>)</operator> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"expected paren"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TRexChar</name></type> <name>trex_escapechar</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <name>TREX_SYMBOL_ESCAPE_CHAR</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><literal type="char">'\v'</literal></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><literal type="char">'\n'</literal></expr>;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><literal type="char">'\t'</literal></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><literal type="char">'\r'</literal></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><literal type="char">'\f'</literal></expr>;</return>

<default>default:</default> <return>return <expr><operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>scisprint</name><argument_list>(<argument><expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"letter expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_charclass</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>classid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_CCLASS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>classid</name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_charnode</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,<parameter><decl><type><name>TRexBool</name></type> <name>isclass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TRexChar</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <name>TREX_SYMBOL_ESCAPE_CHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">'\v'</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'W'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> 

<return>return <expr><call><name>trex_charclass</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>isclass</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_WB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> 

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></if></if_stmt> 

<default>default:</default> 

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> 

<return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>scisprint</name><argument_list>(<argument><expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"letter expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> 

<return>return <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_class</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>chain</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <name>TREX_SYMBOL_BEGINNING_OF_STRING</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_NCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"empty class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"unfinished range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>first</name><operator>&gt;</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"invalid range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OP_CCLASS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"cannot use character classes in ranges"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>trex_escapechar</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>chain</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>first</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>chain</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>trex_charnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>TRex_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>trex_charnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>TRex_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>first</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>chain</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_parsenumber</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>-</operator><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>positions</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>positions</name><operator>==</operator><literal type="number">1000000000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"overflow in numeric constant"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>positions</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></while><empty_stmt>;</empty_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_element</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'('</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>expr</name></decl>,<decl><type ref="prev"/><name>newn</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trex_expect</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_NOCAPEXPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_EXPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>newn</name> <operator>=</operator> <call><name>trex_list</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>expr</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>newn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trex_expect</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_class</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trex_expect</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TREX_SYMBOL_END_OF_STRING</name></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>

<case>case <expr><name>TREX_SYMBOL_ANY_CHAR</name></expr>:</case> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_DOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_charnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>TRex_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<block>{<block_content>

<decl_stmt><decl><type><name>TRexBool</name></type> <name>isgreedy</name> <init>= <expr><name>TRex_False</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>p0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>TREX_SYMBOL_GREEDY_ZERO_OR_MORE</name></expr>:</case> <expr_stmt><expr><name>p0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>isgreedy</name> <operator>=</operator> <name>TRex_True</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TREX_SYMBOL_GREEDY_ONE_OR_MORE</name></expr>:</case> <expr_stmt><expr><name>p0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>isgreedy</name> <operator>=</operator> <name>TRex_True</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TREX_SYMBOL_GREEDY_ZERO_OR_ONE</name></expr>:</case> <expr_stmt><expr><name>p0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>isgreedy</name> <operator>=</operator> <name>TRex_True</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"number expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>trex_parsenumber</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>trex_parsenumber</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trex_expect</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">", or } expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>isgreedy</name> <operator>=</operator> <name>TRex_True</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>isgreedy</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nnode</name> <init>= <expr><call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_GREEDY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>nnode</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>nnode</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p0</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nnode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <name>TREX_SYMBOL_BRANCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <literal type="char">')'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <name>TREX_SYMBOL_GREEDY_ZERO_OR_MORE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <name>TREX_SYMBOL_GREEDY_ONE_OR_MORE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nnode</name> <init>= <expr><call><name>trex_element</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>nnode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trex_list</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <name>TREX_SYMBOL_BEGINNING_OF_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_BOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>trex_element</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>==</operator> <name>TREX_SYMBOL_BRANCH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>,<decl><type ref="prev"/><name>tright</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>temp</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tright</name> <operator>=</operator> <call><name>trex_list</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>temp</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name>tright</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TRexBool</name></type> <name>trex_matchcclass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cclass</name></decl></parameter>,<parameter><decl><type><name>TRexChar</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>cclass</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal><operator>)</operator></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>!</operator><call><name>iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>ispunct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>!</operator><call><name>ispunct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>TRex_False</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TRexBool</name></type> <name>trex_matchclass</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>,<parameter><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,<parameter><decl><type><name>TRexChar</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<switch>switch<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OP_RANGE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRex_True</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>OP_CCLASS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>trex_matchcclass</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRex_True</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content><return>return <expr><name>TRex_True</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><name>TRex_False</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>trex_matchnode</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>,<parameter><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,<parameter><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TRexNodeType</name></type> <name>type</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OP_GREEDY</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>greedystop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0000FFFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name><operator>&amp;</operator><literal type="number">0x0000FFFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>nmaches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>s</name><init>=<expr><name>str</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>good</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>greedystop</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>greedystop</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><operator>(</operator><name>nmaches</name> <operator>==</operator> <literal type="number">0xFFFF</literal> <operator>||</operator> <name>nmaches</name> <operator>&lt;</operator> <name>p1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>]</index></name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>greedystop</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nmaches</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>good</name><operator>=</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>greedystop</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>greedystop</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OP_GREEDY</name> <operator>||</operator>

<operator>(</operator><name><name>greedystop</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OP_GREEDY</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>greedystop</name><operator>-&gt;</operator><name>right</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0000FFFF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>gnext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>greedystop</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gnext</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>greedystop</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>gnext</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>greedystop</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>gnext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stop</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>p0</name> <operator>==</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>p0</name> <operator>==</operator> <name>nmaches</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>nmaches</name> <operator>&gt;=</operator> <name>p0</name> <operator>&amp;&amp;</operator> <name>p1</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>nmaches</name> <operator>&gt;=</operator> <name>p0</name> <operator>&amp;&amp;</operator> <name>nmaches</name> <operator>&lt;=</operator> <name>p1</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>&gt;=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>p0</name> <operator>==</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>p0</name> <operator>==</operator> <name>nmaches</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>good</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>nmaches</name> <operator>&gt;=</operator> <name>p0</name> <operator>&amp;&amp;</operator> <name>p1</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>good</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>nmaches</name> <operator>&gt;=</operator> <name>p0</name> <operator>&amp;&amp;</operator> <name>nmaches</name> <operator>&lt;=</operator> <name>p1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>good</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>OP_OR</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>asd</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>temp</name><init>=<expr><operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>asd</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>asd</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>asd</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>asd</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator><name>asd</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>asd</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>asd</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>OP_EXPR</name></expr>:</case>

<case>case <expr><name>OP_NOCAPEXPR</name></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capture</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OP_NOCAPEXPR</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name><name>exp</name><operator>-&gt;</operator><name>_currsubexp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>capture</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_currsubexp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name><index>[<expr><name>capture</name></expr>]</index></name><operator>.</operator><name>begin</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_currsubexp</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>subnext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subnext</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else <block>{<block_content>

<expr_stmt><expr><name>subnext</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>subnext</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>capture</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name><index>[<expr><name>capture</name></expr>]</index></name><operator>.</operator><name>begin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name><index>[<expr><name>capture</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>]</index></name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>capture</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name><index>[<expr><name>capture</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>cur</name> <operator>-</operator> <name><name>exp</name><operator>-&gt;</operator><name>_matches</name><index>[<expr><name>capture</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cur</name></expr>;</return>

</block_content>}</block> 

<case>case <expr><name>OP_WB</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name><name>exp</name><operator>-&gt;</operator><name>_bol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>str</name> <operator>==</operator> <name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>str</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>?</condition><then><expr><name>str</name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>?</condition><then><expr><name>NULL</name></expr></then><else>:<expr><name>str</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>OP_BOL</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>str</name> <operator>==</operator> <name><name>exp</name><operator>-&gt;</operator><name>_bol</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>str</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>OP_EOL</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>str</name> <operator>==</operator> <name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>str</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>OP_DOT</name></expr>:</case><block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>str</name></expr>;</return>

<case>case <expr><name>OP_NCLASS</name></expr>:</case>

<case>case <expr><name>OP_CLASS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><ternary><condition><expr><call><name>trex_matchclass</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>]</index></name></expr></argument>,<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>OP_CLASS</name></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary><operator>)</operator></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>OP_NCLASS</name></expr>?</condition><then><expr><name>TRex_True</name></expr></then><else>:<expr><name>TRex_False</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>OP_CCLASS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>trex_matchcclass</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<default>default:</default> 

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TRex</name> <modifier>*</modifier></type><name>trex_compile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>(</operator><name>TRex</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TRex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_bol</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nallocated</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>scstrlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRexChar</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name></name> <operator>=</operator> <operator>(</operator><name>TRexNode</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nallocated</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRexNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nsubexpr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_first</name></name> <operator>=</operator> <call><name>trex_newnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>OP_EXPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_jmpbuf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jmp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>jmp_buf</name><operator>*</operator><operator>)</operator><name><name>exp</name><operator>-&gt;</operator><name>_jmpbuf</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>trex_list</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name><name>exp</name><operator>-&gt;</operator><name>_first</name></name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>exp</name><operator>-&gt;</operator><name>_p</name></name><operator>!=</operator><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trex_error</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"unexpected character"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TREX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nsize</name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TRexNode</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nsize</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scprintf</name><argument_list>(<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>nsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name><operator>&gt;</operator><name>MAX_CHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scprintf</name><argument_list>(<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"[%02d] %10s "</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>g_nnames</name><index>[<expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name><operator>-</operator><name>MAX_CHAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scprintf</name><argument_list>(<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"[%02d] %10c "</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>scprintf</name><argument_list>(<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"left %02d right %02d next %02d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>,<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>,<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>scprintf</name><argument_list>(<argument><expr><call><name>_SC</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name></name> <operator>=</operator> <operator>(</operator><name>TRexMatch</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nsubexpr</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRexMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nsubexpr</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRexMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><call><name>trex_free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>exp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trex_free</name><parameter_list>(<parameter><decl><type><name>TRex</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>exp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_jmpbuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_jmpbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>TRexBool</name></type> <name>trex_match</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_bol</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name> <operator>=</operator> <name>text</name> <operator>+</operator> <call><name>scstrlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_currsubexp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name></name></expr></argument>,<argument><expr><name>text</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>res</name> <operator>!=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRex_False</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRex_True</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TRexBool</name></type> <name>trex_searchrange</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier></type> <name>text_begin</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TRexChar</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><name><name>exp</name><operator>-&gt;</operator><name>_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>text_begin</name> <operator>&gt;=</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRex_False</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_bol</name></name> <operator>=</operator> <name>text_begin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_eol</name></name> <operator>=</operator> <name>text_end</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>text_begin</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>node</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>_currsubexp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>trex_matchnode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>,<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nodes</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>text_begin</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>text_begin</name> <operator>!=</operator> <name>text_end</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRex_False</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>text_begin</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>out_begin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_begin</name> <operator>=</operator> <name>text_begin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_end</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRex_True</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TRexBool</name></type> <name>trex_search</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TRexChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>trex_searchrange</name><argument_list>(<argument><expr><name>exp</name></expr></argument>,<argument><expr><name>text</name></expr></argument>,<argument><expr><name>text</name> <operator>+</operator> <call><name>scstrlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>out_begin</name></expr></argument>,<argument><expr><name>out_end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>trex_getsubexpcount</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>exp</name><operator>-&gt;</operator><name>_nsubexpr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TRexBool</name></type> <name>trex_getsubexp</name><parameter_list>(<parameter><decl><type><name>TRex</name><modifier>*</modifier></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>TRexMatch</name> <modifier>*</modifier></type><name>subexp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_nsubexpr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRex_False</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>subexp</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>_matches</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>TRex_True</name></expr>;</return>

</block_content>}</block></function>

</unit>
