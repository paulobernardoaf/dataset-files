<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\docs\scripts\aatree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aatree.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>Aatree</name></type> <name>aa_nil</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>aa_nil</name></expr>, <expr><operator>&amp;</operator><name>aa_nil</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>xstrdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>skew</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>aa_nil</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>T</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>

<return>return <expr><name>L</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>T</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>split</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>aa_nil</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>T</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>R</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>R</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>R</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>R</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>T</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Aatree</name> <modifier>*</modifier></type><name>aa_singleton</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Aatree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>&amp;</operator><name>aa_nil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>&amp;</operator><name>aa_nil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>T</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Aatree</name> <modifier>*</modifier></type><name>aa_insert</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <operator>&amp;</operator><name>aa_nil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>aa_singleton</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>aa_insert</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>aa_insert</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>skew</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>T</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aa_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>T</name> <operator>!=</operator> <operator>&amp;</operator><name>aa_nil</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>T</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr> </then><else>: <expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aa_destroy</name><parameter_list>(<parameter><decl><type><name>Aatree</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>!=</operator> <operator>&amp;</operator><name>aa_nil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>aa_destroy</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aa_destroy</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
