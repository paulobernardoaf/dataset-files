<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\tests\test_driver.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_color.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_ttf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BITMAPS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRANS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FONTS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VERTICES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POLYGONS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bitmap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>Bitmap</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>SW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>HW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>BmpType</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>transform</name></decl>;</decl_stmt>

}</block></struct></type> <name>Transform</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

}</block></struct></type> <name>LockRegion</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

}</block></struct></type> <name>NamedFont</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>membuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bitmap</name></type> <name><name>bitmaps</name><index>[<expr><name>MAX_BITMAPS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LockRegion</name></type> <name>lock_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Transform</name></type> <name><name>transforms</name><index>[<expr><name>MAX_TRANS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NamedFont</name></type> <name><name>fonts</name><index>[<expr><name>MAX_FONTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vertices</name><index>[<expr><name>MAX_VERTICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>simple_vertices</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_VERTICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_simple_vertices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>vertex_counts</name><index>[<expr><name>MAX_POLYGONS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_global_bitmaps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delay</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>save_outputs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>save_on_failure</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>want_display</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>on_xvfb</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>passed_tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>failed_tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipped_tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>streq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 == strcmp((a), (b)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT</name></cpp:macro> <cpp:value>" %80[A-Za-z0-9_.$|#-] "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT1</name></cpp:macro> <cpp:value>PAT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT2</name></cpp:macro> <cpp:value>PAT1 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT3</name></cpp:macro> <cpp:value>PAT2 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT4</name></cpp:macro> <cpp:value>PAT3 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT5</name></cpp:macro> <cpp:value>PAT4 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT6</name></cpp:macro> <cpp:value>PAT5 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT7</name></cpp:macro> <cpp:value>PAT6 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT8</name></cpp:macro> <cpp:value>PAT7 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT9</name></cpp:macro> <cpp:value>PAT8 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT10</name></cpp:macro> <cpp:value>PAT9 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT11</name></cpp:macro> <cpp:value>PAT10 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT12</name></cpp:macro> <cpp:value>PAT11 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT13</name></cpp:macro> <cpp:value>PAT12 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT14</name></cpp:macro> <cpp:value>PAT13 "," PAT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS1</name></cpp:macro> <cpp:value>arg[0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS2</name></cpp:macro> <cpp:value>ARGS1, arg[1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS3</name></cpp:macro> <cpp:value>ARGS2, arg[2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS4</name></cpp:macro> <cpp:value>ARGS3, arg[3]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS5</name></cpp:macro> <cpp:value>ARGS4, arg[4]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS6</name></cpp:macro> <cpp:value>ARGS5, arg[5]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS7</name></cpp:macro> <cpp:value>ARGS6, arg[6]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS8</name></cpp:macro> <cpp:value>ARGS7, arg[7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS9</name></cpp:macro> <cpp:value>ARGS8, arg[8]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS10</name></cpp:macro> <cpp:value>ARGS9, arg[9]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS11</name></cpp:macro> <cpp:value>ARGS10, arg[10]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS12</name></cpp:macro> <cpp:value>ARGS11, arg[11]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS13</name></cpp:macro> <cpp:value>ARGS12, arg[12]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS14</name></cpp:macro> <cpp:value>ARGS13, arg[13]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>resolve_var(cfg, section, arg[(a)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atoi(V(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atof(V(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_color(V(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_bitmap(V(a), bmp_type, target)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN0</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sscanf(stmt, fn " %80[(]" " )", ARGS1) == 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sscanf(stmt, fn " (" PAT##arity " )", ARGS##arity) == arity)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCANLVAL</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sscanf(stmt, PAT " = " fn " (" PAT##arity " )", lval, ARGS##arity) == 1 + arity)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fatal_error</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_driver: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>bmp_type_to_string</name><parameter_list>(<parameter><decl><type><name>BmpType</name></type> <name>bmp_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>bmp_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SW</name></expr>:</case> <return>return <expr><literal type="string">"sw"</literal></expr>;</return>

<case>case <expr><name>HW</name></expr>:</case> <return>return <expr><literal type="string">"hw"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"error"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>create_fallback_bitmap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>builtin_font</name> <init>= <expr><call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"couldn't create a backup bitmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>builtin_font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"couldn't create a builtin font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>builtin_font</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"fallback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>builtin_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>load_relative_bitmap</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>al_load_bitmap_flags</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_driver: failed to load %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>create_fallback_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_bitmaps</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><name>BmpType</name></type> <name>bmp_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_first_config_entry</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_BITMAPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><name>bmp_type</name></expr>]</index></name> <operator>=</operator> <call><name>load_relative_bitmap</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_next_config_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_BITMAPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"bitmap limit reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_global_bitmaps</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>reserve_local_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>BmpType</name></type> <name>bmp_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_global_bitmaps</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BITMAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><name>bmp_type</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"bitmap limit reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unload_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BITMAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bitmaps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitmaps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FONTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fonts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fonts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_global_bitmaps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_target_reset</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>ident</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_reset_clipping_rectangle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_use_projection_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>resolve_var</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>vv</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>vv</name><operator>)</operator></expr> ?</condition><then> <expr><name>vv</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_bool</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_COLOR</name></type> <name>get_color</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rf</name></decl>, <decl><type ref="prev"/><name>gf</name></decl>, <decl><type ref="prev"/><name>bf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%f/%f/%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name>rf</name></expr></argument>, <argument><expr><name>gf</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>al_color_name</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>get_bitmap</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>BmpType</name></type> <name>bmp_type</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BITMAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><name>bmp_type</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>target</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"undefined bitmap: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_load_bitmap_flag</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_NO_PREMULTIPLIED_ALPHA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_KEEP_INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_KEEP_INDEX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_draw_bitmap_flag</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_FLIP_HORIZONTAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_FLIP_HORIZONTAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_FLIP_VERTICAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_FLIP_VERTICAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_FLIP_VERTICAL|ALLEGRO_FLIP_HORIZONTAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_FLIP_VERTICAL</name><operator>|</operator><name>ALLEGRO_FLIP_HORIZONTAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_FLIP_HORIZONTAL|ALLEGRO_FLIP_VERTICAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_FLIP_HORIZONTAL</name><operator>|</operator><name>ALLEGRO_FLIP_VERTICAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_blender_op</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ADD"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ADD</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_DEST_MINUS_SRC"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_DEST_MINUS_SRC</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_SRC_MINUS_DEST"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_SRC_MINUS_DEST</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_blend_factor</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ZERO"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ZERO</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ONE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ONE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_INVERSE_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_SRC_COLOR"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_SRC_COLOR</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_DEST_COLOR"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_DEST_COLOR</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_INVERSE_SRC_COLOR"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_INVERSE_SRC_COLOR</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_INVERSE_DEST_COLOR"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_INVERSE_DEST_COLOR</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_CONST_COLOR"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_CONST_COLOR</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_INVERSE_CONST_COLOR"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_INVERSE_CONST_COLOR</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_TRANSFORM</name> <modifier>*</modifier></type><name>get_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TRANS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transform</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transform</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"transforms limit reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pixel_format</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ARGB_8888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGBA_8888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ARGB_4444"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_4444</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGB_888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGB_888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGB_565"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGB_565</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGB_555"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGB_555</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGBA_5551"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_5551</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ARGB_1555"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ARGB_1555</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ABGR_8888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_XBGR_8888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_XBGR_8888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_BGR_888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_BGR_888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_BGR_565"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_BGR_565</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_BGR_555"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_BGR_555</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGBX_8888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGBX_8888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_XRGB_8888"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_XRGB_8888</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ABGR_F32"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_F32</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_RGBA_4444"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_4444</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5</name></expr>

</then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"invalid format: %s"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>format</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_lock_bitmap_flags</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LOCK_READWRITE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LOCK_READWRITE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LOCK_READONLY"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LOCK_READONLY</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LOCK_WRITEONLY"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_bitmap_flags</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_MEMORY_BITMAP"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_MEMORY_BITMAP</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_VIDEO_BITMAP"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_VIDEO_BITMAP</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_lock_region</name><parameter_list>(<parameter><decl><type><name>LockRegion</name> <modifier>*</modifier></type><name>lr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alphafactor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blended</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>lr</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>lr</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>/</operator> <operator>(</operator><name><name>lr</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>/</operator> <operator>(</operator><name><name>lr</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>r</name><operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>alphafactor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blended</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_put_blended_pixel</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_load_font_flags</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_NO_PREMULTIPLIED_ALPHA"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_TTF_NO_KERNING"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_TTF_NO_KERNING</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_TTF_MONOCHROME"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_TTF_MONOCHROME</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_fonts</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBUF</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>arg</name><index>[<expr><literal type="number">14</literal></expr>]</index><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_first_config_entry</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_FONTS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>load_stmt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_load_font"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_load_font_flags</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load_stmt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_load_ttf_font"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_ttf_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_load_font_flags</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load_stmt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_load_ttf_font_stretch"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_ttf_font_stretch</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_load_font_flags</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load_stmt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>SCAN0</name><argument_list>(<argument><expr><literal type="string">"al_create_builtin_font"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>load_stmt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>load_stmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"failed to load font: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>font</name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_next_config_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_FONTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"font limit reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXBUF</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>get_font</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FONTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>font</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"undefined font: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_font_align</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_LEFT"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ALIGN_LEFT</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_CENTRE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ALIGN_CENTRE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_RIGHT"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ALIGN_RIGHT</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_INTEGER"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_ALIGN_INTEGER</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_LEFT|ALLEGRO_ALIGN_INTEGER"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>ALLEGRO_ALIGN_LEFT</name> <operator>|</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_RIGHT|ALLEGRO_ALIGN_INTEGER"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>ALLEGRO_ALIGN_RIGHT</name> <operator>|</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_ALIGN_CENTRE|ALLEGRO_ALIGN_INTEGER"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>ALLEGRO_ALIGN_CENTRE</name> <operator>|</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_config_int</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_config_float</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vertices</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBUF</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_VERTICES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"v%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" %f , %f , %f ; %f , %f ; %s"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <call><name>get_color</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXBUF</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_simple_vertices</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBUF</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>simple_vertices</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simple_vertices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_VERTICES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"v%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" %f , %f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>simple_vertices</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>simple_vertices</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>num_simple_vertices</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXBUF</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vertex_counts</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBUF</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vertex_counts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vertex_counts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_POLYGONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"p%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" %d "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vertex_counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXBUF</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_prim_type</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_POINT_LIST"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_LINE_LIST"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_LINE_STRIP"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_LINE_LOOP"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_TRIANGLE_LIST"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_TRIANGLE_STRIP"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_PRIM_TRIANGLE_FAN"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_line_join</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_JOIN_NONE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_JOIN_NONE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_JOIN_BEVEL"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_JOIN_BEVEL</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_JOIN_ROUND"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_JOIN_ROUND</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_JOIN_MITER"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_JOIN_MITER</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_line_cap</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_CAP_NONE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_CAP_NONE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_CAP_SQUARE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_CAP_SQUARE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_CAP_ROUND"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_CAP_ROUND</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_CAP_TRIANGLE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_CAP_TRIANGLE</name></expr>

</then><else>: <expr><ternary><condition><expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALLEGRO_LINE_CAP_CLOSED"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALLEGRO_LINE_CAP_CLOSED</name></expr>

</then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_OFFSET_BASIS</name></cpp:macro> <cpp:value>2166136261UL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_PRIME</name></cpp:macro> <cpp:value>16777619</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>hash_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>FNV_OFFSET_BASIS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>signed</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name><operator>*</operator><name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>hash</name> <operator>*=</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>hash</name> <operator>*=</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>hash</name> <operator>*=</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>hash</name> <operator>*=</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_GRID</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_LEN</name></cpp:macro> <cpp:value>(SIG_GRID * SIG_GRID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_LENZ</name></cpp:macro> <cpp:value>(SIG_LEN + 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>patch_intensity</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name> <init>= <expr><call><name>al_get_pixel</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>cx</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>cy</name> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>g</name></name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">255</literal> <operator>*</operator> <name>sum</name><operator>/</operator><operator>(</operator><literal type="number">7</literal><operator>*</operator><literal type="number">7</literal><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>base64</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=

<expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>base64_decode</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">36</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">62</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">63</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"invalid base64 character: %c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_signature</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>sig</name><index>[<expr><name>SIG_LENZ</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>SIG_GRID</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>SIG_GRID</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>w</name><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>SIG_GRID</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>h</name><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>SIG_GRID</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>patch_intensity</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sig</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>base64</name><index>[<expr><name>level</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sig</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>similar_signatures</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>sig1</name><index>[<expr><name>SIG_LEN</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>sig2</name><index>[<expr><name>SIG_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>correct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIG_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q1</name> <init>= <expr><call><name>base64_decode</name><argument_list>(<argument><expr><name><name>sig1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q2</name> <init>= <expr><call><name>base64_decode</name><argument_list>(<argument><expr><name><name>sig2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>correct</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>correct</name> <operator>/</operator> <name>SIG_LEN</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0.95</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_hash</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>testname</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>BmpType</name></type> <name>bmp_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>bt</name> <init>= <expr><call><name>bmp_type_to_string</name><argument_list>(<argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sig</name><index>[<expr><name>SIG_LENZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sigexp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigexp</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"sig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s] - hash check off\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><call><name>hash_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_signature</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash=%s\n"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sig=%s\n"</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sigexp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NEW %s [%s]\n\thash=%s\n\tsig=%s\n"</literal></expr></argument>,

<argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s]\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sigexp</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sigexp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIG_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WARNING: ignoring bad signature: %s\n"</literal></expr></argument>, <argument><expr><name>sigexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigexp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sigexp</name> <operator>&amp;&amp;</operator> <call><name>similar_signatures</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sigexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s] - by signature\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FAIL %s [%s] - hash=%s\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>bitmap_dissimilarity</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp1</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sqerr</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lr1</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lr2</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp2</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>data1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>lr1</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name><operator>*</operator><name><name>lr1</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>data2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>lr2</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>y</name><operator>*</operator><name><name>lr2</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>err</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>data1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>data2</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sqerr</name> <operator>+=</operator> <name>err</name><operator>*</operator><name>err</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>sqerr</name> <operator>/</operator> <operator>(</operator><name>w</name><operator>*</operator><name>h</name><operator>*</operator><literal type="number">4.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_similarity</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>testname</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp1</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp2</name></decl></parameter>, <parameter><decl><type><name>BmpType</name></type> <name>bmp_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reliable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>bt</name> <init>= <expr><call><name>bmp_type_to_string</name><argument_list>(<argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rms</name> <init>= <expr><call><name>bitmap_dissimilarity</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>, <argument><expr><name>bmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>tolerance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bmp_type</name> <operator>==</operator> <name>HW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"hash_hw"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sigexp</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"sig_hw"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sig</name><index>[<expr><name>SIG_LENZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><call><name>hash_bitmap</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s]\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sigexp</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sigexp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIG_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WARNING: ignoring bad signature: %s\n"</literal></expr></argument>, <argument><expr><name>sigexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigexp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>compute_signature</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sigexp</name> <operator>&amp;&amp;</operator> <call><name>similar_signatures</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sigexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s] - by signature\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"tolerance"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tolerance</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tolerance</name> <operator>=</operator> <literal type="number">17.5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rms</name> <operator>&lt;=</operator> <name>tolerance</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reliable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s]\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK? %s [%s]\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sig</name><index>[<expr><name>SIG_LENZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><call><name>hash_bitmap</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK %s [%s]\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FAIL %s [%s] - RMS error is %g\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>, <argument><expr><name>rms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash_hw=%s\n"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_signature</name><argument_list>(<argument><expr><name>bmp1</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sig_hw=%s\n"</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_test</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>testname</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bmp_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reliable</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_check_hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBUF</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name>testname</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>arg</name><index>[<expr><literal type="number">14</literal></expr>]</index><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>lval</name><index>[<expr><name>MAXBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nRunning %s [%s].\n"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>bmp_type_to_string</name><argument_list>(<argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_target_reset</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>op</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"op%d"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"op%d"</literal></expr></argument>, <argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WARNING: op%d skipped, continuing at op%d\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#%s\n"</literal></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_target_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_clipping_rectangle"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_clipping_rectangle</name><argument_list>(<argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_blender"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(

<argument><expr><call><name>get_blender_op</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_separate_blender"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_separate_blender</name><argument_list>(

<argument><expr><call><name>get_blender_op</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blender_op</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_bitmap_blender"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_bitmap_blender</name><argument_list>(

<argument><expr><call><name>get_blender_op</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_blend_factor</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN0</name><argument_list>(<argument><expr><literal type="string">"al_reset_bitmap_blender"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_reset_bitmap_blender</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_new_bitmap_flags"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><call><name>get_bitmap_flags</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_new_bitmap_format"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><call><name>get_pixel_format</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_clear_to_color"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_clone_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>reserve_local_bitmap</name><argument_list>(<argument><expr><name>lval</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bmp</name><operator>)</operator> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_tinted_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_bitmap_region"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_tinted_bitmap_region"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap_region</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_rotated_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_rotated_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_tinted_rotated_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_rotated_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_scaled_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_scaled_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_tinted_scaled_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_scaled_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_scaled_rotated_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_scaled_rotated_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_tinted_scaled_rotated_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_scaled_rotated_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_tinted_scaled_rotated_bitmap_region"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_scaled_rotated_bitmap_region</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_draw_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_pixel"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_pixel</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_put_pixel"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_put_pixel</name><argument_list>(<argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_put_blended_pixel"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_put_blended_pixel</name><argument_list>(<argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_create_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>reserve_local_bitmap</name><argument_list>(<argument><expr><name>lval</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bmp</name><operator>)</operator> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_create_sub_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>reserve_local_bitmap</name><argument_list>(<argument><expr><name>lval</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bmp</name><operator>)</operator> <operator>=</operator> <call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_load_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>reserve_local_bitmap</name><argument_list>(<argument><expr><name>lval</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bmp</name><operator>)</operator> <operator>=</operator> <call><name>load_relative_bitmap</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_load_bitmap_flags"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>reserve_local_bitmap</name><argument_list>(<argument><expr><name>lval</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bmp</name><operator>)</operator> <operator>=</operator> <call><name>load_relative_bitmap</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_load_bitmap_flag</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_save_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_save_bitmap</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"failed to save %s"</literal></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_identify_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>al_identify_bitmap</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_hold_bitmap_drawing"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><call><name>get_bool</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_copy_transform"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_use_transform"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_build_transform"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_translate_transform"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_translate_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_scale_transform"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_scale_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_rotate_transform"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_rotate_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_compose_transform"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_compose_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_convert_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_convert_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_lock_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>w</name></name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>h</name></name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>lr</name></name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>,

<argument><expr><call><name>get_pixel_format</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_lock_bitmap_flags</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_lock_bitmap_region"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>w</name></name> <operator>=</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>h</name></name> <operator>=</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>lr</name></name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>,

<argument><expr><name><name>lock_region</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>lock_region</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>lock_region</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>lock_region</name><operator>.</operator><name>h</name></name></expr></argument>,

<argument><expr><call><name>get_pixel_format</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_lock_bitmap_flags</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_unlock_bitmap"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_region</name><operator>.</operator><name>lr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"fill_lock_region"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_lock_region</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_region</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_bool</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_text"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_font_align</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_justified_text"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_justified_text</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_font_align</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_text_width"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_text_width</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_font_line_height"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_font_line_height</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_font_ascent"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>as</name> <init>= <expr><call><name>al_get_font_ascent</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_font_descent"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>de</name> <init>= <expr><call><name>al_get_font_descent</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_get_text_dimensions"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bbx</name></decl>, <decl><type ref="prev"/><name>bby</name></decl>, <decl><type ref="prev"/><name>bbw</name></decl>, <decl><type ref="prev"/><name>bbh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_get_text_dimensions</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_fallback_font"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_fallback_font</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_line"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_triangle"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_triangle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_triangle"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_triangle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_rectangle"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_rectangle"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_rounded_rectangle"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_rounded_rectangle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_rounded_rectangle"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_rounded_rectangle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_pieslice"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_pieslice</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_pieslice"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_pieslice</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_ellipse"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_ellipse</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_ellipse"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_ellipse</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_circle"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_circle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_circle"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_arc"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_arc</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_elliptical_arc"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_elliptical_arc</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_spline"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%f, %f, %f, %f, %f, %f, %f, %f"</literal></expr></argument>,

<argument><expr><name>pt</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_spline</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_prim"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_vertices</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_prim_type</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_polyline"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_simple_vertices</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_polyline</name><argument_list>(<argument><expr><name>simple_vertices</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>num_simple_vertices</name></expr></argument>, <argument><expr><call><name>get_line_join</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_line_cap</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_polygon"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_simple_vertices</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_polygon</name><argument_list>(<argument><expr><name>simple_vertices</name></expr></argument>, <argument><expr><name>num_simple_vertices</name></expr></argument>,

<argument><expr><call><name>get_line_join</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_polygon"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_simple_vertices</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_polygon</name><argument_list>(<argument><expr><name>simple_vertices</name></expr></argument>, <argument><expr><name>num_simple_vertices</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_filled_polygon_with_holes"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_simple_vertices</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vertex_counts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_filled_polygon_with_holes</name><argument_list>(<argument><expr><name>simple_vertices</name></expr></argument>, <argument><expr><name>vertex_counts</name></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_horizontal_shear_transform"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_horizontal_shear_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_vertical_shear_transform"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_vertical_shear_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_orthographic_transform"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_orthographic_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_use_projection_transform"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_use_projection_transform</name><argument_list>(<argument><expr><call><name>get_transform</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_set_blend_color"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_blend_color</name><argument_list>(<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"isum"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"idif"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"imul"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"idiv"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"fsum"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"fdif"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"fmul"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"fdiv"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"round"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>round</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCAN</name><argument_list>(<argument><expr><literal type="string">"al_draw_glyph"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_glyph_advance"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>kerning</name> <init>= <expr><call><name>al_get_glyph_advance</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>kerning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_glyph_width"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_glyph_width</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_get_glyph_dimensions"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bbx</name></decl>, <decl><type ref="prev"/><name>bby</name></decl>, <decl><type ref="prev"/><name>bbw</name></decl>, <decl><type ref="prev"/><name>bbh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><call><name>get_font</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_color_distance_ciede2000"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><call><name>al_color_distance_ciede2000</name><argument_list>(<argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_config_float</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SCANLVAL</name><argument_list>(<argument><expr><literal type="string">"al_color_lab"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>rgb</name> <init>= <expr><call><name>al_color_lab</name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="string">"%f/%f/%f"</literal></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"statement didn't scan: %s"</literal></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>good</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>do_check_hash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>check_hash</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>check_similarity</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>membuf</name></expr></argument>, <argument><expr><name>bmp_type</name></expr></argument>, <argument><expr><name>reliable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>total_tests</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_outputs</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>save_on_failure</name> <operator>||</operator> <operator>!</operator><name>good</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>al_ustr_newf</name><argument_list>(<argument><expr><literal type="string">"%s [%s].png"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>,

<argument><expr><call><name>bmp_type_to_string</name><argument_list>(<argument><expr><name>bmp_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_save_bitmap</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_target_reset</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><ternary><condition><expr><name>display</name></expr> ?</condition><then> <expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_global_bitmaps</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BITMAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><name>bmp_type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bitmap</name><index>[<expr><name>bmp_type</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TRANS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>good</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXBUF</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sw_hw_test</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>testname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>reliable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>hw_only_str</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"hw_only"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sw_only_str</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"sw_only"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>skip_on_xvfb_str</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><literal type="string">"skip_on_xvfb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hw_only</name> <init>= <expr><name>hw_only_str</name> <operator>&amp;&amp;</operator> <call><name>get_bool</name><argument_list>(<argument><expr><name>hw_only_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sw_only</name> <init>= <expr><name>sw_only_str</name> <operator>&amp;&amp;</operator> <call><name>get_bool</name><argument_list>(<argument><expr><name>sw_only_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>skip_on_xvfb</name> <init>= <expr><name>skip_on_xvfb_str</name> <operator>&amp;&amp;</operator> <call><name>get_bool</name><argument_list>(<argument><expr><name>skip_on_xvfb_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_on_xvfb</name> <operator>&amp;&amp;</operator> <name>on_xvfb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skipped_tests</name><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reliable</name> <operator>=</operator> <call><name>do_test</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>membuf</name></expr></argument>, <argument><expr><name>SW</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sw_only</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_VIDEO_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HW</name></expr></argument>, <argument><expr><name>reliable</name></expr></argument>, <argument><expr><name>hw_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hw_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WARNING: Skipping hardware-only test due to the --no-display flag: %s\n"</literal></expr></argument>,

<argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skipped_tests</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>section_exists</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<return>return <expr><call><name>al_get_first_config_entry</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_config_sections</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>targ_cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>targ_section</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>src_cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>src_section</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_ENTRY</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>src_cfg</name></expr></argument>, <argument><expr><name>src_section</name></expr></argument>, <argument><expr><literal type="string">"extend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>src_section</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"section cannot extend itself: %s "</literal>

<literal type="string">"(did you forget to rename a section?)"</literal></expr></argument>, <argument><expr><name>src_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>merge_config_sections</name><argument_list>(<argument><expr><name>targ_cfg</name></expr></argument>, <argument><expr><name>targ_section</name></expr></argument>, <argument><expr><name>src_cfg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>al_get_first_config_entry</name><argument_list>(<argument><expr><name>src_cfg</name></expr></argument>, <argument><expr><name>src_section</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing section: %s"</literal></expr></argument>, <argument><expr><name>src_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>key</name> <operator>=</operator> <call><name>al_get_next_config_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>src_cfg</name></expr></argument>, <argument><expr><name>src_section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>targ_cfg</name></expr></argument>, <argument><expr><name>targ_section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_test</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>extend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>section_exists</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"section not found: %s"</literal></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cfg2</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_merge_config_into</name><argument_list>(<argument><expr><name>cfg2</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extend</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><literal type="string">"extend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>merge_config_sections</name><argument_list>(<argument><expr><name>cfg2</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sw_hw_test</name><argument_list>(<argument><expr><name>cfg2</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>cfg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_matching_tests</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG_SECTION</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>section</name> <operator>=</operator> <call><name>al_get_first_config_section</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>section</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>section</name> <operator>=</operator> <call><name>al_get_next_config_section</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_test</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>partial_tests</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CONFIG</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"test "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_appendf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"test %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_matching_tests</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>run_test</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>has_suffix</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>suf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suf</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>streq</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_ini_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_suffix</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".ini"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"expected .ini argument: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"failed to load config file %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Running %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_bitmaps</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"bitmaps"</literal></expr></argument>, <argument><expr><name>SW</name></expr></argument>, <argument><expr><name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_VIDEO_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_bitmaps</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"bitmaps"</literal></expr></argument>, <argument><expr><name>HW</name></expr></argument>, <argument><expr><name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>load_fonts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"fonts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_suffix</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".ini"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>run_matching_tests</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"test "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>partial_tests</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>unload_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>help_str</name> <init>=

<expr><literal type="string">" [OPTION] CONFIG_FILE [TEST_NAME]... [CONFIG_FILE [TEST_NAME]...]...\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"Run Allegro graphical output tests within one or more CONFIG_FILEs (each\n"</literal>

<literal type="string">"having an .ini extension). By default this program runs all the tests in a\n"</literal>

<literal type="string">"file, but individual TEST_NAMEs can be specified after each CONFIG_FILE.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"Options:\n"</literal>

<literal type="string">" -d, --delay duration (in sec) to wait between tests\n"</literal>

<literal type="string">" --force-d3d force using D3D (Windows only)\n"</literal>

<literal type="string">" --force-opengl-1.2 force using OpenGL 1.2\n"</literal>

<literal type="string">" --force-opengl-2.0 force using OpenGL 2.0\n"</literal>

<literal type="string">" --force-opengl force using OpenGL\n"</literal>

<literal type="string">" -f, --save_on_failure save the output of failred tests in the current directory\n"</literal>

<literal type="string">" -h, --help display this message\n"</literal>

<literal type="string">" -n, --no-display do not create a display (hardware drawing is disabled)\n"</literal>

<literal type="string">" -s, --save save the output of each test in the current directory\n"</literal>

<literal type="string">" --use-shaders use the programmable pipeline for drawing\n"</literal>

<literal type="string">" -v, --verbose show additional information after each test\n"</literal>

<literal type="string">" -q, --quiet do not draw test output to the display\n"</literal>

<literal type="string">" --xvfb indicates that we're running on XVFB, skipping tests if necessary\n"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>_argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>display_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <name>_argc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <name>_argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"requires config file argument.\nSee --help for usage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"failed to initialise Allegro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_ttf_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--delay"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--save"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>save_outputs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--save_on_failure"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>save_on_failure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_outputs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--xvfb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>on_xvfb</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--no-display"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>want_display</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>verbose</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--force-opengl-1.2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"opengl"</literal></expr></argument>, <argument><expr><literal type="string">"force_opengl_version"</literal></expr></argument>, <argument><expr><literal type="string">"1.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--force-opengl-2.0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"opengl"</literal></expr></argument>, <argument><expr><literal type="string">"force_opengl_version"</literal></expr></argument>, <argument><expr><literal type="string">"2.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--force-opengl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--force-d3d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <name>ALLEGRO_DIRECT3D_INTERNAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--use-shaders"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>streq</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage:\n%s%s"</literal></expr></argument>, <argument><expr><name><name>_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>help_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>want_display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>display_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"failed to create display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>want_display</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>membuf</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(

<argument><expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>membuf</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>process_ini_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"total tests: %d\n"</literal></expr></argument>, <argument><expr><name>total_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"passed tests: %d\n"</literal></expr></argument>, <argument><expr><name>passed_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed tests: %d\n"</literal></expr></argument>, <argument><expr><name>failed_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"skipped tests: %d\n"</literal></expr></argument>, <argument><expr><name>skipped_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>failed_tests</name></expr>;</return>

</block_content>}</block></function>

</unit>
