<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\acodec\helper.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>_al_acodec_start_feed_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>_al_kcm_feed_stream</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_acodec_stop_feed_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>quit_event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_cond</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quit_event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>_KCM_STREAM_FEEDER_QUIT_EVENT_TYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><call><name>al_get_audio_stream_event_source</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>quit_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
