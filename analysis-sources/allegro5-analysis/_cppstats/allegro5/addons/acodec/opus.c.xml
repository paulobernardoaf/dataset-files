<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\acodec\opus.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_acodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helper.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_OPUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> configuration problem, ALLEGRO_CFG_ACODEC_OPUS not set</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"acodec"</literal></argument>)</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opus/opusfile.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>AL_OP_DATA</name></name></type> <name>AL_OP_DATA</name>;</typedef>

<struct>struct <name>AL_OP_DATA</name> <block>{

<decl_stmt><decl><type><name>OggOpusFile</name> <modifier>*</modifier></type><name>of</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>loop_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>loop_end</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_OPUSFILE_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>op_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>op_virgin</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> struct

<block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>op_free</name>)<parameter_list>(<parameter><decl><type><name>OggOpusFile</name> <modifier>*</modifier></type><name>_of</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>op_channel_count</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OggOpusFile</name> <modifier>*</modifier></type><name>_of</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_li</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OggOpusFile</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>op_open_callbacks</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpusFileCallbacks</name> <modifier>*</modifier></type><name>_cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_initial_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_initial_bytes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ogg_int64_t</name></type> (<modifier>*</modifier><name>op_pcm_total</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OggOpusFile</name> <modifier>*</modifier></type><name>_of</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_li</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>op_pcm_seek</name>)<parameter_list>(<parameter><decl><type><name>OggOpusFile</name> <modifier>*</modifier></type><name>_of</name></decl></parameter>, <parameter><decl><type><name>ogg_int64_t</name></type> <name>_pcm_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ogg_int64_t</name></type> (<modifier>*</modifier><name>op_pcm_tell</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OggOpusFile</name> <modifier>*</modifier></type><name>_of</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>op_read</name>)<parameter_list>(<parameter><decl><type><name>OggOpusFile</name> <modifier>*</modifier></type><name>_of</name></decl></parameter>, <parameter><decl><type><name>opus_int16</name> <modifier>*</modifier></type><name>_pcm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_li</name></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name>lib</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_OPUSFILE_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shutdown_dynlib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_dll</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_close_library</name><argument_list>(<argument><expr><name>op_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_dll</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op_virgin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>init_dynlib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_OPUSFILE_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>op_dll</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_virgin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op_virgin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op_dll</name> <operator>=</operator> <call><name>_al_open_library</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_ACODEC_OPUSFILE_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_dll</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Could not load "</literal> <name>ALLEGRO_CFG_ACODEC_OPUSFILE_DLL</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>shutdown_dynlib</name></expr></argument>, <argument><expr><literal type="string">"shutdown_dynlib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITSYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { lib.x = _al_import_symbol(op_dll, #x); if (lib.x == 0) { ALLEGRO_ERROR("undefined symbol in lib structure: " #x "\n"); return false; } } while(0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITSYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lib.x = (x))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_channel_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_open_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_pcm_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_pcm_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_pcm_tell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITSYM</name><argument_list>(<argument><expr><name>op_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INITSYM</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>seek_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>opus_int64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEEK_SET</name></expr>:</case> <expr_stmt><expr><name>whence</name> <operator>=</operator> <name>ALLEGRO_SEEK_SET</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SEEK_CUR</name></expr>:</case> <expr_stmt><expr><name>whence</name> <operator>=</operator> <name>ALLEGRO_SEEK_CUR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SEEK_END</name></expr>:</case> <expr_stmt><expr><name>whence</name> <operator>=</operator> <name>ALLEGRO_SEEK_END</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_fseek</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>opus_int64</name></type> <name>tell_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_ftell</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>close_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>OpusFileCallbacks</name></type> <name>callbacks</name> <init>= <expr><block>{

<expr><name>read_callback</name></expr>,

<expr><name>seek_callback</name></expr>,

<expr><name>tell_callback</name></expr>,

<expr><name>close_callback</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_ogg_opus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>spl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Loading sample %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spl</name> <operator>=</operator> <call><name>_al_load_ogg_opus_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spl</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>_al_load_ogg_opus_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>word_size</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>packet_size</name> <init>= <expr><literal type="number">5760</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OggOpusFile</name> <modifier>*</modifier></type><name>of</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>opus_int16</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>total_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>total_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AL_OP_DATA</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>read</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_dynlib</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_open_callbacks</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>of</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Audio file does not appear to be an Ogg bitstream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitstream</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_channel_count</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total_samples</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_pcm_total</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name>total_samples</name> <operator>*</operator> <name>channels</name> <operator>*</operator> <name>word_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"channels %d\n"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"word_size %d\n"</literal></expr></argument>, <argument><expr><name>word_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"rate %ld\n"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"total_samples %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>total_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"total_size %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>total_samples</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>read_size</name> <init>= <expr><call><name>_ALLEGRO_MIN</name><argument_list>(<argument><expr><name>packet_size</name></expr></argument>, <argument><expr><name>total_samples</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <name>read_size</name> <operator>&lt;=</operator> <name>total_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_read</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>pos</name> <operator>*</operator> <name>channels</name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>op_free</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>al_create_sample</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>total_samples</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>,

<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name>word_size</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sample</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogg_stream_seek</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;=</operator> <name><name>extra</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name><name>lib</name><operator>.</operator><name>op_pcm_seek</name></name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name></expr></argument>, <argument><expr><name>time</name> <operator>*</operator> <literal type="number">48000</literal></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogg_stream_rewind</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ogg_stream_seek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>extra</name><operator>-&gt;</operator><name>loop_start</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>ogg_stream_get_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>lib</name><operator>.</operator><name>op_pcm_tell</name></name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">48000.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>ogg_stream_get_length</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>lib</name><operator>.</operator><name>op_pcm_total</name></name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">48000.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogg_stream_set_loop</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogg_stream_close</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_acodec_stop_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>op_free</name></name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ogg_stream_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AL_OP_DATA</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>AL_OP_DATA</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>word_size</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_length</name> <init>= <expr><name>buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_in_word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>rate</name> <init>= <expr><literal type="number">48000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>extra</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ctime</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>op_pcm_tell</name></name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>rate</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>btime</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>buf_size</name> <operator>/</operator> <operator>(</operator><name>word_size</name> <operator>*</operator> <name>channels</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>rate</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>read</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctime</name> <operator>+</operator> <name>btime</name> <operator>&gt;</operator> <name><name>extra</name><operator>-&gt;</operator><name>loop_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_length</name> <operator>=</operator> <operator>(</operator><name><name>extra</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>-</operator> <name>ctime</name><operator>)</operator> <operator>*</operator> <name>rate</name> <operator>*</operator> <name>word_size</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>read_length</name> <operator>+=</operator> <name>read_length</name> <operator>%</operator> <name>word_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_in_word</name><operator>=</operator> <name>read_length</name><operator>/</operator><name>word_size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>read_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_read</name></name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name></expr></argument>, <argument><expr><operator>(</operator><name>opus_int16</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>buf_in_word</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>read</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>pos</name><operator>*</operator><name>word_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_ogg_opus_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Loading stream %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>_al_load_ogg_opus_audio_stream_f</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>_al_load_ogg_opus_audio_stream_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buffer_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>word_size</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OggOpusFile</name><modifier>*</modifier></type> <name>of</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>total_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>total_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AL_OP_DATA</name><modifier>*</modifier></type> <name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name><modifier>*</modifier></type> <name>stream</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_dynlib</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AL_OP_DATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate AL_OP_DATA struct.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_open_callbacks</name></name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>of</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"ogg: Input does not appear to be an Ogg bitstream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>of</name></name> <operator>=</operator> <name>of</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitstream</name> <operator>=</operator> <name><name>extra</name><operator>-&gt;</operator><name>bitstream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_channel_count</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>extra</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total_samples</name> <operator>=</operator> <call><name><name>lib</name><operator>.</operator><name>op_pcm_total</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name>total_samples</name> <operator>*</operator> <name>channels</name> <operator>*</operator> <name>word_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"channels %d\n"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"word_size %d\n"</literal></expr></argument>, <argument><expr><name>word_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"rate %ld\n"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"total_samples %ld\n"</literal></expr></argument>, <argument><expr><name>total_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"total_size %ld\n"</literal></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>al_create_audio_stream</name><argument_list>(<argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>,

<argument><expr><call><name>_al_word_size_to_depth_conf</name><argument_list>(<argument><expr><name>word_size</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_al_count_to_channel_conf</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>lib</name><operator>.</operator><name>op_free</name></name><argument_list>(<argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>loop_start</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>loop_end</name></name> <operator>=</operator> <call><name>ogg_stream_get_length</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>quit_feed_thread</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name> <operator>=</operator> <name>ogg_stream_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name> <operator>=</operator> <name>ogg_stream_rewind</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name> <operator>=</operator> <name>ogg_stream_seek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name> <operator>=</operator> <name>ogg_stream_get_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name> <operator>=</operator> <name>ogg_stream_get_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name> <operator>=</operator> <name>ogg_stream_set_loop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unload_feeder</name></name> <operator>=</operator> <name>ogg_stream_close</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_acodec_start_feed_thread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>

</block_content>}</block></function>

</unit>
