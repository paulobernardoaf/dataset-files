<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\native_dialog\gtk_textlog.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_native_dialog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_native_dialog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtk_dialog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtk_xgtk.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>

}</block></struct></type> <name>Msg</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_close_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keypress</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>textlog</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data2</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>keypress</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>textlog</name><operator>-&gt;</operator><name>tl_events</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>textlog_delete</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier></type><name>gevent</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name></type> <name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>gevent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>textlog</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TEXTLOG_NO_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_close_event</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>textlog_key_press</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>gevent</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name></type> <name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gevent</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <name>GDK_Escape</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_close_event</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>textlog_destroy</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>nd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>nd</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>nd</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>, <argument><expr><name>ACK_CLOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>create_native_text_log</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Msg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>dialog</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><call><name>gtk_window_new</name><argument_list>(<argument><expr><name>GTK_WINDOW_TOPLEVEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_window_set_default_size</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TEXTLOG_NO_CLOSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gtk_window_set_deletable</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-press-event"</literal></expr></argument>, <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>textlog_key_press</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"delete-event"</literal></expr></argument>, <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>textlog_delete</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"destroy"</literal></expr></argument>, <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>textlog_destroy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>scroll</name> <init>= <expr><call><name>gtk_scrolled_window_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_scrolled_window_set_policy</name><argument_list>(<argument><expr><call><name>GTK_SCROLLED_WINDOW</name><argument_list>(<argument><expr><name>scroll</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GTK_POLICY_AUTOMATIC</name></expr></argument>, <argument><expr><name>GTK_POLICY_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>view</name> <init>= <expr><call><name>gtk_text_view_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_text_view_set_editable</name><argument_list>(<argument><expr><call><name>GTK_TEXT_VIEW</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_TEXTLOG_MONOSPACE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>font_desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font_desc</name> <operator>=</operator> <call><name>pango_font_description_from_string</name><argument_list>(<argument><expr><literal type="string">"Monospace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_modify_font</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>font_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_font_description_free</name><argument_list>(<argument><expr><name>font_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>scroll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>, <argument><expr><name>ACK_OPENED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_open_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Msg</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_gtk_ensure_thread</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_init_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>textlog</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_timeout_add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>create_native_text_log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACK_OPENED</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>do_append_native_text_log</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GtkTextView</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><call><name>GTK_TEXT_VIEW</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkTextBuffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>gtk_text_view_get_buffer</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkTextIter</name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkTextMark</name> <modifier>*</modifier></type><name>mark</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_text_buffer_get_end_iter</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_text_buffer_insert</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>gtk_text_buffer_create_mark</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_text_view_scroll_mark_onscreen</name><argument_list>(<argument><expr><call><name>GTK_TEXT_VIEW</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_textview</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_text_buffer_delete_mark</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_append_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_threads_add_timeout</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>do_append_native_text_log</name></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>do_close_native_text_log</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_have_pending</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_close_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gdk_threads_add_timeout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_close_native_text_log</name></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACK_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>async_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
