<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\native_dialog\textlog.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_native_dialog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_native_dialog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_native_dialog_cfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_NATIVE_DIALOG_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LOG_EXTRA_THREAD</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_LOG_EXTRA_THREAD</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>text_log_thread_proc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_open_native_text_log</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_init_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>thread</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_TEXTLOG</name> <modifier>*</modifier></type><name>al_open_native_text_log</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>textlog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>title</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textlog</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>TEXT_LOG_EXTRA_THREAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>text_log_thread_proc</name></expr></argument>, <argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_pending_text</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>textlog</name><operator>-&gt;</operator><name>tl_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_init_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>TEXT_LOG_EXTRA_THREAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>textlog</name><operator>-&gt;</operator><name>tl_done</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>textlog</name><operator>-&gt;</operator><name>tl_init_error</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_cond</name></name></expr></argument>, <argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_init_error</name></name> <operator>=</operator> <operator>!</operator><call><name>_al_open_native_text_log</name><argument_list>(<argument><expr><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>textlog</name><operator>-&gt;</operator><name>tl_init_error</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_close_native_text_log</name><argument_list>(<argument><expr><operator>(</operator><name>ALLEGRO_TEXTLOG</name> <operator>*</operator><operator>)</operator><name>textlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>textlog</name><operator>-&gt;</operator><name>dtor_item</name></name> <operator>=</operator> <call><name>_al_register_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><literal type="string">"textlog"</literal></expr></argument>, <argument><expr><name>textlog</name></expr></argument>,

<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>al_close_native_text_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_TEXTLOG</name> <operator>*</operator><operator>)</operator><name>textlog</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_close_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TEXTLOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>dialog</name> <init>= <expr><operator>(</operator><name>ALLEGRO_NATIVE_DIALOG</name> <operator>*</operator><operator>)</operator><name>textlog</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog</name><operator>-&gt;</operator><name>tl_init_error</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>TEXT_LOG_EXTRA_THREAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_close_native_text_log</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>dialog</name><operator>-&gt;</operator><name>tl_done</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_cond</name></name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>_al_close_native_text_log</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_unregister_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dialog</name><operator>-&gt;</operator><name>tl_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>TEXT_LOG_EXTRA_THREAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_append_native_text_log</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TEXTLOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>dialog</name> <init>= <expr><operator>(</operator><name>ALLEGRO_NATIVE_DIALOG</name> <operator>*</operator><operator>)</operator><name>textlog</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_pending_text</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_append_native_text_log</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>tl_text_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_native_text_log_event_source</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_TEXTLOG</name> <modifier>*</modifier></type><name>textlog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_NATIVE_DIALOG</name> <modifier>*</modifier></type><name>dialog</name> <init>= <expr><operator>(</operator><name>ALLEGRO_NATIVE_DIALOG</name> <operator>*</operator><operator>)</operator><name>textlog</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>dialog</name><operator>-&gt;</operator><name>tl_events</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
