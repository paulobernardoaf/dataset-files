<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\font\text.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>align_to_integer_pixel_inner</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fwd</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_TRANSFORM</name> <specifier>const</specifier> <modifier>*</modifier></type><name>inv</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>fwd</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>floorf</name><argument_list>(<argument><expr><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>floorf</name><argument_list>(<argument><expr><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>inv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>align_to_integer_pixel</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>inv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fwd</name> <operator>=</operator> <call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inv</name></expr></argument>, <argument><expr><name>fwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_invert_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align_to_integer_pixel_inner</name><argument_list>(<argument><expr><name>fwd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_ustr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_ALIGN_CENTRE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>text_length</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_ALIGN_RIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>text_length</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>align_to_integer_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_justified_ustr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whitespace</name> <init>= <expr><literal type="string">" \t\n\r"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>word_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos1</name></decl>, <decl><type ref="prev"/><name>pos2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_words</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fleft</name></decl>, <decl><type ref="prev"/><name>finc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>inv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_words</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>minlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>word_info</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minlen</name> <operator>+=</operator> <call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>text_length</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_words</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <name>pos2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>space</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>x1</name> <operator>-</operator> <name>minlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>space</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>space</name> <operator>&gt;</operator> <name>diff</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num_words</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>align_to_integer_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fleft</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>finc</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>space</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>num_words</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fwd</name> <operator>=</operator> <call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_copy_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inv</name></expr></argument>, <argument><expr><name>fwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_invert_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>word_info</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_ALIGN_INTEGER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>drawx</name> <init>= <expr><name>fleft</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>drawy</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>align_to_integer_pixel_inner</name><argument_list>(<argument><expr><name>fwd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drawx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drawy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>drawx</name></expr></argument>, <argument><expr><name>drawy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <call><name><name>font</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>fleft</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fleft</name> <operator>+=</operator> <name>advance</name> <operator>+</operator> <name>finc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <name>pos2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_justified_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_justified_ustr</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_textf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_justified_textf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_justified_text</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_ustr_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ustr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>text_length</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_text_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>str_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ustr</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_info</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>text_length</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_font_line_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>font_height</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_font_ascent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>font_ascent</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_font_descent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>font_descent</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_get_ustr_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_USTR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ustr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_text_dimensions</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>bbx</name></expr></argument>, <argument><expr><name>bby</name></expr></argument>,

<argument><expr><name>bbw</name></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_get_text_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_text_dimensions</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bbx</name></expr></argument>, <argument><expr><name>bby</name></expr></argument>,

<argument><expr><name>bbw</name></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_font</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_unregister_destructor</name><argument_list>(<argument><expr><name>_al_dtor_list</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>dtor_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_font_ranges</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ranges_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_font_ranges</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ranges_count</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_glyph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render_char</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>int</name></type> <name>al_get_glyph_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>char_length</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_get_glyph_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_glyph_dimensions</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>bbx</name></expr></argument>, <argument><expr><name>bby</name></expr></argument>, <argument><expr><name>bbw</name></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_glyph_advance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_glyph_advance</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>, <argument><expr><name>codepoint2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_get_glyph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_glyph</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr_split_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_USTR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>get_next_soft_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_USTR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whitespace</name> <init>= <expr><literal type="string">" \t"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_word</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_ustr_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_width</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_word</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>old_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>old_end</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_word</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_do_multiline_ustr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_width</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl></parameter>,

<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linebreak</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>hard_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>soft_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>hard_line_info</name></decl>, <decl><type ref="prev"/><name>soft_line_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hard_line_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>soft_line_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>proceed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hard_line</name> <operator>=</operator> <call><name>ustr_split_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hard_line_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hard_line_pos</name></expr></argument>,

<argument><expr><name>linebreak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>hard_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>soft_line_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>soft_line</name> <operator>=</operator>

<call><name>get_next_soft_line</name><argument_list>(<argument><expr><name>hard_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>soft_line_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>soft_line_pos</name></expr></argument>, <argument><expr><name>font</name></expr></argument>,

<argument><expr><name>max_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>soft_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proceed</name> <operator>=</operator> <call><name>cb</name><argument_list>(<argument><expr><name>line_num</name></expr></argument>, <argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proceed</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_num</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>soft_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proceed</name> <operator>=</operator> <call><name>cb</name><argument_list>(<argument><expr><name>line_num</name></expr></argument>, <argument><expr><name>soft_line</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proceed</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>soft_line</name> <operator>=</operator> <call><name>get_next_soft_line</name><argument_list>(<argument><expr><name>hard_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>soft_line_info</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>soft_line_pos</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>hard_line</name> <operator>=</operator> <call><name>ustr_split_next</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hard_line_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hard_line_pos</name></expr></argument>,

<argument><expr><name>linebreak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DO_MULTILINE_TEXT_EXTRA</name> <block>{

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

}</block></struct></type> <name>DO_MULTILINE_TEXT_EXTRA</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_multiline_text_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DO_MULTILINE_TEXT_EXTRA</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>extra</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>line_num</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_do_multiline_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DO_MULTILINE_TEXT_EXTRA</name></type> <name>extra2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra2</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra2</name><operator>.</operator><name>extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_do_multiline_ustr</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>do_multiline_text_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DRAW_MULTILINE_USTR_EXTRA</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>line_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>DRAW_MULTILINE_USTR_EXTRA</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>draw_multiline_ustr_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DRAW_MULTILINE_USTR_EXTRA</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>extra</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>line_height</name></name> <operator>*</operator> <name>line_num</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_multiline_ustr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>line_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DRAW_MULTILINE_USTR_EXTRA</name></type> <name>extra</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_height</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>line_height</name></name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>line_height</name></name> <operator>=</operator> <name>line_height</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_do_multiline_ustr</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>draw_multiline_ustr_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_multiline_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>line_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_multiline_ustr</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>line_height</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_multiline_textf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max_width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>line_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_multiline_ustr</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>line_height</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_set_fallback_font</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>fallback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>font</name><operator>-&gt;</operator><name>fallback</name></name> <operator>=</operator> <name>fallback</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_get_fallback_font</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>font</name><operator>-&gt;</operator><name>fallback</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
