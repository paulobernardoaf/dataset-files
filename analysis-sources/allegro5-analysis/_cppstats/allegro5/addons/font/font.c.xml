<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\font\font.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"font"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>extension</name></decl>;</decl_stmt>

<function_decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>load_font</name>)<parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>FONT_HANDLER</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>font_inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>_AL_VECTOR</name></type> <name>font_handlers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>al_font_404_character</name> <init>= <expr><literal type="char">'^'</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>font_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>font_ascent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>font_height</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>font_descent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>char_length</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>w</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_get_text_dimensions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bbx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bby</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bby</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bbw</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bbw</name> <operator>=</operator> <call><name>length</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bbh</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bbh</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FONT_COLOR_DATA</name> <modifier>*</modifier></type><name>_al_font_find_page</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_FONT_COLOR_DATA</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <name><name>cf</name><operator>-&gt;</operator><name>begin</name></name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <name><name>cf</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cf</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>_al_font_color_find_glyph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FONT_COLOR_DATA</name><modifier>*</modifier></type> <name>cf</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FONT_COLOR_DATA</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>_al_font_find_page</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name><index>[<expr><name>ch</name> <operator>-</operator> <name><name>cf</name><operator>-&gt;</operator><name>begin</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>al_font_404_character</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>_al_font_color_find_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>al_font_404_character</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_char_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>g</name> <init>= <expr><call><name>_al_font_color_find_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>al_get_glyph_width</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_render_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>f</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>font_height</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>_al_font_color_find_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_tinted_bitmap</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>h</name> <operator>-</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_draw_glyph</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_glyph_width</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>w</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_render</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>held</name> <init>= <expr><call><name>al_is_bitmap_drawing_held</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>advance</name> <operator>+=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>render_char</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>advance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_hold_bitmap_drawing</name><argument_list>(<argument><expr><name>held</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>advance</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>color_get_glyph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_GLYPH</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>_al_font_color_find_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>kerning</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>offset_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>offset_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>fallback</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_glyph</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>prev_codepoint</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_destroy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FONT_COLOR_DATA</name><modifier>*</modifier></type> <name>cf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>glyphs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_FONT_COLOR_DATA</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>glyphs</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FONT_COLOR_DATA</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>cf</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>begin</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cf</name><operator>-&gt;</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>cf</name><operator>-&gt;</operator><name>begin</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name> <operator>!=</operator> <name>glyphs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name> <operator>&amp;&amp;</operator> <name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_get_font_ranges</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ranges_count</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FONT_COLOR_DATA</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name><name>font</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ranges_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ranges</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>color_get_glyph_dimensions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bby</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbh</name></decl></parameter>)</parameter_list>

<block>{<block_content> 

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>glyph</name> <init>= <expr><call><name>_al_font_color_find_glyph</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>glyph</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>al_get_glyph_dimensions</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>,

<argument><expr><name>bbx</name></expr></argument>, <argument><expr><name>bby</name></expr></argument>, <argument><expr><name>bbw</name></expr></argument>, <argument><expr><name>bbh</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bbx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bbx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bby</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bby</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bbw</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bbw</name> <operator>=</operator> <ternary><condition><expr><name>glyph</name></expr> ?</condition><then> <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>glyph</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bbh</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bbh</name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_get_glyph_advance</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FONT</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>codepoint1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>codepoint2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint1</name> <operator>==</operator> <name>ALLEGRO_NO_KERNING</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>color_char_length</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>codepoint1</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_FONT_VTABLE</name></type> <name>_al_font_vtable_color</name> <init>= <expr><block>{

<expr><name>font_height</name></expr>,

<expr><name>font_ascent</name></expr>,

<expr><name>font_descent</name></expr>,

<expr><name>color_char_length</name></expr>,

<expr><name>length</name></expr>,

<expr><name>color_render_char</name></expr>,

<expr><name>color_render</name></expr>,

<expr><name>color_destroy</name></expr>,

<expr><name>color_get_text_dimensions</name></expr>,

<expr><name>color_get_font_ranges</name></expr>,

<expr><name>color_get_glyph_dimensions</name></expr>,

<expr><name>color_get_glyph_advance</name></expr>,

<expr><name>color_get_glyph</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>font_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font_inited</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>_al_vector_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FONT_HANDLER</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>, <argument><expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_init_font_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font_inited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Font addon already initialised.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FONT_HANDLER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".bmp"</literal></expr></argument>, <argument><expr><name>_al_load_bitmap_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".jpg"</literal></expr></argument>, <argument><expr><name>_al_load_bitmap_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".pcx"</literal></expr></argument>, <argument><expr><name>_al_load_bitmap_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>, <argument><expr><name>_al_load_bitmap_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>, <argument><expr><name>_al_load_bitmap_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".xml"</literal></expr></argument>, <argument><expr><name>_al_load_bmfont_xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_font_loader</name><argument_list>(<argument><expr><literal type="string">".fnt"</literal></expr></argument>, <argument><expr><name>_al_load_bmfont_xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>font_shutdown</name></expr></argument>, <argument><expr><literal type="string">"font_shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>font_inited</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_font_addon_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>font_inited</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_shutdown_font_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>font_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FONT_HANDLER</name> <modifier>*</modifier></type><name>find_extension</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FONT_HANDLER</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>handler</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_register_font_loader</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>extension</name></decl></parameter>,

<parameter><function_decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>load_font</name>)<parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FONT_HANDLER</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>find_extension</name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handler</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_font</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>extension</name></name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>load_font</name></name> <operator>=</operator> <name>load_font</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>al_load_font</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FONT_HANDLER</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font_inited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Font addon not initialised.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to determine filetype: '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>find_extension</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handler</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>handler</name><operator>-&gt;</operator><name>load_font</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FONT_HANDLER</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_handlers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>try</name> <init>= <expr><call><name><name>handler</name><operator>-&gt;</operator><name>load_font</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>try</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>try</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>al_get_allegro_font_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

</unit>
