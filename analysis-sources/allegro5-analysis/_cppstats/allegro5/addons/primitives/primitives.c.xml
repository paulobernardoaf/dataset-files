<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\primitives\primitives.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/alplatf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_directx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_soft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_DIRECT3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DIRECT3D</name></cpp:macro> <cpp:value>ALLEGRO_DIRECT3D_INTERNAL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"primitives"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>addon_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>al_init_primitives_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>_al_init_d3d_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addon_initialized</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>al_shutdown_primitives_addon</name></expr></argument>, <argument><expr><literal type="string">"primitives_shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_primitives_addon_initialized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>addon_initialized</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_shutdown_primitives_addon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_shutdown_d3d_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addon_initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_draw_prim</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content> 

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>start</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>ALLEGRO_PRIM_NUM_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name> <operator>||</operator>

<operator>(</operator><name>texture</name> <operator>&amp;&amp;</operator> <call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>||</operator>

<call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_prim_soft</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_prim_opengl</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_prim_directx</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_draw_indexed_prim</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num_vtx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>ALLEGRO_PRIM_NUM_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name> <operator>||</operator>

<operator>(</operator><name>texture</name> <operator>&amp;&amp;</operator> <call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>||</operator>

<call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_prim_indexed_soft</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_prim_indexed_opengl</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_prim_indexed_directx</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_bitmap_region_is_locked</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>bmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name><name>bmp</name><operator>-&gt;</operator><name>lock_x</name></name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>+</operator> <name>h</name> <operator>&gt;</operator> <name><name>bmp</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;</operator> <name><name>bmp</name><operator>-&gt;</operator><name>lock_x</name></name> <operator>+</operator> <name><name>bmp</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;</operator> <name><name>bmp</name><operator>-&gt;</operator><name>lock_y</name></name> <operator>+</operator> <name><name>bmp</name><operator>-&gt;</operator><name>lock_h</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>al_get_allegro_primitives_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>al_create_vertex_decl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_ELEMENT</name><modifier>*</modifier></type> <name>elements</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name><modifier>*</modifier></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_ELEMENT</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX_DECL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX_ELEMENT</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ALLEGRO_PRIM_ATTR_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>elements</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>elements</name><operator>-&gt;</operator><name>storage</name></name> <operator>==</operator> <name>ALLEGRO_PRIM_HALF_FLOAT_2</name> <operator>||</operator>

<name><name>elements</name><operator>-&gt;</operator><name>storage</name></name> <operator>==</operator> <name>ALLEGRO_PRIM_HALF_FLOAT_4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"This platform does not support ALLEGRO_PRIM_HALF_FLOAT_2 or ALLEGRO_PRIM_HALF_FLOAT_4.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>elements</name><operator>-&gt;</operator><name>attribute</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>elements</name></expr>;</expr_stmt>

<expr_stmt><expr><name>elements</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_POSITION</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name> <operator>!=</operator> <name>ALLEGRO_PRIM_FLOAT_2</name> <operator>&amp;&amp;</operator>

<name><name>e</name><operator>-&gt;</operator><name>storage</name></name> <operator>!=</operator> <name>ALLEGRO_PRIM_FLOAT_3</name> <operator>&amp;&amp;</operator>

<name><name>e</name><operator>-&gt;</operator><name>storage</name></name> <operator>!=</operator> <name>ALLEGRO_PRIM_SHORT_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Invalid storage for ALLEGRO_PRIM_POSITION.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD_PIXEL</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name> <operator>!=</operator> <name>ALLEGRO_PRIM_FLOAT_2</name> <operator>&amp;&amp;</operator>

<name><name>e</name><operator>-&gt;</operator><name>storage</name></name> <operator>!=</operator> <name>ALLEGRO_PRIM_SHORT_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Invalid storage for %s.\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ret</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD</name></expr>]</index></name><operator>.</operator><name>attribute</name></expr> ?</condition><then> <expr><literal type="string">"ALLEGRO_PRIM_TEX_COORD"</literal></expr> </then><else>: <expr><literal type="string">"ALLEGRO_PRIM_TEX_COORD_PIXEL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>al_get_display_flags</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_d3d_decl</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_vertex_decl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>al_create_vertex_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>initial_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX_BUFFER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>num_vertices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>write_only</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_PRIM_BUFFER_READWRITE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>decl</name></name> <operator>=</operator> <name>decl</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name> <operator>||</operator> <name>defined</name> <name>ALLEGRO_ANDROID</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_PRIM_BUFFER_READWRITE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>display_flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_create_vertex_buffer_opengl</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>num_vertices</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>display_flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_create_vertex_buffer_directx</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>num_vertices</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>al_create_index_buffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>initial_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_indices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index_size</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>index_size</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_INDEX_BUFFER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>num_indices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>write_only</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_PRIM_BUFFER_READWRITE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>index_size</name></name> <operator>=</operator> <name>index_size</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name> <operator>||</operator> <name>defined</name> <name>ALLEGRO_ANDROID</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_PRIM_BUFFER_READWRITE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>index_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>display_flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_create_index_buffer_opengl</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>num_indices</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>display_flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_al_create_index_buffer_directx</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>num_indices</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_vertex_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_vertex_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_destroy_vertex_buffer_opengl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_destroy_vertex_buffer_directx</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_index_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_index_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_destroy_index_buffer_opengl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_destroy_index_buffer_directx</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lock_buffer_common</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BUFFER_COMMON</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>common</name><operator>-&gt;</operator><name>is_locked</name></name> <operator>||</operator> <operator>(</operator><name><name>common</name><operator>-&gt;</operator><name>write_only</name></name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>!=</operator> <name>ALLEGRO_LOCK_WRITEONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>lock_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>lock_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>is_locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>al_lock_vertex_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>disp_flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>length</name> <operator>&gt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <ternary><condition><expr><name><name>buffer</name><operator>-&gt;</operator><name>decl</name></name></expr> ?</condition><then> <expr><name><name>buffer</name><operator>-&gt;</operator><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>disp_flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>_al_lock_vertex_buffer_opengl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>disp_flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>_al_lock_vertex_buffer_directx</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>al_lock_index_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp_flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>length</name> <operator>&gt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>*</operator> <name><name>buffer</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <name><name>buffer</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>disp_flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>_al_lock_index_buffer_opengl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>disp_flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>_al_lock_index_buffer_directx</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_unlock_vertex_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_unlock_vertex_buffer_opengl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_unlock_vertex_buffer_directx</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_unlock_index_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_unlock_index_buffer_opengl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_unlock_index_buffer_directx</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_draw_buffer_common_soft</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>index_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>vtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_primitives</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_vtx</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vtx_lock_start</name> <init>= <expr><ternary><condition><expr><name>index_buffer</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>start</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vtx_lock_len</name> <init>= <expr><ternary><condition><expr><name>index_buffer</name></expr> ?</condition><then> <expr><call><name>al_get_vertex_buffer_size</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>num_vtx</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vertex_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>write_only</name></name> <operator>||</operator> <operator>(</operator><name>index_buffer</name> <operator>&amp;&amp;</operator> <name><name>index_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>write_only</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vtx</name> <operator>=</operator> <call><name>al_lock_vertex_buffer</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>vtx_lock_start</name></expr></argument>, <argument><expr><name>vtx_lock_len</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_buffer</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>int_idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>al_lock_index_buffer</name><argument_list>(<argument><expr><name>index_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_buffer</name><operator>-&gt;</operator><name>index_size</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>int_idx</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>num_vtx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>int_idx</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>idx</name><operator>)</operator><index>[<expr><name>ii</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>int_idx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <call><name>_al_draw_prim_indexed_soft</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtx</name></expr></argument>, <argument><expr><name><name>vertex_buffer</name><operator>-&gt;</operator><name>decl</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_index_buffer</name><argument_list>(<argument><expr><name>index_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>int_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <call><name>_al_draw_prim_soft</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtx</name></expr></argument>, <argument><expr><name><name>vertex_buffer</name><operator>-&gt;</operator><name>decl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_vertex_buffer</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num_primitives</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_draw_vertex_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>start</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>end</name> <operator>&lt;=</operator> <call><name>al_get_vertex_buffer_size</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>ALLEGRO_PRIM_NUM_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>vertex_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name> <operator>||</operator>

<operator>(</operator><name>texture</name> <operator>&amp;&amp;</operator> <call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>||</operator>

<call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_buffer_common_soft</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_vertex_buffer_opengl</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_vertex_buffer_directx</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_draw_indexed_buffer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>index_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>addon_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>start</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>end</name> <operator>&lt;=</operator> <call><name>al_get_index_buffer_size</name><argument_list>(<argument><expr><name>index_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>ALLEGRO_PRIM_NUM_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>vertex_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>index_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>is_locked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name> <operator>||</operator>

<operator>(</operator><name>texture</name> <operator>&amp;&amp;</operator> <call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name><operator>)</operator> <operator>||</operator>

<call><name>_al_pixel_format_is_compressed</name><argument_list>(<argument><expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_buffer_common_soft</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>index_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_indexed_buffer_opengl</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>index_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_DIRECT3D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_al_draw_indexed_buffer_directx</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>index_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_vertex_buffer_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>al_get_index_buffer_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
