<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\primitives\prim_util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hypotf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_hypotf((x), (y))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_EPSILON</name></cpp:macro> <cpp:value>0.001f</cpp:value></cpp:define>

<function><type><name>float</name></type> <name>_al_prim_get_scale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>hypotf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>_al_prim_normalize</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>vector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>inv_length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inv_length</name> <operator>=</operator> <ternary><condition><expr><name>length</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>length</name></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>inv_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>inv_length</name></expr>;</expr_stmt>

<return>return <expr><name>length</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_prim_test_line_side</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>origin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>normal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>point</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><operator>-</operator><operator>(</operator><name><name>origin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>origin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_prim_is_point_in_triangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>point</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>edge_normal_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>, <expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>edge_normal_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><operator>(</operator><name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>, <expr><name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>edge_normal_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>, <expr><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edge_side_0</name> <init>= <expr><call><name>_al_prim_test_line_side</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>edge_normal_0</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edge_side_1</name> <init>= <expr><call><name>_al_prim_test_line_side</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>edge_normal_1</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edge_side_2</name> <init>= <expr><call><name>_al_prim_test_line_side</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>edge_normal_2</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_side_0</name> <operator>&amp;&amp;</operator> <name>edge_side_1</name> <operator>&amp;&amp;</operator> <name>edge_side_2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>edge_side_0</name> <operator>==</operator> <name>edge_side_1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>edge_side_0</name> <operator>==</operator> <name>edge_side_2</name><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>edge_side_0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>edge_side_1</name> <operator>==</operator> <name>edge_side_2</name><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>edge_side_1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>edge_side_0</name> <operator>==</operator> <name>edge_side_2</name><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<return>return <expr><operator>(</operator><name>edge_side_0</name> <operator>==</operator> <name>edge_side_1</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_prim_intersect_segment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>t0</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>t1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>, <decl><type ref="prev"/><name>time</name></decl>;</decl_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>denom</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><name>num</name> <operator>/</operator> <name>denom</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>t0</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>num2</name> <init>= <expr><operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <operator>(</operator><name>num2</name> <operator>/</operator> <name>denom</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>point</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>time</name> <operator>*</operator> <operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>time</name> <operator>*</operator> <operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_prim_are_points_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>point_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>point_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>fabsf</name><argument_list>(<argument><expr><name><name>point_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>point_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>AL_EPSILON</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fabsf</name><argument_list>(<argument><expr><name><name>point_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>point_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>AL_EPSILON</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_prim_cache_init</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prim_type</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_prim_cache_init_ex</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>prim_type</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_prim_cache_init_ex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prim_type</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>prim_type</name></name> <operator>=</operator> <name>prim_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_prim_cache_term</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_prim_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_prim_cache_flush</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>prim_type</name></name> <operator>==</operator> <name>ALLEGRO_PRIM_VERTEX_CACHE_TRIANGLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>prim_type</name></name> <operator>==</operator> <name>ALLEGRO_PRIM_VERTEX_CACHE_LINE_STRIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_draw_prim</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>prim_type</name></name> <operator>==</operator> <name>ALLEGRO_PRIM_VERTEX_CACHE_LINE_STRIP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_prim_cache_push_triangle</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_prim_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cache</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cache</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cache</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_prim_cache_push_point</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_VERTEX_CACHE</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ALLEGRO_VERTEX_CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_prim_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cache</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
