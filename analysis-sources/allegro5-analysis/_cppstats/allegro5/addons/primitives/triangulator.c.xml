<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\primitives\triangulator.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_VERTEX_ATTR_REFLEX</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_VERTEX_ATTR_EAR_CLIP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_VERTEX_ATTR_ALL</name></cpp:macro> <cpp:value>(POLY_VERTEX_ATTR_REFLEX | POLY_VERTEX_ATTR_EAR_CLIP)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>POLY_EMIT_TRIANGLE</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>POLY</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vertex_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vertex_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>split_indices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>split_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>split_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POLY_EMIT_TRIANGLE</name></type> <name>emit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertex_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear_list</name></decl>;</decl_stmt>

}</block></struct></type> <name>POLY</name>;</typedef>

<typedef>typedef <type><struct>struct <name>POLY_SPLIT</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>begin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>POLY_SPLIT</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>poly_debug_draw_text_t</name>)<parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__noop</name></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXPORT</name> <name>int</name></type> <name>g_poly_debug_split_step</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXPORT</name> <name>int</name></type> <name>g_poly_debug_step</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXPORT</name> <name>int</name></type> <name>g_poly_debug_step_current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXPORT</name> <name>poly_debug_draw_text_t</name></type> <name>g_poly_debug_draw_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXPORT</name> <name>float</name></type> <name>g_poly_debug_scale</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXPORT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_DEBUG_TEXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_poly_debug_draw_text ? g_poly_debug_draw_text(x,y,INT_MAX,__VA_ARGS__) : __noop)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_DEBUG_TEXT_LINE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>line</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_poly_debug_draw_text ? g_poly_debug_draw_text(x,y,line,__VA_ARGS__) : __noop)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>poly_initialize</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>poly</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poly_classify_vertices</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poly_classify_vertices_in_range</name><parameter_list>(<parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poly_do_triangulate</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>poly</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>_AL_LIST</name><modifier>*</modifier></type> <name>poly_create_split_list</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>polygon</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poly_split_list_dtor</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>poly_find_closest_intersection</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>vertex</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier><modifier>*</modifier></type> <name>edge0</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier><modifier>*</modifier></type> <name>edge1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>v0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>v1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>intersection</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>best_point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>best_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>best_e0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>best_e1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vertex</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_t</name> <operator>=</operator> <name>FLT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_list_size</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>item</name> <operator>=</operator> <name>next</name></expr><operator>,</operator> <expr><name>next</name> <operator>=</operator> <call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>p0</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_prim_intersect_segment</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>intersection</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>t1</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t1</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t0</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t0</name> <operator>&lt;</operator> <name>best_t</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_t</name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>intersection</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>intersection</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_e0</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_e1</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>best_e0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>point</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>best_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>best_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>edge0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>edge0</name> <operator>=</operator> <name>best_e0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>edge1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>edge1</name> <operator>=</operator> <name>best_e1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>poly_find_outter_split_vertex</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>polygon</name></decl></parameter>, <parameter><decl><type><name>POLY_SPLIT</name><modifier>*</modifier></type> <name>split</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>intersection</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>edge_vertex_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>edge_vertex_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>vertex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>reflex_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>best_vertex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>best_distance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>p0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>poly_find_closest_intersection</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>point</name></name></expr></argument>, <argument><expr><name>intersection</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edge_vertex_0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edge_vertex_1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>edge_vertex_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>edge_vertex_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_prim_are_points_equal</name><argument_list>(<argument><expr><name><name>split</name><operator>-&gt;</operator><name>point</name></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>edge_vertex_0</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_prim_are_points_equal</name><argument_list>(<argument><expr><name><name>split</name><operator>-&gt;</operator><name>point</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>edge_vertex_1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vertex</name> <operator>=</operator> <name>edge_vertex_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>vertex</name> <operator>=</operator> <name>edge_vertex_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>best_vertex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_distance</name> <operator>=</operator> <name>FLT_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reflex_item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>reflex_item</name></expr>;</condition> <incr><expr><name>reflex_item</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><name>reflex_item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>reflex_vertex</name> <init>= <expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>reflex_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>reflex_point</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>reflex_vertex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_prim_is_point_in_triangle</name><argument_list>(<argument><expr><name>reflex_point</name></expr></argument>, <argument><expr><name><name>split</name><operator>-&gt;</operator><name>point</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>intersection</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>diff_x</name> <init>= <expr><name><name>reflex_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>split</name><operator>-&gt;</operator><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>diff_y</name> <init>= <expr><name><name>reflex_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>split</name><operator>-&gt;</operator><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><name>diff_x</name> <operator>*</operator> <name>diff_x</name> <operator>+</operator> <name>diff_y</name> <operator>*</operator> <name>diff_y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <name>best_distance</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_distance</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_vertex</name> <operator>=</operator> <name>reflex_vertex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>best_vertex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vertex</name> <operator>=</operator> <name>best_vertex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>vertex</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_VERTEX</name><parameter_list>(<parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float*)(((uint8_t*)polygon-&gt;vertex_buffer) + (index) * polygon-&gt;vertex_stride))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_SPLIT</name><parameter_list>(<parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((int*)(((uint8_t*)polygon-&gt;split_indices) + (index) * polygon-&gt;split_stride)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY_SPLIT_INDEX</name><parameter_list>(<parameter><type><name>split</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint8_t*)split - (uint8_t*)polygon-&gt;split_indices) / polygon-&gt;split_stride)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>_AL_LIST</name><modifier>*</modifier></type> <name>poly_create_split_list</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>polygon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_split</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>_al_list_create_static</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POLY_SPLIT</name><modifier>*</modifier></type> <name>splits</name> <init>= <expr><operator>(</operator><name>POLY_SPLIT</name><operator>*</operator><operator>)</operator><call><name>al_malloc</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>POLY_SPLIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name>list</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name>splits</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>splits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_list_set_dtor</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>poly_split_list_dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_set_user_data</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>splits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_split</name> <operator>=</operator> <call><name>POLY_SPLIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POLY_SPLIT</name><modifier>*</modifier></type> <name>split</name> <init>= <expr><name>splits</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>where</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>last_split</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>POLY_SPLIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>last_split</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_split</name> <operator>=</operator> <name>last_split</name> <operator>+</operator> <name><name>split</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>-</operator><name>FLT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>max_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>split</name><operator>-&gt;</operator><name>begin</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>split</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>split</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name> <init>= <expr><call><name>POLY_VERTEX</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>point</name></name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>max_index</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>max_index</name></name> <operator>-=</operator> <name><name>split</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>split</name><operator>-&gt;</operator><name>max_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>where</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_list_is_empty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>where</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>where</name></expr>;</condition> <incr><expr><name>where</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>POLY_SPLIT</name><modifier>*</modifier></type> <name>local_split</name> <init>= <expr><operator>(</operator><name>POLY_SPLIT</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>local_split</name><operator>-&gt;</operator><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>where</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_push_back</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_insert_before</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poly_split_list_dtor</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>poly_initialize</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>polygon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertex_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>split_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>split_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vertex_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_split_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g_poly_debug_split_step</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>g_poly_debug_split_step</name></expr></argument>, <argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vertex_count</name> <operator>=</operator> <name><name>polygon</name><operator>-&gt;</operator><name>vertex_count</name></name> <operator>+</operator> <operator>(</operator><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vertex_list</name> <operator>=</operator> <call><name>_al_list_create_static</name><argument_list>(<argument><expr><name>vertex_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reflex_list</name> <operator>=</operator> <call><name>_al_list_create_static</name><argument_list>(<argument><expr><name>vertex_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ear_list</name> <operator>=</operator> <call><name>_al_list_create_static</name><argument_list>(<argument><expr><name>vertex_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>polygon</name><operator>-&gt;</operator><name>split_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>split_list</name> <operator>=</operator> <call><name>poly_create_split_list</name><argument_list>(<argument><expr><name>polygon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_split_list</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>split_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_split_list</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name>vertex_list</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name>reflex_list</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name>ear_list</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>use_split_list</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name>split_list</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name>reflex_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name>ear_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name>split_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name> <operator>=</operator> <name>vertex_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name> <operator>=</operator> <name>reflex_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name> <operator>=</operator> <name>ear_list</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>POLY_SPLIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_push_back</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><call><name>POLY_VERTEX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>use_split_list</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>current_split</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>poly_classify_vertices</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>reflex_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>split_item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name>split_list</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>split_item</name></expr>;</condition> <incr><expr><name>split_item</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name>split_list</name></expr></argument>, <argument><expr><name>split_item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>first_vertex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>last_vertex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POLY_SPLIT</name><modifier>*</modifier></type> <name>split</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g_poly_debug_split_step</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>current_split</name> <operator>&gt;=</operator> <name>g_poly_debug_split_step</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>current_split</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>split</name> <operator>=</operator> <operator>(</operator><name>POLY_SPLIT</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>split_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first_vertex</name> <operator>=</operator> <call><name>poly_find_outter_split_vertex</name><argument_list>(<argument><expr><name>polygon</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>first_vertex</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_vertex</name> <operator>=</operator> <name>first_vertex</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>split</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_vertex</name> <operator>=</operator> <call><name>_al_list_insert_after</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>last_vertex</name></expr></argument>,

<argument><expr><call><name>POLY_VERTEX</name><argument_list>(<argument><expr><name><name>split</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name><name>split</name><operator>-&gt;</operator><name>max_index</name></name><operator>)</operator> <operator>%</operator> <name><name>split</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>last_vertex</name> <operator>=</operator> <call><name>_al_list_insert_after</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>last_vertex</name></expr></argument>, <argument><expr><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>first_vertex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_remove</name><argument_list>(<argument><expr><name>reflex_list</name></expr></argument>, <argument><expr><name>first_vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poly_classify_vertices_in_range</name><argument_list>(<argument><expr><name>first_vertex</name></expr></argument>, <argument><expr><call><name>_al_list_next</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>last_vertex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>reflex_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name>split_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poly_classify_vertices</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ear_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>poly_classify_vertices</name><argument_list>(<argument><expr><name>vertex_list</name></expr></argument>, <argument><expr><name>reflex_list</name></expr></argument>, <argument><expr><name>ear_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLY_VERTEX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLY_SPLIT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLY_SPLIT_INDEX</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>poly_compute_vertex_attributes</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><call><name>_al_list_previous_circular</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>point</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cross</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_list_size</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cross</name> <operator>=</operator> <operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g_poly_debug_step</name> <operator>==</operator> <name>g_poly_debug_step_current</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>step</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>dir0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>dir2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>POLY_DEBUG_TEXT</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>cross</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dir0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dir0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.0f</literal> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dir2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dir2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.0f</literal> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>cross</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>POLY_VERTEX_ATTR_EAR_CLIP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>search_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reflex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>search_list</name> <operator>=</operator> <name>reflex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>_al_list_size</name><argument_list>(<argument><expr><name>search_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name>reflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>search_list</name> <operator>=</operator> <name>vertices</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>_al_list_size</name><argument_list>(<argument><expr><name>search_list</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name>search_list</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>point</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>point</name> <operator>=</operator> <call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name>search_list</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>search_list</name> <operator>==</operator> <name>reflex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>==</operator> <name>v0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <name>v1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <name>v2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_prim_is_point_in_triangle</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>point</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name>point</name><operator>)</operator> <operator>||</operator> <call><name>_al_list_is_empty</name><argument_list>(<argument><expr><name>search_list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>POLY_VERTEX_ATTR_EAR_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>POLY_VERTEX_ATTR_REFLEX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>POLY_VERTEX_ATTR_REFLEX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poly_classify_vertices</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>poly_classify_vertices_in_range</name><argument_list>(<argument><expr><call><name>_al_list_front</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>reflex</name></expr></argument>, <argument><expr><name>ear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poly_classify_vertices_in_range</name><parameter_list>(<parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attribute_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ear</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attribute_mask</name> <operator>|=</operator> <name>POLY_VERTEX_ATTR_EAR_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>reflex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attribute_mask</name> <operator>|=</operator> <name>POLY_VERTEX_ATTR_REFLEX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>item</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>poly_compute_vertex_attributes</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>attribute_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>POLY_VERTEX_ATTR_EAR_CLIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_push_back</name><argument_list>(<argument><expr><name>ear</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>POLY_VERTEX_ATTR_REFLEX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_push_back</name><argument_list>(<argument><expr><name>reflex</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poly_update_vertex_attributes</name><parameter_list>(<parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>reflex</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST</name><modifier>*</modifier></type> <name>ear</name></decl></parameter>, <parameter><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>vertex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>poly_compute_vertex_attributes</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>, <argument><expr><name>POLY_VERTEX_ATTR_ALL</name></expr></argument>, <argument><expr><name>reflex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>_al_list_find_first</name><argument_list>(<argument><expr><name>reflex</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>POLY_VERTEX_ATTR_REFLEX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_push_back</name><argument_list>(<argument><expr><name>reflex</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_list_remove</name><argument_list>(<argument><expr><name>ear</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name>reflex</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>_al_list_find_first</name><argument_list>(<argument><expr><name>ear</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>POLY_VERTEX_ATTR_EAR_CLIP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_push_front</name><argument_list>(<argument><expr><name>ear</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name>ear</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poly_do_triangulate</name><parameter_list>(<parameter><decl><type><name>POLY</name><modifier>*</modifier></type> <name>polygon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERTEX_INDEX</name><parameter_list>(<parameter><type><name>vertex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((uint8_t*)vertex) - ((uint8_t*)polygon-&gt;vertex_buffer)) / polygon-&gt;vertex_stride)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<expr_stmt><expr><name>g_poly_debug_step_current</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>histogram</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><call><name>_al_list_size</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>item</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>status</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>point0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>point1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>point1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>point0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>point1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>point0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>*</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name><name>point0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><name><name>point0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><name><name>point1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><name><name>point1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_list_contains</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>status</name><index>[<expr><name>status_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_al_list_contains</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>status</name><index>[<expr><name>status_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>POLY_DEBUG_TEXT_LINE</name><argument_list>(<argument><expr><name><name>point0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>point0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>histogram</name><index>[<expr><call><name>VERTEX_INDEX</name><argument_list>(<argument><expr><name>point0</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>histogram</name><index>[<expr><call><name>VERTEX_INDEX</name><argument_list>(<argument><expr><name>point0</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>histogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>!</operator><call><name>_al_list_is_empty</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>ear_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>vertex_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>v2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ear_item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vertex_item</name> <operator>=</operator> <operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>ear_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>_al_list_previous_circular</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name>vertex_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_al_list_next_circular</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name>vertex_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>vertex_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POLY_DEBUG</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g_poly_debug_step</name> <operator>==</operator> <name>g_poly_debug_step_current</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>_AL_LIST_ITEM</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_triangle</name><argument_list>(<argument><expr><name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>item</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6.0f</literal> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <call><name>_al_list_front</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>item</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <call><name>_al_list_next</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6.0f</literal> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>_al_list_size</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <call><name>_al_list_back</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>item</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <call><name>_al_list_previous</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>--</operator><name>second</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>point</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator><operator>)</operator><call><name>_al_list_item_data</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>second</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>second</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_draw_circle</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9.0f</literal> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <name>g_poly_debug_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_poly_debug_step</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>g_poly_debug_step_current</name> <operator>&gt;=</operator> <name>g_poly_debug_step</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_poly_debug_step_current</name><operator>++</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>polygon</name><operator>-&gt;</operator><name>emit</name></name><argument_list>(<argument><expr><call><name>VERTEX_INDEX</name><argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX_INDEX</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VERTEX_INDEX</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>, <argument><expr><name>ear_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name>vertex_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_erase</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><call><name>_al_list_find_first</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><name>vertex_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poly_update_vertex_attributes</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poly_update_vertex_attributes</name><argument_list>(<argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>vertex_list</name></name></expr></argument>, <argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>reflex_list</name></name></expr></argument>, <argument><expr><name><name>polygon</name><operator>-&gt;</operator><name>ear_list</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VERTEX_INDEX</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_triangulate_polygon</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>vertices</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vertex_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>vertex_counts</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>emit_triangle</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POLY</name></type> <name>polygon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertex_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>split_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>splits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>vertex_counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>split_count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>splits</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>split_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>splits</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vertex_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>split_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vertex_count</name> <operator>+=</operator> <name><name>vertex_counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>splits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>vertex_count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polygon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polygon</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>vertex_buffer</name></name> <operator>=</operator> <name>vertices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>vertex_stride</name></name> <operator>=</operator> <name>vertex_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>vertex_count</name></name> <operator>=</operator> <name>vertex_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>split_indices</name></name> <operator>=</operator> <name>splits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>split_stride</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>split_count</name></name> <operator>=</operator> <name>split_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>emit</name></name> <operator>=</operator> <name>emit_triangle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>polygon</name><operator>.</operator><name>userdata</name></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>poly_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polygon</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>poly_do_triangulate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polygon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name><name>polygon</name><operator>.</operator><name>vertex_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name><name>polygon</name><operator>.</operator><name>reflex_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_list_destroy</name><argument_list>(<argument><expr><name><name>polygon</name><operator>.</operator><name>ear_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>splits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
