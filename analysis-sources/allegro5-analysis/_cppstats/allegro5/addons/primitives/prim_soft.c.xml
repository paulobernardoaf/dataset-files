<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\primitives\prim_soft.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_soft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_tri_soft.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_VERTEX_CACHE</name></cpp:macro> <cpp:value>ALLEGRO_VERTEX vertex_cache[ALLEGRO_VERTEX_CACHE_SIZE]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_vtx</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_ELEMENT</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>decl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ALLEGRO_VERTEX</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_POSITION</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_2</name></expr>:</case>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_PRIM_SHORT_2</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD_PIXEL</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_2</name></expr>:</case>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_PRIM_SHORT_2</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>texture</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>attribute</name></name> <operator>==</operator> <name>ALLEGRO_PRIM_TEX_COORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>u</name></name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>v</name></name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_COLOR_ATTR</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ALLEGRO_COLOR</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_draw_prim_soft</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_primitives</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_vtx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name>decl</name></expr> ?</condition><then> <expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>global_trans</name> <init>= <expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_vtx</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_cache</name> <operator>=</operator> <name>num_vtx</name> <operator>&lt;</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>vtxptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>vtxs</name> <operator>+</operator> <name>start</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>convert_vtx</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtxptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>global_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>vtxptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_VERTEX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>convert_vtx(texture, (const char*)vtxs + stride * (idx), &amp;v, decl); al_transform_coordinates(global_trans, &amp;v.x, &amp;v.y);</cpp:value></cpp:define> 

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>ii</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>ii</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>start</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>ii</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_al_point_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_point_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num_primitives</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_VERTEX</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_draw_prim_indexed_soft</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>LOCAL_VERTEX_CACHE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_primitives</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_idx</name></decl>, <decl><type ref="prev"/><name>max_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name>decl</name></expr> ?</condition><then> <expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_TRANSFORM</name><modifier>*</modifier></type> <name>global_trans</name> <init>= <expr><call><name>al_get_current_transform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>use_cache</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>min_idx</name> <operator>=</operator> <name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_idx</name> <operator>=</operator> <name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_idx</name> <operator>&lt;</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>min_idx</name> <operator>&gt;</operator> <name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_idx</name> <operator>-</operator> <name>min_idx</name> <operator>&gt;=</operator> <name>ALLEGRO_VERTEX_CACHE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_cache</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_vtx</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>vtxs</name> <operator>+</operator> <name>idx</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx</name> <operator>-</operator> <name>min_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_transform_coordinates</name><argument_list>(<argument><expr><name>global_trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx</name> <operator>-</operator> <name>min_idx</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx</name> <operator>-</operator> <name>min_idx</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_VERTEX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>convert_vtx(texture, (const char*)vtxs + stride * (idx), &amp;v, decl); al_transform_coordinates(global_trans, &amp;v.x, &amp;v.y);</cpp:value></cpp:define> 

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>idx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>idx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>indices[ii]</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name></decl>, <decl><type ref="prev"/><name>idx2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <name><name>indices</name><index>[<expr><name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>indices[ii]</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>indices[<literal type="number">0</literal>]</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_line_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx3</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ii</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx3</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>idx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>idx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>idx3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx3</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx0</name> <init>= <expr><name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx0</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>SET_VERTEX</name><argument_list>(<argument>vtx[idx]</argument>, <argument>indices[ii]</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>_al_triangle_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-</operator> <name>min_idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_point_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vertex_cache</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_vtx</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_VERTEX</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_point_2d</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num_primitives</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_VERTEX</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_draw_soft_triangle</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>state</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>first</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>step</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>draw</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_al_draw_soft_triangle</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>init</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
