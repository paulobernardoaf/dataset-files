<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\primitives\prim_opengl.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_INTERNAL_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim_soft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/alplatf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_prim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_storage</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PRIM_STORAGE</name></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ncoord</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>normalized</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>storage</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_3</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_SHORT_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_1</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_FLOAT_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_UBYTE_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_SHORT_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_NORMALIZED_UBYTE_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_NORMALIZED_SHORT_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_NORMALIZED_SHORT_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_NORMALIZED_USHORT_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_NORMALIZED_USHORT_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ALLEGRO_PRIM_HALF_FLOAT_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_HALF_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_HALF_FLOAT_4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>GL_HALF_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ncoord</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>normalized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncoord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>normalized</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>decl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_ELEMENT</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_POSITION</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>convert_storage</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>, <argument><expr><name>ncoord</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD_PIXEL</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>convert_storage</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>, <argument><expr><name>ncoord</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_COLOR_ATTR</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_ALLEGRO_PRIM_MAX_USER_ATTR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_USER_ATTR</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>convert_storage</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>user_attr_loc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>user_attr_loc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ncoord</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>user_attr_loc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>user_attr_loc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>user_attr_loc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>decl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VERTEX_ELEMENT</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_POSITION</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_storage</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glVertexPointer</name><argument_list>(<argument><expr><name>ncoord</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD_PIXEL</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>texture</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_storage</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexCoordPointer</name><argument_list>(<argument><expr><name>ncoord</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_COLOR_ATTR</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glColorPointer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glColor4f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glVertexPointer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glColorPointer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexCoordPointer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vtxs</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>texture</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>gl_texture</name> <init>= <expr><call><name>al_get_opengl_texture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>true_w</name></decl>, <decl><type ref="prev"/><name>true_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tex_x</name></decl>, <decl><type ref="prev"/><name>tex_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>mat</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>texture</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>texture</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>al_get_opengl_texture_size</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>true_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>true_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_opengl_texture_position</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>tex_x</name> <operator>/</operator> <name>true_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>height</name> <operator>-</operator> <name>tex_y</name><operator>)</operator> <operator>/</operator> <name>true_h</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>decl</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>decl</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>ALLEGRO_PRIM_TEX_COORD_PIXEL</name></expr>]</index></name><operator>.</operator><name>attribute</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>true_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <name>true_h</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>true_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>true_h</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>true_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <name>true_h</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>gl_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>tex_matrix_loc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_matrix_loc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>tex_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><call><name>al_get_opengl_texture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>tex_loc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_TEXTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLoadMatrixf</name><argument_list>(<argument><expr><name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>revert_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>texture</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name><name>identity</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>tex_matrix_loc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_matrix_loc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>use_tex_loc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_TEXTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>pos_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>color_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>varlocs</name><operator>.</operator><name>texcoord_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL_FIXED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>draw_prim_raw</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_primitives</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>opengl_target</name> <init>= <expr><name>target</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_vtx</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opengl_target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>opengl_target</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>extra</name><operator>-&gt;</operator><name>is_backbuffer</name></name> <operator>&amp;&amp;</operator> <name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>!=</operator>

<name>opengl_target</name><operator>)</operator> <operator>||</operator> <call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vertex_buffer</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>_al_draw_buffer_common_soft</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>_al_draw_prim_soft</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtx</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertex_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>)</operator><name><name>vertex_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_opengl_set_blender</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_state</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_LINES</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_LINE_STRIP</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_LINE_LOOP</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLE_STRIP</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLE_FAN</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_POINTS</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>revert_state</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vertex_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num_primitives</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>draw_prim_indexed_raw</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>index_buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_primitives</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><call><name>_al_get_bitmap_display</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>opengl_target</name> <init>= <expr><name>target</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP_EXTRA_OPENGL</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idx</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>indices</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>idx_size</name> <init>= <expr><name>GL_UNSIGNED_INT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_buffers</name> <init>= <expr><name>index_buffer</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_vtx</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name></expr></cpp:if>

<decl_stmt><decl><type><name>GLushort</name><modifier>*</modifier></type> <name>iphone_idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>use_buffers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx_size</name> <operator>=</operator> <ternary><condition><expr><name><name>index_buffer</name><operator>-&gt;</operator><name>index_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>GL_UNSIGNED_INT</name></expr> </then><else>: <expr><name>GL_UNSIGNED_SHORT</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <name>start</name> <operator>*</operator> <name><name>index_buffer</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opengl_target</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>opengl_target</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>extra</name><operator>-&gt;</operator><name>is_backbuffer</name></name> <operator>&amp;&amp;</operator> <name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>opengl_target</name></name> <operator>!=</operator>

<name>opengl_target</name><operator>)</operator> <operator>||</operator> <call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_buffers</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>_al_draw_buffer_common_soft</name><argument_list>(<argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>index_buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>_al_draw_prim_indexed_soft</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vtx</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_buffers</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iphone_idx</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>num_vtx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>iphone_idx</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GLushort</name><operator>)</operator><name><name>indices</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>iphone_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx_size</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_opengl_set_blender</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_buffers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>)</operator><name><name>vertex_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>)</operator><name><name>index_buffer</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setup_state</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_LINES</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_STRIP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_LINE_STRIP</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_LINE_LOOP</name></expr>:</case> <block>{<block_content>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_STRIP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLE_STRIP</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_TRIANGLE_FAN</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLE_FAN</name></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_primitives</name> <operator>=</operator> <name>num_vtx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

<case>case <expr><name>ALLEGRO_PRIM_POINT_LIST</name></expr>:</case> <block>{<block_content>

<break>break;</break>

</block_content>}</block><empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>revert_state</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_buffers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>iphone_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>num_primitives</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type> <name>_al_draw_prim_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>draw_prim_raw</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>texture</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>vtxs</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decl</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_draw_vertex_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>draw_prim_raw</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vertex_buffer</name><operator>-&gt;</operator><name>decl</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>texture</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>vertex_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_draw_prim_indexed_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>vtxs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VERTEX_DECL</name><modifier>*</modifier></type> <name>decl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_vtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>draw_prim_indexed_raw</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vtxs</name></expr></argument>, <argument><expr><name>decl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_vtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>texture</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>vtxs</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>decl</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>indices</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>num_vtx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_al_draw_indexed_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>vertex_buffer</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>index_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>draw_prim_indexed_raw</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>vertex_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>vertex_buffer</name><operator>-&gt;</operator><name>decl</name></name></expr></argument>, <argument><expr><name>index_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>texture</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>vertex_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>index_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_buffer_common</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BUFFER_COMMON</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>initial_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>vbo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>usage</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>flags</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if>

<case>case <expr><name>ALLEGRO_PRIM_BUFFER_STREAM</name></expr>:</case>

<expr_stmt><expr><name>usage</name> <operator>=</operator> <name>GL_STREAM_DRAW</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_PRIM_BUFFER_STATIC</name></expr>:</case>

<expr_stmt><expr><name>usage</name> <operator>=</operator> <name>GL_STATIC_DRAW</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_PRIM_BUFFER_DYNAMIC</name></expr>:</case>

<expr_stmt><expr><name>usage</name> <operator>=</operator> <name>GL_DYNAMIC_DRAW</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>usage</name> <operator>=</operator> <name>GL_STATIC_DRAW</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>vbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>vbo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>local_buffer_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>_al_create_vertex_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>initial_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_vertices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>decl</name></name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>decl</name><operator>-&gt;</operator><name>stride</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_VERTEX</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>create_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>num_vertices</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>initial_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>num_vertices</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_create_index_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>initial_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_indices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>create_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>initial_data</name></expr></argument>, <argument><expr><name>num_indices</name> <operator>*</operator> <name><name>buf</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>initial_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>num_indices</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_destroy_vertex_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>locked_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_destroy_index_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>locked_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>lock_buffer_common</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BUFFER_COMMON</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>common</name><operator>-&gt;</operator><name>local_buffer_length</name></name> <operator>&lt;</operator> <name><name>common</name><operator>-&gt;</operator><name>lock_length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>locked_memory</name></name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>common</name><operator>-&gt;</operator><name>locked_memory</name></name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>lock_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>local_buffer_length</name></name> <operator>=</operator> <name><name>common</name><operator>-&gt;</operator><name>lock_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>common</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>!=</operator> <name>ALLEGRO_LOCK_WRITEONLY</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ALLEGRO_CFG_OPENGLES</name></expr></cpp:if>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>)</operator><name><name>common</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGetBufferSubData</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>lock_offset</name></name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>lock_length</name></name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>locked_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>common</name><operator>-&gt;</operator><name>locked_memory</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name><modifier>*</modifier></type> <name>_al_lock_vertex_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>lock_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>_al_lock_index_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>lock_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>unlock_buffer_common</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BUFFER_COMMON</name><modifier>*</modifier></type> <name>common</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>common</name><operator>-&gt;</operator><name>lock_flags</name></name> <operator>!=</operator> <name>ALLEGRO_LOCK_READONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>GLuint</name><operator>)</operator><name><name>common</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>lock_offset</name></name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>lock_length</name></name></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>locked_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>_al_unlock_vertex_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VERTEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unlock_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_unlock_index_buffer_opengl</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_INDEX_BUFFER</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unlock_buffer_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
