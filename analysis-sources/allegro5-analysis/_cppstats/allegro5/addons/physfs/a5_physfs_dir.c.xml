<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\physfs\a5_physfs_dir.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;physfs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_physfs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro_physfs_intern.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTSUP</name></cpp:macro> <cpp:value>ENOTSUP</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTSUP</name></cpp:macro> <cpp:value>ENOSYS</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTSUP</name></cpp:macro> <cpp:value>EINVAL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_FS_ENTRY_PHYSFS</name></name></type> <name>ALLEGRO_FS_ENTRY_PHYSFS</name>;</typedef>

<struct>struct <name>ALLEGRO_FS_ENTRY_PHYSFS</name>

<block>{

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name></type> <name>fs_entry</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>file_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>file_list_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_dir_open</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name></type> <name>fs_phys_vtable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>fs_phys_cwd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">"/"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>path_is_absolute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>path</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ensure_trailing_slash</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>_al_physfs_process_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name>fs_phys_cwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_rebase_path</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><call><name>al_path_ustr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>us</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fs_phys_create_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>fs_entry</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>fs_phys_vtable</name></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>_al_physfs_process_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name> <operator>=</operator> <call><name>al_path_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>fs_entry</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fs_phys_get_current_directory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fs_phys_cwd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fs_phys_cwd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_change_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fs_phys_cwd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs_phys_cwd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>path_is_absolute</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>_al_physfs_process_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PHYSFS_isDirectory</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ensure_trailing_slash</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fs_phys_cwd</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>fs_phys_cwd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fs_phys_cwd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_filename_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>_al_physfs_process_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>PHYSFS_exists</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_remove_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>_al_physfs_process_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>PHYSFS_delete</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_make_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>_al_physfs_process_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>PHYSFS_mkdir</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fs_phys_entry_name</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_update_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fse</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type> <name>fs_phys_entry_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PHYSFS_file</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>PHYSFS_openRead</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>off_t</name></type> <name>s</name> <init>= <expr><call><name>PHYSFS_fileLength</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PHYSFS_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>fs_phys_entry_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mode</name> <init>= <expr><name>ALLEGRO_FILEMODE_READ</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PHYSFS_isDirectory</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_ISDIR</name> <operator>|</operator> <name>ALLEGRO_FILEMODE_EXECUTE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>ALLEGRO_FILEMODE_ISFILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>mode</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type> <name>fs_phys_entry_mtime</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>PHYSFS_getLastModTime</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_entry_exists</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>PHYSFS_exists</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_remove_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>PHYSFS_delete</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_open_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>file_list</name></name> <operator>=</operator> <call><name>PHYSFS_enumerateFiles</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>file_list_pos</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>file_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>is_dir_open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fs_phys_read_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>file_list_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>file_list_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path_cstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ensure_trailing_slash</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>file_list_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>fs_phys_create_entry</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>file_list_pos</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fs_phys_close_directory</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PHYSFS_freeList</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>file_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>file_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>is_dir_open</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fs_phys_destroy_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FS_ENTRY_PHYSFS</name> <operator>*</operator><operator>)</operator><name>fse</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>is_dir_open</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fs_phys_close_directory</name><argument_list>(<argument><expr><name>fse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fs_phys_open_file</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>fse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>al_fopen_interface</name><argument_list>(<argument><expr><call><name>_al_get_phys_vtable</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>fs_phys_entry_name</name><argument_list>(<argument><expr><name>fse</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_FS_INTERFACE</name></type> <name>fs_phys_vtable</name> <init>=

<expr><block>{

<expr><name>fs_phys_create_entry</name></expr>,

<expr><name>fs_phys_destroy_entry</name></expr>,

<expr><name>fs_phys_entry_name</name></expr>,

<expr><name>fs_phys_update_entry</name></expr>,

<expr><name>fs_phys_entry_mode</name></expr>,

<expr><name>fs_phys_entry_mtime</name></expr>,

<expr><name>fs_phys_entry_mtime</name></expr>,

<expr><name>fs_phys_entry_mtime</name></expr>,

<expr><name>fs_phys_entry_size</name></expr>,

<expr><name>fs_phys_entry_exists</name></expr>,

<expr><name>fs_phys_remove_entry</name></expr>,

<expr><name>fs_phys_open_directory</name></expr>,

<expr><name>fs_phys_read_directory</name></expr>,

<expr><name>fs_phys_close_directory</name></expr>,

<expr><name>fs_phys_filename_exists</name></expr>,

<expr><name>fs_phys_remove_filename</name></expr>,

<expr><name>fs_phys_get_current_directory</name></expr>,

<expr><name>fs_phys_change_directory</name></expr>,

<expr><name>fs_phys_make_directory</name></expr>,

<expr><name>fs_phys_open_file</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>_al_set_physfs_fs_interface</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_set_fs_interface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_phys_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
