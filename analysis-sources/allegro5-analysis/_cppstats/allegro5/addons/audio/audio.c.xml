<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\audio\audio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_exitfunc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio_cfg.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>_al_set_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"%s (error code: %d)\n"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_DRIVER</name> <modifier>*</modifier></type><name>_al_kcm_driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OPENAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_openal_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OPENSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_opensl_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_ALSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_alsa_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OSS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_oss_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_DSOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_dsound_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_AQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_aqueue_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_PULSEAUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_pulseaudio_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_SDL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ALLEGRO_AUDIO_DRIVER</name></name></type> <name>_al_kcm_sdl_driver</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>al_get_channel_count</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>conf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>conf</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>conf</name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>al_get_audio_depth_size</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>_al_count_to_channel_conf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>num_channels</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_1</name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_3</name></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_4</name></expr>;</return>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_5_1</name></expr>;</return>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_6_1</name></expr>;</return>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_CHANNEL_CONF_7_1</name></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>_al_word_size_to_depth_conf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>word_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>word_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<return>return <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_fill_silence</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><name>samples</name> <operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>al_get_channel_count</name><argument_list>(<argument><expr><name>chan_conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>bytes</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>bytes</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_DRIVER_ENUM</name></type> <name>get_config_audio_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="string">"driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_AUTODETECT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ALSA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_ALSA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"OPENAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_OPENAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"OPENSL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_OPENSL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"OSS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_OSS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"PULSEAUDIO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_PULSEAUDIO</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"DSOUND"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>_al_stricmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"DIRECTSOUND"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_DSOUND</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ALLEGRO_AUDIO_DRIVER_AUTODETECT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_install_audio</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_DRIVER_ENUM</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retVal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_kcm_driver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A driver already running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>ALLEGRO_AUDIO_DRIVER_AUTODETECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_config_audio_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_AUTODETECT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_SDL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_SDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_AQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_AQUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_PULSEAUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_PULSEAUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_ALSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_ALSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_DSOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_DSOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OSS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_OSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OPENAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_OPENAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OPENSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_OPENSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"No audio driver can be used."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_AQUEUE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_AQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_aqueue_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using Apple Audio Queue driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_aqueue_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"Audio Queue driver not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_OPENAL</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OPENAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_openal_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using OpenAL driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_openal_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"OpenAL not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_OPENSL</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OPENSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_opensl_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using OpenSL driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_opensl_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"OpenSL not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_ALSA</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_ALSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_alsa_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using ALSA driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_alsa_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"ALSA not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_OSS</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_OSS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_oss_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using OSS driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_oss_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"OSS not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_PULSEAUDIO</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_PULSEAUDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_pulseaudio_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using PulseAudio driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_pulseaudio_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"PulseAudio not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_DSOUND</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_KCM_DSOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_dsound_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using DirectSound driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_dsound_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"DirectSound not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ALLEGRO_AUDIO_DRIVER_SDL</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_SDL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_sdl_driver</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using SDL driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <operator>&amp;</operator><name>_al_kcm_sdl_driver</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"SDL not available on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>, <argument><expr><literal type="string">"Invalid audio driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_install_audio</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_al_kcm_driver</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_kcm_init_destructors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_add_exit_func</name><argument_list>(<argument><expr><name>al_uninstall_audio</name></expr></argument>, <argument><expr><literal type="string">"al_uninstall_audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_install_audio</name><argument_list>(<argument><expr><name>ALLEGRO_AUDIO_DRIVER_AUTODETECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_uninstall_audio</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>_al_kcm_driver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_kcm_shutdown_default_mixer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_shutdown_destructors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>_al_kcm_driver</name><operator>-&gt;</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_al_kcm_driver</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>_al_kcm_shutdown_destructors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_audio_installed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>_al_kcm_driver</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>al_get_allegro_audio_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ALLEGRO_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

</unit>
