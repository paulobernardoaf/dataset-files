<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\audio\recorder.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio_cfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>recorder</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_AUDIO_RECORDER_EVENT</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>al_create_audio_recorder</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>fragment_count</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>frequency</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_al_kcm_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_al_kcm_driver</name><operator>-&gt;</operator><name>allocate_recorder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Audio driver does not support recording.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for ALLEGRO_AUDIO_RECORDER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fragment_count</name></name> <operator>=</operator> <name>fragment_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <name>frequency</name></expr><operator>,</operator> 

<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>=</operator> <name>chan_conf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name>chan_conf</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragment_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>fragments</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for ALLEGRO_AUDIO_RECORDER fragments\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fragment_size</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fragment_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for ALLEGRO_AUDIO_RECORDER fragments\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name><name>_al_kcm_driver</name><operator>-&gt;</operator><name>allocate_recorder</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to allocate recorder from driver\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>bool</name></type> <name>al_start_audio_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_stop_audio_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_is_audio_recorder_recording</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_recording</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_recording</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>is_recording</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <modifier>*</modifier></type><name>al_get_audio_recorder_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <operator>*</operator><operator>)</operator> <name>event</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_audio_recorder_event_source</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>source</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_audio_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_al_kcm_driver</name><operator>-&gt;</operator><name>deallocate_recorder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>_al_kcm_driver</name><operator>-&gt;</operator><name>deallocate_recorder</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>fragment_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
