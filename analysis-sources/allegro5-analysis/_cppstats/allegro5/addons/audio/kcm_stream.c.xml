<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\audio\kcm_stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio_cfg.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"audio"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LAG</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>maybe_lock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mutex</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_unlock_mutex</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>al_create_audio_stream</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>fragment_count</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>frag_samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>chan_conf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes_per_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes_per_frag_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,

<argument><expr><literal type="string">"Attempted to create stream with no buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frag_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,

<argument><expr><literal type="string">"Attempted to create stream with no buffer size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>freq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,

<argument><expr><literal type="string">"Attempted to create stream with no frequency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name>chan_conf</name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_per_frag_buf</name> <operator>=</operator> <name>frag_samples</name> <operator>*</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Out of memory allocating stream object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>is_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name> <operator>=</operator> <name>chan_conf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pan</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>frag_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>=</operator> <name>fragment_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fragment_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Out of memory allocating stream buffer pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name></name> <operator>+</operator> <name>fragment_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>main_buffer</name></name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>MAX_LAG</name> <operator>*</operator> <name>bytes_per_sample</name> <operator>+</operator> <name>bytes_per_frag_buf</name><operator>)</operator> <operator>*</operator> <name>fragment_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>main_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Out of memory allocating stream buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fragment_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>main_buffer</name></name>

<operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>MAX_LAG</name> <operator>*</operator> <name>bytes_per_sample</name> <operator>+</operator> <name>bytes_per_frag_buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_fill_silence</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_LAG</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>chan_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>MAX_LAG</name> <operator>*</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_destroy_audio_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>unload_feeder</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>main_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>al_drain_audio_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>playing</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_get_audio_stream_attached</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_set_audio_stream_playing</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>is_draining</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>playing</name> <operator>=</operator> <call><name>al_get_audio_stream_playing</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>playing</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>is_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_audio_stream_frequency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_audio_stream_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_audio_stream_fragments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>al_get_available_audio_stream_fragments</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>al_get_audio_stream_speed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>speed</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>al_get_audio_stream_gain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>gain</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>al_get_audio_stream_pan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pan</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_CHANNEL_CONF</name></type> <name>al_get_audio_stream_channels</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_AUDIO_DEPTH</name></type> <name>al_get_audio_stream_depth</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_PLAYMODE</name></type> <name>al_get_audio_stream_playmode</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_get_audio_stream_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_get_audio_stream_attached</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>al_get_audio_stream_played_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_mutex</name> <operator>=</operator> <call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>consumed_fragments</name></name> <operator>*</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>+</operator>

<name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>al_get_audio_stream_fragment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fragment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_mutex</name> <operator>=</operator> <call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fragment</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>fragment</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fragment</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_speed</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_PARAM</name></expr></argument>,

<argument><expr><literal type="string">"Attempted to set stream speed to a zero or negative value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not set voice playback speed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name><operator>)</operator> <operator>*</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>speed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>step_denom</name></name> <operator>=</operator> <name><name>mixer</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>frequency</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_gain</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not set gain of stream attached to voice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>gain</name></name> <operator>!=</operator> <name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>gain</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_kcm_mixer_rejig_sample_matrix</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_pan</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not set gain of stream attached to voice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>ALLEGRO_AUDIO_PAN_NONE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pan value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pan</name></name> <operator>!=</operator> <name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pan</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MIXER</name> <modifier>*</modifier></type><name>mixer</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>mixer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_kcm_mixer_rejig_sample_matrix</name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_playmode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>ALLEGRO_PLAYMODE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_ONCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_LOOP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_stopped_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bytes_per_sample</name> <init>=

<expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fragment_buffer_size</name> <init>=

<expr><name>bytes_per_sample</name> <operator>*</operator> <operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>MAX_LAG</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_fill_silence</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>main_buffer</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>fragment_buffer_size</name></expr></argument>,

<argument><expr><name>MAX_LAG</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>&amp;&amp;</operator>

<name>n</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>&amp;&amp;</operator>

<name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos_bresenham_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>consumed_fragments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>rc</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>voice</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_al_kcm_set_voice_playing</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_mutex</name> <operator>=</operator> <call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name> <operator>=</operator> <name>rc</name> <operator>&amp;&amp;</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>is_playing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_kcm_emit_stream_events</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_stopped_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_detach_audio_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_kcm_detach_from_parent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_read</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>al_get_audio_stream_attached</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_fragment</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_mutex</name> <operator>=</operator> <call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_INVALID_OBJECT</name></expr></argument>,

<argument><expr><literal type="string">"Attempted to set a stream buffer with a full pending list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_kcm_refill_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_INSTANCE</name> <modifier>*</modifier></type><name>spl</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_buf</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_pos</name> <init>= <expr><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_buf</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf_count</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>used_bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>old_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_buf</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>pending_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Out of buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bytes_per_sample</name> <init>=

<expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>spl</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>new_buf</name> <operator>-</operator> <name>bytes_per_sample</name> <operator>*</operator> <name>MAX_LAG</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>old_buf</name> <operator>+</operator> <name>bytes_per_sample</name> <operator>*</operator> <operator>(</operator><name><name>spl</name><operator>-&gt;</operator><name>pos</name></name><operator>-</operator><name>MAX_LAG</name><operator>-</operator><name>new_pos</name><operator>)</operator></expr></argument>,

<argument><expr><name>bytes_per_sample</name> <operator>*</operator> <name>MAX_LAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>consumed_fragments</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>new_pos</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>_al_kcm_feed_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vstream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>vstream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>finished_event_sent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>self</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Stream feeder thread started.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>feed_thread_started_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>quit_feed_thread</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>quit_feed_thread</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fragment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>is_draining</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes_written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name>al_get_audio_stream_fragment</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>*</operator>

<call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_mutex</name> <operator>=</operator> <call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <name>bytes</name> <operator>&amp;&amp;</operator>

<name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONEDIR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_rewind_audio_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_mutex</name> <operator>=</operator> <call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>feeder</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fragment</name> <operator>+</operator> <name>bytes_written</name></expr></argument>,

<argument><expr><name>bytes</name> <operator>-</operator> <name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>+=</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>silence_samples</name> <init>= <expr><operator>(</operator><name>bytes</name> <operator>-</operator> <name>bytes_written</name><operator>)</operator> <operator>/</operator>

<operator>(</operator><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_fill_silence</name><argument_list>(<argument><expr><name>fragment</name> <operator>+</operator> <name>bytes_written</name></expr></argument>, <argument><expr><name>silence_samples</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>depth</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>spl_data</name><operator>.</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_audio_stream_fragment</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error setting stream buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>!=</operator> <name>bytes</name> <operator>&amp;&amp;</operator>

<name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>loop</name></name> <operator>==</operator> <name>_ALLEGRO_PLAYMODE_STREAM_ONCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_drain_audio_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>finished_event_sent</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>fin_event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fin_event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_AUDIO_STREAM_FINISHED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fin_event</name><operator>.</operator><name>user</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fin_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finished_event_sent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>finished_event_sent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_KCM_STREAM_FEEDER_QUIT_EVENT_TYPE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>fin_event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>quit_feed_thread</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fin_event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_AUDIO_STREAM_FINISHED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fin_event</name><operator>.</operator><name>user</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fin_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Stream feeder thread finished.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_kcm_emit_stream_events</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>al_get_available_audio_stream_fragments</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_rewind_audio_stream</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>rewind_feeder</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_seek_audio_stream_secs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>seek_feeder</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>al_get_audio_stream_position_secs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_position</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>al_get_audio_stream_length_secs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>get_feeder_length</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_loop_secs</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>stream_mutex</name> <init>= <expr><call><name>maybe_lock_mutex</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>set_feeder_loop</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_unlock_mutex</name><argument_list>(<argument><expr><name>stream_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>al_get_audio_stream_event_source</name><parameter_list>(

<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>es</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>al_set_audio_stream_channel_matrix</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>u</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>spl</name><operator>.</operator><name>parent</name><operator>.</operator><name>is_voice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_al_set_error</name><argument_list>(<argument><expr><name>ALLEGRO_GENERIC_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not set channel matrix of stream attached to voice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>al_set_sample_instance_channel_matrix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>spl</name></name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
