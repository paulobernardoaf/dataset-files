<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\audio\alsa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alsa/asoundlib.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"alsa"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALSA_CHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int err = (a); if (err &lt; 0) { ALLEGRO_ERROR("%s: %s\n", snd_strerror(err), #a); goto Error; } } while(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>snd_output_t</name> <modifier>*</modifier></type><name>snd_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>default_device</name> <init>= <expr><literal type="string">"default"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>alsa_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PERIOD_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_PERIOD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUFFER_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_period_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"alsa"</literal></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>MIN_PERIOD_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>MIN_PERIOD_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DEFAULT_PERIOD_SIZE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>snd_pcm_uframes_t</name></type> <name>get_buffer_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"alsa"</literal></expr></argument>, <argument><expr><literal type="string">"buffer_size2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DEFAULT_BUFFER_SIZE</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ALSA_VOICE</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>frag_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>reversed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>stopped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>ufds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ufds_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>poll_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mmapped</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALSA_VOICE</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>alsa_device</name> <operator>=</operator> <name>default_device</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_device</name></decl>;</decl_stmt>

<expr_stmt><expr><name>config_device</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"alsa"</literal></expr></argument>, <argument><expr><literal type="string">"device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_device</name> <operator>&amp;&amp;</operator> <name><name>config_device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>alsa_device</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>config_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_output_stdio_attach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>snd_output</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>test_pcm_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alsa_err</name> <init>= <expr><call><name>snd_pcm_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_pcm_handle</name></expr></argument>, <argument><expr><name>alsa_device</name></expr></argument>,

<argument><expr><name>SND_PCM_STREAM_PLAYBACK</name></expr></argument>, <argument><expr><name>SND_PCM_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alsa_err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"ALSA is not available on the system.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name>test_pcm_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>Error</name>:</label>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error initializing alsa!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alsa_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>alsa_device</name> <operator>!=</operator> <name>default_device</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>alsa_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>alsa_device</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_output_close</name><argument_list>(<argument><expr><name>snd_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_config_update_free_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xrun_recovery</name><parameter_list>(<parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>EPIPE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Can't recover from underrun, prepare failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Recovered from underrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>ESTRPIPE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snd_pcm_resume</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Can't recover from suspend, resume failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Resumed successfully\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unknown error code: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_update_nonstream_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>alsa_voice</name> <init>= <expr><operator>(</operator><name>ALSA_VOICE</name><operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpos</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>*</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blen</name> <init>= <expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name>bpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>reversed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpos</name> <operator>+</operator> <operator>*</operator><name>bytes</name> <operator>&gt;</operator> <name>blen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <name>blen</name> <operator>-</operator> <name>bpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_ONCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_LOOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_BIDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>reversed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>*</operator><name>bytes</name> <operator>/</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpos</name> <operator>-</operator> <operator>*</operator><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <name>bpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>reversed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <operator>*</operator><name>bytes</name> <operator>/</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_voice_is_ready</name><parameter_list>(<parameter><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>alsa_voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>revents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>ufds</name></name></expr></argument>, <argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>ufds_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_poll_descriptors_revents</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>ufds</name></name></expr></argument>,

<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>ufds_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>revents</name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_state</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SND_PCM_STATE_XRUN</name> <operator>||</operator>

<call><name>snd_pcm_state</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SND_PCM_STATE_SUSPENDED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_state</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SND_PCM_STATE_XRUN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><name>EPIPE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><name>ESTRPIPE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xrun_recovery</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Write error: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><name>POLLERR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Wait for poll failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><name>POLLERR</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>alsa_update_mmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><operator>(</operator><name>ALLEGRO_VOICE</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>alsa_voice</name> <init>= <expr><operator>(</operator><name>ALSA_VOICE</name><operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_state_t</name></type> <name>last_state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>snd_pcm_channel_area_t</name> <modifier>*</modifier></type><name>areas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_sframes_t</name></type> <name>commitres</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"ALSA update_mmap thread started\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_drop</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>snd_pcm_state</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>last_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"state changed to: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_pcm_state_name</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>SND_PCM_STATE_SETUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"snd_pcm_prepare returned: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>SND_PCM_STATE_PREPARED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>snd_pcm_start</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"snd_pcm_start returned: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alsa_voice_is_ready</name><argument_list>(<argument><expr><name>alsa_voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snd_pcm_avail_update</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frag_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snd_pcm_mmap_begin</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>areas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xrun_recovery</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"MMAP begin avail error: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<goto>goto <name>commit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mmap</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>areas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>addr</name>

<operator>+</operator> <name><name>areas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>/</operator> <literal type="number">8</literal>

<operator>+</operator> <name>offset</name> <operator>*</operator> <name><name>areas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reverse</name> <init>= <expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>reversed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name>frames</name> <operator>*</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>alsa_update_nonstream_voice</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name>bytes</name> <operator>/</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reverse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mmap</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fs</name> <init>= <expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mmap</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>fs</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>fs</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iframes</name> <init>= <expr><name>frames</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>_al_voice_update</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iframes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name>iframes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>silence</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mmap</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>frames</name> <operator>*</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<label><name>silence</name>:</label>

<expr_stmt><expr><call><name>al_fill_silence</name><argument_list>(<argument><expr><name>mmap</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>commit</name>:</label>

<expr_stmt><expr><name>commitres</name> <operator>=</operator> <call><name>snd_pcm_mmap_commit</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>commitres</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>snd_pcm_uframes_t</name><operator>)</operator><name>commitres</name> <operator>!=</operator> <name>frames</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xrun_recovery</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>commitres</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>EPIPE</name></expr> </then><else>: <expr><name>commitres</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"MMAP commit error: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"ALSA update_mmap thread stopped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>alsa_update_rw</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><operator>(</operator><name>ALLEGRO_VOICE</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>alsa_voice</name> <init>= <expr><operator>(</operator><name>ALSA_VOICE</name><operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_state_t</name></type> <name>last_state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_sframes_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"ALSA update_rw thread started\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_drop</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>snd_pcm_state</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>last_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"state changed to: %s\n"</literal></expr></argument>, <argument><expr><call><name>snd_pcm_state_name</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>SND_PCM_STATE_SETUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"snd_pcm_prepare returned: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>SND_PCM_STATE_PREPARED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>snd_pcm_start</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"snd_pcm_start returned: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snd_pcm_wait</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snd_pcm_avail_update</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>EPIPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Alsa r/w thread exited "</literal>

<literal type="string">"with error code %s.\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>&gt;</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frag_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frag_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name>frames</name> <operator>*</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><name>bytes</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>reversed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>alsa_update_nonstream_voice</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name>bytes</name> <operator>/</operator> <name><name>alsa_voice</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>alsa_voice</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iframes</name> <init>= <expr><name>frames</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>_al_voice_update</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iframes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>silence</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name>iframes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<label><name>silence</name>:</label>

<expr_stmt><expr><call><name>al_fill_silence</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snd_pcm_writei</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>EPIPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"ALSA update_rw thread stopped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_load_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alsa_unload_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>voice</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_start_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_stop_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_signal_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>alsa_voice_is_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_allocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_pcm_format_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chan_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>req_freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>ex_data</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALSA_VOICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ex_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chan_count</name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>chan_count</name> <operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex_data</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>Error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>reversed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>frag_len</name></name> <operator>=</operator> <call><name>get_period_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S16</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U16</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S24</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U24</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_FLOAT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>Error</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name> <operator>==</operator> <name>ALLEGRO_CHANNEL_CONF_3</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>Error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>req_freq</name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>alsa_device</name></expr></argument>, <argument><expr><name>SND_PCM_STREAM_PLAYBACK</name></expr></argument>, <argument><expr><name>SND_PCM_NONBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>snd_pcm_hw_params_t</name> <modifier>*</modifier></type><name>hwparams</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_alloca</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_any</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_hw_params_set_access</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><name>SND_PCM_ACCESS_MMAP_INTERLEAVED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>mmapped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_access</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><name>SND_PCM_ACCESS_RW_INTERLEAVED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>mmapped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_format</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_channels</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><name>chan_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_rate_near</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_freq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_period_size_near</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex_data</name><operator>-&gt;</operator><name>frag_len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>buffer_size</name> <init>= <expr><call><name>get_buffer_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_buffer_size_near</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>hwparams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name> <operator>!=</operator> <name>req_freq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unsupported rate! Requested %u, got %iu.\n"</literal></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><name>req_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>snd_pcm_sw_params_t</name> <modifier>*</modifier></type><name>swparams</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_sw_params_alloca</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_sw_params_current</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>swparams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_sw_params_set_start_threshold</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>swparams</name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>frag_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_sw_params_set_avail_min</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>swparams</name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>frag_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_sw_params</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name>swparams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>ufds_count</name></name> <operator>=</operator> <call><name>snd_pcm_poll_descriptors_count</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>ufds</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ex_data</name><operator>-&gt;</operator><name>ufds_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_poll_descriptors</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>ufds</name></name></expr></argument>, <argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>ufds_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>ex_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>mmapped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>alsa_update_mmap</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Falling back to non-mmapped transfer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_nonblock</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex_data</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>alsa_update_rw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>Error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name><name>ex_data</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ex_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alsa_deallocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_VOICE</name> <modifier>*</modifier></type><name>alsa_voice</name> <init>= <expr><operator>(</operator><name>ALSA_VOICE</name><operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_drop</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>pcm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>alsa_voice</name><operator>-&gt;</operator><name>ufds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>alsa_get_voice_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_set_voice_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ALSA_RECORDER_DATA</name>

<block>{

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>capture_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_hw_params_t</name> <modifier>*</modifier></type><name>hw_params</name></decl>;</decl_stmt>

}</block></struct></type> <name>ALSA_RECORDER_DATA</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>alsa_update_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thread_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>thread_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALSA_RECORDER_DATA</name> <modifier>*</modifier></type><name>alsa</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>user_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>null_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fragment_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>null_buffer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>null_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to create buffer for draining ALSA.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_readi</name><argument_list>(<argument><expr><name><name>alsa</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name>null_buffer</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_sframes_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>=</operator> <call><name>snd_pcm_readi</name><argument_list>(<argument><expr><name><name>alsa</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>fragment_i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>user_event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>al_get_audio_recorder_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>fragment_i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>fragment_i</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>fragment_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fragment_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>null_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alsa_allocate_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_RECORDER_DATA</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frequency</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>frequency</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_format_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>default_device</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_device</name></decl>;</decl_stmt>

<expr_stmt><expr><name>config_device</name> <operator>=</operator>

<call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"alsa"</literal></expr></argument>, <argument><expr><literal type="string">"capture_device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_device</name> <operator>&amp;&amp;</operator> <name><name>config_device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>device</name> <operator>=</operator> <name>config_device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S16</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U16</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S24</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U24</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <name>SND_PCM_FORMAT_FLOAT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>Error</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>SND_PCM_STREAM_CAPTURE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_any</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_access</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>, <argument><expr><name>SND_PCM_ACCESS_RW_INTERLEAVED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_format</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_rate_near</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frequency</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frequency</name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>frequency</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unsupported rate! Requested %u, got %iu.\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params_set_channels</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>, <argument><expr><call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_hw_params</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALSA_CHECK</name><argument_list>(<argument><expr><call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>alsa_update_recorder</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>Error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_hw_params_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alsa_deallocate_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALSA_RECORDER_DATA</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>hw_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>capture_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_DRIVER</name></type> <name>_al_kcm_alsa_driver</name> <init>=

<expr><block>{

<expr><literal type="string">"ALSA"</literal></expr>,

<expr><name>alsa_open</name></expr>,

<expr><name>alsa_close</name></expr>,

<expr><name>alsa_allocate_voice</name></expr>,

<expr><name>alsa_deallocate_voice</name></expr>,

<expr><name>alsa_load_voice</name></expr>,

<expr><name>alsa_unload_voice</name></expr>,

<expr><name>alsa_start_voice</name></expr>,

<expr><name>alsa_stop_voice</name></expr>,

<expr><name>alsa_voice_is_playing</name></expr>,

<expr><name>alsa_get_voice_position</name></expr>,

<expr><name>alsa_set_voice_position</name></expr>,

<expr><name>alsa_allocate_recorder</name></expr>,

<expr><name>alsa_deallocate_recorder</name></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
