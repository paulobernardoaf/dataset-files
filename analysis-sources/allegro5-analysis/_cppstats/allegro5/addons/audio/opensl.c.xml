<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\audio\opensl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SLES/OpenSLES.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MAX_FRAMES</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUFFERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"opensl"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>SLObjectItf</name></type> <name>engine</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>opensl_get_error_string</name><parameter_list>(<parameter><decl><type><name>SLresult</name></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>SL_RESULT_PRECONDITIONS_VIOLATED</name></expr>:</case> <return>return <expr><literal type="string">"Preconditions violated"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_PARAMETER_INVALID</name></expr>:</case> <return>return <expr><literal type="string">"Invalid parameter"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_MEMORY_FAILURE</name></expr>:</case> <return>return <expr><literal type="string">"Memory failure"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_RESOURCE_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Resource error"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_RESOURCE_LOST</name></expr>:</case> <return>return <expr><literal type="string">"Resource lost"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_IO_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"IO error"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_BUFFER_INSUFFICIENT</name></expr>:</case> <return>return <expr><literal type="string">"Insufficient buffer"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_CONTENT_CORRUPTED</name></expr>:</case> <return>return <expr><literal type="string">"Content corrupted"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_CONTENT_UNSUPPORTED</name></expr>:</case> <return>return <expr><literal type="string">"Content unsupported"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_CONTENT_NOT_FOUND</name></expr>:</case> <return>return <expr><literal type="string">"Content not found"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_PERMISSION_DENIED</name></expr>:</case> <return>return <expr><literal type="string">"Permission denied"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_FEATURE_UNSUPPORTED</name></expr>:</case> <return>return <expr><literal type="string">"Feature unsupported"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_INTERNAL_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Internal error"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_UNKNOWN_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_OPERATION_ABORTED</name></expr>:</case> <return>return <expr><literal type="string">"Operation aborted"</literal></expr>;</return>

<case>case <expr><name>SL_RESULT_CONTROL_LOST</name></expr>:</case> <return>return <expr><literal type="string">"Control lost"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"Unknown OpenSL error"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLEngineItf</name></type> <name>getEngine</name><parameter_list>(<parameter><decl><type><name>SLObjectItf</name></type> <name>engine</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLEngineItf</name></type> <name>interface</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>GetInterface</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><name>SL_IID_ENGINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<return>return <expr><name>interface</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not get opensl engine: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLObjectItf</name></type> <name>createOutputMixer</name><parameter_list>(<parameter><decl><type><name>SLEngineItf</name></type> <name>engine</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLboolean</name></type> <name><name>required</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLInterfaceID</name></type> <name><name>ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>required</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SL_BOOLEAN_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SL_IID_VOLUME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>CreateOutputMix</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not create output mix: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><operator>-&gt;</operator><name>Realize</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not realize the output mix: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_opensl_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLuint32</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLEngineOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>SL_ENGINEOPTION_THREADSAFE</name></expr>, <expr><operator>(</operator><name>SLuint32</name><operator>)</operator> <name>SL_BOOLEAN_TRUE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>slCreateEngine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>engine</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not open audio device: %s\n"</literal></expr></argument>,

<argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>GetState</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>SL_OBJECT_STATE_UNREALIZED</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>Realize</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SL_OBJECT_STATE_REALIZED</name></expr>:</case> <block>{<block_content>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SL_OBJECT_STATE_SUSPENDED</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>Resume</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_opensl_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>engine</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>engine</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OpenSLData</name><block>{

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>player</name></decl>;</decl_stmt>

<enum><specifier>volatile</specifier> enum <block>{ <decl><name>PLAYING</name></decl>, <decl><name>STOPPING</name></decl>, <decl><name>STOPPED</name></decl> }</block> <decl><name>status</name></decl>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type> <name>poll_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>buffers</name><index>[<expr><name>MAX_BUFFERS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>OpenSLData</name>;</typedef>

<function><type><specifier>static</specifier> <name>SLDataFormat_PCM</name></type> <name>setupFormat</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type> <name>voice</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLDataFormat_PCM</name></type> <name>format</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>formatType</name></name> <operator>=</operator> <name>SL_DATAFORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>numChannels</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_1</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_2</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator> <name>SL_SPEAKER_FRONT_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_3</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_4</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_5_1</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_CENTER</name> <operator>|</operator>

<name>SL_SPEAKER_LOW_FREQUENCY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_6_1</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_CENTER</name> <operator>|</operator>

<name>SL_SPEAKER_LOW_FREQUENCY</name> <operator>|</operator>

<name>SL_SPEAKER_SIDE_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_SIDE_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_CHANNEL_CONF_7_1</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_BACK_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_FRONT_CENTER</name> <operator>|</operator>

<name>SL_SPEAKER_LOW_FREQUENCY</name> <operator>|</operator>

<name>SL_SPEAKER_SIDE_LEFT</name> <operator>|</operator>

<name>SL_SPEAKER_SIDE_RIGHT</name> <operator>|</operator>

<name>SL_SPEAKER_TOP_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate voice with unknown channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">8000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_8</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">11025</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_11_025</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">12000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_12</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_16</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">22050</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_22_05</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">24000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_24</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">32000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_32</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">44100</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_44_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">48000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_48</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">64000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_64</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">88200</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_88_2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">96000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_96</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">192000</literal></expr>:</case> <expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_192</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unsupported frequency %d. Using 44100 instead.\n"</literal></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <name>SL_SAMPLINGRATE_44_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT8</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>containerSize</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT16</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>containerSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_UINT24</name></expr>:</case>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>containerSize</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>containerSize</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate unknown voice depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>endianness</name></name> <operator>=</operator> <name>SL_BYTEORDER_BIGENDIAN</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>format</name><operator>.</operator><name>endianness</name></name> <operator>=</operator> <name>SL_BYTEORDER_LITTLEENDIAN</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>format</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLObjectItf</name></type> <name>createAudioPlayer</name><parameter_list>(<parameter><decl><type><name>SLEngineItf</name></type> <name>engine</name></decl></parameter>, <parameter><decl><type><name>SLDataSource</name> <modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>SLDataSink</name> <modifier>*</modifier></type> <name>sink</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>player</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLboolean</name></type> <name><name>required</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLInterfaceID</name></type> <name><name>ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>required</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SL_BOOLEAN_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SL_IID_BUFFERQUEUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>engine</name><operator>)</operator><operator>-&gt;</operator><name>CreateAudioPlayer</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sink</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not create audio player: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>player</name><operator>)</operator><operator>-&gt;</operator><name>Realize</name></name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not realize audio player: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>player</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLObjectItf</name></type> <name>makeStreamingPlayer</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type> <name>voice</name></decl></parameter>, <parameter><decl><type><name>SLObjectItf</name></type> <name>mixer</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLDataFormat_PCM</name></type> <name>format</name> <init>= <expr><call><name>setupFormat</name><argument_list>(<argument><expr><name>voice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataLocator_BufferQueue</name></type> <name>bufferQueue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataSource</name></type> <name>audioSource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataSink</name></type> <name>audioSink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataLocator_OutputMix</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bufferQueue</name><operator>.</operator><name>locatorType</name></name> <operator>=</operator> <name>SL_DATALOCATOR_BUFFERQUEUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufferQueue</name><operator>.</operator><name>numBuffers</name></name> <operator>=</operator> <name>MAX_BUFFERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audioSource</name><operator>.</operator><name>pFormat</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audioSource</name><operator>.</operator><name>pLocator</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>bufferQueue</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>locatorType</name></name> <operator>=</operator> <name>SL_DATALOCATOR_OUTPUTMIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>outputMix</name></name> <operator>=</operator> <name>mixer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audioSink</name><operator>.</operator><name>pLocator</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audioSink</name><operator>.</operator><name>pFormat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>createAudioPlayer</name><argument_list>(<argument><expr><call><name>getEngine</name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>audioSource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audioSink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bufferCount</name><parameter_list>(<parameter><decl><type><name>SLObjectItf</name></type> <name>player</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLBufferQueueItf</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLBufferQueueState</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>player</name><operator>)</operator><operator>-&gt;</operator><name>GetInterface</name></name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SL_IID_BUFFERQUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>queue</name><operator>)</operator><operator>-&gt;</operator><name>GetState</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>state</name><operator>.</operator><name>count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><name>SLObjectItf</name></type> <name>player</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLBufferQueueItf</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLPlayItf</name></type> <name>play</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>player</name><operator>)</operator><operator>-&gt;</operator><name>GetInterface</name></name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SL_IID_BUFFERQUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not get bufferqueue interface: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>queue</name><operator>)</operator><operator>-&gt;</operator><name>Enqueue</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not enqueue data: %s\n"</literal></expr></argument>, <argument><expr><call><name>opensl_get_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>player</name><operator>)</operator><operator>-&gt;</operator><name>GetInterface</name></name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SL_IID_PLAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>play</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>play</name><operator>)</operator><operator>-&gt;</operator><name>SetPlayState</name></name><argument_list>(<argument><expr><name>play</name></expr></argument>, <argument><expr><name>SL_PLAYSTATE_PLAYING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not set play state on OpenSL stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>opensl_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpenSLData</name> <modifier>*</modifier></type> <name>opensl</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufferIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opensl</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PLAYING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frames</name> <init>= <expr><name>MAX_FRAMES</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>bufferCount</name><argument_list>(<argument><expr><name><name>opensl</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAX_BUFFERS</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>_al_voice_update</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buffer</name> <init>= <expr><name><name>opensl</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>bufferIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>frames</name> <operator>*</operator> <name><name>opensl</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enqueue</name><argument_list>(<argument><expr><name><name>opensl</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>frames</name> <operator>*</operator> <name><name>opensl</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufferIndex</name> <operator>=</operator> <operator>(</operator><name>bufferIndex</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MAX_BUFFERS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unimplemented direct audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opensl</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>STOPPING</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bufferCount</name><argument_list>(<argument><expr><name><name>opensl</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>opensl</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>STOPPED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opensl</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>STOPPED</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_opensl_allocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenSLData</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>createOutputMixer</name><argument_list>(<argument><expr><call><name>getEngine</name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>STOPPED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BUFFERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name>MAX_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <call><name>makeStreamingPlayer</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>player</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>opensl_update</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_opensl_deallocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenSLData</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>OpenSLData</name><operator>*</operator><operator>)</operator> <name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>player</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>player</name></name><operator>)</operator><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>output</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>output</name></name><operator>)</operator><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BUFFERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_opensl_load_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>voice</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_opensl_unload_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>voice</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_opensl_start_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenSLData</name> <modifier>*</modifier></type> <name>extra</name> <init>= <expr><operator>(</operator><name>OpenSLData</name><operator>*</operator><operator>)</operator> <name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PLAYING</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_opensl_stop_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name><modifier>*</modifier></type> <name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenSLData</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>OpenSLData</name><operator>*</operator><operator>)</operator> <name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PLAYING</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>STOPPING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>STOPPED</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_opensl_voice_is_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenSLData</name> <modifier>*</modifier></type> <name>extra</name> <init>= <expr><operator>(</operator><name>OpenSLData</name><operator>*</operator><operator>)</operator> <name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>extra</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PLAYING</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>_opensl_get_voice_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>voice</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unimplemented: _opensl_get_voice_position\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_opensl_set_voice_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>voice</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unimplemented: _opensl_set_voice_position\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_DRIVER</name></type> <name>_al_kcm_opensl_driver</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSL"</literal></expr>,

<expr><name>_opensl_open</name></expr>,

<expr><name>_opensl_close</name></expr>,

<expr><name>_opensl_allocate_voice</name></expr>,

<expr><name>_opensl_deallocate_voice</name></expr>,

<expr><name>_opensl_load_voice</name></expr>,

<expr><name>_opensl_unload_voice</name></expr>,

<expr><name>_opensl_start_voice</name></expr>,

<expr><name>_opensl_stop_voice</name></expr>,

<expr><name>_opensl_voice_is_playing</name></expr>,

<expr><name>_opensl_get_voice_position</name></expr>,

<expr><name>_opensl_set_voice_position</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
