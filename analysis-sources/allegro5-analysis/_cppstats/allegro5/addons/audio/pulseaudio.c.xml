<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\audio\pulseaudio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/simple.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/error.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/introspect.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/mainloop.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><expr><literal type="string">"PulseAudio"</literal></expr></argument>)</argument_list></call>

enum <name>PULSEAUDIO_VOICE_STATUS</name> <block>{

<expr><name>PV_IDLE</name></expr>,

<expr><name>PV_PLAYING</name></expr>,

<expr><name>PV_STOPPING</name></expr>,

<expr><name>PV_JOIN</name></expr>

}</block></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>PULSEAUDIO_VOICE</name>

<block>{

<decl_stmt><decl><type><name>pa_simple</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_size_in_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size_in_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>poll_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>status_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PULSEAUDIO_VOICE_STATUS</name></name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>buffer_mutex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer_end</name></decl>;</decl_stmt>

}</block></struct></type> <name>PULSEAUDIO_VOICE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUFFER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BUFFER_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_buffer_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><name>config</name></expr></argument>,

<argument><expr><literal type="string">"pulseaudio"</literal></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>MIN_BUFFER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>MIN_BUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DEFAULT_BUFFER_SIZE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_info_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>eol</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_sink_state_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pa_mainloop</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><call><name>pa_mainloop_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>pa_context_new</name><argument_list>(<argument><expr><call><name>pa_mainloop_get_api</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_mainloop_free</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_context_connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PA_CONTEXT_NOAUTOSPAWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>blocking</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_mainloop_iterate</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"pa_mainloop_iterate failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_mainloop_free</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_context_state_t</name></type> <name>s</name> <init>= <expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>PA_CONTEXT_READY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"PA_CONTEXT_READY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>PA_CONTEXT_FAILED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"PA_CONTEXT_FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_mainloop_free</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>pa_sink_state_t</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>pa_context_get_sink_info_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sink_info_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_mainloop_iterate</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_mainloop_free</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>pulseaudio_update</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>self</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>PULSEAUDIO_VOICE_STATUS</name></name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>status</name></name><operator>)</operator> <operator>==</operator> <name>PV_IDLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PV_JOIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PV_PLAYING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frames</name> <init>= <expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_size_in_frames</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>is_streaming</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>_al_voice_update</name><argument_list>(<argument><expr><name>voice</name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_simple_write</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>frames</name> <operator>*</operator> <name><name>pv</name><operator>-&gt;</operator><name>frame_size_in_bytes</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><name>frames</name> <operator>*</operator> <name><name>pv</name><operator>-&gt;</operator><name>frame_size_in_bytes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>frames</name> <operator>*</operator> <name><name>pv</name><operator>-&gt;</operator><name>frame_size_in_bytes</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&gt;</operator> <name><name>pv</name><operator>-&gt;</operator><name>buffer_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_ONCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PV_STOPPING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>frames</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_simple_write</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>PV_STOPPING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_simple_drain</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PV_IDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_allocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PULSEAUDIO_VOICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_sample_spec</name></type> <name>ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_buffer_attr</name></type> <name>ba</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_U8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PA_API_VERSION</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S24NE</name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_FLOAT32NE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unsupported PulseAudio sound format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ba</name><operator>.</operator><name>maxlength</name></name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ba</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <literal type="number">0x2000</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ba</name><operator>.</operator><name>prebuf</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ba</name><operator>.</operator><name>minreq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ba</name><operator>.</operator><name>fragsize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>pa_simple_new</name><argument_list>(

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>, 

<argument><expr><name>PA_STREAM_PLAYBACK</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><literal type="string">"Allegro Voice"</literal></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>ba</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument> 

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pv</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_size_in_frames</name></name> <operator>=</operator> <call><name>get_buffer_size</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>frame_size_in_bytes</name></name> <operator>=</operator> <name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>*</operator> <call><name>al_get_audio_depth_size</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PV_IDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>poll_thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>pulseaudio_update</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>voice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_deallocate_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PV_JOIN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>poll_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_simple_free</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_load_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>loop</name></name> <operator>==</operator> <name>ALLEGRO_PLAYMODE_BIDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Backwards playing not supported by the driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator>

<operator>(</operator><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>*</operator> <name><name>pv</name><operator>-&gt;</operator><name>frame_size_in_bytes</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_unload_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>voice</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_start_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PV_IDLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PV_PLAYING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_stop_voice</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PV_PLAYING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>PV_STOPPING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PV_IDLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>status_cond</name></name></expr></argument>, <argument><expr><name><name>voice</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pulseaudio_voice_is_playing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>pv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PV_PLAYING</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>pulseaudio_get_voice_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_set_voice_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VOICE</name> <modifier>*</modifier></type><name>voice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_VOICE</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>voice</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_simple_drain</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>voice</name><operator>-&gt;</operator><name>attached_stream</name><operator>-&gt;</operator><name>spl_data</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>+</operator>

<name>pos</name> <operator>*</operator> <name><name>pv</name><operator>-&gt;</operator><name>frame_size_in_bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>PULSEAUDIO_RECORDER</name> <block>{

<decl_stmt><decl><type><name>pa_simple</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_sample_spec</name></type> <name>ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_buffer_attr</name></type> <name>ba</name></decl>;</decl_stmt>

}</block></struct></type> <name>PULSEAUDIO_RECORDER</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>pulse_audio_update_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>ALLEGRO_AUDIO_RECORDER</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PULSEAUDIO_RECORDER</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>(</operator><name>PULSEAUDIO_RECORDER</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>user_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>null_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fragment_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>null_buffer</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>null_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to create buffer for draining PulseAudio.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>is_recording</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_simple_read</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>null_buffer</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_RECORDER_EVENT</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_simple_read</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>fragment_i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fragment_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>user_event</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>al_get_audio_recorder_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>fragment_i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>fragment_i</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>fragment_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fragment_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>null_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulseaudio_allocate_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_RECORDER</name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pa</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate memory for PULSEAUDIO_RECORDER.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <call><name>al_get_channel_count</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>chan_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_UINT8</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_U8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PA_API_VERSION</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_INT24</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S24NE</name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_FLOAT32NE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unsupported PulseAudio sound format (depth).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ba</name><operator>.</operator><name>maxlength</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>ba</name><operator>.</operator><name>fragsize</name></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>frequency</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pa</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>pa_simple_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>al_get_app_name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PA_STREAM_RECORD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Allegro Audio Recorder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pa</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pa</name><operator>-&gt;</operator><name>ba</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pa</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"pa_simple_new() failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>pulse_audio_update_recorder</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>pa</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulseaudio_deallocate_recorder</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_RECORDER</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PULSEAUDIO_RECORDER</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>(</operator><name>PULSEAUDIO_RECORDER</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_simple_free</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_DRIVER</name></type> <name>_al_kcm_pulseaudio_driver</name> <init>=

<expr><block>{

<expr><literal type="string">"PulseAudio"</literal></expr>,

<expr><name>pulseaudio_open</name></expr>,

<expr><name>pulseaudio_close</name></expr>,

<expr><name>pulseaudio_allocate_voice</name></expr>,

<expr><name>pulseaudio_deallocate_voice</name></expr>,

<expr><name>pulseaudio_load_voice</name></expr>,

<expr><name>pulseaudio_unload_voice</name></expr>,

<expr><name>pulseaudio_start_voice</name></expr>,

<expr><name>pulseaudio_stop_voice</name></expr>,

<expr><name>pulseaudio_voice_is_playing</name></expr>,

<expr><name>pulseaudio_get_voice_position</name></expr>,

<expr><name>pulseaudio_set_voice_position</name></expr>,

<expr><name>pulseaudio_allocate_recorder</name></expr>,

<expr><name>pulseaudio_deallocate_recorder</name></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
