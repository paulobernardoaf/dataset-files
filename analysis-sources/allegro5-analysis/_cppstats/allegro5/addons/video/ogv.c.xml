<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\video\ogv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ogg/ogg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;theora/theora.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;theora/theoradec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vorbis/codec.h&gt;</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"video"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>NUM_FRAGS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>FRAG_SAMPLES</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RGB_PIXEL_FORMAT</name> <init>= <expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>OGG_VIDEO</name></name></type> <name>OGG_VIDEO</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>STREAM</name></name></type> <name>STREAM</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>THEORA_STREAM</name></name></type> <name>THEORA_STREAM</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VORBIS_STREAM</name></name></type> <name>VORBIS_STREAM</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>PACKET_NODE</name></name></type> <name>PACKET_NODE</name>;</typedef>

<enum>enum <block>{

<decl><name>STREAM_TYPE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>STREAM_TYPE_THEORA</name></decl>,

<decl><name>STREAM_TYPE_VORBIS</name></decl>

}</block>;</enum>

<struct>struct <name>PACKET_NODE</name> <block>{

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>pkt</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>THEORA_STREAM</name> <block>{

<decl_stmt><decl><type><name>th_info</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>th_comment</name></type> <name>comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>th_setup_info</name> <modifier>*</modifier></type><name>setup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>th_dec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>prev_framenum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frame_duration</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>VORBIS_STREAM</name> <block>{

<decl_stmt><decl><type><name>vorbis_info</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vorbis_comment</name></type> <name>comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>inited_for_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vorbis_dsp_state</name></type> <name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vorbis_block</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>next_fragment</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_fragment_pos</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>STREAM</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>stream_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>headers_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_state</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>packet_queue</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>THEORA_STREAM</name></type> <name>theora</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VORBIS_STREAM</name></type> <name>vorbis</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>;</union>

}</block>;</struct>

<struct>struct <name>OGG_VIDEO</name> <block>{

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reached_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_sync_state</name></type> <name>sync_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>streams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>selected_video_stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>selected_audio_stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>seek_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>th_pixel_fmt</name></type> <name>pixel_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>th_ycbcr_buffer</name></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>buffer_dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>rgb_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>frame_bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>pic_bmp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name></type> <name>evtsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_close_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>PACKET_NODE</name> <modifier>*</modifier></type><name>create_packet_node</name><parameter_list>(<parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PACKET_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <operator>*</operator><name>packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_packet_node</name><parameter_list>(<parameter><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_tail_packet</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packetno</name></name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packetno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_head_packet</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packetno</name></name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packetno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PACKET_NODE</name> <modifier>*</modifier></type><name>take_head_packet</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packetno</name></name> <operator>&lt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>packetno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>cur</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_packet_queue</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_packet_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deactivate_stream</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_packet_queue</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STREAM</name> <modifier>*</modifier></type><name>create_stream</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <name>STREAM_TYPE_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>headers_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>slot</name><operator>)</operator> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

<return>return <expr><name>stream</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STREAM</name> <modifier>*</modifier></type><name>find_stream</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>serialno</name></name> <operator>==</operator> <name>serial</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>stream</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_stream</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_packet_queue</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STREAM_TYPE_UNKNOWN</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_THEORA</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier></type><name>tstream</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Clean up Theora.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tstream</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tstream</name><operator>-&gt;</operator><name>setup</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>th_setup_free</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>th_decode_free</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_VORBIS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier></type><name>vstream</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Clean up Vorbis.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vstream</name><operator>-&gt;</operator><name>inited_for_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vorbis_block_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_dsp_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_page</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>, <parameter><decl><type><name>ogg_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buffer_size</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_ferror</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>ogg_sync_pageout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>ogg_sync_pageout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>ogg_sync_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"End of file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_sync_wrote</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_packet</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>, <parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_page</name></type> <name>page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_stream_packetout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_page</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>page_stream</name> <init>= <expr><call><name>find_stream</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><call><name>ogg_page_serialno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page_stream</name> <operator>&amp;&amp;</operator> <name><name>page_stream</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_stream_pagein</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>try_decode_theora_header</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STREAM_TYPE_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>th_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_comment_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_THEORA</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_VORBIS</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>headers_done</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_tail_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>create_packet_node</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>th_decode_headerin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>comment</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>setup</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Found Theora stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <name>STREAM_TYPE_THEORA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_tail_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>create_packet_node</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>headers_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>th_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_decode_vorbis_header</name><parameter_list>(<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STREAM_TYPE_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>vorbis_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_comment_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_VORBIS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_THEORA</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vorbis_synthesis_headerin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>info</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>comment</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Found Vorbis stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <name>STREAM_TYPE_VORBIS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>inited_for_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_VORBIS</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>OV_ENOTVORBIS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_tail_packet</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>create_packet_node</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>headers_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vorbis_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>all_headers_done</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>have_something</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STREAM_TYPE_THEORA</name></expr>:</case>

<case>case <expr><name>STREAM_TYPE_VORBIS</name></expr>:</case>

<expr_stmt><expr><name>have_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>headers_done</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_TYPE_UNKNOWN</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>have_something</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_headers</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_page</name></type> <name>page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>serial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Begin reading headers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_page</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>serial</name> <operator>=</operator> <call><name>ogg_page_serialno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ogg_page_bos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>create_stream</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>find_stream</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No stream for serial: %x\n"</literal></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_stream_pagein</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_stream_packetpeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No packet due to lost sync or hole in data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_decode_theora_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_decode_vorbis_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Unknown packet type ignored.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_stream_packetout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>all_headers_done</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"End reading headers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_vorbis_stream_decode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vstream</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vorbis_synthesis_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vorbis_block_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vstream</name><operator>-&gt;</operator><name>inited_for_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>audio_rate</name></name> <operator>=</operator> <name><name>vstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>vstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment</name></name> <operator>=</operator>

<call><name>al_calloc</name><argument_list>(<argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>FRAG_SAMPLES</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Audio rate: %f\n"</literal></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>audio_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Audio channels: %d\n"</literal></expr></argument>, <argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_vorbis_data</name><parameter_list>(<parameter><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier></type><name>vstream</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vorbis_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"vorbis_synthesis returned %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vorbis_synthesis_blockin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"vorbis_synthesis_blockin returned %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>generate_next_audio_fragment</name><parameter_list>(<parameter><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier></type><name>vstream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pcm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name>vorbis_synthesis_pcmout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>&gt;</operator> <name>FRAG_SAMPLES</name> <operator>-</operator> <name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name>FRAG_SAMPLES</name> <operator>-</operator> <name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment</name><index>[

<expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pcm</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pcm</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pcm</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name> <operator>+=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vorbis_synthesis_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vstream</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_vorbis_decode</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>, <parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>vstream_outer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vstream</name> <init>= <expr><operator>&amp;</operator><name><name>vstream_outer</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name> <operator>&lt;</operator> <name>FRAG_SAMPLES</name>

<operator>&amp;&amp;</operator> <call><name>generate_next_audio_fragment</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name> <operator>&lt;</operator> <name>FRAG_SAMPLES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>packet</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>take_head_packet</name><argument_list>(<argument><expr><name>vstream_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_vorbis_data</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_next_audio_fragment</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_packet_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>read_packet</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>vstream_outer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_vorbis_data</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_next_audio_fragment</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>create_audio_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>STREAM</name> <modifier>*</modifier></type><name>vstream_outer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VORBIS_STREAM</name> <modifier>*</modifier></type><name>vstream</name> <init>= <expr><operator>&amp;</operator><name><name>vstream_outer</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chanconf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_3</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_4</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_5_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_6_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>chanconf</name> <operator>=</operator> <name>ALLEGRO_CHANNEL_CONF_7_1</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Unsupported number of channels: %d\n"</literal></expr></argument>,

<argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>audio</name> <operator>=</operator> <call><name>al_create_audio_stream</name><argument_list>(<argument><expr><name>NUM_FRAGS</name></expr></argument>, <argument><expr><name>FRAG_SAMPLES</name></expr></argument>,

<argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rate</name></name></expr></argument>, <argument><expr><name>ALLEGRO_AUDIO_DEPTH_FLOAT32</name></expr></argument>, <argument><expr><name>chanconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not create audio stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>mixer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>al_attach_audio_stream_to_mixer</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>mixer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>voice</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>al_attach_audio_stream_to_voice</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>voice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>al_attach_audio_stream_to_mixer</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><call><name>al_get_default_mixer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Audio stream ready.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not attach audio stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_audio_stream</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>audio</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>audio</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_audio_fragment</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_AUDIO_STREAM</name> <modifier>*</modifier></type><name>audio_stream</name></decl></parameter>,

<parameter><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier></type><name>vstream</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reached_eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>frag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frag</name> <operator>=</operator> <call><name>al_get_audio_stream_fragment</name><argument_list>(<argument><expr><name>audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frag</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>paused</name> <operator>||</operator> <name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name> <operator>&lt;</operator> <name>FRAG_SAMPLES</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paused</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reached_eof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Next fragment not ready.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>frag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>FRAG_SAMPLES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>frag</name></expr></argument>, <argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment</name></name></expr></argument>,

<argument><expr><name><name>vstream</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>FRAG_SAMPLES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vstream</name><operator>-&gt;</operator><name>next_fragment_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_set_audio_stream_fragment</name><argument_list>(<argument><expr><name>audio_stream</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_theora_stream_decode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>,

<parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>tstream_outer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>tstream</name> <init>= <expr><operator>&amp;</operator><name><name>tstream_outer</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_w</name> <init>= <expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>frame_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_h</name> <init>= <expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>frame_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_x</name> <init>= <expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pic_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_y</name> <init>= <expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pic_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_w</name> <init>= <expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pic_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_h</name> <init>= <expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pic_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>aspect_ratio</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>th_decode_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_setup_free</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>setup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>pixel_fmt</name></name> <operator>=</operator> <name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pixel_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>frame_w</name></expr></argument>, <argument><expr><name>frame_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pic_y</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pic_w</name> <operator>==</operator> <name>frame_w</name> <operator>&amp;&amp;</operator> <name>pic_h</name> <operator>==</operator> <name>frame_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>pic_bmp</name></name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>pic_bmp</name></name> <operator>=</operator> <call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>,

<argument><expr><name>pic_x</name></expr></argument>, <argument><expr><name>pic_y</name></expr></argument>, <argument><expr><name>pic_w</name></expr></argument>, <argument><expr><name>pic_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>rgb_data</name></name> <operator>=</operator>

<call><name>al_malloc</name><argument_list>(<argument><expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>RGB_PIXEL_FORMAT</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>frame_w</name> <operator>*</operator> <name>frame_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>fps</name></name> <operator>=</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>fps_numerator</name></name> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>fps_denominator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name> <operator>=</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>fps_denominator</name></name> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>fps_numerator</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>aspect_denominator</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aspect_ratio</name> <operator>=</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>pic_w</name> <operator>*</operator> <name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>aspect_numerator</name></name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>pic_h</name> <operator>*</operator> <name><name>tstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>aspect_denominator</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_compute_scaled_dimensions</name><argument_list>(<argument><expr><name>pic_w</name></expr></argument>, <argument><expr><name>pic_h</name></expr></argument>, <argument><expr><name>aspect_ratio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>scaled_width</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>scaled_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>prev_framenum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Frame size: %dx%d\n"</literal></expr></argument>, <argument><expr><name>frame_w</name></expr></argument>, <argument><expr><name>frame_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Picture size: %dx%d\n"</literal></expr></argument>, <argument><expr><name>pic_w</name></expr></argument>, <argument><expr><name>pic_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Scaled size: %fx%f\n"</literal></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>scaled_width</name></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>scaled_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"FPS: %f\n"</literal></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>fps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Frame_duration: %f\n"</literal></expr></argument>, <argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_theora_framenum</name><parameter_list>(<parameter><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier></type><name>tstream</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>granulepos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>th_granule_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tstream</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>granulepos</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>tstream</name><operator>-&gt;</operator><name>prev_framenum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_theora_data</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier></type><name>tstream</name></decl></parameter>,

<parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>ret_new_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>expected_framenum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>framenum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>expected_framenum</name> <operator>=</operator> <name><name>tstream</name><operator>-&gt;</operator><name>prev_framenum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framenum</name> <operator>=</operator> <call><name>get_theora_framenum</name><argument_list>(<argument><expr><name>tstream</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framenum</name> <operator>&gt;</operator> <name>expected_framenum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Expected frame %ld, got %ld\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>expected_framenum</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>framenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>video_position</name></name> <operator>+=</operator> <name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>prev_framenum</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framenum</name> <operator>&lt;</operator> <name>expected_framenum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Expected frame %ld, got %ld (decoding anyway)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>expected_framenum</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>framenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>th_decode_packetin</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>TH_EBADPACKET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>TH_DUPFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_new_frame</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>video_position</name></name> <operator>=</operator> <name>framenum</name> <operator>*</operator> <name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>prev_framenum</name></name> <operator>=</operator> <name>framenum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">255</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>INLINE</name> <name>void</name></type> <name>ycbcr_to_rgb</name><parameter_list>(<parameter><decl><type><name>th_ycbcr_buffer</name></type> <name>buffer</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>rgb_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xshift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y2</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name>yshift</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name>xshift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>data</name> <init>= <expr><name>rgb_data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>pitch</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>pixel_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yp</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stride</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cb</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>y2</name> <operator>*</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stride</name> <operator>+</operator> <name>x2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cr</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>y2</name> <operator>*</operator> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>stride</name> <operator>+</operator> <name>x2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><name>yp</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><name>cb</name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>E</name> <init>= <expr><name>cr</name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">298</literal><operator>*</operator><name>C</name> <operator>+</operator> <literal type="number">409</literal><operator>*</operator><name>E</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">298</literal><operator>*</operator><name>C</name> <operator>-</operator> <literal type="number">100</literal><operator>*</operator><name>D</name> <operator>-</operator> <literal type="number">208</literal><operator>*</operator><name>E</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">298</literal><operator>*</operator><name>C</name> <operator>+</operator> <literal type="number">516</literal><operator>*</operator><name>D</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_buffer_to_rgba</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_size</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>RGB_PIXEL_FORMAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name> <init>= <expr><name>pixel_size</name> <operator>*</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ogv</name><operator>-&gt;</operator><name>pixel_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TH_PF_420</name></expr>:</case>

<expr_stmt><expr><call><name>ycbcr_to_rgb</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>rgb_data</name></name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TH_PF_422</name></expr>:</case>

<expr_stmt><expr><call><name>ycbcr_to_rgb</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>rgb_data</name></name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TH_PF_444</name></expr>:</case>

<expr_stmt><expr><call><name>ycbcr_to_rgb</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>rgb_data</name></name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unsupported pixel format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>poll_theora_decode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>tstream_outer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>tstream</name> <init>= <expr><operator>&amp;</operator><name><name>tstream_outer</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>new_frame</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>video_position</name></name> <operator>&lt;</operator> <name><name>video</name><operator>-&gt;</operator><name>position</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PACKET_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>packet</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>take_head_packet</name><argument_list>(<argument><expr><name>tstream_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>handle_theora_data</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>tstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_packet_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_frames</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_head_packet</name><argument_list>(<argument><expr><name>tstream_outer</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>read_packet</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>tstream_outer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>handle_theora_data</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>tstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_frames</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_head_packet</name><argument_list>(<argument><expr><name>tstream_outer</name></expr></argument>, <argument><expr><call><name>create_packet_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>video_position</name></name>

<operator>&gt;=</operator> <name><name>video</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">3.0</literal><operator>*</operator><name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>new_frame</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>th_decode_ycbcr_out</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_buffer_to_rgba</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_VIDEO_FRAME_SHOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>video</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num_frames</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seek_to_beginning</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>,

<parameter><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier></type><name>tstream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>seeked</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ogg_stream_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_packet_queue</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tstream</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>granpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>th_decode_ctl</name><argument_list>(<argument><expr><name><name>tstream</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>TH_DECCTL_SET_GRANPOS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>granpos</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>granpos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tstream</name><operator>-&gt;</operator><name>prev_framenum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_sync_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seeked</name> <operator>=</operator> <call><name>al_fseek</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>seeked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>audio_position</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>video_position</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>decode_thread_func</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>video</name> <init>= <expr><name>_video</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>tstream_outer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>THEORA_STREAM</name> <modifier>*</modifier></type><name>tstream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>vstream_outer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VORBIS_STREAM</name> <modifier>*</modifier></type><name>vstream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>audio_pos_step</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>timer_dur</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Thread started.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tstream_outer</name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>selected_video_stream</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tstream_outer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tstream_outer</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_THEORA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tstream</name> <operator>=</operator> <operator>&amp;</operator><name><name>tstream_outer</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>theora</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vstream_outer</name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>selected_audio_stream</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vstream_outer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vstream_outer</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_VORBIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name> <operator>=</operator> <call><name>create_audio_stream</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>vstream_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vstream</name> <operator>=</operator> <operator>&amp;</operator><name><name>vstream_outer</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vorbis</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_pos_step</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>FRAG_SAMPLES</name> <operator>/</operator> <name><name>vstream</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>deactivate_stream</name><argument_list>(<argument><expr><name>vstream_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vstream_outer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tstream_outer</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>vstream_outer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"No audio or video stream found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer_dur</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_pos_step</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timer_dur</name> <operator>=</operator> <name>audio_pos_step</name> <operator>/</operator> <name>NUM_FRAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tstream</name> <operator>&amp;&amp;</operator> <name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name> <operator>&lt;</operator> <name>timer_dur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timer_dur</name> <operator>=</operator> <name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><name>timer_dur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>,

<argument><expr><call><name>al_get_audio_stream_event_source</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Begin decode loop.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>ev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_ALLEGRO_EVENT_VIDEO_SEEK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>seek_to</name> <init>= <expr><name><name>ev</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>/</operator> <literal type="number">1.0e6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>seek_to</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>seek_to_beginning</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>tstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>seek_counter</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vstream_outer</name> <operator>&amp;&amp;</operator> <name><name>video</name><operator>-&gt;</operator><name>playing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>poll_vorbis_decode</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>vstream_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>audio</name></name> <operator>&amp;&amp;</operator> <name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name><name>tstream</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tstream_outer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>poll_theora_decode</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>tstream_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>&amp;&amp;</operator> <name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_VIDEO_FINISHED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>video</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>audio_position</name></name> <operator>+=</operator> <name>audio_pos_step</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>audio_position</name></name> <operator>-</operator> <name>NUM_FRAGS</name> <operator>*</operator> <name>audio_pos_step</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_audio_fragment</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name>vstream</name></expr></argument>, <argument><expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>playing</name></name></expr></argument>,

<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"End decode loop.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_drain_audio_stream</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_audio_stream</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>audio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Thread exit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>update_frame_bmp</name><parameter_list>(<parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name>RGB_PIXEL_FORMAT</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>, <argument><expr><name>RGB_PIXEL_FORMAT</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to lock bitmap.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>lr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>lr</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>, <argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>rgb_data</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>pitch</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_open_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>read_headers</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_THEORA</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>ogv</name><operator>-&gt;</operator><name>selected_video_stream</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setup_theora_stream_decode</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>ogv</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>selected_video_stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <name>STREAM_TYPE_VORBIS</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>ogv</name><operator>-&gt;</operator><name>selected_audio_stream</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setup_vorbis_stream_decode</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>selected_audio_stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>deactivate_stream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>ogv</name><operator>-&gt;</operator><name>selected_video_stream</name></name> <operator>||</operator> <name><name>ogv</name><operator>-&gt;</operator><name>selected_audio_stream</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_open_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>al_path_cstr</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Failed to open %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ogv</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OGG_VIDEO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ogv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ogg_sync_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STREAM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_open_video</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><name>ogv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No audio or video stream found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogv_close_video</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>ogv</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_close_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ogv</name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ogv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>evtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_cond</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_sync_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>sync_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>STREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_stream</name><argument_list>(<argument><expr><operator>*</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogv</name><operator>-&gt;</operator><name>pic_bmp</name></name> <operator>!=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>pic_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>rgb_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_start_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Thread already created.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>decode_thread_func</name></expr></argument>, <argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not create thread.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>evtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>evtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_set_video_playing</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ogv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogv</name><operator>-&gt;</operator><name>reached_eof</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_seek_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seek_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>ev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_counter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seek_to</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seek_counter</name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>seek_counter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>user</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>_ALLEGRO_EVENT_VIDEO_SEEK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <name>seek_to</name> <operator>*</operator> <literal type="number">1.0e6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>user</name><operator>.</operator><name>data2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>user</name><operator>.</operator><name>data3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>user</name><operator>.</operator><name>data4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogv</name><operator>-&gt;</operator><name>evtsrc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>seek_counter</name> <operator>==</operator> <name><name>ogv</name><operator>-&gt;</operator><name>seek_counter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ogv_update_video</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_VIDEO</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OGG_VIDEO</name> <modifier>*</modifier></type><name>ogv</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&amp;&amp;</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>w</name> <operator>==</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>frame_bmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer_dirty</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_frame_bmp</name><argument_list>(<argument><expr><name>ogv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogv</name><operator>-&gt;</operator><name>buffer_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>current_frame</name></name> <operator>=</operator> <name><name>ogv</name><operator>-&gt;</operator><name>pic_bmp</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>ogv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_VIDEO_INTERFACE</name></type> <name>ogv_vtable</name> <init>= <expr><block>{

<expr><name>ogv_open_video</name></expr>,

<expr><name>ogv_close_video</name></expr>,

<expr><name>ogv_start_video</name></expr>,

<expr><name>ogv_set_video_playing</name></expr>,

<expr><name>ogv_seek_video</name></expr>,

<expr><name>ogv_update_video</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ALLEGRO_VIDEO_INTERFACE</name> <modifier>*</modifier></type><name>_al_video_ogv_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>ogv_vtable</name></expr>;</return>

</block_content>}</block></function>

</unit>
