<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\video\allegro5\allegro_video.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_audio.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>ALLEGRO_MINGW32</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>ALLEGRO_MSVC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>ALLEGRO_BCC32</name><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_STATICLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_VIDEO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_VIDEO_DLL</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_VIDEO_DLL</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_VIDEO_DLL</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_MSVC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_VIDEO_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ALLEGRO_VIDEO_DLL type __cdecl name args</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_MINGW32</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_VIDEO_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern type name args</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_BCC32</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_VIDEO_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern _ALLEGRO_VIDEO_DLL type name args</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_VIDEO_FUNC</name></cpp:macro> <cpp:value>AL_FUNC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>ALLEGRO_VIDEO_EVENT_TYPE</name>

<block>{

<decl><name>ALLEGRO_EVENT_VIDEO_FRAME_SHOW</name> <init>= <expr><literal type="number">550</literal></expr></init></decl>,

<decl><name>ALLEGRO_EVENT_VIDEO_FINISHED</name> <init>= <expr><literal type="number">551</literal></expr></init></decl>,

<decl><name>_ALLEGRO_EVENT_VIDEO_SEEK</name> <init>= <expr><literal type="number">552</literal></expr></init></decl> 

}</block>;</enum>

<enum>enum <name>ALLEGRO_VIDEO_POSITION_TYPE</name>

<block>{

<decl><name>ALLEGRO_VIDEO_POSITION_ACTUAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ALLEGRO_VIDEO_POSITION_VIDEO_DECODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ALLEGRO_VIDEO_POSITION_AUDIO_DECODE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_VIDEO_POSITION_TYPE</name></name></type> <name>ALLEGRO_VIDEO_POSITION_TYPE</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_VIDEO</name></name></type> <name>ALLEGRO_VIDEO</name>;</typedef>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_VIDEO</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_open_video</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_close_video</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_start_video</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>,</operator> <name>ALLEGRO_MIXER</name> <operator>*</operator><name>mixer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_start_video_with_voice</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>,</operator> <name>ALLEGRO_VOICE</name> <operator>*</operator><name>voice</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_EVENT_SOURCE</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_video_event_source</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_video_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>,</operator> <name>bool</name> <name>playing</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_video_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_video_audio_rate</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_video_fps</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_video_scaled_width</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>al_get_video_scaled_height</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_BITMAP</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_video_frame</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_video_position</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>,</operator> <name>ALLEGRO_VIDEO_POSITION_TYPE</name> <name>which</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_seek_video</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_VIDEO</name> <operator>*</operator><name>video</name><operator>,</operator> <name>double</name> <name>pos_in_seconds</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_init_video_addon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_video_addon_initialized</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_shutdown_video_addon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_VIDEO_FUNC</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>al_get_allegro_video_version</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
