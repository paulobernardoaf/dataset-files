<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats\allegro5\addons\image\png.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;png.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iio.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"image"</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_gamma</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>gamma</name> <init>= <expr><operator>-</operator><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>config</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>, <argument><expr><literal type="string">"png_screen_gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gamma</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>==</operator> <operator>-</operator><literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gamma_str</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SCREEN_GAMMA"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>gamma_str</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strtod</name><argument_list>(<argument><expr><name>gamma_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">2.2</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>gamma</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>user_error_fn</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_const_charp</name></type> <name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jmp_buf</name> <modifier>*</modifier></type><name>jmpbuf</name> <init>= <expr><operator>(</operator><name>jmp_buf</name> <operator>*</operator><operator>)</operator><call><name>png_get_error_ptr</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"PNG error: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><operator>*</operator><name>jmpbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_data</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_bytep</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><call><name>png_get_io_ptr</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>png_uint_32</name><operator>)</operator> <call><name>al_fread</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_error</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><literal type="string">"read error (loadpng calling al_fs_entry_read)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PNG_BYTES_TO_CHECK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_if_png</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>PNG_BYTES_TO_CHECK</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_fread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>PNG_BYTES_TO_CHECK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PNG_BYTES_TO_CHECK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>png_sig_cmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>png_size_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>PNG_BYTES_TO_CHECK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>really_load_png</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_infop</name></type> <name>info_ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_uint_32</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>rowbytes</name></decl>, <decl><type ref="prev"/><name>real_rowbytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>, <decl><type ref="prev"/><name>color_type</name></decl>, <decl><type ref="prev"/><name>interlace_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>image_gamma</name></decl>, <decl><type ref="prev"/><name>screen_gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number_passes</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_trans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PalEntry</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_bytep</name></type> <name>trans</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>premul</name> <init>= <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_NO_PREMULTIPLIED_ALPHA</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>index_only</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>png_ptr</name> <operator>&amp;&amp;</operator> <name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_read_info</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_get_IHDR</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_depth</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>color_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interlace_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_set_packing</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>color_type</name> <operator>==</operator> <name>PNG_COLOR_TYPE_GRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bit_depth</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_expand</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>png_get_valid</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name>PNG_INFO_tRNS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>color_type</name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_PALETTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_tRNS_to_alpha</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>png_get_tRNS</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_trans</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_strip_16</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>color_type</name> <operator>==</operator> <name>PNG_COLOR_TYPE_GRAY</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>color_type</name> <operator>==</operator> <name>PNG_COLOR_TYPE_GRAY_ALPHA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_gray_to_rgb</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>screen_gamma</name> <operator>=</operator> <call><name>get_gamma</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_gamma</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>png_get_sRGB</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_gamma</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>screen_gamma</name></expr></argument>, <argument><expr><literal type="number">0.45455</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>png_get_gAMA</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_gamma</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_gamma</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>screen_gamma</name></expr></argument>, <argument><expr><name>image_gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_set_gamma</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>screen_gamma</name></expr></argument>, <argument><expr><literal type="number">0.45455</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>number_passes</name> <operator>=</operator> <call><name>png_set_interlace_handling</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_read_update_info</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_type</name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_PALETTE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_palette</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_colorp</name></type> <name>palette</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>png_get_PLTE</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>palette</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_palette</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>num_palette</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>red</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>green</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blue</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rowbytes</name> <operator>=</operator> <call><name>png_get_rowbytes</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <name>rowbytes</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bpp</name> <operator>==</operator> <literal type="number">24</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bpp</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>png_set_bgr</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_set_swap_alpha</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"al_create_bitmap failed while loading PNG.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>real_rowbytes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bpp</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interlace_type</name> <operator>==</operator> <name>PNG_INTERLACE_ADAM7</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>real_rowbytes</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>real_rowbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>color_type</name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_PALETTE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_KEEP_INDEX</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index_only</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index_only</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <name>number_passes</name></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>png_uint_32</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest_row_start</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interlace_type</name> <operator>==</operator> <name>PNG_INTERLACE_ADAM7</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>real_rowbytes</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>png_read_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bpp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>index_only</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>color_type</name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_PALETTE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pix</name> <init>= <expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>pix</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>pix</name></expr>]</index></name><operator>.</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pal</name><index>[<expr><name>pix</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix</name> <operator>&lt;</operator> <name>num_trans</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>trans</name><index>[<expr><name>pix</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>premul</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pix</name> <init>= <expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>= <expr><call><name>_AL_READ3BYTES</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>pix</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>pix</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>premul</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>bpp</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>bpp</name> <operator>==</operator> <literal type="number">24</literal> <operator>||</operator> <name>bpp</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dest_row_start</name> <operator>+</operator> <name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_read_end</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_png_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jmp_buf</name></type> <name>jmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_infop</name></type> <name>info_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_if_png</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Not a png.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>png_ptr</name> <operator>=</operator> <call><name>png_create_read_struct</name><argument_list>(<argument><expr><name>PNG_LIBPNG_VER_STRING</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>png_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"png_ptr == NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info_ptr</name> <operator>=</operator> <call><name>png_create_info_struct</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>png_destroy_read_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>png_infopp</name><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>png_infopp</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"png_create_info_struct failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>jmpbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>png_destroy_read_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>png_infopp</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Error reading PNG file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>png_set_error_fn</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>jmpbuf</name></expr></argument>, <argument><expr><name>user_error_fn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_set_read_fn</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>png_rw_ptr</name><operator>)</operator> <name>read_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_set_sig_bytes</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>PNG_BYTES_TO_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>really_load_png</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_destroy_read_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>png_infopp</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>_al_load_png</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open %s for reading.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>_al_load_png_f</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_data</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_bytep</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>ALLEGRO_FILE</name> <operator>*</operator><operator>)</operator><call><name>png_get_io_ptr</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>png_uint_32</name><operator>)</operator> <call><name>al_fwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_error</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><literal type="string">"write error (loadpng calling al_fs_entry_write)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_data</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>png_ptr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>translate_compression_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Z_DEFAULT_COMPRESSION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"best"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Z_BEST_COMPRESSION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"fastest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Z_BEST_SPEED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Z_NO_COMPRESSION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>save_rgba</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bmp_h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>,

<argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bmp_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>lock</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>lock</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_save_png_f</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jmp_buf</name></type> <name>jmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_structp</name></type> <name>png_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>png_infop</name></type> <name>info_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colour_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>png_ptr</name> <operator>=</operator> <call><name>png_create_write_struct</name><argument_list>(<argument><expr><name>PNG_LIBPNG_VER_STRING</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>png_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to create PNG write struct.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info_ptr</name> <operator>=</operator> <call><name>png_create_info_struct</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to create PNG info struct.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>jmpbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to call setjmp.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>png_set_error_fn</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>jmpbuf</name></expr></argument>, <argument><expr><name>user_error_fn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_set_write_fn</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>png_rw_ptr</name><operator>)</operator> <name>write_data</name></expr></argument>, <argument><expr><name>flush_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>colour_type</name> <operator>=</operator> <name>PNG_COLOR_TYPE_RGB_ALPHA</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z_level</name> <init>= <expr><call><name>translate_compression_level</name><argument_list>(

<argument><expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>, <argument><expr><literal type="string">"png_compression_level"</literal></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>png_set_compression_level</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>z_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_set_IHDR</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,

<argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>colour_type</name></expr></argument>,

<argument><expr><name>PNG_INTERLACE_NONE</name></expr></argument>, <argument><expr><name>PNG_COMPRESSION_TYPE_BASE</name></expr></argument>,

<argument><expr><name>PNG_FILTER_TYPE_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_write_info</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>save_rgba</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"save_rgba failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>Error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>png_write_end</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>Error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>png_ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>info_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_save_png</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retsave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retclose</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>al_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unable to open file %s for writing\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retsave</name> <operator>=</operator> <call><name>_al_save_png_f</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retclose</name> <operator>=</operator> <call><name>al_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retsave</name> <operator>&amp;&amp;</operator> <name>retclose</name></expr>;</return>

</block_content>}</block></function>

</unit>
