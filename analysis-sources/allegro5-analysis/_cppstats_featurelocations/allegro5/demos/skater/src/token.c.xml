<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\skater\src\token.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>int</name></type> <name>Error</name></decl>, <decl><type ref="prev"/><name>Lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ErrorText</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Tok</name></name></type> <name>Token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>my_ungetc_c</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>whitespace</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v == ' ') || (v == '\r') || (v == '\n') || (v == '\t'))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>breaker</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(whitespace(v) || (v == '{') || (v == '}') || (v == ','))</cpp:value></cpp:define>






















<function><type><specifier>static</specifier> <name>int</name></type> <name>my_fgetc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>LastChar</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>TestChar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>my_ungetc_c</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>my_ungetc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>my_ungetc_c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>al_fgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>TestChar</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\r'</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>LastChar</name> <operator>!=</operator> <name>TestChar</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Lines</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>LastChar</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>LastChar</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>LastChar</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>my_ungetc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>my_ungetc_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>GetTokenInner</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></init></decl>;</decl_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Ptr</name> <operator>=</operator> <call><name>my_fgetc</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>whitespace</name><argument_list>(<argument><expr><operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ptr</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_OPENBRACE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ptr</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_CLOSEBRACE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ptr</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_COMMA</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ptr</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_STRING</name></expr>;</expr_stmt>



<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Ptr</name><operator>++</operator> <operator>=</operator> <call><name>my_fgetc</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>Ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\"'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>Ptr</name> <operator>-</operator> <name><name>Token</name><operator>.</operator><name>Text</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>Ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_feof</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_COMMENT</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Ptr</name><operator>++</operator> <operator>=</operator> <call><name>my_fgetc</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>Ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>Ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>Ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>



<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>newc</name> <init>= <expr><call><name>my_fgetc</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 



<if_stmt><if>if <condition>(<expr><call><name>breaker</name><argument_list>(<argument><expr><name>newc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>al_feof</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>my_ungetc</name><argument_list>(<argument><expr><name>newc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>eptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>FQuantity</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>Token</name><operator>.</operator><name>IQuantity</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>FQuantity</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>strtod</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>eptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>TK_UNKNOWN</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>Ptr</name><operator>++</operator> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>GetToken</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetTokenInner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>!=</operator> <name>TK_COMMENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ExpectToken</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>TokenTypes</name></name></type> <name>Type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name> <operator>!=</operator> <name>Type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
