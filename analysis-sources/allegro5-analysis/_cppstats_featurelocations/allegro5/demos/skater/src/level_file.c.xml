<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\skater\src\level_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level_alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>






















<function><type><name>void</name></type> <name>LoadMaterials</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Material</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>NewMatPtr</name> <init>= <expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>AllMats</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEMO_USE_ALLEGRO_GL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>TmpEdge</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<return>return;</return>
<case>case <expr><name>TK_OPENBRACE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>NewMatPtr</name> <operator>=</operator> <call><name>NewMaterial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>NewMatPtr</name><operator>)</operator><operator>-&gt;</operator><name>Fill</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Could not load material fill %s at line %d"</literal></expr></argument>,
<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEMO_USE_ALLEGRO_GL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>TmpEdge</name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>NewMatPtr</name><operator>)</operator><operator>-&gt;</operator><name>Edge</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Could not load material edge %s at line %d"</literal></expr></argument>,
<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>NewMatPtr</name><operator>)</operator><operator>-&gt;</operator><name>Friction</name></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_CLOSEBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NewMatPtr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>NewMatPtr</name><operator>)</operator><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></while>











<function><type><name>void</name></type> <name>LoadVertices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Vertex</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>NewVertPtr</name> <init>= <expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>AllVerts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<return>return;</return>
<case>case <expr><name>TK_OPENBRACE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>NewVertPtr</name> <operator>=</operator> <call><name>NewVertex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>NewVertPtr</name><operator>)</operator><operator>-&gt;</operator><name>Pos</name></name><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>NewVertPtr</name><operator>)</operator><operator>-&gt;</operator><name>Pos</name></name><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_CLOSEBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NewVertPtr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>NewVertPtr</name><operator>)</operator><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>GetVert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Triangle</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllVerts</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>Token</name><operator>.</operator><name>IQuantity</name></name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name>Next</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unknown vertex referenced at line %d"</literal></expr></argument>, <argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>*</operator> <name>screen_height</name><operator>)</operator> <operator>/</operator> <literal type="number">480</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_COMMA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>Finished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>Finished</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<expr_stmt><expr><name>Finished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TK_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><literal type="string">"edge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>TRIFLAGS_EDGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><literal type="string">"collidable"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>FLAGS_COLLIDABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>FLAGS_FOREGROUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>GetNormal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>v2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>/=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>b</name></name> <operator>/=</operator> <name>length</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name><name>v1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>InitEdge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>GetNormal</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>Pos</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <name>radius</name> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>Edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>LoadTriangles</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Triangle</name></name> <modifier>*</modifier></type><name>Tri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Edge</name></name> <modifier>*</modifier></type><name>NextEdge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<return>return;</return>
<case>case <expr><name>TK_OPENBRACE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>Tri</name> <operator>=</operator> <call><name>NewTriangle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GetVert</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>Tri</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetVert</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>Tri</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetVert</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>, <argument><expr><name>Tri</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Material</name></name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllMats</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>Material</name></name> <operator>&amp;&amp;</operator> <name><name>Token</name><operator>.</operator><name>IQuantity</name></name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Material</name></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Material</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unknown material referenced at line %d"</literal></expr></argument>, <argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_CLOSEBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>Tri</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllTris</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllTris</name></name> <operator>=</operator> <name>Tri</name></expr>;</expr_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>Tri</name><operator>-&gt;</operator><name>EdgeFlags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>FLAGS_COLLIDABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NextEdge</name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name></name> <operator>=</operator> <call><name>NewEdge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name><operator>-&gt;</operator><name>Material</name></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Material</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name>NextEdge</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name><operator>-&gt;</operator><name>EndPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Tri</name><operator>-&gt;</operator><name>Edges</name><index>[<expr><operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitEdge</name><argument_list>(<argument><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllEdges</name></name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>LoadObjectTypes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ObjectType</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>NewObjectPtr</name> <init>= <expr><operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>AllObjectTypes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<return>return;</return>
<case>case <expr><name>TK_OPENBRACE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>NewObjectPtr</name> <operator>=</operator> <call><name>NewObjectType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>Image</name></name> <operator>=</operator> <call><name>ObtainBitmap</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Could not load object image %s at line %d"</literal></expr></argument>,
<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>Image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>Image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>Radius</name></name> <operator>=</operator> <ternary><condition><expr><name>w</name> <operator>&gt;</operator> <name>h</name></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>Radius</name></name> <operator>+=</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>CollectNoise</name></name> <operator>=</operator> <call><name>ObtainSample</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_CLOSEBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NewObjectPtr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>NewObjectPtr</name><operator>)</operator><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>LoadObjects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>Obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Finished</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<return>return;</return>
<case>case <expr><name>TK_OPENBRACE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>Obj</name> <operator>=</operator> <call><name>NewObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>TotalObjects</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Angle</name></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>ObjType</name></name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllObjectTypes</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>Obj</name><operator>-&gt;</operator><name>ObjType</name></name> <operator>&amp;&amp;</operator> <name><name>Token</name><operator>.</operator><name>IQuantity</name></name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>ObjType</name></name> <operator>=</operator> <name><name>Obj</name><operator>-&gt;</operator><name>ObjType</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>Token</name><operator>.</operator><name>IQuantity</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ErrorText</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorText</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unknown object referenced at line %d"</literal></expr></argument>, <argument><expr><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>ObjType</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>NewLev</name><operator>-&gt;</operator><name>Door</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Flags</name></name> <operator>|=</operator> <name>OBJFLAGS_DOOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>TotalObjects</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_COMMA</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>Finished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>Finished</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>Token</name><operator>.</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<expr_stmt><expr><name>Finished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TK_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><literal type="string">"collidable"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Flags</name></name> <operator>|=</operator> <name>FLAGS_COLLIDABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>Text</name></name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Flags</name></name> <operator>|=</operator> <name>FLAGS_FOREGROUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>TK_CLOSEBRACE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>Obj</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllObjects</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>AllObjects</name></name> <operator>=</operator> <name>Obj</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>LoadStats</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_OPENBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>PlayerStartPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>PlayerStartPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>FQuantity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewLev</name><operator>-&gt;</operator><name>ObjectsRequired</name></name> <operator>=</operator> <name><name>Token</name><operator>.</operator><name>IQuantity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExpectToken</name><argument_list>(<argument><expr><name>TK_CLOSEBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function>
</unit>
