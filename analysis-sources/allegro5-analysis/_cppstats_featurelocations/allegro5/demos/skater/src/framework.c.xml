<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\skater\src\framework.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_android.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"credits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framework.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"game.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gamepad.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gamestate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"keyboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"menus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screenshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transition.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>closed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEMO_CFG</name></cpp:macro> <cpp:value>"demo.cfg"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>SCREENSHOT</name> <modifier>*</modifier></type><name>screenshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>F12</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>FPS</name> <modifier>*</modifier></type><name>fps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <name>GAMESTATE</name></type> <name><name>state</name><index>[<expr><name>DEMO_MAX_GAMESTATES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>state_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>event_queue</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>TRANSITION</name> <modifier>*</modifier></type><name>transition</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>drop_build_config_dir</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>al_get_path_tail</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Debug"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Release"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"RelWithDebInfo"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Profile"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>al_drop_path_tail</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>init_framework</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>DEMO_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DEMO_ERROR_ALLEGRO</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_set_app_name</name><argument_list>(<argument><expr><literal type="string">"Allegro Skater Demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_org_name</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_make_directory</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>DEMO_CFG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>, <argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEMO_PATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_android_set_apk_file_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>data_path</name></expr></argument>, <argument><expr><literal type="string">"/data"</literal></expr></argument>, <argument><expr><name>DEMO_PATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>drop_build_config_dir</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_RESOURCES_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drop_build_config_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_append_path_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>data_path</name></expr></argument>, <argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEMO_PATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>read_global_config</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>al_set_window_title</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="string">"Allegro Demo Game"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>al_install_audio</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_acodec_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_reserve_samples</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>change_gfx_mode</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DEMO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>demo_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error installing keyboard: %s\n"</literal></expr></argument>,
<argument><expr><call><name>demo_error</name><argument_list>(<argument><expr><name>DEMO_ERROR_ALLEGRO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DEMO_ERROR_ALLEGRO</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>al_install_joystick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_touch_input_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_joystick_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>logic_framerate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>screenshot</name> <operator>=</operator> <call><name>create_screenshot</name><argument_list>(<argument><expr><literal type="string">"SHOT"</literal></expr></argument>, <argument><expr><literal type="string">"TGA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>fps</name> <operator>=</operator> <call><name>create_fps</name><argument_list>(<argument><expr><name>logic_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <name>DEMO_MAX_GAMESTATES</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>deinit</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>update</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>draw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><call><name>create_main_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_options_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_gfx_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_sound_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_misc_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_controls_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_intro</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_about_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_new_game</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_continue_game</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_success_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state_count</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>current_state</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>controller</name><index>[<expr><name>DEMO_CONTROLLER_KEYBOARD</name></expr>]</index></name> <operator>=</operator>
<call><name>create_keyboard_controller</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>controller</name><index>[<expr><name>DEMO_CONTROLLER_GAMEPAD</name></expr>]</index></name> <operator>=</operator>
<call><name>create_gamepad_controller</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_credits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_framework</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>transition</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>current_state</name> <operator>!=</operator> <name>DEMO_STATE_EXIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name><operator>.</operator><call><name>draw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>display_framerate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_fps</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name>plain_font</name></expr></argument>, <argument><expr><name>screen_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d FPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>run_framework</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>need_to_redraw</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>next_state</name> <init>= <expr><name>current_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>background_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paused</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>transition</name> <operator>=</operator> <call><name>create_transition</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>:</case>
<expr_stmt><expr><call><name>mouse_handle_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>:</case>
<expr_stmt><expr><call><name>mouse_handle_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>:</case>
<expr_stmt><expr><call><name>mouse_handle_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>
<expr_stmt><expr><call><name>keyboard_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>:</case>
<expr_stmt><expr><call><name>keyboard_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_UP</name></expr>:</case>
<expr_stmt><expr><call><name>keyboard_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN</name></expr>:</case>
<expr_stmt><expr><call><name>gamepad_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_BUTTON_UP</name></expr>:</case>
<expr_stmt><expr><call><name>gamepad_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>:</case>
<expr_stmt><expr><call><name>gamepad_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_BEGIN</name></expr>:</case>
<expr_stmt><expr><call><name>gamepad_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_EVENT_TOUCH_END</name></expr>:</case>
<expr_stmt><expr><call><name>gamepad_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<expr_stmt><expr><name>closed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paused</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timer</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_ORIENTATION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES</name> <operator>||</operator>
<name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_orientation</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>orientation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>al_acknowledge_resize</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_width</name> <operator>=</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_height</name> <operator>=</operator> <call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fullscreen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>window_width</name> <operator>=</operator> <name>screen_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>window_height</name> <operator>=</operator> <name>screen_height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</name></expr>:</case>
<expr_stmt><expr><name>background_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_acknowledge_drawing_halt</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</name></expr>:</case>
<expr_stmt><expr><name>background_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</name></expr>:</case>
<expr_stmt><expr><name>paused</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_SWITCH_IN</name></expr>:</case>
<expr_stmt><expr><name>paused</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>timer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>timer</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>key_pressed</name><argument_list>(<argument><expr><name>ALLEGRO_KEY_F12</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>F12</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>F12</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>take_screenshot</name><argument_list>(<argument><expr><name>screenshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>F12</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>transition</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>update_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>destroy_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>transition</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>last_state</name></expr>]</index></name><operator>.</operator><name>deinit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>last_state</name></expr>]</index></name><operator>.</operator><call><name>deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>current_state</name> <operator>==</operator> <name>DEMO_STATE_EXIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>



<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>next_state</name> <operator>==</operator> <name>DEMO_STATE_EXIT</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>transition</name> <operator>=</operator>
<call><name>create_transition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_state</name> <operator>=</operator> <name>current_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_state</name> <operator>=</operator> <name>next_state</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>next_state</name> <operator>!=</operator> <name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name><operator>.</operator><call><name>id</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_state</name> <operator>=</operator> <name>current_state</name></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>state_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>id</name><argument_list>()</argument_list></call> <operator>==</operator> <name>next_state</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>transition</name> <operator>=</operator>
<call><name>create_transition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><name>current_state</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_state</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>need_to_redraw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fps_tick</name><argument_list>(<argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>keyboard_tick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mouse_tick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>need_to_redraw</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>background_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>draw_framework</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>need_to_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fps_frame</name><argument_list>(<argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>done</name> <operator>=</operator> <name>done</name> <operator>||</operator> <name>closed</name></expr>;</expr_stmt>

</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>shutdown_framework</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>event_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>write_global_config</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_screenshot</name><argument_list>(<argument><expr><name>screenshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_fps</name><argument_list>(<argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_vcontroller</name><argument_list>(<argument><expr><name><name>controller</name><index>[<expr><name>DEMO_CONTROLLER_KEYBOARD</name></expr>]</index></name></expr></argument>, <argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_vcontroller</name><argument_list>(<argument><expr><name><name>controller</name><index>[<expr><name>DEMO_CONTROLLER_GAMEPAD</name></expr>]</index></name></expr></argument>, <argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_game</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>unload_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_credits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>transition</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>destroy_transition</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
