<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\skater\src\music.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"music.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>currently_playing</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>volume_music</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>volume_sound</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>set_music_volume</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>volume_music</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currently_playing</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_set_audio_stream_gain</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>currently_playing</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>, <argument><expr><name>volume_music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_sound_volume</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>volume_sound</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>play_music</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>loop</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>demo_data</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>currently_playing</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stop_music</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_audio_stream_playmode</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>loop</name></expr> ?</condition><then> <expr><name>ALLEGRO_PLAYMODE_LOOP</name></expr> </then><else>: <expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_audio_stream_gain</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>, <argument><expr><name>volume_music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_attach_audio_stream_to_mixer</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>,
<argument><expr><call><name>al_get_default_mixer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_audio_stream_playing</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currently_playing</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>stop_music</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currently_playing</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_set_audio_stream_playing</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>currently_playing</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currently_playing</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>play_sound</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>playmode</name> <init>= <expr><ternary><condition><expr><name>loop</name></expr> ?</condition><then> <expr><name>ALLEGRO_PLAYMODE_LOOP</name></expr> </then><else>: <expr><name>ALLEGRO_PLAYMODE_ONCE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">1000</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><operator>-</operator><name>freq</name><operator>)</operator> <operator>+</operator> <name>freq</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>volume_sound</name> <operator>*</operator> <name>vol</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>pan</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <literal type="number">128.0</literal></expr></argument>, <argument><expr><name>freq</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name>playmode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>play_sound_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>play_sound</name><argument_list>(<argument><expr><name><name>demo_data</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>dat</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>, <argument><expr><name>pan</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
