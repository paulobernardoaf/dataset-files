<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\skater\src\level_state.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"level.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>LevelState</name></name> <modifier>*</modifier></type><name>BorrowState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>LevelState</name></name> <modifier>*</modifier></type><name>St</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>O</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ObjCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NewLev</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>St</name> <operator>=</operator> <operator>(</operator>struct <name>LevelState</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>LevelState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>St</name><operator>-&gt;</operator><name>Length</name></name> <operator>=</operator> <operator>(</operator><name><name>NewLev</name><operator>-&gt;</operator><name>TotalObjects</name></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>St</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>St</name><operator>-&gt;</operator><name>Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>St</name><operator>-&gt;</operator><name>Data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>St</name><operator>-&gt;</operator><name>Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ObjCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>O</name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllObjects</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>O</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>OBJFLAGS_VISIBLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>St</name><operator>-&gt;</operator><name>Data</name><index>[<expr><name>ObjCount</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ObjCount</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>O</name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ObjCount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>St</name><operator>-&gt;</operator><name>DoorOpen</name></name> <operator>=</operator> <operator>(</operator><name><name>NewLev</name><operator>-&gt;</operator><name>Door</name><operator>.</operator><name>Image</name></name> <operator>==</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>DoorOpen</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>St</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReturnState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>NewLev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>LevelState</name></name> <modifier>*</modifier></type><name>State</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Object</name></name> <modifier>*</modifier></type><name>O</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ObjCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>State</name> <operator>||</operator> <operator>!</operator><name>NewLev</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ObjCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>O</name> <operator>=</operator> <name><name>NewLev</name><operator>-&gt;</operator><name>AllObjects</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>O</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>State</name><operator>-&gt;</operator><name>Data</name><index>[<expr><name>ObjCount</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ObjCount</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>|=</operator> <name>OBJFLAGS_VISIBLE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>O</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>OBJFLAGS_VISIBLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>O</name> <operator>=</operator> <name><name>O</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ObjCount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>State</name><operator>-&gt;</operator><name>DoorOpen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetDoorOpen</name><argument_list>(<argument><expr><name>NewLev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LevelState</name></name> <modifier>*</modifier></type><name>State</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>State</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>State</name><operator>-&gt;</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>State</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetInitialState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>lvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ReturnState</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><name><name>lvl</name><operator>-&gt;</operator><name>InitialState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetDoorOpen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Level</name></name> <modifier>*</modifier></type><name>Lvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>Lvl</name><operator>-&gt;</operator><name>Door</name><operator>.</operator><name>Image</name></name> <operator>=</operator> <name><name>Lvl</name><operator>-&gt;</operator><name>DoorOpen</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
