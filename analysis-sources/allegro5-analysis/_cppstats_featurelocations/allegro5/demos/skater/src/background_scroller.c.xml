<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\skater\src\background_scroller.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"demodata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"background_scroller.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>offx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>offy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>current_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>dt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>tile</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>draw_background</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offx</name> <operator>-=</operator> <name>dx</name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>offy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offy</name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offy</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>screen_height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>dy</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offx</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>screen_width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>dx</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>tile</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>init_background</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>offx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_time</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dt</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>logic_framerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tile</name> <operator>=</operator> <name><name>demo_data</name><index>[<expr><name>DEMO_BMP_BACK</name></expr>]</index></name><operator>.</operator><name>dat</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>update_background</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>current_time</name> <operator>+=</operator> <name>dt</name></expr>;</expr_stmt>




<expr_stmt><expr><name>offx</name> <operator>=</operator>
<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">1.4f</literal> <operator>*</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">0.9f</literal> <operator>*</operator> <name>current_time</name> <operator>+</operator> <literal type="number">0.2f</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">0.3f</literal> <operator>*</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>current_time</name> <operator>-</operator> <literal type="number">0.4f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offy</name> <operator>=</operator>
<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.6f</literal> <operator>*</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">1.2f</literal> <operator>*</operator> <name>current_time</name> <operator>-</operator> <literal type="number">0.7f</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<literal type="number">1.2f</literal> <operator>*</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">0.2f</literal> <operator>*</operator> <name>current_time</name> <operator>+</operator> <literal type="number">1.1f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
