<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\speed\explode.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <name>EXPLOSION</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>big</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>EXPLOSION</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>EXPLOSION</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>EXPLOSION</name> <modifier>*</modifier></type><name>explosions</name></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>init_explode</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>explosions</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>shutdown_explode</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EXPLOSION</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>explosions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>explosions</name></expr>;</expr_stmt>
<expr_stmt><expr><name>explosions</name> <operator>=</operator> <name><name>explosions</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>explode</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>big</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EXPLOSION</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXPLOSION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>big</name></name> <operator>=</operator> <name>big</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>explosions</name></expr>;</expr_stmt>
<expr_stmt><expr><name>explosions</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>update_explode</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EXPLOSION</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>explosions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXPLOSION</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>explosions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXPLOSION</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>time</name></name> <operator>+=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>big</name></name><operator>/</operator><literal type="number">2.0</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>time</name></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>draw_explode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>project</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EXPLOSION</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>explosions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name>view_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ipos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rr</name></decl>, <decl><type ref="prev"/><name>gg</name></decl>, <decl><type ref="prev"/><name>bb</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>project</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>ipos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>time</name></name> <operator>*</operator> <name>size</name> <operator>/</operator> <operator>(</operator><literal type="number">512</literal> <operator>/</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>big</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>low_detail</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circle</name><argument_list>(<argument><expr><name><name>ipos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>circle</name><argument_list>(<argument><expr><name><name>ipos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name><operator>*</operator><name>s</name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator> <operator>*</operator> <name>r</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gg</name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator> <operator>*</operator> <name>g</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator> <operator>*</operator> <name>b</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gg</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>gg</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>gg</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>circlefill</name><argument_list>(<argument><expr><name><name>ipos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ipos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

</unit>
