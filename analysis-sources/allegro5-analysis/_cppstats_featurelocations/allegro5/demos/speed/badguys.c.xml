<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\speed\badguys.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <name>WAVEINFO</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>delay</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>delay_rand</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>speed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>speed_rand</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>move</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>move_rand</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>sin_depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>sin_depth_rand</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>sin_speed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>sin_speed_rand</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>split</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>aggro</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>evade</name></decl>;</decl_stmt> 
}</block></struct></type> <name>WAVEINFO</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_WAVEINFO</name></cpp:macro> <cpp:value>{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name></type> <name><name>wave1</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0015</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0055</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0045</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0035</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>END_WAVEINFO</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name></type> <name><name>wave2</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0.020</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1.2</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0.010</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0.005</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>END_WAVEINFO</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name></type> <name><name>wave3</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.0020</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.005</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.020</literal></expr>, <expr><literal type="number">0.00</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0016</literal></expr>, <expr><literal type="number">0.0024</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.006</literal></expr>, <expr><literal type="number">0.010</literal></expr>, <expr><literal type="number">0.03</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0019</literal></expr>, <expr><literal type="number">0.0016</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.003</literal></expr>, <expr><literal type="number">0.004</literal></expr>, <expr><literal type="number">0.015</literal></expr>, <expr><literal type="number">0.02</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0022</literal></expr>, <expr><literal type="number">0.0008</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.004</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.020</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.005</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.025</literal></expr>, <expr><literal type="number">0.00</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>END_WAVEINFO</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name></type> <name><name>wave4</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.0020</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0016</literal></expr>, <expr><literal type="number">0.0024</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.010</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0019</literal></expr>, <expr><literal type="number">0.0016</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0022</literal></expr>, <expr><literal type="number">0.0008</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><name>END_WAVEINFO</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name></type> <name><name>wave5</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.0010</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0016</literal></expr>, <expr><literal type="number">0.0024</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.010</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0019</literal></expr>, <expr><literal type="number">0.0016</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0022</literal></expr>, <expr><literal type="number">0.0008</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0025</literal></expr>, <expr><literal type="number">0.0000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>END_WAVEINFO</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name></type> <name><name>wave6</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.00</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4.5</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.00</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.00</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.006</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.03</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">0.001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.00</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>END_WAVEINFO</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>WAVEINFO</name> <modifier>*</modifier></type><name><name>waveinfo</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>wave1</name><operator>+</operator><literal type="number">4</literal></expr>, <expr><name>wave2</name><operator>+</operator><literal type="number">4</literal></expr>, <expr><name>wave3</name><operator>+</operator><literal type="number">4</literal></expr>, <expr><name>wave4</name><operator>+</operator><literal type="number">4</literal></expr>, <expr><name>wave5</name><operator>+</operator><literal type="number">4</literal></expr>,
<expr><name>wave1</name><operator>+</operator><literal type="number">3</literal></expr>, <expr><name>wave2</name><operator>+</operator><literal type="number">3</literal></expr>, <expr><name>wave3</name><operator>+</operator><literal type="number">3</literal></expr>, <expr><name>wave4</name><operator>+</operator><literal type="number">3</literal></expr>, <expr><name>wave5</name><operator>+</operator><literal type="number">3</literal></expr>,
<expr><name>wave1</name><operator>+</operator><literal type="number">2</literal></expr>, <expr><name>wave2</name><operator>+</operator><literal type="number">2</literal></expr>, <expr><name>wave3</name><operator>+</operator><literal type="number">2</literal></expr>, <expr><name>wave4</name><operator>+</operator><literal type="number">2</literal></expr>, <expr><name>wave5</name><operator>+</operator><literal type="number">2</literal></expr>,
<expr><name>wave1</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>wave2</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>wave3</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>wave4</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>wave5</name><operator>+</operator><literal type="number">1</literal></expr>,
<expr><name>wave1</name><operator>+</operator><literal type="number">0</literal></expr>, <expr><name>wave2</name><operator>+</operator><literal type="number">0</literal></expr>, <expr><name>wave3</name><operator>+</operator><literal type="number">0</literal></expr>, <expr><name>wave4</name><operator>+</operator><literal type="number">0</literal></expr>, <expr><name>wave5</name><operator>+</operator><literal type="number">0</literal></expr>,
<expr><name>wave6</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<typedef>typedef <type><struct>struct <name>BADGUY</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>speed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>move</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>sin_depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>sin_speed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>split</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>aggro</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>evade</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>v</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>BADGUY</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>BADGUY</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>BADGUY</name> <modifier>*</modifier></type><name>evildudes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finished_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wavenum</name></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>lay_attack_wave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVEINFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BADGUY</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wavenum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>wavenum</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wavenum</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>waveinfo</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEINFO</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wavenum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>waveinfo</name><index>[<expr><name>wavenum</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>info</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BADGUY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URAND</name></cpp:macro> <cpp:value>((float)(rand() &amp; 255) / 255.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAND</name></cpp:macro> <cpp:value>(((float)(rand() &amp; 255) / 255.0) - 0.5)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>URAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>info</name><operator>-&gt;</operator><name>delay</name></name> <operator>-</operator> <name>URAND</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>delay_rand</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>speed</name></name> <operator>+</operator> <name>URAND</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>speed_rand</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>move</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>move</name></name> <operator>+</operator> <name>SRAND</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>move_rand</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sin_depth</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>sin_depth</name></name> <operator>+</operator> <name>URAND</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>sin_depth_rand</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sin_speed</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>sin_speed</name></name> <operator>+</operator> <name>URAND</name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>sin_speed_rand</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>split</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>aggro</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>aggro</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>evade</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>evade</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>evildudes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evildudes</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>info</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>finished_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>init_badguys</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>evildudes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lay_attack_wave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>shutdown_badguys</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BADGUY</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>evildudes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>evildudes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evildudes</name> <operator>=</operator> <name><name>evildudes</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>update_badguys</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BADGUY</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>evildudes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BADGUY</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>evildudes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BADGUY</name> <modifier>*</modifier></type><name>tmp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bullet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dead</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cheat</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>shutdown_badguys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>aggro</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>player_pos</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>v</name></name> <operator>*=</operator> <literal type="number">0.99</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>v</name></name> <operator>+=</operator> <call><name>SGN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.00025</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>evade</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0.75</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>player_pos</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>move</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>SGN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>move</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">16.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>find_target</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>v</name></name> <operator>*=</operator> <literal type="number">0.96</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>v</name></name> <operator>+=</operator> <call><name>SGN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.0004</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>move</name></name> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>t</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>sin_speed</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>sin_depth</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>speed</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>speed</name></name> <operator>&lt;=</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>split</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BADGUY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BADGUY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp1</name> <operator>=</operator> <operator>*</operator><name>tmp2</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>move</name></name> <operator>-=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp2</name><operator>-&gt;</operator><name>move</name></name> <operator>+=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>speed</name></name> <operator>+=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp2</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp2</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>evildudes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evildudes</name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>t</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kill_player</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>bullet</name> <operator>=</operator> <call><name>get_first_bullet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bullet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ABS</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ABS</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>y</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>x</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.025</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kill_bullet</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>explode</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sfx_explode_alien</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bullet</name> <operator>=</operator> <call><name>get_next_bullet</name><argument_list>(<argument><expr><name>bullet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dead</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>evildudes</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>player_dying</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>finished_counter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><literal type="string">"Wave Complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>finished_counter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>finished_counter</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>draw_badguys</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>project</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BADGUY</name> <modifier>*</modifier></type><name>bad</name> <init>= <expr><name>evildudes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name> <init>= <expr><call><name>makecol</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>shape</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ishape</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bad</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <literal type="number">0.02</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.005</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <literal type="number">0.015</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.005</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>project</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>polygon</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bad</name> <operator>=</operator> <name><name>bad</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

</unit>
