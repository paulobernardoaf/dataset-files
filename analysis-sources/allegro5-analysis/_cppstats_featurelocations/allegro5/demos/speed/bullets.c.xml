<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\speed\bullets.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <name>BULLET</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>BULLET</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>BULLET</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>BULLET</name> <modifier>*</modifier></type><name>bullets</name></decl>;</decl_stmt>




<function><type><name>void</name> <modifier>*</modifier></type><name>get_first_bullet</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bullets</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>bullets</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>bullets</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<return>return <expr><name>bullets</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>get_next_bullet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier></type><name>bul</name> <init>= <expr><operator>(</operator><operator>(</operator><name>BULLET</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>next</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bul</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<return>return <expr><name>bul</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>kill_bullet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>BULLET</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">65536</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>init_bullets</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>bullets</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>shutdown_bullets</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bullets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bullets</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bullets</name> <operator>=</operator> <name><name>bullets</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>fire_bullet</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BULLET</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>player_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.96</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>bullets</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bullets</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sfx_shoot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>update_bullets</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>bullets</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>bullets</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>-=</operator> <literal type="number">0.025</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>draw_bullets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>project</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BULLET</name> <modifier>*</modifier></type><name>bul</name> <init>= <expr><name>bullets</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c1</name> <init>= <expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">128</literal><operator>+</operator><name>r</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">128</literal><operator>+</operator><name>g</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">128</literal><operator>+</operator><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>g</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>makecol</name><argument_list>(<argument><expr><name>r</name><operator>/</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>g</name><operator>/</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>makecol</name><argument_list>(<argument><expr><name>r</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>g</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>shape</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ishape</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bul</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bul</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <literal type="number">0.005</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <literal type="number">0.005</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <literal type="number">0.015</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>project</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>polygon</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ishape</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>low_detail</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>cx</name> <init>= <expr><operator>(</operator><name><name>ishape</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ishape</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>ishape</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cy</name> <init>= <expr><operator>(</operator><name><name>ishape</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ishape</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>ishape</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>boxx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>boxy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>bul</name><operator>-&gt;</operator><name>x</name></name><operator>*</operator><literal type="number">256</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>bul</name><operator>-&gt;</operator><name>y</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>bul</name><operator>-&gt;</operator><name>y</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tx</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>rot</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>boxx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name>rot</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>boxy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ty</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>rot</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>boxx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name>rot</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>boxy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>boxx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tx</name> <operator>*</operator> <name><name>bul</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <call><name>view_size</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boxy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ty</name> <operator>*</operator> <name><name>bul</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <call><name>view_size</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cx</name><operator>+</operator><name><name>boxx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cy</name><operator>+</operator><name><name>boxy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bul</name> <operator>=</operator> <name><name>bul</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

</unit>
