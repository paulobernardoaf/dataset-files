<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\speed\main.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_audio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><name>int</name></type> <name>cheat</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>low_detail</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>no_grid</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>no_music</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt> 




<function><type><specifier>static</specifier> <name>int</name></type> <name>play_game</name><parameter_list>()</parameter_list>
<block>{<block_content> 
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>inc_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gameover</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cyclenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redraw</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_view</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_player</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_badguys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_bullets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_explode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_SPEED</name></cpp:macro> <cpp:value>ALLEGRO_BPS_TO_SECS(30*(cyclenum+2))</cpp:value></cpp:define>

<expr_stmt><expr><name>inc_counter</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><name>TIMER_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>gameover</name></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><operator>(</operator><call><name>al_get_timer_count</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>gameover</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_view</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_bullets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_explode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>update_badguys</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>advance_view</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cyclenum</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_timer_count</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lay_attack_wave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>advance_player</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>lay_attack_wave</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>advance_player</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gameover</name> <operator>=</operator> <call><name>update_player</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_timer_count</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>, <argument><expr><call><name>al_get_timer_count</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ss_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"speed%03d.tga"</literal></expr></argument>, <argument><expr><operator>++</operator><name>ss_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_save_bitmap</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_PRINTSCREEN</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>al_set_timer_count</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_F</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_display_flag</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr></argument>,
<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_F</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>redraw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_view</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>inc_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shutdown_view</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown_player</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown_badguys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown_bullets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown_explode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gameover</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(
<argument><expr><literal type="string">"\n"</literal>
<literal type="string">"SPEED - by Shawn Hargreaves, 1999\n"</literal>
<literal type="string">"Allegro 5 port, 2010\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Usage: speed w h [options]\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"The w and h values set your desired screen resolution.\n"</literal>
<literal type="string">"What modes are available will depend on your hardware.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Available options:\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"\t-fullscreen enables full screen mode. (w and h are optional)\n"</literal>
<literal type="string">"\t-cheat makes you invulnerable.\n"</literal>
<literal type="string">"\t-simple turns off the more expensive graphics effects.\n"</literal>
<literal type="string">"\t-nogrid turns off the wireframe background grid.\n"</literal>
<literal type="string">"\t-nomusic turns off my most excellent background music.\n"</literal>
<literal type="string">"\t-www invokes the built-in web browser.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Example usage:\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"\tspeed 640 480\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>www</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_flags</name> <init>= <expr><name>ALLEGRO_GENERATE_EXPOSE_EVENTS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_org_name</name><argument_list>(<argument><expr><literal type="string">"liballeg.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_app_name</name><argument_list>(<argument><expr><literal type="string">"SPEED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not initialise Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-cheat"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cheat</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-simple"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>low_detail</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-nogrid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_grid</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-nomusic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_music</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-www"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>www</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-fullscreen"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <ternary><condition><expr><name>w</name></expr> ?</condition><then> <expr><name>ALLEGRO_FULLSCREEN</name></expr> </then><else>: <expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>display_flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>display_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>display_flags</name> <operator>|=</operator> <name>ALLEGRO_FULLSCREEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>www</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(
<argument><expr><literal type="string">"\n"</literal>
<literal type="string">"Unfortunately the built-in web browser feature had to be removed.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"I did get it more or less working as of Saturday evening (forms and\n"</literal>
<literal type="string">"Java were unsupported, but tables and images were mostly rendering ok),\n"</literal>
<literal type="string">"but the US Department of Justice felt that this was an unacceptable\n"</literal>
<literal type="string">"monopolistic attempt to tie in web browsing functionality to an\n"</literal>
<literal type="string">"unrelated product, so they threatened me with being sniped at from\n"</literal>
<literal type="string">"the top of tall buildings by guys with high powered rifles unless I\n"</literal>
<literal type="string">"agreed to disable this code.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"We apologise for any inconvenience that this may cause you.\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name> <operator>||</operator> <operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>display_flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">640</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">480</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ALLEGRO_SUGGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>display_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error setting %dx%d display mode\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_VIDEO_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>font_video</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font_video</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_joystick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_install_audio</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_reserve_samples</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_uninstall_audio</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_sound</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_hiscore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>title_screen</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>play_game</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_results</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>score_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>shutdown_hiscore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown_sound</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>goodbye</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shutdown_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font_video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
