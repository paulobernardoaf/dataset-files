<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\speed\title.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_audio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>void</name></type> <name>textout_shadow</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>textout_centre</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textout_centre</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>title_screen</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_H</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>white</name> <init>= <expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><operator>(</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><operator>(</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>solid_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"SPEED"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">128</literal><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">24</literal><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"SPEED"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">24</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"Simultaneous Projections"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">80</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"Employing an Ensemble of Displays"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"Or alternatively: Stupid Pointless"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"Effort at Establishing a Dumb Acronym"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"By Shawn Hargreaves, 1999"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"Written for the Allegro"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">48</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><literal type="string">"SpeedHack competition"</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>replace_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_retrace_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>j</name><operator>*</operator><operator>(</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>retrace_count</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>i</name><operator>*</operator><literal type="number">1024</literal><operator>/</operator><name>SCREEN_W</name></expr>)</condition>;</do>
</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_retrace_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>joy_b1</name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>joy_b1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>show_results</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_H</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><operator>(</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><operator>(</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"GAME OVER"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"GAME OVER"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Score: %d"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textout_shadow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>replace_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_retrace_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>SCREEN_W</name><operator>/</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>j</name><operator>*</operator><operator>(</operator><name>SCREEN_W</name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>retrace_count</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>i</name><operator>*</operator><literal type="number">1024</literal><operator>/</operator><name>SCREEN_W</name></expr>)</condition>;</do>
</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_retrace_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>joy_b1</name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>joy_b1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>goodbye</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>data1</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>data2</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SAMPLE</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SAMPLE_ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>screen_backbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sdata1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sdata2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name></decl>, <decl><type ref="prev"/><name>SCREEN_H</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_audio_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Couldn't install a digital sound driver, so no closing tune is available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>create_sample_u8</name><argument_list>(<argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>create_sample_u8</name><argument_list>(<argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sdata1</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>al_get_sample_data</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sdata2</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>al_get_sample_data</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sdata1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sdata2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>SCREEN_W</name> <operator>=</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SCREEN_H</name> <operator>=</operator> <call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">168</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_backbuffer</name> <operator>=</operator> <call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"Happy birthday Arron!"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>screen_backbuffer</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"Happy birthday Arron!"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>screen_backbuffer</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>screen_backbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>clear_keybuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">64</literal><operator>/</operator><literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>data1</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ALLEGRO_PLAYMODE_LOOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">100</literal><operator>*</operator><name><name>data1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_stop_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">50</literal><operator>*</operator><name><name>data1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>keypressed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nAnd thanks for organising this most excellent competition...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>data2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_play_sample</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">64</literal><operator>/</operator><literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>data2</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ALLEGRO_PLAYMODE_LOOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">75</literal><operator>*</operator><name><name>data2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_stop_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">25</literal><operator>*</operator><name><name>data2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>keypressed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\007'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rest</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\007'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_stop_samples</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_sample</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_sample</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
