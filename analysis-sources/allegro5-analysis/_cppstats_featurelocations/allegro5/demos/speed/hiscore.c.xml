<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\demos\speed\hiscore.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speed.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SCORES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NAME_LEN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>scores</name><index>[<expr><name>NUM_SCORES</name></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">666</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">440</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">42</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>names</name><index>[<expr><name>NUM_SCORES</name></expr>]</index><index>[<expr><name>MAX_NAME_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>yourname</name><index>[<expr><name>MAX_NAME_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>init_hiscore</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DATA_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_make_directory</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"speed.rec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>al_load_config_file</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_SCORES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"score%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"hiscore"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"name%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>get_config_string</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"hiscore"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"Shawn Hargreaves"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>MAX_NAME_LEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>shutdown_hiscore</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_CONFIG</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DATA_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_make_directory</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"speed.rec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>al_create_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_SCORES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"score%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_config_int</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"hiscore"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"name%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_config_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"hiscore"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_save_config_file</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ALLEGRO_NATIVE_PATH_SEP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_entry_box</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>retrace_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name>MAX_NAME_LEN</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name></decl>, <decl><type ref="prev"/><name>SCREEN_H</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SCREEN_W</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SCREEN_H</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>yourname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>yourname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retrace_count</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rectfill</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">56</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><operator>(</operator><name>which</name><operator>-</operator><name>NUM_SCORES</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>score_table</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_W</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SCREEN_H</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>myscore</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_SCORES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>NUM_SCORES</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>scores</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>scores</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>yourname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>myscore</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>vline</name><argument_list>(<argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><operator>(</operator><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vline</name><argument_list>(<argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">255</literal><operator>/</operator><operator>(</operator><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>create_memory_bitmap</name><argument_list>(<argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgba</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"HISCORE TABLE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">64</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">64</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>*</operator><literal type="number">31</literal><operator>/</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">64</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>*</operator><literal type="number">55</literal><operator>/</operator><literal type="number">64</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>*</operator><literal type="number">31</literal><operator>/</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textout</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="string">"HISCORE TABLE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>*</operator><literal type="number">31</literal><operator>/</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stretch_sprite</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>*</operator><literal type="number">55</literal><operator>/</operator><literal type="number">64</literal></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>*</operator><literal type="number">31</literal><operator>/</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>SCREEN_H</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_SCORES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>SCREEN_H</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>-</operator><name>NUM_SCORES</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">142</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"#%d - %d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">47</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>myscore</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>makecol</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">144</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"#%d - %d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textprintf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>SCREEN_W</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">48</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>myscore</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_entry_box</name><argument_list>(<argument><expr><name>myscore</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>replace_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_retrace_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>makecol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>j</name><operator>*</operator><operator>(</operator><name>SCREEN_W</name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>SCREEN_H</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>j</name><operator>*</operator><operator>(</operator><name>SCREEN_H</name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>SCREEN_W</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>retrace_count</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>i</name><operator>*</operator><literal type="number">512</literal><operator>/</operator><name>SCREEN_W</name></expr>)</condition>;</do>
</block_content>}</block></for>

<while>while <condition>(<expr><name>joy_b1</name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>myscore</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear_keybuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>joy_b1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>yourname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>myscore</name></expr>]</index></name></expr></argument>, <argument><expr><name>yourname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>keypressed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>readkey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <name>ALLEGRO_KEY_ENTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>yourname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>myscore</name></expr>]</index></name></expr></argument>, <argument><expr><name>yourname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sfx_explode_player</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>names</name><index>[<expr><name>myscore</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>myscore</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <name>ALLEGRO_KEY_BACKSPACE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yourname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sfx_shoot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'~'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAX_NAME_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yourname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yourname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>yourname</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sfx_explode_alien</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_entry_box</name><argument_list>(<argument><expr><name>myscore</name></expr></argument>, <argument><expr><call><name>retrace_count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_SPACE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ENTER</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><index>[<expr><name>ALLEGRO_KEY_ESCAPE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>joy_b1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>poll_input_wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>sfx_ping</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>stop_retrace_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>get_hiscore</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

</unit>
