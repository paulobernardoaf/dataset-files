<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_dir.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_file</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>al_get_fs_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name> <init>= <expr><call><name>al_get_fs_entry_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name> <init>= <expr><call><name>al_get_fs_entry_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name> <init>= <expr><call><name>al_get_fs_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>size</name> <init>= <expr><call><name>al_get_fs_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>al_get_fs_entry_name</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%-36s %s%s%s%s%s%s %8u %8u %8u %8u\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_READ</name></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_WRITE</name></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_EXECUTE</name></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_HIDDEN</name></expr> ?</condition><then> <expr><literal type="string">"h"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISFILE</name></expr> ?</condition><then> <expr><literal type="string">"f"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name></expr> ?</condition><then> <expr><literal type="string">"d"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>ctime</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>mtime</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>atime</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_file</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>al_get_fs_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_FILEMODE_ISDIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_open_directory</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Error opening directory: %s\n"</literal></expr></argument>, <argument><expr><call><name>al_get_fs_entry_name</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>al_read_directory</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_entry</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_close_directory</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>print_fs_entry_cb</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_file</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ALLEGRO_FOR_EACH_FS_ENTRY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_fs_entry_cb_norecurse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_file</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ALLEGRO_FOR_EACH_FS_ENTRY_SKIP</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_fs_entry</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n------------------------------------\nExample of al_for_each_fs_entry with recursion:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_for_each_fs_entry</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>print_fs_entry_cb</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>al_get_fs_entry_name</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_fs_entry_norecurse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n------------------------------------\nExample of al_for_each_fs_entry without recursion:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_for_each_fs_entry</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>print_fs_entry_cb_norecurse</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>al_get_fs_entry_name</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>open_log_monospace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Example of filesystem entry functions:\n\n%-36s %-6s %8s %8s %8s %8s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(
<argument><expr><literal type="string">"------------------------------------ "</literal>
<literal type="string">"------ "</literal>
<literal type="string">"-------- "</literal>
<literal type="string">"-------- "</literal>
<literal type="string">"-------- "</literal>
<literal type="string">"--------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_android_set_apk_fs_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>al_create_fs_entry</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_fs_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_fs_entry_norecurse</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FS_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>al_create_fs_entry</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_fs_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_fs_entry_norecurse</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_fs_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
