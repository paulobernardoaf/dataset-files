<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_threads2.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_THREADS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGES_PER_ROW</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>ThreadInfo</name> <block>{
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COND</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_paused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>random_seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>target_x</name></decl>, <name>target_y</name>;</decl_stmt>
}</block></struct></type> <name>ThreadInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Viewport</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>centre_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>centre_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x_extent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y_extent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>zoom</name></decl>;</decl_stmt>
}</block></struct></type> <name>Viewport</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ThreadInfo</name></type> <name><name>thread_info</name><index>[<expr><name>NUM_THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sin_lut</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>double</name></type> <name>cabs2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>re</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>im</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>re</name><operator>*</operator><name>re</name> <operator>+</operator> <name>im</name><operator>*</operator><name>im</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mandel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>cre</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>cim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>MAX_ITER</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Z_MAX2</name> <init>= <expr><literal type="number">4.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>zre</name> <init>= <expr><name>cre</name></expr></init></decl>, <decl><type ref="prev"/><name>zim</name> <init>= <expr><name>cim</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>MAX_ITER</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>z1re</name></decl>, <decl><type ref="prev"/><name>z1im</name></decl>;</decl_stmt>
<expr_stmt><expr><name>z1re</name> <operator>=</operator> <name>zre</name> <operator>*</operator> <name>zre</name> <operator>-</operator> <name>zim</name> <operator>*</operator> <name>zim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z1im</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>zre</name> <operator>*</operator> <name>zim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z1re</name> <operator>+=</operator> <name>cre</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z1im</name> <operator>+=</operator> <name>cim</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cabs2</name><argument_list>(<argument><expr><name>z1re</name></expr></argument>, <argument><expr><name>z1im</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>Z_MAX2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>iter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zre</name> <operator>=</operator> <name>z1re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zim</name> <operator>=</operator> <name>z1im</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>local_rand</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LOCAL_RAND_MAX</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>seed</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>seed</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <name>LOCAL_RAND_MAX</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>random_palette</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rmax</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <call><name>local_rand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>gmax</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <call><name>local_rand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bmax</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <call><name>local_rand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rmax</name> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gmax</name> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bmax</name> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_mandel_line</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Viewport</name> <modifier>*</modifier></type><name>viewport</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xlower</name></decl>, <decl><type ref="prev"/><name>ylower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xscale</name></decl>, <decl><type ref="prev"/><name>yscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>im</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">512</literal> <operator>/</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>viewport</name><operator>-&gt;</operator><name>zoom</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA</name></expr></argument>,
<argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"draw_mandel_line: al_lock_bitmap_region failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xlower</name> <operator>=</operator> <name><name>viewport</name><operator>-&gt;</operator><name>centre_x</name></name> <operator>-</operator> <name><name>viewport</name><operator>-&gt;</operator><name>x_extent</name></name> <operator>/</operator> <literal type="number">2.0</literal> <operator>*</operator> <name><name>viewport</name><operator>-&gt;</operator><name>zoom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ylower</name> <operator>=</operator> <name><name>viewport</name><operator>-&gt;</operator><name>centre_y</name></name> <operator>-</operator> <name><name>viewport</name><operator>-&gt;</operator><name>y_extent</name></name> <operator>/</operator> <literal type="number">2.0</literal> <operator>*</operator> <name><name>viewport</name><operator>-&gt;</operator><name>zoom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xscale</name> <operator>=</operator> <name><name>viewport</name><operator>-&gt;</operator><name>x_extent</name></name> <operator>/</operator> <name>w</name> <operator>*</operator> <name><name>viewport</name><operator>-&gt;</operator><name>zoom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yscale</name> <operator>=</operator> <name><name>viewport</name><operator>-&gt;</operator><name>y_extent</name></name> <operator>/</operator> <name>h</name> <operator>*</operator> <name><name>viewport</name><operator>-&gt;</operator><name>zoom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>re</name> <operator>=</operator> <name>xlower</name></expr>;</expr_stmt>
<expr_stmt><expr><name>im</name> <operator>=</operator> <name>ylower</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>yscale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb</name> <operator>=</operator> <name><name>lr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>mandel</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>im</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>sin_lut</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">64</literal> <operator>/</operator> <name>n</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>re</name> <operator>+=</operator> <name>xscale</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>thread_func</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>ThreadInfo</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Viewport</name></type> <name>viewport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>centre_x</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>target_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>centre_y</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>target_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>x_extent</name></name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>y_extent</name></name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>is_paused</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_cond</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>is_paused</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>random_palette</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>random_seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_mandel_line</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>viewport</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><name><name>viewport</name><operator>.</operator><name>zoom</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>centre_x</name></name> <operator>+=</operator> <name>z</name> <operator>*</operator> <name><name>viewport</name><operator>.</operator><name>x_extent</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>target_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>centre_y</name></name> <operator>+=</operator> <name>z</name> <operator>*</operator> <name><name>viewport</name><operator>.</operator><name>y_extent</name></name> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>target_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewport</name><operator>.</operator><name>zoom</name></name> <operator>*=</operator> <literal type="number">0.99</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>show_images</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitmap</name></expr></argument>, <argument><expr><name>x</name> <operator>*</operator> <name>W</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name>H</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>IMAGES_PER_ROW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_target</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>target_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>target_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>toggle_pausedness</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>thread_info</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>is_paused</name></name> <operator>=</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>is_paused</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name><name>thread</name><index>[<expr><name>NUM_THREADS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_draw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sin_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">127.0</literal> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>W</name> <operator>*</operator> <name>IMAGES_PER_ROW</name></expr></argument>,
<argument><expr><name>H</name> <operator>*</operator> <name>NUM_THREADS</name> <operator>/</operator> <name>IMAGES_PER_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating timer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>queue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating event queue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_RGB_888</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitmap</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cond</name> <operator>=</operator> <call><name>al_create_cond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cond</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_paused</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>random_seed</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>thread_func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.56062033041600878303</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.56064322926933807256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.57798076669230014080</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.63449861991138123418</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.36676836392830602929</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.59081385302214906030</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.48319283039401317303</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.00000000200514696273</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.74052910500707636032</literal></expr></argument>, <argument><expr><literal type="number">0.18340899525730713915</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.25437906525768350097</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.00046678223345789554</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.56062033041600878303</literal></expr></argument>, <argument><expr><literal type="number">0.56064322926933807256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.57798076669230014080</literal></expr></argument>, <argument><expr><literal type="number">0.63449861991138123418</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_target</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0.36676836392830602929</literal></expr></argument>, <argument><expr><literal type="number">0.59081385302214906030</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_draw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_images</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>H</name><operator>)</operator> <operator>*</operator> <name>IMAGES_PER_ROW</name> <operator>+</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>W</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>W</name><operator>)</operator> <operator>*</operator> <name>W</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>H</name><operator>)</operator> <operator>*</operator> <name>H</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>thread_info</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>is_paused</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>target_x</name> <operator>=</operator> <name>x</name> <operator>/</operator> <name>W</name> <operator>-</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread_info</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>target_y</name> <operator>=</operator> <name>y</name> <operator>/</operator> <name>H</name> <operator>-</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>toggle_pausedness</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><call><name>al_set_thread_should_stop</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_broadcast_cond</name><argument_list>(<argument><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name><name>thread_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>Error</name>:</label>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


</unit>
