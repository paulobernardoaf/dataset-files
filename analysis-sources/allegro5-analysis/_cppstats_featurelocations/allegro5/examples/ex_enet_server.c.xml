<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_enet_server.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;enet/enet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"enet_common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_SPEED</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>port</name> <init>= <expr><literal type="number">9234</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>float</name></type> <name>rand01</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>RAND_MAX</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_player</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYER_COUNT</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><call><name>rand01</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rand01</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rand01</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>rand01</name><argument_list>()</argument_list></call> <operator>*</operator> <name>SCREEN_W</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>rand01</name><argument_list>()</argument_list></call> <operator>*</operator> <name>SCREEN_H</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Cannot create more than %d clients"</literal></expr></argument>, <argument><expr><name>MAX_PLAYER_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ServerMessage</name></type> <name>create_join_message</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>player_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ServerMessage</name></type> <name>msg_out</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PLAYER_JOIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>player_id</name></name> <operator>=</operator> <name>player_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<return>return <expr><name>msg_out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_receive</name><parameter_list>(<parameter><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ClientMessage</name> <modifier>*</modifier></type><name>msg_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ServerMessage</name></type> <name>msg_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ENetPacket</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ENetEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<while>while <condition>(<expr><call><name>enet_host_service</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENET_EVENT_TYPE_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>ENET_EVENT_TYPE_CONNECT</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Server: A new client connected from %x:%u.\n"</literal></expr></argument>,
<argument><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>host</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>player_id</name> <init>= <expr><call><name>init_player</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>player_id</name></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_out</name> <operator>=</operator> <call><name>create_join_message</name><argument_list>(<argument><expr><name>player_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Server: created player #%d at %d,%d\n"</literal></expr></argument>,
<argument><expr><name>player_id</name></expr></argument>,
<argument><expr><name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,
<argument><expr><name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>enet_packet_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_out</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_out</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ENET_PACKET_FLAG_RELIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enet_host_broadcast</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYER_COUNT</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>player_id</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_out</name> <operator>=</operator> <call><name>create_join_message</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>enet_packet_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_out</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_out</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ENET_PACKET_FLAG_RELIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enet_peer_send</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>peer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<break>break;</break>
<case>case <expr><name>ENET_EVENT_TYPE_RECEIVE</name></expr>:</case>
<expr_stmt><expr><name>msg_in</name> <operator>=</operator> <operator>(</operator><name>ClientMessage</name><operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>player_id</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>dx</name> <operator>=</operator> <name><name>msg_in</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>players</name><index>[<expr><name>player_id</name></expr>]</index></name><operator>.</operator><name>dy</name> <operator>=</operator> <name><name>msg_in</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>enet_packet_destroy</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ENET_EVENT_TYPE_DISCONNECT</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Server: client #%d disconnected.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PLAYER_LEAVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_out</name><operator>.</operator><name>player_id</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>enet_packet_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_out</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_out</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ENET_PACKET_FLAG_RELIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enet_host_broadcast</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>peer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_players</name><parameter_list>(<parameter><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PLAYER_COUNT</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dx</name> <operator>*</operator> <name>PLAYER_SPEED</name> <operator>*</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+=</operator> <name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dy</name> <operator>*</operator> <name>PLAYER_SPEED</name> <operator>*</operator> <name>time</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ServerMessage</name></type> <name>msg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>POSITION_UPDATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>player_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>players</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ENetPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>enet_packet_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ServerMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ENET_PACKET_FLAG_RELIABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>enet_host_broadcast</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ENetHost</name><modifier>*</modifier></type> <name>create_server</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ENetAddress</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ENetHost</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>address</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>ENET_HOST_ANY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>address</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>enet_host_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument> ,
<argument><expr><literal type="number">32</literal></expr></argument> ,
<argument><expr><literal type="number">2</literal></expr></argument> ,
<argument><expr><literal type="number">0</literal></expr></argument> ,
<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the server.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>server</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>last_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>cur_time</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ENetHost</name> <modifier>*</modifier></type> <name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>DEFAULT_PORT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [portnum]"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>enet_initialize</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"An error occurred while initializing ENet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>FPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>create_server</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_players</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>cur_time</name> <operator>-</operator> <name>last_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send_receive</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>enet_host_destroy</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enet_deinitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
