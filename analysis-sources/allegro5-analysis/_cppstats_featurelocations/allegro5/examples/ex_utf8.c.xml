<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_utf8.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/utf8.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_MSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>4066</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_ae</name></cpp:macro> <cpp:value>0x00e6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_i_acute</name></cpp:macro> <cpp:value>0x00ed</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_eth</name></cpp:macro> <cpp:value>0x00f0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_o_dia</name></cpp:macro> <cpp:value>0x00f6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_thorn</name></cpp:macro> <cpp:value>0x00fe</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_z_bar</name></cpp:macro> <cpp:value>0x01b6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_schwa</name></cpp:macro> <cpp:value>0x0259</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_beta</name></cpp:macro> <cpp:value>0x03b2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_1d08</name></cpp:macro> <cpp:value>0x1d08</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_1ff7</name></cpp:macro> <cpp:value>0x1ff7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_2051</name></cpp:macro> <cpp:value>0x2051</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_euro</name></cpp:macro> <cpp:value>0x20ac</cpp:value></cpp:define> 

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>test_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bool ok = (x); if (!ok) { log_printf("FAIL %s\n", #x); error++; } else { log_printf("OK %s\n", #x); } } while (0)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>void</name></type> <name>t1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Ã¡Æµ"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ã¡Æµ"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>t2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>t3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"A static string."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"A static string."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>t4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>s</name><index>[]</index></name> <init>= <expr><literal type="string">"This contains an embedded NUL: \0 &lt;-- here"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>us2_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us2_info</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">36</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ã¾Ã¦"</literal></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us2_info</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°"</literal></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us2_info</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ã¾Ã¦Ã¶"</literal></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us2_info</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">36</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t7</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ustr_dup_substr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">36</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ã¾Ã¦"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ustr_dup_substr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ustr_dup_substr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"noÃ³prstuÃº"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃº"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">"vxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t9</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>us2_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmaÃ¡bdÃ°eÃ©fghiÃ­jklm"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us2_info</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t10</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>us3_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>us3_data</name><index>[]</index></name> <init>= <expr><literal type="string">"aÃ¡bdÃ°\0eÃ©fgh"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ustr_dup</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us3</name> <operator>=</operator> <call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us3_info</name></expr></argument>, <argument><expr><name>us3_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>us3_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_equal</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>al_ustr_equal</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>al_ustr_equal</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>


<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jkprstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us2</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"lmnoÃ³"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_insert</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_ustr_insert</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lmnlmnoÃ³oÃ³"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>al_ustr_insert</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_insert</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sz</name> <operator>+</operator> <name>sz</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lmnlmnoÃ³oÃ³\0\0\0lmnlmnoÃ³oÃ³"</literal></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <name>sz</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t12</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡beÃ©f"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"dÃ°"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t13</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jkprstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_remove_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_remove_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_remove_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t14</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jkprstuÃºvxyÃ½Ã¾Ã¦Ã¶"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jkprstuÃºvxyÃ½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jkprstuÃºvxyÃ½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_truncate</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­jkprstuÃºvxyÃ½"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">" \f\n\r\t\vhello \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">" \f\n\r\t\vhello \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ltrim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hello \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rtrim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t16</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name></decl>;</decl_stmt>


<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ltrim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rtrim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">" \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ltrim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">" \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rtrim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us1</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">" \f\n\r\t\v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t17</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x000000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x00007f</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x000080</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x0007ff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x000800</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x00ffff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x010000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x10ffff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0x110000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_width</name><argument_list>(<argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t18</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x00"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x7f"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xC2\x80"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x7ff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xDF\xBF"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x000800</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xE0\xA0\x80"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x00ffff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBF\xBF"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x010000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xF0\x90\x80\x80"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x10ffff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xF4\x8f\xBF\xBF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x110000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_utf8_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t19</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>U_ae</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>U_euro</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ã¦â¬a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>U_o_dia</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ã¦â¬a\0\0Ã¶"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_insert_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x110000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t20</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>U_ae</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>U_euro</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¦â¬"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_append_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0x110000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t21</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\x7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xC2\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xDF\xBf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x7ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xE0\xA0\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBF\xBF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xF0\x90\x80\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xF4\x8F\xBF\xBF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x10ffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t22</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_get_errno</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf8\x88\x80\x80\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_get_errno</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"Ã°"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_get_errno</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_get_errno</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>t23</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xc0\xaf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xe0\x80\xaf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf0\x80\x80\xaf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf8\x80\x80\x80\xaf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xfc\x80\x80\x80\x80\xaf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xc1\xbf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xe0\x9f\xbf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf0\x8f\xbf\xbf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf8\x87\xbf\xbf\xbf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xfc\x83\xbf\xbf\xbf\xbf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xc0\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xe0\x80\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf0\x80\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xf8\x80\x80\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"\xfc\x80\x80\x80\x80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t24</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>str</name><index>[]</index></name> <init>= <expr><literal type="string">"a\0Ã¾â¬\xf4\x8f\xbf\xbf"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t25</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>str</name><index>[]</index></name> <init>= <expr><literal type="string">"Ã¾\xf4\x8f\xbf."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t26</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¾â¬\xf4\x8f\xbf\xbf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>al_ustr_prev</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t27</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¾â¬\xf4\x8f\xbf\xbf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>==</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t28</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¾â¬\xf4\x8f\xbf\xbf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t29</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¾â¬"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>U_thorn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>U_euro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_get_next</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>U_euro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t30</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¾â¬"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>U_euro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>U_thorn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_prev_get</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>U_thorn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­aÃ¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>U_eth</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>U_eth</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>U_eth</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>U_z_bar</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­aÃ¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>U_i_acute</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>U_i_acute</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>U_z_bar</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t33</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­aÃ¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"gfe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"gfe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Ã©Ã°f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Ã©Ã°f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"áºá»¹Æ¶"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t34</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"a\x80Ã¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"gfe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_set_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Ã©\x80Ã°f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t35</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>






<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"alphabetagamma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"alphbet"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"alphbet"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"alphbetgm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Î±Î»ÏÎ±Î²ÎµÏÎ±Î³Î±Î¼Î¼Î±"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Î±Î»ÏÎ²ÎµÏ"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Î±Î»ÏÎ²ÎµÏ"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Î±Î»ÏÎ²ÎµÏÎ³Î¼"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t36</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"a\x80Ã¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"aÃ¡bd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cset_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"a\x80Ã¡bd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t37</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­aÃ¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Ã¡bd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"Ã¡bd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Ã¡bz"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t38</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­aÃ¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"hiÃ­"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>end</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"hiÃ­"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_rfind_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"Ã¡bz"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t39</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>s1</name><index>[]</index></name> <init>= <expr><literal type="string">"ÐÐ¾ÑÐ°Ð±ÑÑ Ð¼Ð¸ Ð½Ð° Ð²ÑÐ·Ð´ÑÑÐ½Ð° Ð²ÑÐ·Ð³Ð»Ð°Ð²Ð½Ð¸ÑÐ°\0Ðµ Ð¿ÑÐ»ÐµÐ½ ÑÑÑ Ð·Ð¼Ð¸Ð¾ÑÐºÐ¸"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new_from_buffer</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>al_cstr_dup</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t40</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"æé»æ°£å¢è¹è£æ»¿æé±"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Î¤á½¸ ÏÏÎ²ÎµÏÎºÏÎ¬ÏÏ Î¼Î¿Ï Îµá¼¶Î½Î±Î¹ Î³ÎµÎ¼á¾¶ÏÎ¿ ÏÎ­Î»Î¹Î±"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_assign</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Î¤á½¸ ÏÏÎ²ÎµÏÎºÏÎ¬ÏÏ Î¼Î¿Ï Îµá¼¶Î½Î±Î¹ Î³ÎµÎ¼á¾¶ÏÎ¿ ÏÎ­Î»Î¹Î±"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_assign_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">"ç§ã®ããã¼ã¯ã©ããã¯é°»ã§ãã£ã±ãã§ã"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">54</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t41</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"ÐÐ¾ÑÐ° Ð»ÐµÐ±Ð´Ð¸Ð»Ð¸ÑÐ° ÑÐµ Ð¿ÑÐ½Ð° ÑÐµÐ³ÑÑÐ°"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ð»ÐµÐ±Ð´Ð¸Ð»Ð¸ÑÐ°"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_assign_substr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>, <argument><expr><name>us1</name></expr></argument>, <argument><expr><operator>-</operator><name>INT_MAX</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ÐÐ¾ÑÐ° Ð»ÐµÐ±Ð´Ð¸Ð»Ð¸ÑÐ° ÑÐµ Ð¿ÑÐ½Ð° ÑÐµÐ³ÑÑÐ°"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t42</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"abcdef"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aBcdef"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">6</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>U_beta</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÎ²cdef"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>U_1d08</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÎ²cdá´f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">9</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>U_schwa</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÎ²cdÉf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>U_1ff7</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÎ²cdÉfá¿·"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">11</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>U_2051</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÎ²cdÉfá¿·\0\0â"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_set_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>U_2051</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>==</operator> <call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t43</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Â«aÎ²á¿·Â»"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_remove_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Â«Î²á¿·Â»"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_remove_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Â«á¿·Â»"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_remove_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Â«Â»"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_remove_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_remove_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_remove_chr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><call><name>al_ustr_size</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t44</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Å is kungs par visu samaksÄs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"Ä« kundze"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_replace_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Å Ä« kundze par visu samaksÄs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_replace_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Å Ä« Å Ä« kundze par visu samaksÄs par visu samaksÄs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t45</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"abcdef"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us2</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"ABCDEF"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_replace_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_replace_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abcdef\0\0ABCDEF"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_replace_range</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abcdef\0\0ABCDEF"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>call_vappendf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t46</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_newf</name><argument_list>(<argument><expr><literal type="string">"%s %c %.2f %.02d"</literal></expr></argument>, <argument><expr><literal type="string">"hÃµljuk"</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hÃµljuk c 3.14 42"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_appendf</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><literal type="string">"LuftchÃ¼ssiboot"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hÃµljuk c 3.14 42 LuftchÃ¼ssiboot"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>call_vappendf</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><literal type="string">"ÏÏÎ²ÎµÏÎºÏÎ¬ÏÏ"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hÃµljuk c 3.14 42 LuftchÃ¼ssiboot ÏÏÎ²ÎµÏÎºÏÎ¬ÏÏ"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_vappendf</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>call_vappendf</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>al_ustr_vappendf</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t47</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>i1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>i2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_compare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_compare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_compare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_compare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"abc\001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_compare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"abc\001"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ncompare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ncompare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ncompare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"platypus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ncompare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"abc\001"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_ncompare</name><argument_list>(
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"abc\001"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t48</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>i1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us1</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_has_prefix_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">"vá»t"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_has_suffix_cstr</name><argument_list>(<argument><expr><name>us1</name></expr></argument>, <argument><expr><literal type="string">"ThÃº má» vá»t."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t49</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>findi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>repli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>find</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>repl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">"aÃ¡bdÃ°eÃ©fghiÃ­aÃ¡bdÃ°eÃ©fghiÃ­"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>find</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>findi</name></expr></argument>, <argument><expr><literal type="string">"Ã°eÃ©f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repl</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repli</name></expr></argument>, <argument><expr><literal type="string">"deef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_replace</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bddeefghiÃ­aÃ¡bddeefghiÃ­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>find</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>findi</name></expr></argument>, <argument><expr><literal type="string">"aÃ¡"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repl</name> <operator>=</operator> <call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repli</name></expr></argument>, <argument><expr><literal type="string">"AÃ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_replace</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bddeefghiÃ­AÃbddeefghiÃ­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>al_ustr_find_replace_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"dd"</literal></expr></argument>, <argument><expr><literal type="string">"Ä"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bÄeefghiÃ­AÃbÄeefghiÃ­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>find</name> <operator>=</operator> <call><name>al_ustr_empty_string</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator> <call><name>al_ustr_find_replace</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aÃ¡bÄeefghiÃ­AÃbÄeefghiÃ­"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t50</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8</name><index>[]</index></name> <init>= <expr><literal type="string">"â-note: ð , domino: ð¡"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>utf16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>little</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>utf16_ref</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x215b</literal></expr>, <expr><literal type="number">0x002d</literal></expr>, <expr><literal type="number">0x006e</literal></expr>, <expr><literal type="number">0x006f</literal></expr>, <expr><literal type="number">0x0074</literal></expr>,
<expr><literal type="number">0x0065</literal></expr>, <expr><literal type="number">0x003a</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0xd834</literal></expr>, <expr><literal type="number">0xdd60</literal></expr>,
<expr><literal type="number">0x002c</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x0064</literal></expr>, <expr><literal type="number">0x006f</literal></expr>, <expr><literal type="number">0x006d</literal></expr>,
<expr><literal type="number">0x0069</literal></expr>, <expr><literal type="number">0x006e</literal></expr>, <expr><literal type="number">0x006f</literal></expr>, <expr><literal type="number">0x003a</literal></expr>, <expr><literal type="number">0x0020</literal></expr>,
<expr><literal type="number">0xd83c</literal></expr>, <expr><literal type="number">0xdc61</literal></expr>, <expr><literal type="number">0x0000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>truncated</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x215b</literal></expr>, <expr><literal type="number">0x002d</literal></expr>, <expr><literal type="number">0x006e</literal></expr>, <expr><literal type="number">0x006f</literal></expr>, <expr><literal type="number">0x0074</literal></expr>,
<expr><literal type="number">0x0065</literal></expr>, <expr><literal type="number">0x003a</literal></expr>, <expr><literal type="number">0x0000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new_from_utf16</name><argument_list>(<argument><expr><name>utf16_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>==</operator> <call><name>al_ustr_length</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ustr_new</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>al_ustr_size_utf16</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">46</literal> <operator>==</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf16</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_encode_utf16</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>utf16_ref</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>al_ustr_encode_utf16</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>little</name></expr></argument>, <argument><expr><sizeof>sizeof <name>little</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>==</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>truncated</name></expr></argument>, <argument><expr><name>little</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>t51</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>al_ref_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"Allegro"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"All"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"All"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_to_buffer</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"Al"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>const</specifier> <name>test_t</name></type> <name><name>all_tests</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>NULL</name></expr>, <expr><name>t1</name></expr>, <expr><name>t2</name></expr>, <expr><name>t3</name></expr>, <expr><name>t4</name></expr>, <expr><name>t5</name></expr>, <expr><name>t6</name></expr>, <expr><name>t7</name></expr>, <expr><name>t8</name></expr>, <expr><name>t9</name></expr>,
<expr><name>t10</name></expr>, <expr><name>t11</name></expr>, <expr><name>t12</name></expr>, <expr><name>t13</name></expr>, <expr><name>t14</name></expr>, <expr><name>t15</name></expr>, <expr><name>t16</name></expr>, <expr><name>t17</name></expr>, <expr><name>t18</name></expr>, <expr><name>t19</name></expr>,
<expr><name>t20</name></expr>, <expr><name>t21</name></expr>, <expr><name>t22</name></expr>, <expr><name>t23</name></expr>, <expr><name>t24</name></expr>, <expr><name>t25</name></expr>, <expr><name>t26</name></expr>, <expr><name>t27</name></expr>, <expr><name>t28</name></expr>, <expr><name>t29</name></expr>,
<expr><name>t30</name></expr>, <expr><name>t31</name></expr>, <expr><name>t32</name></expr>, <expr><name>t33</name></expr>, <expr><name>t34</name></expr>, <expr><name>t35</name></expr>, <expr><name>t36</name></expr>, <expr><name>t37</name></expr>, <expr><name>t38</name></expr>, <expr><name>t39</name></expr>,
<expr><name>t40</name></expr>, <expr><name>t41</name></expr>, <expr><name>t42</name></expr>, <expr><name>t43</name></expr>, <expr><name>t44</name></expr>, <expr><name>t45</name></expr>, <expr><name>t46</name></expr>, <expr><name>t47</name></expr>, <expr><name>t48</name></expr>, <expr><name>t49</name></expr>,
<expr><name>t50</name></expr>, <expr><name>t51</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TESTS</name></cpp:macro> <cpp:value>(int)(sizeof(all_tests) / sizeof(all_tests[0]))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>open_log_monospace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"#t%d\n\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all_tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>NUM_TESTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>all_tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
