<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_path.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>dyn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>tostring</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>cloned</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>exe</name> <init>= <expr><call><name>al_create_path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"This example needs to be run from the command line.\nUsage1: %s &lt;path&gt;\n"</literal></expr></argument>, <argument><expr><call><name>al_get_path_filename</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"This example needs to be run from the command line.\nUsage2: %s &lt;path&gt;\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dyn</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dyn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Failed to create path structure for '%s'.\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"dyn: drive=\"%s\", file=\"%s\"\n"</literal></expr></argument>,
<argument><expr><call><name>al_get_path_drive</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_get_path_filename</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tostring</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tostring</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Failed to create path structure for tostring test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"tostring: '%s'\n"</literal></expr></argument>, <argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"tostring: drive:'%s'"</literal></expr></argument>, <argument><expr><call><name>al_get_path_drive</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">" dirs:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>al_get_path_num_components</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">" '%s'"</literal></expr></argument>, <argument><expr><call><name>al_get_path_component</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">" filename:'%s'\n"</literal></expr></argument>, <argument><expr><call><name>al_get_path_filename</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>dyn</name> <operator>=</operator> <call><name>al_create_path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dyn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cloned</name> <operator>=</operator> <call><name>al_clone_path</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cloned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"dyn: '%s'\n"</literal></expr></argument>, <argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_make_path_canonical</name><argument_list>(<argument><expr><name>cloned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"can: '%s'\n"</literal></expr></argument>, <argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>cloned</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>cloned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"failed to clone ALLEGRO_PATH :(\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"failed to create new ALLEGRO_PATH for cloning..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



</unit>
