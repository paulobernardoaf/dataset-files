<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_opengl_pixel_shader.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_opengl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>GLhandleARB</name></type> <name>tinter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLhandleARB</name></type> <name>tinter_shader</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ratio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>mysha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tinter_shader_src</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"uniform sampler2D backBuffer;"</literal></expr>,
<expr><literal type="string">"uniform float r;"</literal></expr>,
<expr><literal type="string">"uniform float g;"</literal></expr>,
<expr><literal type="string">"uniform float b;"</literal></expr>,
<expr><literal type="string">"uniform float ratio;"</literal></expr>,
<expr><literal type="string">"void main() {"</literal></expr>,
<expr><literal type="string">" vec4 color;"</literal></expr>,
<expr><literal type="string">" float avg, dr, dg, db;"</literal></expr>,
<expr><literal type="string">" color = texture2D(backBuffer, gl_TexCoord[0].st);"</literal></expr>,
<expr><literal type="string">" avg = (color.r + color.g + color.b) / 3.0;"</literal></expr>,
<expr><literal type="string">" dr = avg * r;"</literal></expr>,
<expr><literal type="string">" dg = avg * g;"</literal></expr>,
<expr><literal type="string">" db = avg * b;"</literal></expr>,
<expr><literal type="string">" color.r = color.r - (ratio * (color.r - dr));"</literal></expr>,
<expr><literal type="string">" color.g = color.g - (ratio * (color.g - dg));"</literal></expr>,
<expr><literal type="string">" color.b = color.b - (ratio * (color.b - db));"</literal></expr>,
<expr><literal type="string">" gl_FragColor = color;"</literal></expr>,
<expr><literal type="string">"}"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>TINTER_LEN</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>loc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mysha</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/mysha.pcx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mysha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not load image.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_have_opengl_extension</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_framebuffer_object"</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>al_have_opengl_extension</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_fragment_shader"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Fragment shaders not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tinter_shader</name> <operator>=</operator> <call><name>glCreateShaderObjectARB</name><argument_list>(<argument><expr><name>GL_FRAGMENT_SHADER_ARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glShaderSourceARB</name><argument_list>(<argument><expr><name>tinter_shader</name></expr></argument>, <argument><expr><name>TINTER_LEN</name></expr></argument>, <argument><expr><name>tinter_shader_src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glCompileShaderARB</name><argument_list>(<argument><expr><name>tinter_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tinter</name> <operator>=</operator> <call><name>glCreateProgramObjectARB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glAttachObjectARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><name>tinter_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glLinkProgramARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>glGetUniformLocationARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><literal type="string">"backBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1iARB</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><call><name>al_get_opengl_texture</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_get_keyboard_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_key_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ESCAPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ratio</name> <operator>+=</operator> <name>diff</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>dir</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ratio</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ratio</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><name>dir</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ratio</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ratio</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><name>dir</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUseProgramObjectARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>glGetUniformLocationARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><literal type="string">"ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1fARB</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>glGetUniformLocationARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1fARB</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>glGetUniformLocationARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1fARB</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>glGetUniformLocationARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1fARB</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>mysha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUseProgramObjectARB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>glDetachObjectARB</name><argument_list>(<argument><expr><name>tinter</name></expr></argument>, <argument><expr><name>tinter_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteObjectARB</name><argument_list>(<argument><expr><name>tinter_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_uninstall_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
