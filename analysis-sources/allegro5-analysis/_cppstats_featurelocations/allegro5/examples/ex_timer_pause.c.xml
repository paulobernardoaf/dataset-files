<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_timer_pause.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>duration</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pre_pause</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pause</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>ev</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating a pair of %2.0fs timers\n"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timer1</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timer2</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Starting both timers at: %2.2fs\n"</literal></expr></argument>, <argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><name>pre_pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pausing timers at: %2.2fs\n"</literal></expr></argument>, <argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_stop_timer</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_stop_timer</name><argument_list>(<argument><expr><name>timer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Resume timer1 at: %2.2fs\n"</literal></expr></argument>, <argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_resume_timer</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Restart timer2 at: %2.2fs\n"</literal></expr></argument>, <argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Timer%d finished at: %2.2fs\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ev</name><operator>.</operator><name>any</name><operator>.</operator><name>source</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Timer%d finished at: %2.2fs\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ev</name><operator>.</operator><name>any</name><operator>.</operator><name>source</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>al_get_time</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>timer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>timer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
