<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_mouse_focus.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display2</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redraw</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>color1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>color2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>black</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>red</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>mst0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>mst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>kst</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't initialise Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't install mouse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't install keyboard.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display1</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display2</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display1</name> <operator>||</operator> <operator>!</operator><name>display2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't open displays.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Move the mouse cursor over the displays\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>black</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mst0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_get_mouse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mst</name><operator>.</operator><name>display</name></name> <operator>!=</operator> <name><name>mst0</name><operator>.</operator><name>display</name></name> <operator>||</operator>
<name><name>mst</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name><name>mst0</name><operator>.</operator><name>x</name></name> <operator>||</operator>
<name><name>mst</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <name><name>mst0</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mst</name><operator>.</operator><name>display</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Outside either display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mst</name><operator>.</operator><name>display</name></name> <operator>==</operator> <name>display1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"In display 1, x = %d, y = %d\n"</literal></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mst</name><operator>.</operator><name>display</name></name> <operator>==</operator> <name>display2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"In display 2, x = %d, y = %d\n"</literal></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Unknown display = %p, x = %d, y = %d\n"</literal></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>mst</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mst0</name> <operator>=</operator> <name>mst</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mst</name><operator>.</operator><name>display</name></name> <operator>==</operator> <name>display1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw</name><argument_list>(<argument><expr><name>red</name></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>mst</name><operator>.</operator><name>display</name></name> <operator>==</operator> <name>display2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw</name><argument_list>(<argument><expr><name>black</name></expr></argument>, <argument><expr><name>red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>redraw</name><argument_list>(<argument><expr><name>black</name></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_get_keyboard_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_key_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kst</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ESCAPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
