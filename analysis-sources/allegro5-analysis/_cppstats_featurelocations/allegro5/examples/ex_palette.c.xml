<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_palette.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_color.h"</cpp:file></cpp:include>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name><name>pal_hex</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>, <name>angle</name>, <name>t</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <name>i</name>, <name>j</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Sprite</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate_palette</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pal1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pal2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pal1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pal2</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pal1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pal2</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pal1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pal2</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>background</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pal</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pals</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sprite</name></type> <name><name>sprite</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_PROGRAMMABLE_PIPELINE</name> <operator>|</operator>
<name>ALLEGRO_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_load_bitmap_flags</name><argument_list>(<argument><expr><literal type="string">"data/alexlogo.bmp"</literal></expr></argument>, <argument><expr><name>ALLEGRO_KEEP_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"alexlogo not found or failed to load\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>sprite</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">320</literal> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">64</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">240</literal> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">64</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ALLEGRO_FLIP_HORIZONTAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">8.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>j</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>background</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/bkg.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>pal_hex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pal_hex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name><name>pal_hex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_color_rgb_to_hsl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.3</literal> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <literal type="number">0.7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>j</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.3</literal> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <literal type="number">0.7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>al_color_hsl_to_rgb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pals</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pals</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pals</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name>al_create_shader</name><argument_list>(<argument><expr><name>ALLEGRO_SHADER_GLSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_attach_shader_source</name><argument_list>(
<argument><expr><name>shader</name></expr></argument>,
<argument><expr><name>ALLEGRO_VERTEX_SHADER</name></expr></argument>,
<argument><expr><literal type="string">"attribute vec4 al_pos;\n"</literal>
<literal type="string">"attribute vec4 al_color;\n"</literal>
<literal type="string">"attribute vec2 al_texcoord;\n"</literal>
<literal type="string">"uniform mat4 al_projview_matrix;\n"</literal>
<literal type="string">"varying vec4 varying_color;\n"</literal>
<literal type="string">"varying vec2 varying_texcoord;\n"</literal>
<literal type="string">"void main()\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" varying_color = al_color;\n"</literal>
<literal type="string">" varying_texcoord = al_texcoord;\n"</literal>
<literal type="string">" gl_Position = al_projview_matrix * al_pos;\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_attach_shader_source</name><argument_list>(
<argument><expr><name>shader</name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_SHADER</name></expr></argument>,
<argument><expr><literal type="string">"uniform sampler2D al_tex;\n"</literal>
<literal type="string">"uniform vec3 pal[256];\n"</literal>
<literal type="string">"varying vec4 varying_color;\n"</literal>
<literal type="string">"varying vec2 varying_texcoord;\n"</literal>
<literal type="string">"void main()\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" vec4 c = texture2D(al_tex, varying_texcoord);\n"</literal>
<literal type="string">" int index = int(c.r * 255.0);\n"</literal>
<literal type="string">" if (index != 0) {;\n"</literal>
<literal type="string">" gl_FragColor = vec4(pal[index], 1);\n"</literal>
<literal type="string">" }\n"</literal>
<literal type="string">" else {;\n"</literal>
<literal type="string">" gl_FragColor = vec4(0, 0, 0, 0);\n"</literal>
<literal type="string">" };\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_build_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>sprite</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name> <operator>+=</operator> <name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">180.0</literal> <operator>*</operator> <name>dir</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>t</name> <operator>%</operator> <literal type="number">60</literal> <operator>/</operator> <literal type="number">60.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>t</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><operator>(</operator><name>p1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>interpolate_palette</name><argument_list>(<argument><expr><name>pal</name></expr></argument>, <argument><expr><name><name>pals</name><index>[<expr><name>p1</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pals</name><index>[<expr><name>p2</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_shader_float_vector</name><argument_list>(<argument><expr><literal type="string">"pal"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>background</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>background</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Sprite</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>sprite</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>t</name> <operator>/</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>t</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>ALLEGRO_PI</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>interpolate_palette</name><argument_list>(<argument><expr><name>pal</name></expr></argument>, <argument><expr><name><name>pals</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pals</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>j</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_shader_float_vector</name><argument_list>(<argument><expr><literal type="string">"pal"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_rotated_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sc</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_shader_float_vector</name><argument_list>(<argument><expr><literal type="string">"pal"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name><name>pals</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>t</name> <operator>%</operator> <literal type="number">20</literal> <operator>&gt;</operator> <literal type="number">15</literal></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>al_draw_scaled_rotated_bitmap</cpp:value></cpp:define>
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>sc</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>-</operator><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>, <argument><expr><operator>-</operator><name>sc</name></expr></argument>, <argument><expr><operator>-</operator><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>pal_hex</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xFF00FF</literal></expr>, <expr><literal type="number">0x000100</literal></expr>, <expr><literal type="number">0x060000</literal></expr>, <expr><literal type="number">0x040006</literal></expr>, <expr><literal type="number">0x000200</literal></expr>,
<expr><literal type="number">0x000306</literal></expr>, <expr><literal type="number">0x010400</literal></expr>, <expr><literal type="number">0x030602</literal></expr>, <expr><literal type="number">0x02090C</literal></expr>, <expr><literal type="number">0x070A06</literal></expr>,
<expr><literal type="number">0x020C14</literal></expr>, <expr><literal type="number">0x030F1A</literal></expr>, <expr><literal type="number">0x0F0E03</literal></expr>, <expr><literal type="number">0x0D0F0C</literal></expr>, <expr><literal type="number">0x071221</literal></expr>,
<expr><literal type="number">0x0D1308</literal></expr>, <expr><literal type="number">0x0D1214</literal></expr>, <expr><literal type="number">0x121411</literal></expr>, <expr><literal type="number">0x12170E</literal></expr>, <expr><literal type="number">0x151707</literal></expr>,
<expr><literal type="number">0x0A182B</literal></expr>, <expr><literal type="number">0x171816</literal></expr>, <expr><literal type="number">0x131B0C</literal></expr>, <expr><literal type="number">0x1A191C</literal></expr>, <expr><literal type="number">0x171D08</literal></expr>,
<expr><literal type="number">0x081D35</literal></expr>, <expr><literal type="number">0x1A200E</literal></expr>, <expr><literal type="number">0x1D1F1C</literal></expr>, <expr><literal type="number">0x1D2013</literal></expr>, <expr><literal type="number">0x0E2139</literal></expr>,
<expr><literal type="number">0x06233F</literal></expr>, <expr><literal type="number">0x17230E</literal></expr>, <expr><literal type="number">0x1C270E</literal></expr>, <expr><literal type="number">0x21260F</literal></expr>, <expr><literal type="number">0x0D2845</literal></expr>,
<expr><literal type="number">0x0A294C</literal></expr>, <expr><literal type="number">0x1F2A12</literal></expr>, <expr><literal type="number">0x252724</literal></expr>, <expr><literal type="number">0x232B19</literal></expr>, <expr><literal type="number">0x222D15</literal></expr>,
<expr><literal type="number">0x0C2F51</literal></expr>, <expr><literal type="number">0x0D2F57</literal></expr>, <expr><literal type="number">0x263012</literal></expr>, <expr><literal type="number">0x2B2D2B</literal></expr>, <expr><literal type="number">0x233314</literal></expr>,
<expr><literal type="number">0x273617</literal></expr>, <expr><literal type="number">0x0D3764</literal></expr>, <expr><literal type="number">0x17355E</literal></expr>, <expr><literal type="number">0x2C3618</literal></expr>, <expr><literal type="number">0x2E3623</literal></expr>,
<expr><literal type="number">0x333432</literal></expr>, <expr><literal type="number">0x2C3A15</literal></expr>, <expr><literal type="number">0x093D70</literal></expr>, <expr><literal type="number">0x333B17</literal></expr>, <expr><literal type="number">0x163C6A</literal></expr>,
<expr><literal type="number">0x2F3D18</literal></expr>, <expr><literal type="number">0x323D24</literal></expr>, <expr><literal type="number">0x383A38</literal></expr>, <expr><literal type="number">0x30401B</literal></expr>, <expr><literal type="number">0x2F431C</literal></expr>,
<expr><literal type="number">0x1E4170</literal></expr>, <expr><literal type="number">0x12447D</literal></expr>, <expr><literal type="number">0x154478</literal></expr>, <expr><literal type="number">0x3F403E</literal></expr>, <expr><literal type="number">0x34471A</literal></expr>,
<expr><literal type="number">0x3D482C</literal></expr>, <expr><literal type="number">0x134B8B</literal></expr>, <expr><literal type="number">0x3A4D20</literal></expr>, <expr><literal type="number">0x184D86</literal></expr>, <expr><literal type="number">0x474846</literal></expr>,
<expr><literal type="number">0x3A511D</literal></expr>, <expr><literal type="number">0x13549A</literal></expr>, <expr><literal type="number">0x3D5420</literal></expr>, <expr><literal type="number">0x195595</literal></expr>, <expr><literal type="number">0x0F57A3</literal></expr>,
<expr><literal type="number">0x4E504D</literal></expr>, <expr><literal type="number">0x415925</literal></expr>, <expr><literal type="number">0x435B27</literal></expr>, <expr><literal type="number">0x485837</literal></expr>, <expr><literal type="number">0x125DA9</literal></expr>,
<expr><literal type="number">0x485E24</literal></expr>, <expr><literal type="number">0x175FB2</literal></expr>, <expr><literal type="number">0x235DA3</literal></expr>, <expr><literal type="number">0x555754</literal></expr>, <expr><literal type="number">0x0565BD</literal></expr>,
<expr><literal type="number">0x1C61B5</literal></expr>, <expr><literal type="number">0x2163B7</literal></expr>, <expr><literal type="number">0x2164B1</literal></expr>, <expr><literal type="number">0x49662A</literal></expr>, <expr><literal type="number">0x1268C1</literal></expr>,
<expr><literal type="number">0x2365B9</literal></expr>, <expr><literal type="number">0x1769C3</literal></expr>, <expr><literal type="number">0x5E605D</literal></expr>, <expr><literal type="number">0x196BBE</literal></expr>, <expr><literal type="number">0x55673D</literal></expr>,
<expr><literal type="number">0x1B6BC5</literal></expr>, <expr><literal type="number">0x2968BC</literal></expr>, <expr><literal type="number">0x246BB8</literal></expr>, <expr><literal type="number">0x526D2A</literal></expr>, <expr><literal type="number">0x0E73CC</literal></expr>,
<expr><literal type="number">0x0E74C6</literal></expr>, <expr><literal type="number">0x246FC9</literal></expr>, <expr><literal type="number">0x2470C4</literal></expr>, <expr><literal type="number">0x56712E</literal></expr>, <expr><literal type="number">0x666865</literal></expr>,
<expr><literal type="number">0x007DCE</literal></expr>, <expr><literal type="number">0x537530</literal></expr>, <expr><literal type="number">0x2A72CC</literal></expr>, <expr><literal type="number">0x55762B</literal></expr>, <expr><literal type="number">0x1B77D0</literal></expr>,
<expr><literal type="number">0x1F77D8</literal></expr>, <expr><literal type="number">0x1E79CC</literal></expr>, <expr><literal type="number">0x2E74CF</literal></expr>, <expr><literal type="number">0x58782D</literal></expr>, <expr><literal type="number">0x2E75CA</literal></expr>,
<expr><literal type="number">0x59792E</literal></expr>, <expr><literal type="number">0x2279D3</literal></expr>, <expr><literal type="number">0x5A7A2F</literal></expr>, <expr><literal type="number">0x3276D2</literal></expr>, <expr><literal type="number">0x6D6F6C</literal></expr>,
<expr><literal type="number">0x1081D3</literal></expr>, <expr><literal type="number">0x137FDF</literal></expr>, <expr><literal type="number">0x237DC9</literal></expr>, <expr><literal type="number">0x5B7C30</literal></expr>, <expr><literal type="number">0x637848</literal></expr>,
<expr><literal type="number">0x2A7DD7</literal></expr>, <expr><literal type="number">0x5E7F33</literal></expr>, <expr><literal type="number">0x2C7DDE</literal></expr>, <expr><literal type="number">0x2A80CD</literal></expr>, <expr><literal type="number">0x1D82E2</literal></expr>,
<expr><literal type="number">0x1A85D1</literal></expr>, <expr><literal type="number">0x2B80D5</literal></expr>, <expr><literal type="number">0x747673</literal></expr>, <expr><literal type="number">0x2D82CF</literal></expr>, <expr><literal type="number">0x2F84D1</literal></expr>,
<expr><literal type="number">0x3381E3</literal></expr>, <expr><literal type="number">0x2289D5</literal></expr>, <expr><literal type="number">0x3285D2</literal></expr>, <expr><literal type="number">0x2986EE</literal></expr>, <expr><literal type="number">0x2189ED</literal></expr>,
<expr><literal type="number">0x4782C5</literal></expr>, <expr><literal type="number">0x3884DF</literal></expr>, <expr><literal type="number">0x4083D2</literal></expr>, <expr><literal type="number">0x3487D4</literal></expr>, <expr><literal type="number">0x278BD7</literal></expr>,
<expr><literal type="number">0x298ADD</literal></expr>, <expr><literal type="number">0x67883B</literal></expr>, <expr><literal type="number">0x7B7D7A</literal></expr>, <expr><literal type="number">0x2A8CD9</literal></expr>, <expr><literal type="number">0x6C8653</literal></expr>,
<expr><literal type="number">0x3289E2</literal></expr>, <expr><literal type="number">0x3889D7</literal></expr>, <expr><literal type="number">0x2C8DDA</literal></expr>, <expr><literal type="number">0x2E8FDB</literal></expr>, <expr><literal type="number">0x3D8CDA</literal></expr>,
<expr><literal type="number">0x2F90DC</literal></expr>, <expr><literal type="number">0x338EE8</literal></expr>, <expr><literal type="number">0x3191DD</literal></expr>, <expr><literal type="number">0x3E8EDE</literal></expr>, <expr><literal type="number">0x3392DE</literal></expr>,
<expr><literal type="number">0x838582</literal></expr>, <expr><literal type="number">0x709145</literal></expr>, <expr><literal type="number">0x3593E0</literal></expr>, <expr><literal type="number">0x4191D9</literal></expr>, <expr><literal type="number">0x3794E1</literal></expr>,
<expr><literal type="number">0x698AB1</literal></expr>, <expr><literal type="number">0x4590E5</literal></expr>, <expr><literal type="number">0x3B93E6</literal></expr>, <expr><literal type="number">0x789158</literal></expr>, <expr><literal type="number">0x4594DC</literal></expr>,
<expr><literal type="number">0x3C97E4</literal></expr>, <expr><literal type="number">0x4896DE</literal></expr>, <expr><literal type="number">0x4397EA</literal></expr>, <expr><literal type="number">0x3D9AE1</literal></expr>, <expr><literal type="number">0x8B8E8B</literal></expr>,
<expr><literal type="number">0x409CE3</literal></expr>, <expr><literal type="number">0x4B99E1</literal></expr>, <expr><literal type="number">0x439CEA</literal></expr>, <expr><literal type="number">0x539AD6</literal></expr>, <expr><literal type="number">0x5898E2</literal></expr>,
<expr><literal type="number">0x439EE5</literal></expr>, <expr><literal type="number">0x4E9BE4</literal></expr>, <expr><literal type="number">0x439FEC</literal></expr>, <expr><literal type="number">0x809C5F</literal></expr>, <expr><literal type="number">0x7C9E57</literal></expr>,
<expr><literal type="number">0x45A0E7</literal></expr>, <expr><literal type="number">0x509FE1</literal></expr>, <expr><literal type="number">0x47A1E8</literal></expr>, <expr><literal type="number">0x599EDB</literal></expr>, <expr><literal type="number">0x48A2E9</literal></expr>,
<expr><literal type="number">0x80A153</literal></expr>, <expr><literal type="number">0x4AA4EB</literal></expr>, <expr><literal type="number">0x959794</literal></expr>, <expr><literal type="number">0x5CA1DE</literal></expr>, <expr><literal type="number">0x51A3EF</literal></expr>,
<expr><literal type="number">0x59A3E3</literal></expr>, <expr><literal type="number">0x4DA6ED</literal></expr>, <expr><literal type="number">0x4FA7EF</literal></expr>, <expr><literal type="number">0x51A8F0</literal></expr>, <expr><literal type="number">0x87A763</literal></expr>,
<expr><literal type="number">0x5AA8EA</literal></expr>, <expr><literal type="number">0x53AAF2</literal></expr>, <expr><literal type="number">0x9C9E9B</literal></expr>, <expr><literal type="number">0x49AFF5</literal></expr>, <expr><literal type="number">0x56ACF5</literal></expr>,
<expr><literal type="number">0x55AFF0</literal></expr>, <expr><literal type="number">0x8CAD67</literal></expr>, <expr><literal type="number">0x64ACE8</literal></expr>, <expr><literal type="number">0x60ADF0</literal></expr>, <expr><literal type="number">0x59AFF7</literal></expr>,
<expr><literal type="number">0x6EACE2</literal></expr>, <expr><literal type="number">0x79A9E1</literal></expr>, <expr><literal type="number">0x63AFF2</literal></expr>, <expr><literal type="number">0x59B2F3</literal></expr>, <expr><literal type="number">0x90B162</literal></expr>,
<expr><literal type="number">0xA6A8A5</literal></expr>, <expr><literal type="number">0x60B5F4</literal></expr>, <expr><literal type="number">0x94B56D</literal></expr>, <expr><literal type="number">0x99BC72</literal></expr>, <expr><literal type="number">0xAEB0AD</literal></expr>,
<expr><literal type="number">0x74BBF2</literal></expr>, <expr><literal type="number">0x8DB8ED</literal></expr>, <expr><literal type="number">0x94B7E3</literal></expr>, <expr><literal type="number">0x8ABEEA</literal></expr>, <expr><literal type="number">0xA0C379</literal></expr>,
<expr><literal type="number">0x82C0F2</literal></expr>, <expr><literal type="number">0xB6B8B5</literal></expr>, <expr><literal type="number">0xA3C77C</literal></expr>, <expr><literal type="number">0xA5C97E</literal></expr>, <expr><literal type="number">0xA9CA79</literal></expr>,
<expr><literal type="number">0x8FC7F3</literal></expr>, <expr><literal type="number">0xBEC0BD</literal></expr>, <expr><literal type="number">0xA1C6E9</literal></expr>, <expr><literal type="number">0x97C9F0</literal></expr>, <expr><literal type="number">0xADD07E</literal></expr>,
<expr><literal type="number">0xC8CAC7</literal></expr>, <expr><literal type="number">0xACD1F0</literal></expr>, <expr><literal type="number">0xB6CFF0</literal></expr>, <expr><literal type="number">0xB9D5ED</literal></expr>, <expr><literal type="number">0xD1D3D0</literal></expr>,
<expr><literal type="number">0xBEDAF4</literal></expr>, <expr><literal type="number">0xD9DBD8</literal></expr>, <expr><literal type="number">0xC7E2FB</literal></expr>, <expr><literal type="number">0xCDE3F6</literal></expr>, <expr><literal type="number">0xE1E3E0</literal></expr>,
<expr><literal type="number">0xE4E9EC</literal></expr>, <expr><literal type="number">0xDBEBF9</literal></expr>, <expr><literal type="number">0xEAECE9</literal></expr>, <expr><literal type="number">0xE7EFF8</literal></expr>, <expr><literal type="number">0xF1F3F0</literal></expr>,
<expr><literal type="number">0xECF4FD</literal></expr>, <expr><literal type="number">0xF2F7FA</literal></expr>, <expr><literal type="number">0xF6F8F5</literal></expr>, <expr><literal type="number">0xF7FCFF</literal></expr>, <expr><literal type="number">0xFAFCF8</literal></expr>,
<expr><literal type="number">0xFDFFFC</literal></expr>,}</block></expr></init></decl>;</decl_stmt>


</unit>
