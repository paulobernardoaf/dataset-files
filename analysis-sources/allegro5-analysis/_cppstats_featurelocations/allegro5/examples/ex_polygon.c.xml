<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_polygon.c">





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VERTICES</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POLYGONS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIUS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>MODE_POLYLINE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MODE_POLYGON</name></decl>,
<decl><name>MODE_FILLED_POLYGON</name></decl>,
<decl><name>MODE_FILLED_HOLES</name></decl>,
<decl><name>MODE_MAX</name></decl>
}</block>;</enum>

<enum>enum <name>AddHole</name> <block>{
<decl><name>NOT_ADDING_HOLE</name></decl>,
<decl><name>NEW_HOLE</name></decl>,
<decl><name>GROW_HOLE</name></decl>
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>Vertex</name></name></type> <name>Vertex</name>;</typedef>
<struct>struct <name>Vertex</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Example</name> <block>{
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>fontbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>dbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vertex</name></type> <name><name>vertices</name><index>[<expr><name>MAX_VERTICES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vertex_polygon</name><index>[<expr><name>MAX_VERTICES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vertex_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_vertex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cur_polygon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LINE_CAP</name></type> <name>cap_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LINE_JOIN</name></type> <name>join_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>thickness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>miter_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>software</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>zoom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scroll_x</name></decl>, <decl><type ref="prev"/><name>scroll_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AddHole</name></name></type> <name>add_hole</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Example</name></name></type> <name>ex</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_polygon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cap_style</name></name> <operator>=</operator> <name>ALLEGRO_LINE_CAP_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>join_style</name></name> <operator>=</operator> <name>ALLEGRO_LINE_JOIN_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>software</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>scroll_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>scroll_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>=</operator> <name>NOT_ADDING_HOLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>/=</operator> <name><name>ex</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>/=</operator> <name><name>ex</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>-=</operator> <name><name>ex</name><operator>.</operator><name>scroll_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>-=</operator> <name><name>ex</name><operator>.</operator><name>scroll_y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hit_vertex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name>mx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name>my</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dd</name> <init>= <expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dd</name> <operator>&lt;=</operator> <name>RADIUS</name> <operator>*</operator> <name>RADIUS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lclick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>=</operator> <call><name>hit_vertex</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>&lt;</operator> <name>MAX_VERTICES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>==</operator> <name>NEW_HOLE</name> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>cur_polygon</name></name> <operator>&lt;</operator> <name>MAX_POLYGONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_polygon</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>=</operator> <name>GROW_HOLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertex_polygon</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>cur_polygon</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rclick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name> <init>= <expr><call><name>hit_vertex</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>==</operator> <name>NOT_ADDING_HOLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Vertex</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>vertex_polygon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ex</name><operator>.</operator><name>vertex_polygon</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scroll</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>scroll_x</name></name> <operator>+=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>scroll_y</name></name> <operator>+=</operator> <name>my</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>join_style_to_string</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_LINE_JOIN</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_LINE_JOIN_NONE</name></expr>:</case>
<return>return <expr><literal type="string">"NONE"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_JOIN_BEVEL</name></expr>:</case>
<return>return <expr><literal type="string">"BEVEL"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_JOIN_ROUND</name></expr>:</case>
<return>return <expr><literal type="string">"ROUND"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_JOIN_MITER</name></expr>:</case>
<return>return <expr><literal type="string">"MITER"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap_style_to_string</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_LINE_CAP</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_LINE_CAP_NONE</name></expr>:</case>
<return>return <expr><literal type="string">"NONE"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_CAP_SQUARE</name></expr>:</case>
<return>return <expr><literal type="string">"SQUARE"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_CAP_ROUND</name></expr>:</case>
<return>return <expr><literal type="string">"ROUND"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_CAP_TRIANGLE</name></expr>:</case>
<return>return <expr><literal type="string">"TRIANGLE"</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_LINE_CAP_CLOSED</name></expr>:</case>
<return>return <expr><literal type="string">"CLOSED"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>choose_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ex</name><operator>.</operator><name>software</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ex</name><operator>.</operator><name>fontbmp</name></name></expr> </then><else>: <expr><name><name>ex</name><operator>.</operator><name>font</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_vertices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>choose_font</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>vertc</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>textc</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>RADIUS</name></expr></argument>, <argument><expr><name>vertc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>RADIUS</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>RADIUS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_polygon_vertex_counts</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name><name>polygon_vertex_count</name><index>[<expr><name>MAX_POLYGONS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>polygon_vertex_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_POLYGONS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poly</name> <init>= <expr><name><name>ex</name><operator>.</operator><name>vertex_polygon</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>polygon_vertex_count</name><index>[<expr><name>poly</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>choose_font</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>textc</name> <init>= <expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>texth</name> <init>= <expr><call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>textx</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>texty</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>holec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_translate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>scroll_x</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>scroll_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_scale_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>zoom</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_POLYLINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_polyline</name><argument_list>(
<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ex</name><operator>.</operator><name>vertices</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Vertex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr></argument>,
<argument><expr><name><name>ex</name><operator>.</operator><name>join_style</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>cap_style</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_FILLED_POLYGON</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_filled_polygon</name><argument_list>(
<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ex</name><operator>.</operator><name>vertices</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_POLYGON</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_polygon</name><argument_list>(
<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ex</name><operator>.</operator><name>vertices</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr></argument>,
<argument><expr><name><name>ex</name><operator>.</operator><name>join_style</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_FILLED_HOLES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>vertex_count</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>polygon_vertex_count</name><index>[<expr><name>MAX_POLYGONS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>compute_polygon_vertex_counts</name><argument_list>(<argument><expr><name>polygon_vertex_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_filled_polygon_with_holes</name><argument_list>(
<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ex</name><operator>.</operator><name>vertices</name></name></expr></argument>, <argument><expr><name>polygon_vertex_count</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_vertices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_POLYLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"al_draw_polyline (SPACE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_FILLED_POLYGON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"al_draw_filled_polygon (SPACE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_POLYGON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"al_draw_polygon (SPACE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MODE_FILLED_HOLES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"al_draw_filled_polygon_with_holes (SPACE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Line join style: %s (J)"</literal></expr></argument>, <argument><expr><call><name>join_style_to_string</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>join_style</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Line cap style: %s (C)"</literal></expr></argument>, <argument><expr><call><name>cap_style_to_string</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>cap_style</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Line thickness: %.2f (+/-)"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Miter limit: %.2f ([/])"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Zoom: %.2f (wheel)"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%s (S)"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ex</name><operator>.</operator><name>software</name></name></expr> ?</condition><then> <expr><literal type="string">"Software rendering"</literal></expr> </then><else>: <expr><literal type="string">"Hardware rendering"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>textc</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Reset (R)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>==</operator> <name>NOT_ADDING_HOLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>holec</name> <operator>=</operator> <name>textc</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>==</operator> <name>GROW_HOLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>holec</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>holec</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>holec</name></expr></argument>, <argument><expr><name>textx</name></expr></argument>, <argument><expr><name>texty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Add Hole (%d) (H)"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>cur_polygon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>texty</name> <operator>+=</operator> <name>texth</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_vertices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex</name><operator>.</operator><name>vertex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"v%-2d= %.2f, %.2f\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_touch_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mdown</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init primitives.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_touch_input</name> <operator>=</operator> <call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>font</name></name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>font</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>dbuf</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>fontbmp</name></name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>fontbmp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>have_touch_input</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_touch_input_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_touch_input_mouse_emulation_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>fg</name></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>software</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>dbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>unichar</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&gt;=</operator> <name>MODE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ex</name><operator>.</operator><name>join_style</name></name> <operator>&gt;</operator> <name>ALLEGRO_LINE_JOIN_MITER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>join_style</name></name> <operator>=</operator> <name>ALLEGRO_LINE_JOIN_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ex</name><operator>.</operator><name>cap_style</name></name> <operator>&gt;</operator> <name>ALLEGRO_LINE_CAP_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cap_style</name></name> <operator>=</operator> <name>ALLEGRO_LINE_CAP_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name> <operator>+=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name> <operator>-=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>thickness</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>thickness</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>-=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>+=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>&gt;=</operator> <literal type="number">10.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>miter_limit</name></name> <operator>=</operator> <literal type="number">10.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>software</name></name> <operator>=</operator> <operator>!</operator><name><name>ex</name><operator>.</operator><name>software</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call><name>print_vertices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>add_hole</name></name> <operator>=</operator> <name>NEW_HOLE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lclick</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rclick</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mdown</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cur_vertex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mdown</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mdown</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drag</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>zoom</name></name> <operator>*=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
