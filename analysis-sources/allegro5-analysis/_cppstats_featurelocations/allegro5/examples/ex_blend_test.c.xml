<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_blend_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>test_only_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>test_display</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_color</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%.2f, %.2f, %.2f, %.2f"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_COLOR</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>src_col</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>dst_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>dst_bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>dst_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_bmp</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>dst_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>dst_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>operation</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>src_bmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_bmp</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>src_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>dst_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_separate_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>src_a</name></expr></argument>, <argument><expr><name>dst_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>src_bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>src_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>operation</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_separate_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>src_a</name></expr></argument>, <argument><expr><name>dst_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_pixel</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>operation</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_separate_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>src_a</name></expr></argument>, <argument><expr><name>dst_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>dst_bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test_display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>dst_bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>dst_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"test id: %d\n"</literal></expr></argument>, <argument><expr><name>test_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"source : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">" %s format=%d mode=%d alpha=%d\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>operation</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"bitmap"</literal></expr> </then><else>: <expr><ternary><condition><expr><name>operation</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"pixel"</literal></expr> </then><else>: <expr><literal type="string">"prim"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"destination: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color</name><argument_list>(<argument><expr><name>dst_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">" format=%d mode=%d alpha=%d\n"</literal></expr></argument>,
<argument><expr><name>dst_format</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"result : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>same_color</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r2</name></decl>, <decl><type ref="prev"/><name>g2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dr</name></decl>, <decl><type ref="prev"/><name>dg</name></decl>, <decl><type ref="prev"/><name>db</name></decl>, <decl><type ref="prev"/><name>da</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dr</name> <operator>=</operator> <name>r1</name> <operator>-</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dg</name> <operator>=</operator> <name>g1</name> <operator>-</operator> <name>g2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <name>b1</name> <operator>-</operator> <name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>da</name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>a2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>dr</name> <operator>*</operator> <name>dr</name> <operator>+</operator> <name>dg</name> <operator>*</operator> <name>dg</name> <operator>+</operator> <name>db</name> <operator>*</operator> <name>db</name> <operator>+</operator> <name>da</name> <operator>*</operator> <name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.01</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_factor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>operation</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_ZERO</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_ONE</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>ALLEGRO_ALPHA</name></expr>:</case> <return>return <expr><name>alpha</name></expr>;</return>
<case>case <expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>:</case> <return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>has_alpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_RGB_888</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>ALLEGRO_PIXEL_FORMAT_BGR_888</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &gt; 1 ? 1 : x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ALLEGRO_COLOR</name></type> <name>reference_implementation</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>src_col</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>dst_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_alpha</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sr</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dr</name></decl>, <decl><type ref="prev"/><name>dg</name></decl>, <decl><type ref="prev"/><name>db</name></decl>, <decl><type ref="prev"/><name>da</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name>asrc</name></decl>, <decl><type ref="prev"/><name>adst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unmap_rgba_f</name><argument_list>(<argument><expr><name>dst_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>operation</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_alpha</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>sg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>sa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>get_factor</name><argument_list>(<argument><expr><name>src_mode</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>get_factor</name><argument_list>(<argument><expr><name>dst_mode</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>asrc</name> <operator>=</operator> <call><name>get_factor</name><argument_list>(<argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adst</name> <operator>=</operator> <call><name>get_factor</name><argument_list>(<argument><expr><name>dst_alpha</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>src</name> <operator>+</operator> <name>dr</name> <operator>*</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>*</operator> <name>src</name> <operator>+</operator> <name>dg</name> <operator>*</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>src</name> <operator>+</operator> <name>db</name> <operator>*</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>asrc</name> <operator>+</operator> <name>da</name> <operator>*</operator> <name>adst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_alpha</name><argument_list>(<argument><expr><name>dst_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test2</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>src_col</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>dst_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_alpha</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>reference</name></decl>, <decl><type ref="prev"/><name>result</name></decl>, <decl><type ref="prev"/><name>from_display</name></decl>;</decl_stmt>
<expr_stmt><expr><name>test_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test_only_index</name> <operator>&amp;&amp;</operator> <name>test_index</name> <operator>!=</operator> <name>test_only_index</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reference</name> <operator>=</operator> <call><name>reference_implementation</name><argument_list>(
<argument><expr><name>src_col</name></expr></argument>, <argument><expr><name>dst_col</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>dst_format</name></expr></argument>,
<argument><expr><name>src_mode</name></expr></argument>, <argument><expr><name>dst_mode</name></expr></argument>, <argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>dst_alpha</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>test</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>, <argument><expr><name>dst_col</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>,
<argument><expr><name>dst_format</name></expr></argument>, <argument><expr><name>src_mode</name></expr></argument>, <argument><expr><name>dst_mode</name></expr></argument>, <argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>dst_alpha</name></expr></argument>,
<argument><expr><name>operation</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_color</name><argument_list>(<argument><expr><name>reference</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>, <argument><expr><name>dst_col</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>,
<argument><expr><name>dst_format</name></expr></argument>, <argument><expr><name>src_mode</name></expr></argument>, <argument><expr><name>dst_mode</name></expr></argument>, <argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>dst_alpha</name></expr></argument>,
<argument><expr><name>operation</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"expected : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color</name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">" OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>test_display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_format</name> <operator>=</operator> <call><name>al_get_display_format</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from_display</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reference</name> <operator>=</operator> <call><name>reference_implementation</name><argument_list>(
<argument><expr><name>src_col</name></expr></argument>, <argument><expr><name>dst_col</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>dst_format</name></expr></argument>,
<argument><expr><name>src_mode</name></expr></argument>, <argument><expr><name>dst_mode</name></expr></argument>, <argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>dst_alpha</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_color</name><argument_list>(<argument><expr><name>reference</name></expr></argument>, <argument><expr><name>from_display</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>, <argument><expr><name>dst_col</name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>,
<argument><expr><name>dst_format</name></expr></argument>, <argument><expr><name>src_mode</name></expr></argument>, <argument><expr><name>dst_mode</name></expr></argument>, <argument><expr><name>src_alpha</name></expr></argument>, <argument><expr><name>dst_alpha</name></expr></argument>,
<argument><expr><name>operation</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"displayed : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color</name><argument_list>(<argument><expr><name>from_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"expected : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color</name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"(FAILED on display)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test1</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>src_col</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>dst_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>smodes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>ALLEGRO_ALPHA</name></expr>, <expr><name>ALLEGRO_ZERO</name></expr>, <expr><name>ALLEGRO_ONE</name></expr>,
<expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dmodes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>, <expr><name>ALLEGRO_ZERO</name></expr>, <expr><name>ALLEGRO_ONE</name></expr>,
<expr><name>ALLEGRO_ALPHA</name></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_test2</name><argument_list>(<argument><expr><name>src_col</name></expr></argument>, <argument><expr><name>dst_col</name></expr></argument>,
<argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>dst_format</name></expr></argument>,
<argument><expr><name><name>smodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dmodes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>smodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dmodes</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,
<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>al_map_rgba_f</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name><name>src_colors</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name><name>dst_colors</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>src_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr>,
<expr><name>ALLEGRO_PIXEL_FORMAT_BGR_888</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dst_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr>,
<expr><name>ALLEGRO_PIXEL_FORMAT_BGR_888</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>src_colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_colors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_display</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>test_only_index</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not initialise Allegro\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>test_display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to create display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_test1</name><argument_list>(
<argument><expr><name><name>src_colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst_colors</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src_formats</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst_formats</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\nDone\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test_only_index</name> <operator>&amp;&amp;</operator> <name>test_display</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
