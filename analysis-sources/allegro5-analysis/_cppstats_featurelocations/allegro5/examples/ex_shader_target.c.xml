<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_shader_target.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MAX_REGION</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>tints</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>,
<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>choose_shader_source</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SHADER_PLATFORM</name></type> <name>platform</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>vsource</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>psource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>platform</name> <operator>==</operator> <name>ALLEGRO_SHADER_HLSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vsource</name> <operator>=</operator> <literal type="string">"data/ex_shader_vertex.hlsl"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psource</name> <operator>=</operator> <literal type="string">"data/ex_shader_pixel.hlsl"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>platform</name> <operator>==</operator> <name>ALLEGRO_SHADER_GLSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vsource</name> <operator>=</operator> <literal type="string">"data/ex_shader_vertex.glsl"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psource</name> <operator>=</operator> <literal type="string">"data/ex_shader_pixel.glsl"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vsource</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psource</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>make_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>al_create_sub_bitmap</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>sub</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>backbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>region</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SHADER</name> <modifier>*</modifier></type><name>shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not create display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/mysha.pcx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not load image.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name>al_create_shader</name><argument_list>(<argument><expr><name>ALLEGRO_SHADER_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not create shader.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>choose_shader_source</name><argument_list>(<argument><expr><call><name>al_get_shader_platform</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsource</name><operator>||</operator> <operator>!</operator><name>psource</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not load source files.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_shader_source_file</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>ALLEGRO_VERTEX_SHADER</name></expr></argument>, <argument><expr><name>vsource</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_attach_shader_source_file failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>al_get_shader_log</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_attach_shader_source_file</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_SHADER</name></expr></argument>, <argument><expr><name>psource</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_attach_shader_source_file failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>al_get_shader_log</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_build_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"al_build_shader failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>al_get_shader_log</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>backbuffer</name> <operator>=</operator> <call><name>al_get_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>make_region</name><argument_list>(<argument><expr><name>backbuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>make_region</name><argument_list>(<argument><expr><name>backbuffer</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>make_region</name><argument_list>(<argument><expr><name>backbuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>make_region</name><argument_list>(<argument><expr><name>backbuffer</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>region</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>region</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"make_region failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_identity_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_scale_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_translate_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">160</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_KEYBOARD_STATE</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_get_keyboard_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_key_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>ALLEGRO_KEY_ESCAPE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_REGION</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_shader_float_vector</name><argument_list>(<argument><expr><literal type="string">"tint"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tints</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_tinted_bitmap</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">320</literal><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">240</literal><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_shader</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_shader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
