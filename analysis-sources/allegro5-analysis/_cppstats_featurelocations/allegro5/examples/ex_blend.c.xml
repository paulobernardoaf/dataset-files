<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_blend.c">


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>


<struct>struct <name>Example</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>example</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>offscreen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>memory</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>myfont</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>image</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>BUTTONS_X</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>FPS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>last_second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frames_accum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fps</name></decl>;</decl_stmt>
}</block> <decl><name>ex</name></decl>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vertical</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <name>message</name></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><call><name>al_ref_cstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ui</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>al_ustr_length</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR_INFO</name></type> <name>letter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_ustr</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name> <operator>+</operator> <name>h</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>al_ref_ustr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>letter</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_ustr_offset</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>create_example_bitmap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>locked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>locked</name> <operator>=</operator> <call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>locked</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">50</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>j</name> <operator>-</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rc</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>r</name> <operator>/</operator> <literal type="number">50.0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>rc</name> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>rc</name> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>locked</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name><name>test</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>blend_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ZERO"</literal></expr>, <expr><literal type="string">"ONE"</literal></expr>, <expr><literal type="string">"ALPHA"</literal></expr>, <expr><literal type="string">"INVERSE"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>blend_vnames</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ZERO"</literal></expr>, <expr><literal type="string">"ONE"</literal></expr>, <expr><literal type="string">"ALPHA"</literal></expr>, <expr><literal type="string">"INVER"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>blend_modes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ALLEGRO_ZERO</name></expr>, <expr><name>ALLEGRO_ONE</name></expr>, <expr><name>ALLEGRO_ALPHA</name></expr>,
<expr><name>ALLEGRO_INVERSE_ALPHA</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>test</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>test</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"D E S T I N A T I O N (%0.2f fps)"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>fps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"S O U R C E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>blend_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>blend_vnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>offscreen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name><name>blend_modes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>blend_modes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>example</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>image</name></name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">110</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">110</literal></expr></argument>,
<argument><expr><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">110</literal> <operator>+</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">110</literal> <operator>+</operator> <literal type="number">100</literal></expr></argument>,
<argument><expr><name><name>test</name><index>[<expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>offscreen</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap_region</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>memory</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ex.image == x) ? "*" : " ")</cpp:value></cpp:define>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"What to draw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s Picture"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s Rec1 (1/1/1/1)"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s Rec2 (1/1/1/.5)"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s Rec3 (1/1/1/.25)"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s Rec4 (1/0/0/.75)"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s Rec5 (0/0/0/0)"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ex.mode == x) ? "*" : " ")</cpp:value></cpp:define>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"Where to draw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s screen"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s offscreen1"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s offscreen2"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s offscreen3"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s offscreen4"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s offscreen5"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s memory1"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s memory2"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s memory3"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">19</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s memory4"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"%s memory5"</literal></expr></argument>, <argument><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IS</name></cpp:undef>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name><name>ex</name><operator>.</operator><name>last_second</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>fps</name></name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>frames_accum</name></name> <operator>/</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>last_second</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>frames_accum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>last_second</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>frames_accum</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_draw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>need_draw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<return>return;</return>


<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>
<expr_stmt><expr><name>need_draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><name>y</name> <operator>/</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>image</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ex</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>BUTTONS_X</name></name> <operator>=</operator> <literal type="number">40</literal> <operator>+</operator> <literal type="number">110</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>FPS</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/font.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"data/font.tga not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>example</name></name> <operator>=</operator> <call><name>create_example_bitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>offscreen</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_MEMORY_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>ex</name><operator>.</operator><name>FPS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_is_touch_input_installed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>,
<argument><expr><call><name>al_get_touch_input_mouse_emulation_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
