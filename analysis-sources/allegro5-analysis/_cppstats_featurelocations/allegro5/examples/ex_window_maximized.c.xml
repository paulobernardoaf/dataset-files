<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_window_maximized.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_native_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_ttf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_W</name></cpp:macro> <cpp:value>640</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_H</name></cpp:macro> <cpp:value>480</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>draw_information</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_constraints</name></decl>;</decl_stmt>


<function><type><specifier>extern</specifier> <name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>use_constraints</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init primitives addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init image addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init font addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init_native_dialog_addon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init native dialog addon.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWED</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ALLEGRO_GTK_TOPLEVEL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>|</operator> <name>ALLEGRO_RESIZABLE</name> <operator>|</operator> <name>ALLEGRO_MAXIMIZED</name>
<operator>|</operator> <name>ALLEGRO_GENERATE_EXPOSE_EVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>DISPLAY_W</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>DISPLAY_H</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>al_set_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>DISPLAY_W</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DISPLAY_H</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to set window constraints.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_apply_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>use_constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error installing keyboard.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color_1</name> <init>= <expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color_2</name> <init>= <expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><operator>&amp;</operator><name>color_1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color_text</name> <init>= <expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_information</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>color_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_SPACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <operator>&amp;</operator><name>color_1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>DISPLAY_W</name></expr></argument>, <argument><expr><name>DISPLAY_H</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to set window constraints.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>&amp;</operator><name>color_2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_set_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>,
<argument><expr><name>DISPLAY_W</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DISPLAY_H</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Unable to set window constraints.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>&amp;</operator><name>color_1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_apply_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>use_constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_constraints</name> <operator>=</operator> <operator>!</operator><name>use_constraints</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_apply_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>use_constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>al_acknowledge_resize</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name></expr>:</case>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch> 
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_information</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_w</name></decl>, <decl><type ref="prev"/><name>min_h</name></decl>, <decl><type ref="prev"/><name>max_w</name></decl>, <decl><type ref="prev"/><name>max_h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Hotkeys:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"enabled/disable constraints: ENTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"change constraints: SPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Resolution: %dx%d"</literal></expr></argument>,
<argument><expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_window_constraints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Constraints: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>use_constraints</name></expr> ?</condition><then> <expr><literal type="string">"Enabled"</literal></expr> </then><else>: <expr><literal type="string">"Disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"min_w = %d min_h = %d"</literal></expr></argument>,
<argument><expr><name>min_w</name></expr></argument>, <argument><expr><name>min_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"max_w = %d max_h = %d"</literal></expr></argument>,
<argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>max_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



</unit>
