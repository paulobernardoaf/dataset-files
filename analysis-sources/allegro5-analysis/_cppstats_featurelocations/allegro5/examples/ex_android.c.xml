<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_android.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_android.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"main"</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TOUCH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>touch</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
}</block> <decl><name><name>touch</name><index>[<expr><name>MAX_TOUCH</name></expr>]</index></name></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_standard_path</name><parameter_list>(<parameter><type><name>std</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ALLEGRO_PATH *path = al_get_standard_path(std); ALLEGRO_DEBUG(#std ": %s", al_path_cstr(path, '/')); } while (0)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type> <name>print_standard_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_RESOURCES_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_TEMP_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DATA_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_HOME_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_SETTINGS_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DOCUMENTS_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_touches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TOUCH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>touch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>down</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(
<argument><expr><name><name>touch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><literal type="number">40</literal></expr></argument>, <argument><expr><name><name>touch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><literal type="number">40</literal></expr></argument>,
<argument><expr><name><name>touch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">40</literal></expr></argument>, <argument><expr><name><name>touch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">40</literal></expr></argument>,
<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">100</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">40</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">40</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>dpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>image2</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init allegro!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init primitives"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init image addon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init touch input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_touch_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"init keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"creating display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dpy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to create display!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_standard_paths</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>al_android_set_apk_file_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/alexlogo.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"failed to load alexlogo.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fin</name> <init>= <expr><call><name>al_fopen</name><argument_list>(<argument><expr><literal type="string">"data/alexlogo.png"</literal></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_standard_file_interface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_USER_DATA_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_path_filename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"alexlogo.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FILE</name> <modifier>*</modifier></type><name>fout</name> <init>= <expr><call><name>al_fopen</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>al_feof</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>al_fread</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_fwrite</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_fclose</name><argument_list>(<argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>image2</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><call><name>al_path_cstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>image2</name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>al_convert_mask_to_alpha</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>image2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_convert_mask_to_alpha</name><argument_list>(<argument><expr><name>image2</name></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_touch_input_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>draw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>running</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_EVENT_TOUCH_BEGIN</name></expr>:</case>

<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_END</name></expr>:</case>

<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>down</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_MOVE</name></expr>:</case>

<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>touch</name><index>[<expr><name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>touch</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TOUCH_CANCEL</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_KEY_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_BACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"back key pressed, exit!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>running</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%i key pressed"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>
<expr_stmt><expr><name>draw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"tick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"display close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>running</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_HALT_DRAWING</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"halt drawing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_stop_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"after set target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>draw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_acknowledge_drawing_halt</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"resume drawing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_acknowledge_drawing_resume</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done waiting for surface recreated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"display resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_acknowledge_resize</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>draw</name> <operator>&amp;&amp;</operator> <call><name>al_event_queue_is_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>image</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>image</name></expr></argument>,
<argument><expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>image2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>image2</name></expr></argument>,
<argument><expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_touches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
