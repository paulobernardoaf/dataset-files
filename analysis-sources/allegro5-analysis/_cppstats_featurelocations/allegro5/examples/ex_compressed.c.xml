<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_compressed.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>BITMAP_TYPE</name> <block>{
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>bmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>decomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>lock_clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_PIXEL_FORMAT</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>BITMAP_TYPE</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bkg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_bitmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>compare</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_BITMAPS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><name>BITMAP_TYPE</name></type> <name><name>bitmaps</name><index>[<expr><name>NUM_BITMAPS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr>, <expr><literal type="string">"Uncompressed"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1</name></expr>, <expr><literal type="string">"DXT1"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3</name></expr>, <expr><literal type="string">"DXT3"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5</name></expr>, <expr><literal type="string">"DXT5"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"data/mysha.pcx"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_set_new_display_adapter</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>NUM_BITMAPS</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"%s not found or failed to load\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%s load time: %f sec\n"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t1</name> <operator>-</operator> <name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>clone</name> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>clone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't clone %s\n"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%s clone time: %f sec\n"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t1</name> <operator>-</operator> <name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>decomp</name> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>decomp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't decompress %s\n"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%s decompress time: %f sec\n"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t1</name> <operator>-</operator> <name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>lock_clone</name> <operator>=</operator> <call><name>al_clone_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>lock_clone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Couldn't clone %s\n"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">128</literal>
<operator>&amp;&amp;</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name> <init>= <expr><call><name>al_get_bitmap_format</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_width</name> <init>= <expr><call><name>al_get_pixel_block_width</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_height</name> <init>= <expr><call><name>al_get_pixel_block_height</name><argument_list>(<argument><expr><name>bitmap_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>al_lock_bitmap_region_blocked</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>lock_clone</name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>/</operator> <name>block_width</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>/</operator> <name>block_height</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>/</operator> <name>block_width</name></expr></argument>,
<argument><expr><literal type="number">64</literal> <operator>/</operator> <name>block_height</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>lock_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bkg</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/bkg.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bkg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"data/bkg.png not found or failed to load\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_format</name><argument_list>(<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<goto>goto <name>EXIT</name>;</goto>
<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_KEY_LEFT</name></expr>:</case>
<expr_stmt><expr><name>cur_bitmap</name> <operator>=</operator> <operator>(</operator><name>cur_bitmap</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>NUM_BITMAPS</name><operator>)</operator> <operator>%</operator> <name>NUM_BITMAPS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_KEY_RIGHT</name></expr>:</case>
<expr_stmt><expr><name>cur_bitmap</name> <operator>=</operator> <operator>(</operator><name>cur_bitmap</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>NUM_BITMAPS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_KEY_SPACE</name></expr>:</case>
<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_KEY_ESCAPE</name></expr>:</case>
<goto>goto <name>EXIT</name>;</goto>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>ALLEGRO_EVENT_KEY_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_SPACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>cur_bitmap</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>cur_bitmap</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><name>compare</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>cur_bitmap</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name>bkg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_LEFT</name></expr></argument>,
<argument><expr><literal type="string">"SPACE to compare. Arrows to switch. Format: %s"</literal></expr></argument>, <argument><expr><name><name>bitmaps</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>clone</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>decomp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>+</operator> <name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>lock_clone</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>+</operator> <name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<label><name>EXIT</name>:</label>

<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name>bkg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>NUM_BITMAPS</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
