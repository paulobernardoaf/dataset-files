<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_timer.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>


<struct>struct <name>Example</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>myfont</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>FPS</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>this_time</name></decl>, <decl><type ref="prev"/><name>prev_time</name></decl>, <decl><type ref="prev"/><name>accum_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>min_diff</name></decl>, <decl><type ref="prev"/><name>max_diff</name></decl>, <decl><type ref="prev"/><name>second_spread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>timer_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>timer_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>
}</block> <decl><name>ex</name></decl>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>FPS</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>first_tick</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <name>message</name></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr></argument>, <argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cur_time</name></decl>, <decl><type ref="prev"/><name>event_overhead</name></decl>, <decl><type ref="prev"/><name>total_error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>event_overhead</name> <operator>=</operator> <name>cur_time</name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_error</name> <operator>=</operator> <name>event_overhead</name> <operator>+</operator> <name><name>ex</name><operator>.</operator><name>timer_error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>myfont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%.9f target for %.0f Hz Timer"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>ex</name><operator>.</operator><name>FPS</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>FPS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f now"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>this_time</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>prev_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f accum over one second"</literal></expr></argument>,
<argument><expr><name><name>ex</name><operator>.</operator><name>accum_time</name></name> <operator>/</operator> <name><name>ex</name><operator>.</operator><name>timer_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f min"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>min_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f max"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>max_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">3.5</literal> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f (max - min)"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>second_spread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">4.5</literal> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f (timer error)"</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>timer_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">5.5</literal> <operator>*</operator> <name>h</name></expr></argument> ,<argument><expr><literal type="string">"%.9f (event overhead)"</literal></expr></argument>, <argument><expr><name>event_overhead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">6.5</literal> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="string">"%.9f (total error)"</literal></expr></argument> , <argument><expr><name>total_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><call><name>al_map_rgb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tick</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMER_EVENT</name><modifier>*</modifier></type> <name>timer_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>this_time</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>first_tick</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>first_tick</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>.</operator><name>this_time</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>second</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>this_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>accum_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>timer_events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>second_spread</name></name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>max_diff</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>min_diff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>max_diff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>min_diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>this_time</name></name> <operator>-</operator> <name><name>ex</name><operator>.</operator><name>prev_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&lt;</operator> <name><name>ex</name><operator>.</operator><name>min_diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>min_diff</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;</operator> <name><name>ex</name><operator>.</operator><name>max_diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>max_diff</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>accum_time</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>timer_events</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>timer_error</name></name> <operator>=</operator> <name><name>timer_event</name><operator>-&gt;</operator><name>error</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>timer_event</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>draw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <literal type="number">640</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>prev_time</name></name> <operator>=</operator> <name><name>ex</name><operator>.</operator><name>this_time</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<return>return;</return>


<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>
<expr_stmt><expr><call><name>tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not create display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.000</literal> <operator>/</operator> <name><name>ex</name><operator>.</operator><name>FPS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name><name>ex</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
