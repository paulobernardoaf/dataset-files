<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_threads.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THREADS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BACKGROUNDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SQUARES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Background</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>rmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>gmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bmax</name></decl>;</decl_stmt>
}</block></struct></type> <name>Background</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Square</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>cx</name></decl>, <name>cy</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dx</name></decl>, <name>dy</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>, <name>dsize</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rot</name></decl>, <name>drot</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>life</name></decl>, <name>dlife</name>;</decl_stmt>
}</block></struct></type> <name>Square</name>;</typedef>


<function><type><specifier>static</specifier> <name>float</name></type> <name>rand01</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">10000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10000.0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>float</name></type> <name>rand11</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">10000</literal> <operator>+</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">20000</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">20000.0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_square</name><parameter_list>(<parameter><decl><type><name>Square</name> <modifier>*</modifier></type><name>sq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>dx</name></name> <operator>=</operator> <literal type="number">3.0</literal> <operator>*</operator> <call><name>rand11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>dy</name></name> <operator>=</operator> <literal type="number">3.0</literal> <operator>*</operator> <call><name>rand11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>dsize</name></name> <operator>=</operator> <call><name>rand11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>rot</name></name> <operator>=</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <call><name>rand01</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>drot</name></name> <operator>=</operator> <call><name>rand11</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>life</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>dlife</name></name> <operator>=</operator> <operator>(</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">100.0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">30.0</literal><operator>)</operator> <operator>*</operator> <call><name>rand01</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>animate_square</name><parameter_list>(<parameter><decl><type><name>Square</name> <modifier>*</modifier></type><name>sq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>cx</name></name> <operator>+=</operator> <name><name>sq</name><operator>-&gt;</operator><name>dx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>cy</name></name> <operator>+=</operator> <name><name>sq</name><operator>-&gt;</operator><name>dy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>sq</name><operator>-&gt;</operator><name>dsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>rot</name></name> <operator>+=</operator> <name><name>sq</name><operator>-&gt;</operator><name>drot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sq</name><operator>-&gt;</operator><name>life</name></name> <operator>+=</operator> <name><name>sq</name><operator>-&gt;</operator><name>dlife</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sq</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1.0</literal> <operator>||</operator> <name><name>sq</name><operator>-&gt;</operator><name>life</name></name> <operator>&gt;</operator> <name>ALLEGRO_PI</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gen_square</name><argument_list>(<argument><expr><name>sq</name></expr></argument>, <argument><expr><call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_square</name><parameter_list>(<parameter><decl><type><name>Square</name> <modifier>*</modifier></type><name>sq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TRANSFORM</name></type> <name>trans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>tint</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>al_build_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>, <argument><expr><name><name>sq</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>sq</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name><name>sq</name><operator>-&gt;</operator><name>rot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_use_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>sq</name><operator>-&gt;</operator><name>life</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ALPHA</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tint</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>sq</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_filled_rounded_rectangle</name><argument_list>(<argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">1.1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_rounded_rectangle</name><argument_list>(<argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>thread_func</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INITIAL_WIDTH</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INITIAL_HEIGHT</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Background</name> <modifier>*</modifier></type><name>background</name> <init>= <expr><operator>(</operator><name>Background</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Square</name></type> <name><name>squares</name><index>[<expr><name>MAX_SQUARES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_RESIZABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>INITIAL_WIDTH</name></expr></argument>, <argument><expr><name>INITIAL_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Quit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>queue</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Quit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>Quit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SQUARES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gen_square</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squares</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INITIAL_WIDTH</name></expr></argument>, <argument><expr><name>INITIAL_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>redraw</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><literal type="number">0.7</literal> <operator>+</operator> <literal type="number">0.3</literal> <operator>*</operator> <operator>(</operator><call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name> <init>= <expr><call><name>al_map_rgb_f</name><argument_list>(
<argument><expr><name><name>background</name><operator>-&gt;</operator><name>rmax</name></name> <operator>*</operator> <name>r</name></expr></argument>,
<argument><expr><name><name>background</name><operator>-&gt;</operator><name>gmax</name></name> <operator>*</operator> <name>r</name></expr></argument>,
<argument><expr><name><name>background</name><operator>-&gt;</operator><name>bmax</name></name> <operator>*</operator> <name>r</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_store_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>ALLEGRO_STATE_BLENDER</name> <operator>|</operator> <name>ALLEGRO_STATE_TRANSFORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SQUARES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>draw_square</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squares</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_restore_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SQUARES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>animate_square</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squares</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>theta</name> <operator>+=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name>
<operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_acknowledge_resize</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<label><name>Quit</name>:</label>

<if_stmt><if>if <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name><name>thread</name><index>[<expr><name>MAX_THREADS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Background</name></type> <name><name>background</name><index>[<expr><name>MAX_BACKGROUNDS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">0.5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">0.5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_threads</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_threads</name> <operator>&gt;</operator> <name>MAX_THREADS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_threads</name> <operator>=</operator> <name>MAX_THREADS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>num_threads</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_threads</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>num_threads</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>thread_func</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>background</name><index>[<expr><name>i</name> <operator>%</operator> <name>MAX_BACKGROUNDS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_thread</name><argument_list>(<argument><expr><name><name>thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



</unit>
