<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_inject_events.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name></type> <name>fake_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>fake_keydown_event</name></decl>, <decl><type ref="prev"/><name>fake_joystick_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_init_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fake_joystick_event</name><operator>.</operator><name>any</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fake_joystick_event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fake_joystick_event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fake_joystick_event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_joystick_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fake_keydown_event</name><operator>.</operator><name>any</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fake_keydown_event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>ALLEGRO_KEY_ENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_emit_user_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_keydown_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>!</operator><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_EVENT_KEY_DOWN</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>source</name></name> <operator>==</operator> <operator>&amp;</operator><name>fake_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Got keydown: %d\n"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_EVENT_JOYSTICK_AXIS</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_ASSERT</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>source</name></name> <operator>==</operator> <operator>&amp;</operator><name>fake_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Got joystick axis: stick=%d axis=%d pos=%f\n"</literal></expr></argument>,
<argument><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>stick</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>axis</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>joystick</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_user_event_source</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_event_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
