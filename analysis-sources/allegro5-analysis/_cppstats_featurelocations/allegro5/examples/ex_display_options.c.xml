<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_display_options.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>white</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modes_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>status</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>old_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>visible_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_visible_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>selected_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>selected_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>selected_option</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#x, ALLEGRO_##x, 0, m, 0}</cpp:value></cpp:define>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>max_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>required</name></decl>;</decl_stmt>
}</block> <decl><name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>X</name><argument_list>(<argument><expr><name>COLOR_SIZE</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>RED_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>GREEN_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>BLUE_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>ALPHA_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>RED_SHIFT</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>GREEN_SHIFT</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>BLUE_SHIFT</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>ALPHA_SHIFT</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>DEPTH_SIZE</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>FLOAT_COLOR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>FLOAT_DEPTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>STENCIL_SIZE</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SAMPLES</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>RENDER_METHOD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SINGLE_BUFFER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SWAP_METHOD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>VSYNC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>COMPATIBLE_DISPLAY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>MAX_BITMAP_SIZE</name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SUPPORT_NPOT_BITMAP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>CAN_DRAW_INTO_BITMAP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SUPPORT_SEPARATE_ALPHA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>flag_names</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (1 &lt;&lt; i == ALLEGRO_##f) flag_names[i] = #f;</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>X</name><argument_list>(<argument>WINDOWED</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>FULLSCREEN</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>OPENGL</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>RESIZABLE</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>FRAMELESS</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>GENERATE_EXPOSE_EVENTS</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>FULLSCREEN_WINDOW</argument>)</argument_list></macro>
<macro><name>X</name><argument_list>(<argument>MINIMIZED</argument>)</argument_list></macro>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating builtin font\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>font_h</name> <operator>=</operator> <call><name>al_get_font_line_height</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_options</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>options_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dw</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dh</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>modes_count</name> <operator>=</operator> <call><name>al_get_num_display_modes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Create new display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>font_h</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first_visible_row</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modes_count</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name>i</name> <operator>&lt;</operator> <name>first_visible_row</name> <operator>+</operator> <name>visible_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_MODE</name></type> <name>mode</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_get_display_mode</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>refresh_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>refresh_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>selected_mode</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">300</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>font_h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_blender</name><argument_list>(<argument><expr><name>ALLEGRO_ADD</name></expr></argument>, <argument><expr><name>ALLEGRO_ONE</name></expr></argument>, <argument><expr><name>ALLEGRO_INVERSE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>first_visible_row</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>i</name> <operator>==</operator> <name>first_visible_row</name> <operator>+</operator> <name>visible_rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>i</name> <operator>&lt;</operator> <name>modes_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s %d x %d (fmt: %x, %d Hz)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"Fullscreen"</literal></expr> </then><else>: <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"Windowed"</literal></expr> </then><else>: <expr><literal type="string">"FS Window"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name><name>mode</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>.</operator><name>refresh_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>font_h</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>dw</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Options for new display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>dw</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>, <argument><expr><literal type="string">"(current display)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>font_h</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>selected_option</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">300</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>font_h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>required</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_REQUIRE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ALLEGRO_SUGGEST</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ALLEGRO_DONTCARE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s: %d (%s)"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>required</name> <operator>==</operator> <name>ALLEGRO_REQUIRE</name></expr> ?</condition><then> <expr><literal type="string">"required"</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>required</name> <operator>==</operator> <name>ALLEGRO_SUGGEST</name></expr> ?</condition><then> <expr><literal type="string">"suggested"</literal></expr> </then><else>:
<expr><literal type="string">"ignored"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>dw</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
<argument><expr><call><name>al_get_display_option</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>font_h</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>dh</name> <operator>-</operator> <name>font_h</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>font_h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"PageUp/Down: modify values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>font_h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Return: set mode or require option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>font_h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Cursor keys: change selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>font_h</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flag_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>old_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>flag_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>al_get_text_width</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>flag_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_text</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>dw</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dh</name> <operator>-</operator> <name>font_h</name></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_CENTRE</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_ui</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>visible_rows</name> <operator>=</operator> <name>h</name> <operator>/</operator> <name>font_h</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>white</name> <operator>=</operator> <call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not create display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>load_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modes_count</name> <operator>=</operator> <call><name>al_get_num_display_modes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options_count</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_ui</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_options</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dw</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><operator>(</operator><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>/</operator> <name>font_h</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name> <init>= <expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>/</operator> <operator>(</operator><name>dw</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;=</operator> <name>modes_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selected_column</name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name>selected_mode</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>options_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selected_column</name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name>selected_option</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>al_get_display_flags</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_flags</name> <operator>|=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_CHAR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>change</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_LEFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selected_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_RIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selected_column</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_UP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selected_mode</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selected_option</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selected_mode</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selected_option</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ENTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_MODE</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>new_display</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_mode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_get_display_mode</name><argument_list>(<argument><expr><name>selected_mode</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_FULLSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>selected_mode</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_display_flags</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>font</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(
<argument><expr><name><name>mode</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <name>new_display</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_backbuffer</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,
<argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_ui</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"Display creation succeeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"Display creation failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>load_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_column</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>required</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>required</name> <operator>%=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(
<argument><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>option</name></expr></argument>,
<argument><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>,
<argument><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_PGUP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_PGDN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>change</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>change</name> <operator>&amp;&amp;</operator> <name>selected_column</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>+=</operator> <name>change</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;</operator>
<name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>max_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator>
<name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>max_value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>al_set_new_display_option</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>option</name></expr></argument>,
<argument><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>,
<argument><expr><name><name>options</name><index>[<expr><name>selected_option</name></expr>]</index></name><operator>.</operator><name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selected_mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selected_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_mode</name> <operator>&gt;</operator> <name>modes_count</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>selected_mode</name> <operator>=</operator> <name>modes_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_option</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selected_option</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_option</name> <operator>&gt;=</operator> <name>options_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>selected_option</name> <operator>=</operator> <name>options_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_mode</name> <operator>&lt;</operator> <name>first_visible_row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_visible_row</name> <operator>=</operator> <name>selected_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selected_mode</name> <operator>&gt;</operator> <name>first_visible_row</name> <operator>+</operator> <name>visible_rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_visible_row</name> <operator>=</operator> <name>selected_mode</name> <operator>-</operator> <name>visible_rows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_options</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
