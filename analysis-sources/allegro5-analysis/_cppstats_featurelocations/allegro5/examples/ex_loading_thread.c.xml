<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_loading_thread.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_font.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_primitives.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>load_total</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>load_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bitmaps</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>loading_thread</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/fixed_font.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>load_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>load_count</name> <operator>&lt;</operator> <name>load_total</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>al_map_rgb</name><argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>a</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_thread_should_stop</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/mysha.pcx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bitmap %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>load_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_set_target_bitmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmaps</name><index>[<expr><name>load_count</name></expr>]</index></name> <operator>=</operator> <name>bmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>load_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>arg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_bitmap_flags</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_USTR</name> <modifier>*</modifier></type><name>ustr</name> <init>= <expr><call><name>al_ustr_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_VIDEO_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><literal type="string">" VIDEO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_MEMORY_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><literal type="string">" MEMORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>al_get_bitmap_flags</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ALLEGRO_CONVERT_BITMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>al_ustr_append_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><literal type="string">" CONVERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>al_ustr_trim_ws</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_find_replace_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>al_cstr</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_ustr_free</name><argument_list>(<argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>spin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spin2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_bitmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loaded_bitmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Could not init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_init_image_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spin</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/cursor.tga"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"default bitmap without display: %p\n"</literal></expr></argument>, <argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_set_new_bitmap_flags</name><argument_list>(<argument><expr><name>ALLEGRO_VIDEO_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spin2</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/cursor.tga"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"video bitmap without display: %p\n"</literal></expr></argument>, <argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p before create_display: "</literal></expr></argument>, <argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spin2</name> <operator>=</operator> <call><name>al_load_bitmap</name><argument_list>(<argument><expr><literal type="string">"data/cursor.tga"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"video bitmap with display: %p\n"</literal></expr></argument>, <argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p after create_display: "</literal></expr></argument>, <argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p after create_display: "</literal></expr></argument>, <argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p after destroy_display: "</literal></expr></argument>, <argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p after destroy_display: "</literal></expr></argument>, <argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p after create_display: "</literal></expr></argument>, <argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"%p after create_display: "</literal></expr></argument>, <argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bitmap_flags</name><argument_list>(<argument><expr><name>spin2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>al_load_font</name><argument_list>(<argument><expr><literal type="string">"data/fixed_font.tga"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mutex</name> <operator>=</operator> <call><name>al_create_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thread</name> <operator>=</operator> <call><name>al_create_thread</name><argument_list>(<argument><expr><name>loading_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_thread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_KEY_DOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ALLEGRO_EVENT_TIMER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">320</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>al_current_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Loading %d%%"</literal></expr></argument>,
<argument><expr><literal type="number">100</literal> <operator>*</operator> <name>load_count</name> <operator>/</operator> <name>load_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_lock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>loaded_bitmap</name> <operator>&lt;</operator> <name>load_count</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>al_convert_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>loaded_bitmap</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loaded_bitmap</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>al_unlock_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_bitmap</name> <operator>&lt;</operator> <name>loaded_bitmap</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bw</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>current_bitmap</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_bitmap</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>loaded_bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_bitmap</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>current_bitmap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_scaled_rotated_bitmap</name><argument_list>(<argument><expr><name><name>bitmaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">20</literal><operator>)</operator> <operator>*</operator> <literal type="number">640</literal> <operator>/</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">360</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">20</literal><operator>)</operator> <operator>*</operator> <literal type="number">24</literal></expr></argument>,
<argument><expr><literal type="number">32.0</literal> <operator>/</operator> <name>bw</name></expr></argument>, <argument><expr><literal type="number">32.0</literal> <operator>/</operator> <name>bw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>loaded_bitmap</name> <operator>&lt;</operator> <name>load_total</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_scaled_rotated_bitmap</name><argument_list>(<argument><expr><name>spin</name></expr></argument>,
<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <name>ALLEGRO_PI</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>al_join_thread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_mutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>al_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
