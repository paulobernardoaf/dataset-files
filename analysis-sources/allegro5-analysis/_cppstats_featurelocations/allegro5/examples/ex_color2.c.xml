<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\examples\ex_color2.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_UNSTABLE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_font.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_color.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;allegro5/allegro_primitives.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>l</name></decl>, <name>a</name>, <name>b</name>;</decl_stmt>
}</block></struct></type> <name>Color</name>;</typedef>

<struct>struct <name>Example</name> <block>{
<decl_stmt><decl><type><name>ALLEGRO_FONT</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>lab</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>black</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>white</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>slider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slider_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>half_x</name></decl>;</decl_stmt>
}</block> <decl><name>example</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_lab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>lab</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>example</name><operator>.</operator><name>lab</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <call><name>al_create_bitmap</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>rg</name> <init>= <expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>lab</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>-</operator><name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>rgb</name> <init>= <expr><call><name>al_color_lab</name><argument_list>(<argument><expr><name>l</name> <operator>/</operator> <literal type="number">511.0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_is_color_valid</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rgb</name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><literal type="number">255</literal> <operator>*</operator> <name><name>rgb</name><operator>.</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><literal type="number">255</literal> <operator>*</operator> <name><name>rgb</name><operator>.</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><literal type="number">255</literal> <operator>*</operator> <name><name>rgb</name><operator>.</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>rg</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>rg</name><operator>-&gt;</operator><name>pitch</name></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>red</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>green</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>blue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>lab</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>l</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><operator>(</operator><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>*</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><operator>(</operator><operator>-</operator><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>*</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>





























<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>cx</name> <operator>-</operator> <name>r</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>cy</name> <operator>-</operator> <name>r</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name> <operator>*</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>r</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>r</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">511.0</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rf</name></decl>, <decl><type ref="prev"/><name>gf</name></decl>, <decl><type ref="prev"/><name>bf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>-</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_color_lab_to_rgb</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rf</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>rf</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal> <operator>||</operator> <name><name>gf</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>gf</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal> <operator>||</operator> <name><name>bf</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bf</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>rgb</name> <init>= <expr><block>{<expr><name>rf</name></expr>, <expr><name>gf</name></expr>, <expr><name>bf</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><call><name>al_color_distance_ciede2000</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>rgb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0.05</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.04</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_pixel</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>half_x</name></name> <operator>*</operator> <name>ci</name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>+</operator> <name>x</name></expr></argument>,
<argument><expr><name><name>example</name><operator>.</operator><name>top_y</name></name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>black</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>white</name></name> <operator>=</operator> <call><name>al_map_rgb_f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>top_y</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>slider_x</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>l</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>l</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">0.2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>half_x</name></name> <operator>=</operator> <call><name>al_get_display_width</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_axis</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>l</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ticks</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>numformat</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>num1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>num2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>l</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>l</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ticks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name>x</name> <operator>+</operator> <name>l</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>ticks</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y2</name> <init>= <expr><name>y</name> <operator>-</operator> <name>l</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>ticks</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x2</name> <operator>+</operator> <name>tl</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>tl</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x2</name> <operator>+</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>y2</name> <operator>-</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>ALLEGRO_ALIGN_RIGHT</name></expr></argument>, <argument><expr><name>numformat</name></expr></argument>,
<argument><expr><name>num1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>num2</name> <operator>-</operator> <name>num1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ticks</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>float</name></type> <name>lv</name> <init>= <expr><operator>(</operator><name>num</name> <operator>-</operator> <name>num1</name><operator>)</operator> <operator>*</operator> <name>l</name> <operator>/</operator> <operator>(</operator><name>num2</name> <operator>-</operator> <name>num1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_filled_circle</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>lv</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>lv</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>y</name> <operator>-</operator> <operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>al_clear_to_color</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><call><name>al_get_current_display</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ci</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ci</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ci</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name>ci</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>rgb</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>rgb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_lab</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>l</name> <operator>*</operator> <literal type="number">511</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_bitmap</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>lab</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>l</name> <operator>*</operator> <literal type="number">511</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>cx</name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>top_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_axis</name><argument_list>(<argument><expr><name>cx</name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>top_y</name></name> <operator>+</operator> <literal type="number">512.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><literal type="string">"a*"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_axis</name><argument_list>(<argument><expr><name>cx</name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>top_y</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name></expr></argument>,
<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"b*"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name>cx</name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>+</operator> <literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"L*a*b* = %.2f/%.2f/%.2f sRGB = %.2f/%.2f/%.2f"</literal></expr></argument>,
<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_axis</name><argument_list>(<argument><expr><name>cx</name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>slider_x</name></name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>top_y</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ALLEGRO_PI</name></expr></argument>,
<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"L*"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%.1f"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>c</name> <init>= <expr><call><name>al_map_rgb_f</name><argument_list>(<argument><expr><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_filled_rectangle</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><name>cx</name> <operator>+</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_range</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>+</operator> <literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"Lab colors visible in sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>half_x</name></name> <operator>+</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>+</operator> <literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"ellipse shows CIEDE2000 between 0.4 and 0.5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_line</name><argument_list>(<argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dr</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dg</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>db</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>drgb</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>dr</name> <operator>*</operator> <name>dr</name> <operator>+</operator> <name>dg</name> <operator>*</operator> <name>dg</name> <operator>+</operator> <name>db</name> <operator>*</operator> <name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dl</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>l</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>l</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>da</name> <init>= <expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dlab</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>da</name> <operator>*</operator> <name>da</name> <operator>+</operator> <name>db</name> <operator>*</operator> <name>db</name> <operator>+</operator> <name>dl</name> <operator>*</operator> <name>dl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d2000</name> <init>= <expr><call><name>al_color_distance_ciede2000</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rgb</name></expr></argument>,
<argument><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rgb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>,
<argument><expr><name>ALLEGRO_ALIGN_CENTER</name></expr></argument>, <argument><expr><literal type="string">"dRGB = %.2f"</literal></expr></argument>, <argument><expr><name>drgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">12</literal></expr></argument>,
<argument><expr><name>ALLEGRO_ALIGN_CENTER</name></expr></argument>, <argument><expr><literal type="string">"dLab = %.2f"</literal></expr></argument>, <argument><expr><name>dlab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_draw_textf</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">24</literal></expr></argument>,
<argument><expr><name>ALLEGRO_ALIGN_CENTER</name></expr></argument>, <argument><expr><literal type="string">"CIEDE2000 = %.2f"</literal></expr></argument>, <argument><expr><name>d2000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_draw_rectangle</name><argument_list>(<argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><name>w</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>,
<argument><expr><name><name>example</name><operator>.</operator><name>white</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>example</name><operator>.</operator><name>mb</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>example</name><operator>.</operator><name>mx</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>mx</name></name> <operator>&gt;=</operator> <name><name>example</name><operator>.</operator><name>half_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>-=</operator> <name><name>example</name><operator>.</operator><name>half_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&gt;</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>slider</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>slider</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>example</name><operator>.</operator><name>slider</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>example</name><operator>.</operator><name>my</name></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>top_y</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">511</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">511</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name><name>example</name><operator>.</operator><name>slider</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>l</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>l</name> <operator>/</operator> <literal type="number">511.0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ci</name> <init>= <expr><name><name>example</name><operator>.</operator><name>slider</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>example</name><operator>.</operator><name>mx</name></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>left_x</name></name> <operator>-</operator> <name>ci</name> <operator>*</operator> <name><name>example</name><operator>.</operator><name>half_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>example</name><operator>.</operator><name>my</name></name> <operator>-</operator> <name><name>example</name><operator>.</operator><name>top_y</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">511</literal> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">511</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">511</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">511</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">511</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>/</operator> <literal type="number">511.0</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>b</name> <operator>/</operator> <literal type="number">511.0</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ci</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ci</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ci</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>rgb</name> <operator>=</operator> <call><name>al_color_lab</name><argument_list>(<argument><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>,
<argument><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>, <argument><expr><name><name>example</name><operator>.</operator><name>color</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">1280</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_redraw</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>al_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Failed to init Allegro.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_init_font_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>font</name></name> <operator>=</operator> <call><name>al_create_builtin_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_platform_specific</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>al_create_display</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_example</name><argument_list>(<argument><expr><literal type="string">"Error creating display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>al_install_keyboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_install_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_init_primitives_addon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>al_create_timer</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>FPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>al_create_event_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_mouse_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_keyboard_event_source</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_timer_event_source</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_register_event_source</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><call><name>al_get_display_event_source</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_start_timer</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_redraw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_flip_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_wait_for_event</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_EVENT_KEY_CHAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>keyboard</name><operator>.</operator><name>keycode</name></name> <operator>==</operator> <name>ALLEGRO_KEY_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr>:</case>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>mx</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>my</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr>:</case>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr>:</case>
<expr_stmt><expr><name><name>example</name><operator>.</operator><name>mb</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>:</case>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ALLEGRO_EVENT_TIMER</name></expr>:</case>
<expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>al_is_event_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
