<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\haptic.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_haptic_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_haptic_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/joystick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/keyboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/touch_input.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_INTERNAL_UNSTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>



<enum>enum <name>ALLEGRO_HAPTIC_CONSTANTS</name>
<block>{
<decl><name>ALLEGRO_HAPTIC_RUMBLE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_PERIODIC</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_CONSTANT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_SPRING</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_FRICTION</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_DAMPER</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_INERTIA</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_RAMP</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_SQUARE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_TRIANGLE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_SINE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_SAW_UP</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_SAW_DOWN</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_CUSTOM</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_GAIN</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_ANGLE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_RADIUS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_AZIMUTH</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></init></decl>,
<decl><name>ALLEGRO_HAPTIC_AUTOCENTER</name><init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>,
}</block>;</enum>





<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_HAPTIC</name></name></type> <name>ALLEGRO_HAPTIC</name>;</typedef>















<struct>struct <name>ALLEGRO_HAPTIC_DIRECTION</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>azimuth</name></decl>;</decl_stmt>
}</block>;</struct>







<struct>struct <name>ALLEGRO_HAPTIC_REPLAY</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delay</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_HAPTIC_ENVELOPE</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>attack_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>attack_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fade_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fade_level</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_HAPTIC_CONSTANT_EFFECT</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_ENVELOPE</name></name></type> <name>envelope</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_HAPTIC_RAMP_EFFECT</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>start_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>end_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_ENVELOPE</name></name></type> <name>envelope</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_HAPTIC_CONDITION_EFFECT</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>right_saturation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>left_saturation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>right_coeff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>left_coeff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>deadband</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>center</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ALLEGRO_HAPTIC_PERIODIC_EFFECT</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>waveform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>phase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_ENVELOPE</name></name></type> <name>envelope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>custom_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>custom_data</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>ALLEGRO_HAPTIC_RUMBLE_EFFECT</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>strong_magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>weak_magnitude</name></decl>;</decl_stmt>
}</block>;</struct>

<union>union <name>ALLEGRO_HAPTIC_EFFECT_UNION</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_CONSTANT_EFFECT</name></name></type> <name>constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_RAMP_EFFECT</name></name></type> <name>ramp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_PERIODIC_EFFECT</name></name></type> <name>periodic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_CONDITION_EFFECT</name></name></type> <name>condition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_RUMBLE_EFFECT</name></name></type> <name>rumble</name></decl>;</decl_stmt>
}</block>;</union>




<struct>struct <name>ALLEGRO_HAPTIC_EFFECT</name>
<block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_DIRECTION</name></name></type> <name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ALLEGRO_HAPTIC_REPLAY</name></name></type> <name>replay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>ALLEGRO_HAPTIC_EFFECT_UNION</name></name></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_HAPTIC_EFFECT</name></name></type> <name>ALLEGRO_HAPTIC_EFFECT</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_HAPTIC_EFFECT_ID</name></name></type> <name>ALLEGRO_HAPTIC_EFFECT_ID</name>;</typedef>

<struct>struct <name>ALLEGRO_HAPTIC_EFFECT_ID</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_HAPTIC</name> <modifier>*</modifier></type><name>_haptic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>_effect_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_playing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>_end_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>driver</name></decl>;</decl_stmt>
}</block>;</struct>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_install_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_uninstall_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_haptic_installed</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_mouse_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MOUSE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_joystick_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_keyboard_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_KEYBOARD</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_display_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_touch_input_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TOUCH_INPUT</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_HAPTIC</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_haptic_from_mouse</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_MOUSE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_HAPTIC</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_haptic_from_joystick</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_JOYSTICK</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_HAPTIC</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_haptic_from_keyboard</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_KEYBOARD</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_HAPTIC</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_haptic_from_display</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_HAPTIC</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_haptic_from_touch_input</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TOUCH_INPUT</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_release_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_haptic_active</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_haptic_capabilities</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_haptic_capable</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_haptic_gain</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>double</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_haptic_gain</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_set_haptic_autocenter</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>double</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_haptic_autocenter</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_max_haptic_effects</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_haptic_effect_ok</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>ALLEGRO_HAPTIC_EFFECT</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_upload_haptic_effect</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>ALLEGRO_HAPTIC_EFFECT</name> <operator>*</operator><operator>,</operator> <name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_play_haptic_effect</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_upload_and_play_haptic_effect</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>ALLEGRO_HAPTIC_EFFECT</name> <operator>*</operator><operator>,</operator> <name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_stop_haptic_effect</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_haptic_effect_playing</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_release_haptic_effect</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>al_get_haptic_effect_duration</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC_EFFECT</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_rumble_haptic</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_HAPTIC</name> <operator>*</operator><operator>,</operator> <name>double</name><operator>,</operator> <name>double</name><operator>,</operator> <name>ALLEGRO_HAPTIC_EFFECT_ID</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
