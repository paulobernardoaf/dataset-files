<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\platform\aintwin.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintwin_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintwin_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_allegro_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> must include allegro.h first</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> bad include</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintwthr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/system.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOWS_RGB</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((COLORREF)(((BYTE)(r)|((WORD)((BYTE)(g))&lt;&lt;8))|(((DWORD)(BYTE)(b))&lt;&lt;16)))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ALLEGRO_DISPLAY_WIN_CALLBACK_PROC</name>)
<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type></decl></parameter>, <parameter><decl><type><name>LRESULT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_DISPLAY_WIN_CALLBACK</name></name></type> <name>ALLEGRO_DISPLAY_WIN_CALLBACK</name>;</typedef>

<struct>struct <name>ALLEGRO_DISPLAY_WIN_CALLBACK</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_WIN_CALLBACK_PROC</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl>;</decl_stmt>
}</block>;</struct>



<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_DISPLAY_WIN</name></name></type> <name>ALLEGRO_DISPLAY_WIN</name>;</typedef>

<struct>struct <name>ALLEGRO_DISPLAY_WIN</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>mouse_selected_hcursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mouse_cursor_shown</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>adapter</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>end_thread</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>thread_ended</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>bool</name></type> <name>can_acknowledge</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>ignore_resize</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>toggle_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toggle_h</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>msg_callbacks</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>_al_win_get_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_thread_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_grab_input</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_kbd_handle_key_press</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vcode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>repeated</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_kbd_handle_key_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vcode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_fix_modifiers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_mouse_handle_move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_mouse_handle_wheel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>raw_dz</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_mouse_handle_hwheel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>raw_dw</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_mouse_handle_button</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>down</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abs</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_mouse_handle_leave</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_mouse_handle_enter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_display</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_joystick_dinput_unacquire</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_joystick_dinput_grab</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ALLEGRO_DISPLAY_WIN</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>UINT</name></type> <name>_al_win_msg_call_proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>UINT</name></type> <name>_al_win_msg_suicide</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_win_wnd_schedule_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>HWND</name> <name>wnd</name><operator>,</operator> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>proc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>,</operator> <name>void</name> <operator>*</operator><name>param</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_win_wnd_call_proc</name></expr></argument>, <argument><expr><operator>(</operator><name>HWND</name> <name>wnd</name><operator>,</operator> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>proc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>,</operator> <name>void</name> <operator>*</operator><name>param</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>_al_win_determine_adapter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>_al_win_disable_screensaver</name></decl>;</decl_stmt>


<function_decl><type><name>HMODULE</name></type> <name>_al_win_safe_load_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_init_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_shutdown_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_UNION</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>union { LPVOID *v; t p; } u; u.p = (ptr);</cpp:value></cpp:define>






<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SYSTEM_WIN</name></name></type> <name>ALLEGRO_SYSTEM_WIN</name>;</typedef>

<struct>struct <name>ALLEGRO_SYSTEM_WIN</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name></type> <name>system</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>mouse_grab_display</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>toggle_mouse_grab_keycode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>toggle_mouse_grab_modifiers</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>HWND</name></type> <name>_al_win_create_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HWND</name></type> <name>_al_win_create_faux_fullscreen_window</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>devname</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_al_win_init_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HWND</name></type> <name>_al_win_create_hidden_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_post_create_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_set_display_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_icons</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name><name>bitmap</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HICON</name></type> <name>_al_win_create_icon</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>wnd</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sprite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xfocus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yfocus</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cursor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>resize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_destroy_display_icons</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_win_set_window_position</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_get_window_position</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_set_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_get_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_apply_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_set_window_frameless</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>frameless</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_MOUSE_CURSOR_WIN</name></name></type> <name>ALLEGRO_MOUSE_CURSOR_WIN</name>;</typedef>
<struct>struct <name>ALLEGRO_MOUSE_CURSOR_WIN</name>
<block>{
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>hcursor</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>ALLEGRO_MOUSE_CURSOR</name><modifier>*</modifier></type> <name>_al_win_create_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>sprite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xfocus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yfocus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_destroy_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_set_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_set_system_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>cursor_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_show_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>_al_win_hide_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_D3D</name></expr></cpp:if>
<function_decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name><modifier>*</modifier></type> <name>_al_display_d3d_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_al_d3d_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_DISPLAY_MODE</name><modifier>*</modifier></type> <name>_al_d3d_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_d3d_shutdown_display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLEGRO_CFG_OPENGL</name></expr></cpp:if>
<function_decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_display_wgl_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_al_wgl_get_num_display_modes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_DISPLAY_MODE</name><modifier>*</modifier></type> <name>_al_wgl_get_display_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>refresh_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0601</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>tagTOUCHINPUT</name> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG_PTR</name></type> <name>dwExtraInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cxContact</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cyContact</name></decl>;</decl_stmt>
}</block></struct></type> <name>TOUCHINPUT</name><operator>,</operator> *<name>PTOUCHINPUT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_WM_TOUCH</name></cpp:macro> <cpp:value>0x0240</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_MOUSEEVENTF_FROMTOUCH</name></cpp:macro> <cpp:value>0xFF515700</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_TOUCHEVENTF_MOVE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_TOUCHEVENTF_DOWN</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_TOUCHEVENTF_UP</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_TOUCHEVENTF_PRIMARY</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_SM_DIGITIZER</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_NID_READY</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>



<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CLOSETOUCHINPUTHANDLEPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hTouchInput</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>GETTOUCHINPUTINFOPROC</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hTouchInput</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cInputs</name></decl></parameter>, <parameter><decl><type><name>PTOUCHINPUT</name></type> <name>pInputs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbSize</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>ISTOUCHWINDOWPROC</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>PULONG</name></type> <name>pulFlags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>REGISTERTOUCHWINDOWPROC</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>ulFlags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>UNREGISTERTOUCHWINDOWPROC</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>bool</name></type> <name>_al_win_init_touch_input_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_exit_touch_input_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CLOSETOUCHINPUTHANDLEPROC</name></type> <name>_al_win_close_touch_input_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GETTOUCHINPUTINFOPROC</name></type> <name>_al_win_get_touch_input_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ISTOUCHWINDOWPROC</name></type> <name>_al_win_is_touch_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>REGISTERTOUCHWINDOWPROC</name></type> <name>_al_win_register_touch_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>UNREGISTERTOUCHWINDOWPROC</name></type> <name>_al_win_unregister_touch_window</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>_al_win_touch_input_set_time_stamp</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_touch_input_handle_begin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_touch_input_handle_end</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_touch_input_handle_move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_touch_input_handle_cancel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_WIN</name> <modifier>*</modifier></type><name>win_disp</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_win_error</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_win_last_error</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>double</name></type> <name>_al_win_get_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_rest</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_win_init_timeout</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
