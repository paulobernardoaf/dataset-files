<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\platform\alwin.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> bad include</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_WinMain</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>_main</name><operator>,</operator> <name>void</name> <operator>*</operator><name>hInst</name><operator>,</operator> <name>void</name> <operator>*</operator><name>hPrev</name><operator>,</operator> <name>char</name> <operator>*</operator><name>Cmd</name><operator>,</operator> <name>int</name> <name>nShow</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_NO_MAGIC_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>ALLEGRO_LIB_BUILD</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name><cpp:literal>"/ENTRY:mainCRTStartup"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_JOY_TYPE_DIRECTX</name></cpp:macro> <cpp:value>AL_ID('D','X',' ',' ')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_JOYSTICK_DRIVER</name></expr></argument>, <argument><expr><name>_al_joydrv_directx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_JOYSTICK_DRIVER_DIRECTX</name></cpp:macro> <cpp:value>{ AL_JOY_TYPE_DIRECTX, &amp;_al_joydrv_directx, true },</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_JOY_TYPE_XINPUT</name></cpp:macro> <cpp:value>AL_ID('X','I',' ',' ')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_JOYSTICK_DRIVER</name></expr></argument>, <argument><expr><name>_al_joydrv_xinput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_JOYSTICK_DRIVER_XINPUT</name></cpp:macro> <cpp:value>{ AL_JOY_TYPE_XINPUT, &amp;_al_joydrv_xinput, true },</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_JOY_TYPE_WINDOWS_ALL</name></cpp:macro> <cpp:value>AL_ID('X','D',' ',' ')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_JOYSTICK_DRIVER</name></expr></argument>, <argument><expr><name>_al_joydrv_windows_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_JOYSTICK_DRIVER_WINDOWS_ALL</name></cpp:macro> <cpp:value>{ AL_JOY_TYPE_WINDOWS_ALL, &amp;_al_joydrv_windows_all, true },</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_HAPTIC_TYPE_DIRECTX</name></cpp:macro> <cpp:value>AL_ID('D','X','F','F')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_HAPTIC_DRIVER</name></expr></argument>, <argument><expr><name>_al_hapdrv_directx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_HAPTIC_DRIVER_DIRECTX</name></cpp:macro> <cpp:value>{ AL_HAPTIC_TYPE_DIRECTX, &amp;_al_hapdrv_directx, true },</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_HAPTIC_TYPE_XINPUT</name></cpp:macro> <cpp:value>AL_ID('X','I','F','F')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_HAPTIC_DRIVER</name></expr></argument>, <argument><expr><name>_al_hapdrv_xinput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_HAPTIC_DRIVER_XINPUT</name></cpp:macro> <cpp:value>{ AL_HAPTIC_TYPE_XINPUT, &amp;_al_hapdrv_xinput, true },</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_HAPTIC_TYPE_WINDOWS_ALL</name></cpp:macro> <cpp:value>AL_ID('X','D','F','F')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr>struct <name>ALLEGRO_HAPTIC_DRIVER</name></expr></argument>, <argument><expr><name>_al_hapdrv_windows_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_HAPTIC_DRIVER_WINDOWS_ALL</name></cpp:macro> <cpp:value>{ AL_HAPTIC_TYPE_WINDOWS_ALL, &amp;_al_hapdrv_windows_all, true },</cpp:value></cpp:define>



</unit>
