<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\render_state.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_render_state_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_render_state_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><enum>enum <name>ALLEGRO_RENDER_STATE</name> <block>{



<decl><name>ALLEGRO_ALPHA_TEST</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
<decl><name>ALLEGRO_WRITE_MASK</name></decl>,
<decl><name>ALLEGRO_DEPTH_TEST</name></decl>,
<decl><name>ALLEGRO_DEPTH_FUNCTION</name></decl>,
<decl><name>ALLEGRO_ALPHA_FUNCTION</name></decl>,
<decl><name>ALLEGRO_ALPHA_TEST_VALUE</name></decl>
}</block></enum></type> <name>ALLEGRO_RENDER_STATE</name>;</typedef>



<typedef>typedef <type><enum>enum <name>ALLEGRO_RENDER_FUNCTION</name> <block>{
<decl><name>ALLEGRO_RENDER_NEVER</name></decl>,
<decl><name>ALLEGRO_RENDER_ALWAYS</name></decl>,
<decl><name>ALLEGRO_RENDER_LESS</name></decl>, 
<decl><name>ALLEGRO_RENDER_EQUAL</name></decl>, 
<decl><name>ALLEGRO_RENDER_LESS_EQUAL</name></decl>, 
<decl><name>ALLEGRO_RENDER_GREATER</name></decl>, 
<decl><name>ALLEGRO_RENDER_NOT_EQUAL</name></decl>, 
<decl><name>ALLEGRO_RENDER_GREATER_EQUAL</name></decl>
}</block></enum></type> <name>ALLEGRO_RENDER_FUNCTION</name>;</typedef>



<typedef>typedef <type><enum>enum <name>ALLEGRO_WRITE_MASK_FLAGS</name> <block>{
<decl><name>ALLEGRO_MASK_RED</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_MASK_GREEN</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>ALLEGRO_MASK_BLUE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>ALLEGRO_MASK_ALPHA</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>ALLEGRO_MASK_DEPTH</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>ALLEGRO_MASK_RGB</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MASK_RED</name> <operator>|</operator> <name>ALLEGRO_MASK_GREEN</name> <operator>|</operator> <name>ALLEGRO_MASK_BLUE</name><operator>)</operator></expr></init></decl>,
<decl><name>ALLEGRO_MASK_RGBA</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MASK_RGB</name> <operator>|</operator> <name>ALLEGRO_MASK_ALPHA</name><operator>)</operator></expr></init></decl>
}</block></enum></type> <name>ALLEGRO_WRITE_MASK_FLAGS</name>;</typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_render_state</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_RENDER_STATE</name> <name>state</name><operator>,</operator> <name>int</name> <name>value</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
