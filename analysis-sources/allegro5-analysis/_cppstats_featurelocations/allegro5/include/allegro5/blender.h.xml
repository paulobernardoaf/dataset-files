<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\blender.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_blender_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_blender_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/color.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<enum>enum <name>ALLEGRO_BLEND_MODE</name> <block>{
<decl><name>ALLEGRO_ZERO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_ONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ALLEGRO_ALPHA</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ALLEGRO_INVERSE_ALPHA</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>ALLEGRO_SRC_COLOR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>ALLEGRO_DEST_COLOR</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>ALLEGRO_INVERSE_SRC_COLOR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>ALLEGRO_INVERSE_DEST_COLOR</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>ALLEGRO_CONST_COLOR</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>ALLEGRO_INVERSE_CONST_COLOR</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>ALLEGRO_NUM_BLEND_MODES</name></decl>
}</block>;</enum>

<enum>enum <name>ALLEGRO_BLEND_OPERATIONS</name> <block>{
<decl><name>ALLEGRO_ADD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_SRC_MINUS_DEST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ALLEGRO_DEST_MINUS_SRC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ALLEGRO_NUM_BLEND_OPERATIONS</name></decl>
}</block>;</enum>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_blender</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>op</name><operator>,</operator> <name>int</name> <name>source</name><operator>,</operator> <name>int</name> <name>dest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_blend_color</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COLOR</name> <name>color</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_get_blender</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><name>op</name><operator>,</operator> <name>int</name> <operator>*</operator><name>source</name><operator>,</operator> <name>int</name> <operator>*</operator><name>dest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_get_blend_color</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_separate_blender</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>op</name><operator>,</operator> <name>int</name> <name>source</name><operator>,</operator> <name>int</name> <name>dest</name><operator>,</operator>
<name>int</name> <name>alpha_op</name><operator>,</operator> <name>int</name> <name>alpha_source</name><operator>,</operator> <name>int</name> <name>alpha_dest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_get_separate_blender</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><name>op</name><operator>,</operator> <name>int</name> <operator>*</operator><name>source</name><operator>,</operator> <name>int</name> <operator>*</operator><name>dest</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>alpha_op</name><operator>,</operator> <name>int</name> <operator>*</operator><name>alpha_src</name><operator>,</operator> <name>int</name> <operator>*</operator><name>alpha_dest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
