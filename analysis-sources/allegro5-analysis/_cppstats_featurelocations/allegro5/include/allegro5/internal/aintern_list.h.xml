<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_list.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_list_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_list_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>_AL_LIST</name></name></type> <name>_AL_LIST</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_AL_LIST_ITEM</name></name></type> <name>_AL_LIST_ITEM</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_AL_LIST_DTOR</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_AL_LIST_ITEM_DTOR</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_create</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_create_static</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <name>capacity</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_destroy</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_set_dtor</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_DTOR</name> <name>dtor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_DTOR</name></expr></argument>, <argument><expr><name>_al_list_get_dtor</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_push_front</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_push_front_ex</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>,</operator> <name>_AL_LIST_ITEM_DTOR</name> <name>dtor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_push_back</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_push_back_ex</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>,</operator> <name>_AL_LIST_ITEM_DTOR</name> <name>dtor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_pop_front</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_pop_back</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_insert_after</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>where</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_insert_after_ex</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>where</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>,</operator> <name>_AL_LIST_ITEM_DTOR</name> <name>dtor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_insert_before</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>where</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_insert_before_ex</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>where</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>,</operator> <name>_AL_LIST_ITEM_DTOR</name> <name>dtor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_erase</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_clear</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_remove</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_list_is_empty</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_list_contains</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_find_first</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_find_last</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_find_after</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>where</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_find_before</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>where</name><operator>,</operator> <name>void</name><operator>*</operator> <name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>_al_list_size</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_at</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>size_t</name> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_front</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_back</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_next</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_previous</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_next_circular</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_previous_circular</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_item_data</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_item_set_dtor</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>,</operator> <name>_AL_LIST_ITEM_DTOR</name> <name>dtor</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>_AL_LIST_ITEM_DTOR</name></expr></argument>, <argument><expr><name>_al_list_item_get_dtor</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST_ITEM</name><operator>*</operator> <name>item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_list_set_user_data</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>,</operator> <name>void</name><operator>*</operator> <name>user_data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_list_get_user_data</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_LIST</name><operator>*</operator> <name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
