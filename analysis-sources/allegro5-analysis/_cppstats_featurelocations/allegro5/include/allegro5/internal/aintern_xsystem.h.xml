<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_xsystem.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_xsystem_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_xsystem_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XF86VIDMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/xf86vmode.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XINERAMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xinerama.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XRANDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xrandr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XSCREENSAVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/scrnsaver.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_system.h"</cpp:file></cpp:include>


<struct>struct <name>ALLEGRO_SYSTEM_XGLX</name>
<block>{

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name></type> <name>system</name></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11display</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>gfxdisplay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>AllegroAtom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>XEmbedAtom</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>have_xevents_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_THREAD</name></type> <name>xevents_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_MUTEX</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>_AL_COND</name></type> <name>resized</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>mouse_grab_display</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>toggle_mouse_grab_keycode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>toggle_mouse_grab_modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>inhibit_screensaver</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>screen_saver_query_available</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mmon_interface_inited</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XINERAMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>xinerama_available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xinerama_screen_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XineramaScreenInfo</name> <modifier>*</modifier></type><name>xinerama_screen_info</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XF86VIDMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>xfvm_available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xfvm_screen_count</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mode_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XF86VidModeModeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>modes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XF86VidModeModeInfo</name> <modifier>*</modifier></type><name>original_mode</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>xfvm_screen</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XRANDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>xrandr_available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xrandr_event_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>xrandr_screens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>xrandr_adaptermap</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>int</name></type> <name>adapter_use_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>adapter_map</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
