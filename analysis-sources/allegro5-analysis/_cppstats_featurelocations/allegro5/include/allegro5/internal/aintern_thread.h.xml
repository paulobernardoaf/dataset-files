<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_thread.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_thread_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_thread_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> ALLEGRO_INTERNAL_THREAD_HEADER</cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name><name>struct</name> <name>_AL_THREAD</name></name></type> <name>_AL_THREAD</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_AL_MUTEX</name></name></type> <name>_AL_MUTEX</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_AL_COND</name></name></type> <name>_AL_COND</name>;</typedef>


<function_decl><type><name>void</name></type> <name>_al_thread_create</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_thread_create_with_stacksize</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_thread_set_should_stop</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>_al_thread_join</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_thread_detach</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>_al_mutex_init</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_mutex_init_recursive</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>_AL_MUTEX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>_al_cond_init</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_cond_destroy</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_cond_wait</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>_AL_MUTEX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_al_cond_signal</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>_al_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>_AL_COND</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>_AL_MUTEX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
