<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_vector.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_vector_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_vector_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>_AL_VECTOR</name>
<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>_itemsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>_items</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_unused</name></decl>;</decl_stmt>
}</block></struct></type> <name>_AL_VECTOR</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_VECTOR_INITIALIZER</name><parameter_list>(<parameter><type><name>typ</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ sizeof(typ), 0, 0, 0 }</cpp:value></cpp:define>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_vector_init</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <name>size_t</name> <name>itemsize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AL_INLINE</name><argument_list>(<argument>size_t</argument>, <argument>_al_vector_size</argument>, <argument>(const _AL_VECTOR *vec)</argument>,
<argument>{
return vec-&gt;_size;
}</argument>)</argument_list></macro>
<macro><name>AL_INLINE</name><argument_list>(<argument>bool</argument>, <argument>_al_vector_is_empty</argument>, <argument>(const _AL_VECTOR *vec)</argument>,
<argument>{
ASSERT(vec);
return vec-&gt;_size == <literal type="number">0</literal> ? true : false; 
}</argument>)</argument_list></macro>
<macro><name>AL_INLINE</name><argument_list>(<argument>bool</argument>, <argument>_al_vector_is_nonempty</argument>, <argument>(const _AL_VECTOR *vec)</argument>,
<argument>{
ASSERT(vec);
return !_al_vector_is_empty(vec); 
}</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_vector_ref</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <name>unsigned</name> <name>int</name> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_vector_ref_front</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>_AL_VECTOR</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_vector_ref_back</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>_AL_VECTOR</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_vector_append_array</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name> <operator>*</operator><name>vec</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>num</name><operator>,</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator><name>arr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_vector_alloc_back</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_al_vector_alloc_mid</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <name>unsigned</name> <name>int</name> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_vector_find</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator><name>ptr_item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_vector_contains</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator><name>ptr_item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_vector_delete_at</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <name>unsigned</name> <name>int</name> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_vector_find_and_delete</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator><name>ptr_item</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_vector_free</name></expr></argument>, <argument><expr><operator>(</operator><name>_AL_VECTOR</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
