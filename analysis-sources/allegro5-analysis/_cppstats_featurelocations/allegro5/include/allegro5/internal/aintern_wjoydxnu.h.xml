<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_wjoydxnu.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro_aintern_wjoydxnu_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro_aintern_wjoydxnu_h</name></cpp:macro></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_JOYSTICKS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLIDERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POVS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUTTONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_BUFFER_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>



<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>wjoydxnu</name></expr></argument>, <argument><expr><name>_AL_MAX_JOYSTICK_STICKS</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>MAX_SLIDERS</name> <operator>+</operator> <name>MAX_POVS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_STATIC_ASSERT</name><argument_list>(<argument><expr><name>wjoydxnu</name></expr></argument>, <argument><expr><name>_AL_MAX_JOYSTICK_BUTTONS</name> <operator>&gt;=</operator> <name>MAX_BUTTONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_EQUAL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 == memcmp(&amp;(a), &amp;(b), sizeof(GUID)))</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum
<block>{
<decl><name>STATE_UNUSED</name></decl>,
<decl><name>STATE_BORN</name></decl>,
<decl><name>STATE_ALIVE</name></decl>,
<decl><name>STATE_DYING</name></decl>
}</block></enum></type> <name>CONFIG_STATE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_STATE</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((st) == STATE_ALIVE || (st) == STATE_DYING)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>have_x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_x</name><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_y</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_y</name><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_z</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_z</name><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_rx</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_rx</name><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_ry</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_ry</name><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_rz</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_rz</name><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sliders</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_slider</name><index>[<expr><name>MAX_SLIDERS</name></expr>]</index><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_povs</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_pov</name><index>[<expr><name>MAX_POVS</name></expr>]</index><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_buttons</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>name_button</name><index>[<expr><name>MAX_BUTTONS</name></expr>]</index><index>[<expr><name>NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CAPS_AND_NAMES</name>;</typedef>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>stick</name></decl>, <name>axis</name>;</decl_stmt>
}</block></struct></type> <name>AXIS_MAPPING</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ALLEGRO_JOYSTICK_DIRECTX</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK</name></type> <name>parent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CONFIG_STATE</name></type> <name>config_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>marked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPDIRECTINPUTDEVICE2</name></type> <name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>product_guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>waker_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_JOYSTICK_STATE</name></type> <name>joystate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name>x_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name>y_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name>z_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name>rx_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name>ry_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name>rz_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AXIS_MAPPING</name></type> <name><name>slider_mapping</name><index>[<expr><name>MAX_SLIDERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pov_mapping_stick</name><index>[<expr><name>MAX_POVS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>all_names</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>ALLEGRO_JOYSTICK_DIRECTX</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
