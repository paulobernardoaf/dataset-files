<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_touch_input.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_touch_input_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_touch_input_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>ALLEGRO_TOUCH_INPUT_DRIVER</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>init_touch_input</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>exit_touch_input</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>ALLEGRO_TOUCH_INPUT</name><operator>*</operator></expr></argument>, <argument><expr><name>get_touch_input</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>get_touch_input_state</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_TOUCH_INPUT_STATE</name> <operator>*</operator><name>ret_state</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>set_mouse_emulation_mode</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_METHOD</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>get_mouse_emulation_mode</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></struct></type> <name>ALLEGRO_TOUCH_INPUT_DRIVER</name>;</typedef>


<struct>struct <name>ALLEGRO_TOUCH_INPUT</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name></type> <name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name></type> <name>mouse_emulation_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_emulation_mode</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>_AL_DRIVER_INFO</name></type> <name><name>_al_touch_input_driver_list</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
