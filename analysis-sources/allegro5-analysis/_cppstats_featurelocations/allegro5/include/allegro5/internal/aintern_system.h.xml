<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_system.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_system_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_system_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/system.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_dtor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_haptic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_joystick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_keyboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_touch_input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SYSTEM_INTERFACE</name></name></type> <name>ALLEGRO_SYSTEM_INTERFACE</name>;</typedef>

<struct>struct <name>ALLEGRO_SYSTEM_INTERFACE</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_ID</name></type> <name>id</name></decl>;</decl_stmt>
<function_decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>initialize</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_display_driver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_KEYBOARD_DRIVER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_keyboard_driver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_mouse_driver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_TOUCH_INPUT_DRIVER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_touch_input_driver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_JOYSTICK_DRIVER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_joystick_driver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_HAPTIC_DRIVER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_haptic_driver</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_num_display_modes</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_display_mode</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>shutdown_system</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_num_video_adapters</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>get_monitor_info</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_monitor_dpi</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>create_mouse_cursor</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_focus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_focus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy_mouse_cursor</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>get_cursor_position</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>grab_mouse</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ungrab_mouse</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_path</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>inhibit_screensaver</name>)<parameter_list>(<parameter><decl><type><name>bool</name></type> <name>inhibit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>thread_init</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>thread_exit</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_THREAD</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>open_library</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>import_symbol</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>library</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close_library</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>heartbeat</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>heartbeat_init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>get_time</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rest</name>)<parameter_list>(<parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_timeout</name>)<parameter_list>(<parameter><decl><type><name>ALLEGRO_TIMEOUT</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>ALLEGRO_SYSTEM</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>displays</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>user_exe_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_wheel_precision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>installed</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>void</name></type> <name>_al_register_system_interfaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>_AL_VECTOR</name></type> <name>_al_system_interfaces</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AL_VAR</name><argument_list>(<argument><expr><name>_AL_DTOR_LIST</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_dtor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_open_library</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>_al_import_symbol</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>library</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>symbol</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_close_library</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>library</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
