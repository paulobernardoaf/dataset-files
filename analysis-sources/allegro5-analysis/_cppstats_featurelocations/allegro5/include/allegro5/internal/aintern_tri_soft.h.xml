<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_tri_soft.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_tri_soft_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_tri_soft_h</name></cpp:macro></cpp:define>

<struct_decl>struct <name>ALLEGRO_BITMAP</name>;</struct_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_VERTEX_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_VERTEX_DEFINED</name></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_VERTEX</name></name></type> <name>ALLEGRO_VERTEX</name>;</typedef>

<struct>struct <name>ALLEGRO_VERTEX</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_triangle_2d</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_BITMAP</name><operator>*</operator> <name>texture</name><operator>,</operator> <name>ALLEGRO_VERTEX</name><operator>*</operator> <name>v1</name><operator>,</operator> <name>ALLEGRO_VERTEX</name><operator>*</operator> <name>v2</name><operator>,</operator> <name>ALLEGRO_VERTEX</name><operator>*</operator> <name>v3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_draw_soft_triangle</name></expr></argument>, <argument><expr><operator>(</operator>
<name>ALLEGRO_VERTEX</name><operator>*</operator> <name>v1</name><operator>,</operator> <name>ALLEGRO_VERTEX</name><operator>*</operator> <name>v2</name><operator>,</operator> <name>ALLEGRO_VERTEX</name><operator>*</operator> <name>v3</name><operator>,</operator> <name>uintptr_t</name> <name>state</name><operator>,</operator>
<call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>, <argument><expr><name>ALLEGRO_VERTEX</name><operator>*</operator></expr></argument>, <argument><expr><name>ALLEGRO_VERTEX</name><operator>*</operator></expr></argument>, <argument><expr><name>ALLEGRO_VERTEX</name><operator>*</operator></expr></argument>)</argument_list></call><operator>,</operator>
<call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>step</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>draw</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
