<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\internal\aintern_pixels.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_aintern_pixels_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_aintern_pixels_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_float.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_MAP_RGBA</name><parameter_list>(<parameter><type><name>_color</name></type></parameter>, <parameter><type><name>_r</name></type></parameter>, <parameter><type><name>_g</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>, <parameter><type><name>_a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (_color).r = _al_u8_to_float[_r]; (_color).g = _al_u8_to_float[_g]; (_color).b = _al_u8_to_float[_b]; (_color).a = _al_u8_to_float[_a]; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_INLINE_GET_PIXEL</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>color</name></type></parameter>, <parameter><type><name>advance</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { switch (format) { case ALLEGRO_PIXEL_FORMAT_ARGB_8888: { uint32_t _gp_pixel = *(uint32_t *)(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x000000FF) &gt;&gt; 0, (_gp_pixel &amp; 0xFF000000) &gt;&gt; 24); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_RGBA_8888: { uint32_t _gp_pixel = *(uint32_t *)(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0xFF000000) &gt;&gt; 24, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x000000FF) &gt;&gt; 0); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_ARGB_4444: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_4[(_gp_pixel &amp; 0x0F00) &gt;&gt; 8], _al_rgb_scale_4[(_gp_pixel &amp; 0x00F0) &gt;&gt; 4], _al_rgb_scale_4[(_gp_pixel &amp; 0x000F)], _al_rgb_scale_4[(_gp_pixel &amp; 0xF000) &gt;&gt; 12]); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_RGB_888: { uint32_t _gp_pixel = _AL_READ3BYTES(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0xFF0000) &gt;&gt; 16, (_gp_pixel &amp; 0x00FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x0000FF) &gt;&gt; 0, 255); if (advance) data += 3; break; } case ALLEGRO_PIXEL_FORMAT_RGB_565: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_5[(_gp_pixel &amp; 0xF800) &gt;&gt; 11], _al_rgb_scale_6[(_gp_pixel &amp; 0x07E0) &gt;&gt; 5], _al_rgb_scale_5[(_gp_pixel &amp; 0x001F)], 255); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_RGB_555: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_5[(_gp_pixel &amp; 0x7C00) &gt;&gt; 10], _al_rgb_scale_5[(_gp_pixel &amp; 0x03E0) &gt;&gt; 5], _al_rgb_scale_5[(_gp_pixel &amp; 0x001F)], 255); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_RGBA_5551: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_5[(_gp_pixel &amp; 0xF800) &gt;&gt; 11], _al_rgb_scale_5[(_gp_pixel &amp; 0x07C0) &gt;&gt; 6], _al_rgb_scale_5[(_gp_pixel &amp; 0x003E) &gt;&gt; 1], _al_rgb_scale_1[_gp_pixel &amp; 1]); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_ARGB_1555: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_5[(_gp_pixel &amp; 0x7C00) &gt;&gt; 10], _al_rgb_scale_5[(_gp_pixel &amp; 0x03E0) &gt;&gt; 5], _al_rgb_scale_5[(_gp_pixel &amp; 0x001F)], _al_rgb_scale_1[(_gp_pixel &amp; 0x8000) &gt;&gt; 15]); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_ABGR_8888: { uint32_t _gp_pixel = *(uint32_t *)(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0x000000FF) &gt;&gt; 0, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, (_gp_pixel &amp; 0xFF000000) &gt;&gt; 24); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_XBGR_8888: { uint32_t _gp_pixel = *(uint32_t *)(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0x000000FF) &gt;&gt; 0, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, 255); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_BGR_888: { uint32_t _gp_pixel = _AL_READ3BYTES(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0x000000FF) &gt;&gt; 0, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, 255); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_BGR_565: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_5[(_gp_pixel &amp; 0x001F)], _al_rgb_scale_6[(_gp_pixel &amp; 0x07E0) &gt;&gt; 5], _al_rgb_scale_5[(_gp_pixel &amp; 0xF800) &gt;&gt; 11], 255); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_BGR_555: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_5[(_gp_pixel &amp; 0x001F)], _al_rgb_scale_5[(_gp_pixel &amp; 0x03E0) &gt;&gt; 5], _al_rgb_scale_5[(_gp_pixel &amp; 0x7C00) &gt;&gt; 10], 255); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_RGBX_8888: { uint32_t _gp_pixel = *(uint32_t *)(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0xFF000000) &gt;&gt; 24, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, 255); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_XRGB_8888: { uint32_t _gp_pixel = *(uint32_t *)(data); _AL_MAP_RGBA(color, (_gp_pixel &amp; 0x00FF0000) &gt;&gt; 16, (_gp_pixel &amp; 0x0000FF00) &gt;&gt; 8, (_gp_pixel &amp; 0x000000FF), 255); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_ABGR_F32: { float *f = (float *)data; color.r = f[0]; color.g = f[1]; color.b = f[2]; color.a = f[3]; if (advance) data += 4 * sizeof(float); break; } case ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE: { uint8_t *p = (uint8_t *)data; _AL_MAP_RGBA(color, *p, *(p + 1), *(p + 2), *(p + 3)); if (advance) data += 4; break; } case ALLEGRO_PIXEL_FORMAT_RGBA_4444: { uint16_t _gp_pixel = *(uint16_t *)(data); _AL_MAP_RGBA(color, _al_rgb_scale_4[(_gp_pixel &amp; 0xF000) &gt;&gt; 12], _al_rgb_scale_4[(_gp_pixel &amp; 0x0F00) &gt;&gt; 8], _al_rgb_scale_4[(_gp_pixel &amp; 0x00F0) &gt;&gt; 4], _al_rgb_scale_4[(_gp_pixel &amp; 0x000F)]); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8: { uint8_t c = *(uint8_t *)(data); _AL_MAP_RGBA(color, c, c, c, 255); if (advance) data += 2; break; } case ALLEGRO_PIXEL_FORMAT_ANY: case ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA: ALLEGRO_ERROR("INLINE_GET got fake pixel format: %d\n", format); abort(); break; case ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1: case ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3: case ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5: ALLEGRO_ERROR("INLINE_GET got compressed format: %d\n", format); abort(); break; case ALLEGRO_NUM_PIXEL_FORMATS: default: ALLEGRO_ERROR("INLINE_GET got non pixel format: %d\n", format); abort(); break; } } while (0)</cpp:value></cpp:define>


























































































































































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AL_INLINE_PUT_PIXEL</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>color</name></type></parameter>, <parameter><type><name>advance</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t _pp_pixel; switch (format) { case ALLEGRO_PIXEL_FORMAT_ARGB_8888: _pp_pixel = _al_fast_float_to_int(color.a * 255) &lt;&lt; 24; _pp_pixel |= _al_fast_float_to_int(color.r * 255) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.g * 255) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.b * 255); *(uint32_t *)(data) = _pp_pixel; if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_RGBA_8888: _pp_pixel = _al_fast_float_to_int(color.r * 255) &lt;&lt; 24; _pp_pixel |= _al_fast_float_to_int(color.g * 255) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.b * 255) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.a * 255); *(uint32_t *)(data) = _pp_pixel; if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_ARGB_4444: _pp_pixel = _al_fast_float_to_int(color.a * 15) &lt;&lt; 12; _pp_pixel |= _al_fast_float_to_int(color.r * 15) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.g * 15) &lt;&lt; 4; _pp_pixel |= _al_fast_float_to_int(color.b * 15); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_RGB_888: _pp_pixel = _al_fast_float_to_int(color.r * 255) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.g * 255) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.b * 255); _AL_WRITE3BYTES(data, _pp_pixel); if (advance) data += 3; break; case ALLEGRO_PIXEL_FORMAT_RGB_565: _pp_pixel = _al_fast_float_to_int(color.r * 0x1f) &lt;&lt; 11; _pp_pixel |= _al_fast_float_to_int(color.g * 0x3f) &lt;&lt; 5; _pp_pixel |= _al_fast_float_to_int(color.b * 0x1f); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_RGB_555: _pp_pixel = _al_fast_float_to_int(color.r * 0x1f) &lt;&lt; 10; _pp_pixel |= _al_fast_float_to_int(color.g * 0x1f) &lt;&lt; 5; _pp_pixel |= _al_fast_float_to_int(color.b * 0x1f); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_RGBA_5551: _pp_pixel = _al_fast_float_to_int(color.r * 0x1f) &lt;&lt; 11; _pp_pixel |= _al_fast_float_to_int(color.g * 0x1f) &lt;&lt; 6; _pp_pixel |= _al_fast_float_to_int(color.b * 0x1f) &lt;&lt; 1; _pp_pixel |= _al_fast_float_to_int(color.a); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_ARGB_1555: _pp_pixel = _al_fast_float_to_int(color.a) &lt;&lt; 15; _pp_pixel |= _al_fast_float_to_int(color.r * 0x1f) &lt;&lt; 10; _pp_pixel |= _al_fast_float_to_int(color.g * 0x1f) &lt;&lt; 5; _pp_pixel |= _al_fast_float_to_int(color.b * 0x1f); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_ABGR_8888: _pp_pixel = _al_fast_float_to_int(color.a * 0xff) &lt;&lt; 24; _pp_pixel |= _al_fast_float_to_int(color.b * 0xff) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.g * 0xff) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.r * 0xff); *(uint32_t *)(data) = _pp_pixel; if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_XBGR_8888: _pp_pixel = 0xff000000; _pp_pixel |= _al_fast_float_to_int(color.b * 0xff) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.g * 0xff) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.r * 0xff); *(uint32_t *)(data) = _pp_pixel; if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_BGR_888: _pp_pixel = _al_fast_float_to_int(color.b * 0xff) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.g * 0xff) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.r * 0xff); _AL_WRITE3BYTES(data, _pp_pixel); if (advance) data += 3; break; case ALLEGRO_PIXEL_FORMAT_BGR_565: _pp_pixel = _al_fast_float_to_int(color.b * 0x1f) &lt;&lt; 11; _pp_pixel |= _al_fast_float_to_int(color.g * 0x3f) &lt;&lt; 5; _pp_pixel |= _al_fast_float_to_int(color.r * 0x1f); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_BGR_555: _pp_pixel = _al_fast_float_to_int(color.b * 0x1f) &lt;&lt; 10; _pp_pixel |= _al_fast_float_to_int(color.g * 0x1f) &lt;&lt; 5; _pp_pixel |= _al_fast_float_to_int(color.r * 0x1f); *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_RGBX_8888: _pp_pixel = 0xff; _pp_pixel |= _al_fast_float_to_int(color.r * 0xff) &lt;&lt; 24; _pp_pixel |= _al_fast_float_to_int(color.g * 0xff) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.b * 0xff) &lt;&lt; 8; *(uint32_t *)(data) = _pp_pixel; if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_XRGB_8888: _pp_pixel = 0xff000000; _pp_pixel |= _al_fast_float_to_int(color.r * 0xff) &lt;&lt; 16; _pp_pixel |= _al_fast_float_to_int(color.g * 0xff) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.b * 0xff); *(uint32_t *)(data) = _pp_pixel; if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_ABGR_F32: { float *f = (float *)data; f[0] = color.r; f[1] = color.g; f[2] = color.b; f[3] = color.a; if (advance) data += 4 * sizeof(float); break; } case ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE: *((uint8_t *)data + 0) = _al_fast_float_to_int(color.r * 0xff); *((uint8_t *)data + 1) = _al_fast_float_to_int(color.g * 0xff); *((uint8_t *)data + 2) = _al_fast_float_to_int(color.b * 0xff); *((uint8_t *)data + 3) = _al_fast_float_to_int(color.a * 0xff); if (advance) data += 4; break; case ALLEGRO_PIXEL_FORMAT_RGBA_4444: _pp_pixel = _al_fast_float_to_int(color.a * 15); _pp_pixel |= _al_fast_float_to_int(color.r * 15) &lt;&lt; 12; _pp_pixel |= _al_fast_float_to_int(color.g * 15) &lt;&lt; 8; _pp_pixel |= _al_fast_float_to_int(color.b * 15) &lt;&lt; 4; *(uint16_t *)(data) = _pp_pixel; if (advance) data += 2; break; case ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8: { uint8_t c = color.r; *(uint8_t *)data = c; if (advance) data += 3; break; } case ALLEGRO_PIXEL_FORMAT_ANY: case ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA: case ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA: ALLEGRO_ERROR("INLINE_PUT got fake _pp_pixel format: %d\n", format); abort(); break; case ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1: case ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3: case ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5: ALLEGRO_ERROR("INLINE_PUT got compressed format: %d\n", format); abort(); break; case ALLEGRO_NUM_PIXEL_FORMATS: ALLEGRO_ERROR("INLINE_PUT got non _pp_pixel format: %d\n", format); abort(); break; } } while (0)</cpp:value></cpp:define>




















































































































































































































<expr_stmt><expr><call><name>AL_ARRAY</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_rgb_scale_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_ARRAY</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_rgb_scale_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_ARRAY</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_rgb_scale_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_ARRAY</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_rgb_scale_6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_ARRAY</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>_al_u8_to_float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_al_init_pixels</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_pixel_format_has_alpha</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_pixel_format_is_real</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_pixel_format_is_video_only</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_al_pixel_format_is_compressed</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_al_get_real_pixel_format</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><name>display</name><operator>,</operator> <name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <specifier>const</specifier><operator>*</operator></expr></argument>, <argument><expr><name>_al_pixel_format_name</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_PIXEL_FORMAT</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
