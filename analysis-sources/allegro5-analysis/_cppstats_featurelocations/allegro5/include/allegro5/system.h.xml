<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\system.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_system_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_system_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/path.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_SYSTEM</name></name></type> <name>ALLEGRO_SYSTEM</name>;</typedef>



<enum>enum <name>ALLEGRO_SYSTEM_ID</name> <block>{
<decl><name>ALLEGRO_SYSTEM_ID_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_XGLX</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_WINDOWS</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_MACOSX</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_ANDROID</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_IPHONE</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_GP2XWIZ</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_RASPBERRYPI</name> <init>= <expr><call><name>AL_ID</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>ALLEGRO_SYSTEM_ID_SDL</name> <init>= <macro><name>AL_ID</name><argument_list>(<argument><literal type="char">'S'</literal></argument>, <argument><literal type="char">'D'</literal></argument>, <argument><literal type="char">'L'</literal></argument>, <argument><literal type="char">'2'</literal></argument>)</argument_list></macro></init></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>ALLEGRO_SYSTEM_ID</name></name></type> <name>ALLEGRO_SYSTEM_ID</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al_init</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(al_install_system(ALLEGRO_VERSION_INT, atexit))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_install_system</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>version</name><operator>,</operator> <call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>atexit_ptr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_uninstall_system</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_is_system_installed</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SYSTEM</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_system_driver</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_CONFIG</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_system_config</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_SYSTEM_ID</name></expr></argument>, <argument><expr><name>al_get_system_id</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<enum>enum <block>{
<decl><name>ALLEGRO_RESOURCES_PATH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_TEMP_PATH</name></decl>,
<decl><name>ALLEGRO_USER_DATA_PATH</name></decl>,
<decl><name>ALLEGRO_USER_HOME_PATH</name></decl>,
<decl><name>ALLEGRO_USER_SETTINGS_PATH</name></decl>,
<decl><name>ALLEGRO_USER_DOCUMENTS_PATH</name></decl>,
<decl><name>ALLEGRO_EXENAME_PATH</name></decl>,
<decl><name>ALLEGRO_LAST_PATH</name></decl> 
}</block>;</enum>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_PATH</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_standard_path</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_exe_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_org_name</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>org_name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_set_app_name</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>app_name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_org_name</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_get_app_name</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_inhibit_screensaver</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name> <name>inhibit</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
