<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\color.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_color_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_color_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><name><name>struct</name> <name>ALLEGRO_COLOR</name></name></type> <name>ALLEGRO_COLOR</name>;</typedef>

<struct>struct <name>ALLEGRO_COLOR</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
}</block>;</struct>




<typedef>typedef <type><enum>enum <name>ALLEGRO_PIXEL_FORMAT</name>
<block>{
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ARGB_8888</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_RGBA_8888</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ARGB_4444</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_RGB_888</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 
<decl><name>ALLEGRO_PIXEL_FORMAT_RGB_565</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_RGB_555</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_RGBA_5551</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ARGB_1555</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_XBGR_8888</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_BGR_888</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 
<decl><name>ALLEGRO_PIXEL_FORMAT_BGR_565</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_BGR_555</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_RGBX_8888</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_XRGB_8888</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ABGR_F32</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_RGBA_4444</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>ALLEGRO_NUM_PIXEL_FORMATS</name></decl>
}</block></enum></type> <name>ALLEGRO_PIXEL_FORMAT</name>;</typedef>



<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_map_rgb</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <name>r</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>g</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_map_rgba</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <name>r</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>g</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>b</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_map_rgb_f</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <name>r</name><operator>,</operator> <name>float</name> <name>g</name><operator>,</operator> <name>float</name> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_map_rgba_f</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <name>r</name><operator>,</operator> <name>float</name> <name>g</name><operator>,</operator> <name>float</name> <name>b</name><operator>,</operator> <name>float</name> <name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_premul_rgba</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <name>r</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>g</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>b</name><operator>,</operator> <name>unsigned</name> <name>char</name> <name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_COLOR</name></expr></argument>, <argument><expr><name>al_premul_rgba_f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name> <name>r</name><operator>,</operator> <name>float</name> <name>g</name><operator>,</operator> <name>float</name> <name>b</name><operator>,</operator> <name>float</name> <name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unmap_rgb</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COLOR</name> <name>color</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>r</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>g</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unmap_rgba</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COLOR</name> <name>color</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>r</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>g</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>b</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unmap_rgb_f</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COLOR</name> <name>color</name><operator>,</operator> <name>float</name> <operator>*</operator><name>r</name><operator>,</operator> <name>float</name> <operator>*</operator><name>g</name><operator>,</operator> <name>float</name> <operator>*</operator><name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_unmap_rgba_f</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_COLOR</name> <name>color</name><operator>,</operator> <name>float</name> <operator>*</operator><name>r</name><operator>,</operator> <name>float</name> <operator>*</operator><name>g</name><operator>,</operator> <name>float</name> <operator>*</operator><name>b</name><operator>,</operator> <name>float</name> <operator>*</operator><name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_pixel_size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_pixel_format_bits</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_pixel_block_size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_pixel_block_width</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_get_pixel_block_height</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>format</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
