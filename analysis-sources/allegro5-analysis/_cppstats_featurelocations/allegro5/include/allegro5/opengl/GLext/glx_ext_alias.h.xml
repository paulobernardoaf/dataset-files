<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\opengl\GLext\glx_ext_alias.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigs</name></cpp:macro> <cpp:value>_al_glXGetFBConfigs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChooseFBConfig</name></cpp:macro> <cpp:value>_al_glXChooseFBConfig</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigAttrib</name></cpp:macro> <cpp:value>_al_glXGetFBConfigAttrib</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVisualFromFBConfig</name></cpp:macro> <cpp:value>_al_glXGetVisualFromFBConfig</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateWindow</name></cpp:macro> <cpp:value>_al_glXCreateWindow</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyWindow</name></cpp:macro> <cpp:value>_al_glXDestroyWindow</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreatePixmap</name></cpp:macro> <cpp:value>_al_glXCreatePixmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyPixmap</name></cpp:macro> <cpp:value>_al_glXDestroyPixmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreatePbuffer</name></cpp:macro> <cpp:value>_al_glXCreatePbuffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyPbuffer</name></cpp:macro> <cpp:value>_al_glXDestroyPbuffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryDrawable</name></cpp:macro> <cpp:value>_al_glXQueryDrawable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateNewContext</name></cpp:macro> <cpp:value>_al_glXCreateNewContext</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXMakeContextCurrent</name></cpp:macro> <cpp:value>_al_glXMakeContextCurrent</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentReadDrawable</name></cpp:macro> <cpp:value>_al_glXGetCurrentReadDrawable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentDisplay</name></cpp:macro> <cpp:value>_al_glXGetCurrentDisplay</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryContext</name></cpp:macro> <cpp:value>_al_glXQueryContext</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSelectEvent</name></cpp:macro> <cpp:value>_al_glXSelectEvent</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetSelectedEvent</name></cpp:macro> <cpp:value>_al_glXGetSelectedEvent</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetProcAddress</name></cpp:macro> <cpp:value>_al_glXGetProcAddress</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_ARB_get_proc_address</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetProcAddressARB</name></cpp:macro> <cpp:value>_al_glXGetProcAddressARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_ARB_create_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateContextAttribsARB</name></cpp:macro> <cpp:value>_al_glXCreateContextAttribsARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapIntervalSGI</name></cpp:macro> <cpp:value>_al_glXSwapIntervalSGI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_video_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVideoSyncSGI</name></cpp:macro> <cpp:value>_al_glXGetVideoSyncSGI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitVideoSyncSGI</name></cpp:macro> <cpp:value>_al_glXWaitVideoSyncSGI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_make_current_read</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXMakeCurrentReadSGI</name></cpp:macro> <cpp:value>_al_glXMakeCurrentReadSGI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentReadDrawableSGI</name></cpp:macro> <cpp:value>_al_glXGetCurrentReadDrawableSGI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_video_source</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_VL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXVideoSourceSGIX</name></cpp:macro> <cpp:value>_al_glXCreateGLXVideoSourceSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyGLXVideoSourceSGIX</name></cpp:macro> <cpp:value>_al_glXDestroyGLXVideoSourceSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_import_context</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetCurrentDisplayEXT</name></cpp:macro> <cpp:value>_al_glXGetCurrentDisplayEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryContextInfoEXT</name></cpp:macro> <cpp:value>_al_glXQueryContextInfoEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetContextIDEXT</name></cpp:macro> <cpp:value>_al_glXGetContextIDEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXImportContextEXT</name></cpp:macro> <cpp:value>_al_glXImportContextEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXFreeContextEXT</name></cpp:macro> <cpp:value>_al_glXFreeContextEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_fbconfig</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigAttribSGIX</name></cpp:macro> <cpp:value>_al_glXGetFBConfigAttribSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChooseFBConfigSGIX</name></cpp:macro> <cpp:value>_al_glXChooseFBConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPixmapWithConfigSGIX</name></cpp:macro> <cpp:value>_al_glXCreateGLXPixmapWithConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateContextWithConfigSGIX</name></cpp:macro> <cpp:value>_al_glXCreateContextWithConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVisualFromFBConfigSGIX</name></cpp:macro> <cpp:value>_al_glXGetVisualFromFBConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetFBConfigFromVisualSGIX</name></cpp:macro> <cpp:value>_al_glXGetFBConfigFromVisualSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_pbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPbufferSGIX</name></cpp:macro> <cpp:value>_al_glXCreateGLXPbufferSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyGLXPbufferSGIX</name></cpp:macro> <cpp:value>_al_glXDestroyGLXPbufferSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryGLXPbufferSGIX</name></cpp:macro> <cpp:value>_al_glXQueryGLXPbufferSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSelectEventSGIX</name></cpp:macro> <cpp:value>_al_glXSelectEventSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetSelectedEventSGIX</name></cpp:macro> <cpp:value>_al_glXGetSelectedEventSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGI_cushion</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCushionSGI</name></cpp:macro> <cpp:value>_al_glXCushionSGI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_video_resize</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindChannelToWindowSGIX</name></cpp:macro> <cpp:value>_al_glXBindChannelToWindowSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChannelRectSGIX</name></cpp:macro> <cpp:value>_al_glXChannelRectSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryChannelRectSGIX</name></cpp:macro> <cpp:value>_al_glXQueryChannelRectSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryChannelDeltasSGIX</name></cpp:macro> <cpp:value>_al_glXQueryChannelDeltasSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXChannelRectSyncSGIX</name></cpp:macro> <cpp:value>_al_glXChannelRectSyncSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_dmbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DM_BUFFER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXAssociateDMPbufferSGIX</name></cpp:macro> <cpp:value>_al_glXAssociateDMPbufferSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXJoinSwapGroupSGIX</name></cpp:macro> <cpp:value>_al_glXJoinSwapGroupSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_swap_barrier</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindSwapBarrierSGIX</name></cpp:macro> <cpp:value>_al_glXBindSwapBarrierSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryMaxSwapBarriersSGIX</name></cpp:macro> <cpp:value>_al_glXQueryMaxSwapBarriersSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SUN_get_transparent_index</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetTransparentIndexSUN</name></cpp:macro> <cpp:value>_al_glXGetTransparentIndexSUN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_copy_sub_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCopySubBufferMESA</name></cpp:macro> <cpp:value>_al_glXCopySubBufferMESA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_pixmap_colormap</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCreateGLXPixmapMESA</name></cpp:macro> <cpp:value>_al_glXCreateGLXPixmapMESA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_release_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseBuffersMESA</name></cpp:macro> <cpp:value>_al_glXReleaseBuffersMESA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_set_3dfx_mode</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSet3DfxModeMESA</name></cpp:macro> <cpp:value>_al_glXSet3DfxModeMESA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_OML_sync_control</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetSyncValuesOML</name></cpp:macro> <cpp:value>_al_glXGetSyncValuesOML</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetMscRateOML</name></cpp:macro> <cpp:value>_al_glXGetMscRateOML</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapBuffersMscOML</name></cpp:macro> <cpp:value>_al_glXSwapBuffersMscOML</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitForMscOML</name></cpp:macro> <cpp:value>_al_glXWaitForMscOML</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXWaitForSbcOML</name></cpp:macro> <cpp:value>_al_glXWaitForSbcOML</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_SGIX_hyperpipe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeNetworkSGIX</name></cpp:macro> <cpp:value>_al_glXQueryHyperpipeNetworkSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXHyperpipeConfigSGIX</name></cpp:macro> <cpp:value>_al_glXHyperpipeConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeConfigSGIX</name></cpp:macro> <cpp:value>_al_glXQueryHyperpipeConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXDestroyHyperpipeConfigSGIX</name></cpp:macro> <cpp:value>_al_glXDestroyHyperpipeConfigSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindHyperpipeSGIX</name></cpp:macro> <cpp:value>_al_glXBindHyperpipeSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeBestAttribSGIX</name></cpp:macro> <cpp:value>_al_glXQueryHyperpipeBestAttribSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXHyperpipeAttribSGIX</name></cpp:macro> <cpp:value>_al_glXHyperpipeAttribSGIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryHyperpipeAttribSGIX</name></cpp:macro> <cpp:value>_al_glXQueryHyperpipeAttribSGIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_MESA_agp_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetAGPOffsetMESA</name></cpp:macro> <cpp:value>_al_glXGetAGPOffsetMESA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_texture_from_pixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindTexImageEXT</name></cpp:macro> <cpp:value>_al_glXBindTexImageEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseTextImageEXT</name></cpp:macro> <cpp:value>_al_glXReleaseTextImageEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_video_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVideoDeviceNV</name></cpp:macro> <cpp:value>_al_glXGetVideoDeviceNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseVideoDeviceNV</name></cpp:macro> <cpp:value>_al_glXReleaseVideoDeviceNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindVideoImageNV</name></cpp:macro> <cpp:value>_al_glXBindVideoImageNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseVideoImageNV</name></cpp:macro> <cpp:value>_al_glXReleaseVideoImageNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSendPbufferToVideoNV</name></cpp:macro> <cpp:value>_al_glXSendPbufferToVideoNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXGetVideoInfoNV</name></cpp:macro> <cpp:value>_al_glXGetVideoInfoNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXJoinSwapGroupNV</name></cpp:macro> <cpp:value>_al_glXJoinSwapGroupNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindSwapBarrierNV</name></cpp:macro> <cpp:value>_al_glXBindSwapBarrierNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQuerySwapGroupNV</name></cpp:macro> <cpp:value>_al_glXQuerySwapGroupNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryMaxSwapGroupsNV</name></cpp:macro> <cpp:value>_al_glXQueryMaxSwapGroupsNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryFrameCountNV</name></cpp:macro> <cpp:value>_al_glXQueryFrameCountNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXResetFrameCountNV</name></cpp:macro> <cpp:value>_al_glXResetFrameCountNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXBindVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>_al_glXBindVideoCaptureDeviceNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXEnumerateVideoCaptureDevicesNV</name></cpp:macro> <cpp:value>_al_glXEnumerateVideoCaptureDevicesNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXLockVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>_al_glXLockVideoCaptureDeviceNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXQueryVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>_al_glXQueryVideoCaptureDeviceNV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXReleaseVideoCaptureDeviceNV</name></cpp:macro> <cpp:value>_al_glXReleaseVideoCaptureDeviceNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXSwapIntervalEXT</name></cpp:macro> <cpp:value>_al_glXSwapIntervalEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_NV_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glXCopyImageSubDataNV</name></cpp:macro> <cpp:value>_al_glXCopyImageSubDataNV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GLX_EXT_create_context_es_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
