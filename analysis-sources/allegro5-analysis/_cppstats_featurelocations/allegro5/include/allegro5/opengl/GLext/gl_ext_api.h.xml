<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\opengl\GLext\gl_ext_api.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GL_VERSION_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendColor</argument>, <argument>(GLclampf, GLclampf, GLclampf, GLclampf)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquation</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawRangeElements</argument>, <argument>(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTable</argument>, <argument>(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTableParameterfv</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTableParameteriv</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyColorTable</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTable</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableParameterfv</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableParameteriv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorSubTable</argument>, <argument>(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyColorSubTable</argument>, <argument>(GLenum, GLsizei, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexImage3D</argument>, <argument>(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexSubImage3D</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTexSubImage3D</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_imaging</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionFilter1D</argument>, <argument>(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionFilter2D</argument>, <argument>(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterf</argument>, <argument>(GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterfv</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameteri</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameteriv</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyConvolutionFilter1D</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyConvolutionFilter2D</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionFilter</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionParameterfv</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionParameteriv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSeparableFilter</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SeparableFilter2D</argument>, <argument>(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogram</argument>, <argument>(GLenum, GLboolean, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogramParameterfv</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogramParameteriv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMinmax</argument>, <argument>(GLenum, GLboolean, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMinmaxParameterfv</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMinmaxParameteriv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Histogram</argument>, <argument>(GLenum, GLsizei, GLenum, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Minmax</argument>, <argument>(GLenum, GLenum, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResetHistogram</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResetMinmax</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_1_3</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ActiveTexture</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClientActiveTexture</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1d</argument>, <argument>(GLenum, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1dv</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1f</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1fv</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1i</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1iv</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1s</argument>, <argument>(GLenum, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1sv</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2d</argument>, <argument>(GLenum, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2dv</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2f</argument>, <argument>(GLenum, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2fv</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2i</argument>, <argument>(GLenum, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2iv</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2s</argument>, <argument>(GLenum, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2sv</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3d</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3dv</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3f</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3fv</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3i</argument>, <argument>(GLenum, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3iv</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3s</argument>, <argument>(GLenum, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3sv</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4d</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4dv</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4f</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4fv</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4i</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4iv</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4s</argument>, <argument>(GLenum, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4sv</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadTransposeMatrixf</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadTransposeMatrixd</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultTransposeMatrixf</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultTransposeMatrixd</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleCoverage</argument>, <argument>(GLclampf, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexImage3D</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexImage2D</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexImage1D</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexSubImage3D</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexSubImage2D</argument>, <argument>(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexSubImage1D</argument>, <argument>(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCompressedTexImage</argument>, <argument>(GLenum, GLint, GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_1_4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFuncSeparate</argument>, <argument>(GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordf</argument>, <argument>(GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordfv</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordd</argument>, <argument>(GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoorddv</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordPointer</argument>, <argument>(GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawArrays</argument>, <argument>(GLenum, GLint *, GLsizei *, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawElements</argument>, <argument>(GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterf</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfv</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameteri</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameteriv</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3b</argument>, <argument>(GLbyte, GLbyte, GLbyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3bv</argument>, <argument>(const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3d</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3dv</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3f</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3fv</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3i</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3iv</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3s</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3sv</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3ub</argument>, <argument>(GLubyte, GLubyte, GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3ubv</argument>, <argument>(const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3ui</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3uiv</argument>, <argument>(const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3us</argument>, <argument>(GLushort, GLushort, GLushort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3usv</argument>, <argument>(const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColorPointer</argument>, <argument>(GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2d</argument>, <argument>(GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2dv</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2f</argument>, <argument>(GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2fv</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2i</argument>, <argument>(GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2iv</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2s</argument>, <argument>(GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2sv</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3d</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3dv</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3f</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3fv</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3i</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3iv</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3s</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3sv</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_1_5</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBuffer</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteBuffers</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenBuffers</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsBuffer</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BufferData</argument>, <argument>(GLenum, GLsizeiptr, const GLvoid *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BufferSubData</argument>, <argument>(GLenum, GLintptr, GLsizeiptr, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferSubData</argument>, <argument>(GLenum, GLintptr, GLsizeiptr, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLvoid*</argument>, <argument>MapBuffer</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>UnmapBuffer</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferParameteriv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferPointerv</argument>, <argument>(GLenum, GLenum, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenQueries</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteQueries</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsQuery</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginQuery</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndQuery</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryiv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjectiv</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjectuiv</argument>, <argument>(GLuint, GLenum, GLuint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_2_0</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationSeparate</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>CreateProgram</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>CreateShader</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteProgram</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteShader</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AttachShader</argument>, <argument>(GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DetachShader</argument>, <argument>(GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ShaderSource</argument>, <argument>(GLuint, GLsizei, const GLchar **, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompileShader</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsProgram</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsShader</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LinkProgram</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UseProgram</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ValidateProgram</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1f</argument>, <argument>(GLint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2f</argument>, <argument>(GLint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3f</argument>, <argument>(GLint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4f</argument>, <argument>(GLint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1i</argument>, <argument>(GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2i</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3i</argument>, <argument>(GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4i</argument>, <argument>(GLint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1fv</argument>, <argument>(GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2fv</argument>, <argument>(GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3fv</argument>, <argument>(GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4fv</argument>, <argument>(GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1iv</argument>, <argument>(GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2iv</argument>, <argument>(GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3iv</argument>, <argument>(GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4iv</argument>, <argument>(GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetShaderfv</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetShaderiv</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramfv</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramiv</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetShaderInfoLog</argument>, <argument>(GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramInfoLog</argument>, <argument>(GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetAttachedShaders</argument>, <argument>(GLuint, GLsizei, GLsizei *, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetUniformLocation</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveUniform</argument>, <argument>(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformfv</argument>, <argument>(GLuint, GLint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformiv</argument>, <argument>(GLuint, GLint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetShaderSource</argument>, <argument>(GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1f</argument>, <argument>(GLuint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1s</argument>, <argument>(GLuint, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1d</argument>, <argument>(GLuint, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2f</argument>, <argument>(GLuint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2s</argument>, <argument>(GLuint, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2d</argument>, <argument>(GLuint, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3f</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3s</argument>, <argument>(GLuint, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3d</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4f</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4s</argument>, <argument>(GLuint, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4d</argument>, <argument>(GLuint, GLdouble,GLdouble,GLdouble,GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Nub</argument>, <argument>(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fv</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1sv</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dv</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fv</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2sv</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dv</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fv</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3sv</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dv</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fv</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4sv</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dv</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4iv</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4bv</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ubv</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4usv</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4uiv</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Nbv</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Nsv</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Niv</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Nubv</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Nusv</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4Nuiv</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribPointer</argument>,<argument>(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableVertexAttribArray</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableVertexAttribArray</argument>, <argument>(GLuint)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindAttribLocation</argument>, <argument>(GLuint, GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveAttrib</argument>, <argument>(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetAttribLocation</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribdv</argument>, <argument>(GLuint, GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribfv</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribiv</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribPointerv</argument>, <argument>(GLuint, GLenum, GLvoid **)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawBuffers</argument>, <argument>(GLsizei n, const GLenum *)</argument>)</argument_list></macro>

<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StencilOpSeparate</argument>, <argument>(GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StencilFuncSeparate</argument>, <argument>(GLenum, GLenum, GLint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StencilMaskSeparate</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_2_1</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2x3fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3x2fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2x4fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4x2fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3x4fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4x3fv</argument>, <argument>(GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_3_0</name></expr></cpp:if>




<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorMaski</argument>, <argument>(GLuint, GLboolean, GLboolean, GLboolean, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBooleani_v</argument>, <argument>(GLenum, GLuint, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetIntegeri_v</argument>, <argument>(GLenum, GLuint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Enablei</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Disablei</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsEnabledi</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginTransformFeedback</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndTransformFeedback</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferRange</argument>, <argument>(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferBase</argument>, <argument>(GLenum, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TransformFeedbackVaryings</argument>, <argument>(GLuint, GLsizei, const GLint *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTransformFeedbackVarying</argument>, <argument>(GLuint, GLuint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClampColor</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginConditionalRender</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndConditionalRender</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1i</argument>, <argument>(GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2i</argument>, <argument>(GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3i</argument>, <argument>(GLuint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4i</argument>, <argument>(GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1ui</argument>, <argument>(GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2ui</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3ui</argument>, <argument>(GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4ui</argument>, <argument>(GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1iv</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2iv</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3iv</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4iv</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1uiv</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2uiv</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3uiv</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4uiv</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4bv</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4sv</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4ubv</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4usv</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribIPointer</argument>, <argument>(GLuint, GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribIiv</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribIuiv</argument>, <argument>(GLuint, GLenum, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformuiv</argument>, <argument>(GLuint, GLint, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindFragDataLocation</argument>, <argument>(GLuint, GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetFragDataLocation</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1ui</argument>, <argument>(GLint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2ui</argument>, <argument>(GLint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3ui</argument>, <argument>(GLint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4ui</argument>, <argument>(GLint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1uiv</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2uiv</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3uiv</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4uiv</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexParameterIiv</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexParameterIuiv</argument>, <argument>(GLenum, GLenum, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexParameterIiv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexParameterIuiv</argument>, <argument>(GLenum, GLenum, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearBufferiv</argument>, <argument>(GLenum, GLint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearBufferuiv</argument>, <argument>(GLenum, GLint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearBufferfv</argument>, <argument>(GLenum, GLint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearBufferfi</argument>, <argument>(GLenum, GLint, GLfloat, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>const GLubyte *</argument>, <argument>GetStringi</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_3_1</name></expr></cpp:if>



<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawArraysInstanced</argument>, <argument>(GLenum, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementsInstanced</argument>, <argument>(GLenum, GLsizei, GLenum, const GLvoid *, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexBuffer</argument>, <argument>(GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PrimitiveRestartIndex</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_3_2</name></expr></cpp:if>





<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInteger64i_v</argument>, <argument>(GLenum target, GLuint index, GLint64 *data)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferParameteri64v</argument>, <argument>(GLenum target, GLenum pname, GLint64 *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameteri</argument>, <argument>(GLuint program, GLenum pname, GLint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture</argument>, <argument>(GLenum target, GLenum attachment, GLuint texture, GLint level)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_3_3</name></expr></cpp:if>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_VERSION_4_3</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearBufferData</argument>, <argument>(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearBufferSubData</argument>, <argument>(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DispatchCompute</argument>, <argument>(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DispatchComputeIndirect</argument>, <argument>(GLintptr indirect)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyImageSubData</argument>, <argument>(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferParameteri</argument>, <argument>(GLenum target, GLenum pname, GLint param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFramebufferParameteriv</argument>, <argument>(GLenum target, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInternalformati64v</argument>, <argument>(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InvalidateTexSubImage</argument>, <argument>(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InvalidateTexImage</argument>, <argument>(GLuint texture, GLint level)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InvalidateBufferSubData</argument>, <argument>(GLuint buffer, GLintptr offset, GLsizeiptr length)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InvalidateBufferData</argument>, <argument>(GLuint buffer)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InvalidateFramebuffer</argument>, <argument>(GLenum target, GLsizei numAttachments, const GLenum *attachments)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InvalidateSubFramebuffer</argument>, <argument>(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawArraysIndirect</argument>, <argument>(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawElementsIndirect</argument>, <argument>(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramInterfaceiv</argument>, <argument>(GLuint program, GLenum programInterface, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GetProgramResourceIndex</argument>, <argument>(GLuint program, GLenum programInterface, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramResourceName</argument>, <argument>(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramResourceiv</argument>, <argument>(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetProgramResourceLocation</argument>, <argument>(GLuint program, GLenum programInterface, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetProgramResourceLocationIndex</argument>, <argument>(GLuint program, GLenum programInterface, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ShaderStorageBlockBinding</argument>, <argument>(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexBufferRange</argument>, <argument>(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexStorage2DMultisample</argument>, <argument>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexStorage3DMultisample</argument>, <argument>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureView</argument>, <argument>(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindVertexBuffer</argument>, <argument>(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribFormat</argument>, <argument>(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribIFormat</argument>, <argument>(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribLFormat</argument>, <argument>(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribBinding</argument>, <argument>(GLuint attribindex, GLuint bindingindex)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexBindingDivisor</argument>, <argument>(GLuint bindingindex, GLuint divisor)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DebugMessageControl</argument>, <argument>(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DebugMessageInsert</argument>, <argument>(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DebugMessageCallback</argument>, <argument>(GLDEBUGPROC callback, const void *userParam)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GetDebugMessageLog</argument>, <argument>(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PushDebugGroup</argument>, <argument>(GLenum source, GLuint id, GLsizei length, const GLchar *message)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PopDebugGroup</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ObjectLabel</argument>, <argument>(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectLabel</argument>, <argument>(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ObjectPtrLabel</argument>, <argument>(const void *ptr, GLsizei length, const GLchar *label)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectPtrLabel</argument>, <argument>(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GL_ARB_multitexture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ActiveTextureARB</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClientActiveTextureARB</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1dARB</argument>, <argument>(GLenum, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1dvARB</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1fARB</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1fvARB</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1iARB</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1ivARB</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1sARB</argument>, <argument>(GLenum, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1svARB</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2dARB</argument>, <argument>(GLenum, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2dvARB</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2fARB</argument>, <argument>(GLenum, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2fvARB</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2iARB</argument>, <argument>(GLenum, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2ivARB</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2sARB</argument>, <argument>(GLenum, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2svARB</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3dARB</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3dvARB</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3fARB</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3fvARB</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3iARB</argument>, <argument>(GLenum, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3ivARB</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3sARB</argument>, <argument>(GLenum, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3svARB</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4dARB</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4dvARB</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4fARB</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4fvARB</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4iARB</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4ivARB</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4sARB</argument>, <argument>(GLenum, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4svARB</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_transpose_matrix</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadTransposeMatrixfARB</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadTransposeMatrixdARB</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultTransposeMatrixfARB</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultTransposeMatrixdARB</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_multisample</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleCoverageARB</argument>, <argument>(GLclampf, GLboolean)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_texture_compression</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexImage3DARB</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexImage2DARB</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexImage1DARB</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexSubImage3DARB</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexSubImage2DARB</argument>, <argument>(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTexSubImage1DARB</argument>, <argument>(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCompressedTexImageARB</argument>, <argument>(GLenum, GLint, GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_point_parameters</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfARB</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfvARB</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_vertex_blend</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightbvARB</argument>, <argument>(GLint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightsvARB</argument>, <argument>(GLint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightivARB</argument>, <argument>(GLint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightfvARB</argument>, <argument>(GLint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightdvARB</argument>, <argument>(GLint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightubvARB</argument>, <argument>(GLint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightusvARB</argument>, <argument>(GLint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightuivARB</argument>, <argument>(GLint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WeightPointerARB</argument>, <argument>(GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexBlendARB</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_matrix_palette</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CurrentPaletteMatrixARB</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixIndexubvARB</argument>, <argument>(GLint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixIndexusvARB</argument>, <argument>(GLint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixIndexuivARB</argument>, <argument>(GLint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixIndexPointerARB</argument>, <argument>(GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_window_pos</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2dARB</argument>, <argument>(GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2dvARB</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2fARB</argument>, <argument>(GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2fvARB</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2iARB</argument>, <argument>(GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2ivARB</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2sARB</argument>, <argument>(GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2svARB</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3dARB</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3dvARB</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3fARB</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3fvARB</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3iARB</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3ivARB</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3sARB</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3svARB</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_vertex_program</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dARB</argument>, <argument>(GLuint, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fARB</argument>, <argument>(GLuint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1sARB</argument>, <argument>(GLuint, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dARB</argument>, <argument>(GLuint, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fARB</argument>, <argument>(GLuint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2sARB</argument>, <argument>(GLuint, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dARB</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fARB</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3sARB</argument>, <argument>(GLuint, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NbvARB</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NivARB</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NsvARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NubARB</argument>, <argument>(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NubvARB</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NuivARB</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NusvARB</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4bvARB</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dARB</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fARB</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ivARB</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4sARB</argument>, <argument>(GLuint, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ubvARB</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4uivARB</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4usvARB</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribPointerARB</argument>, <argument>(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableVertexAttribArrayARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableVertexAttribArrayARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramStringARB</argument>, <argument>(GLenum, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindProgramARB</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteProgramsARB</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenProgramsARB</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameter4dARB</argument>, <argument>(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameter4dvARB</argument>, <argument>(GLenum, GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameter4fARB</argument>, <argument>(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameter4fvARB</argument>, <argument>(GLenum, GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameter4dARB</argument>, <argument>(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameter4dvARB</argument>, <argument>(GLenum, GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameter4fARB</argument>, <argument>(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameter4fvARB</argument>, <argument>(GLenum, GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramEnvParameterdvARB</argument>, <argument>(GLenum, GLuint, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramEnvParameterfvARB</argument>, <argument>(GLenum, GLuint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramLocalParameterdvARB</argument>, <argument>(GLenum, GLuint, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramLocalParameterfvARB</argument>, <argument>(GLenum, GLuint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramivARB</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramStringARB</argument>, <argument>(GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribdvARB</argument>, <argument>(GLuint, GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribfvARB</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribivARB</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribPointervARB</argument>, <argument>(GLuint, GLenum, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsProgramARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_vertex_buffer_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferARB</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteBuffersARB</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenBuffersARB</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsBufferARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BufferDataARB</argument>, <argument>(GLenum, GLsizeiptrARB, const GLvoid *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BufferSubDataARB</argument>, <argument>(GLenum, GLintptrARB, GLsizeiptrARB, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferSubDataARB</argument>, <argument>(GLenum, GLintptrARB, GLsizeiptrARB, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLvoid*</argument>, <argument>MapBufferARB</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>UnmapBufferARB</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferParameterivARB</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferPointervARB</argument>, <argument>(GLenum, GLenum, GLvoid* *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_occlusion_query</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenQueriesARB</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteQueriesARB</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsQueryARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginQueryARB</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndQueryARB</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryivARB</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjectivARB</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjectuivARB</argument>, <argument>(GLuint, GLenum, GLuint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_shader_objects</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteObjectARB</argument>, <argument>(GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLhandleARB</argument>, <argument>GetHandleARB</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DetachObjectARB</argument>, <argument>(GLhandleARB, GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLhandleARB</argument>, <argument>CreateShaderObjectARB</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ShaderSourceARB</argument>, <argument>(GLhandleARB, GLsizei, const GLcharARB **, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompileShaderARB</argument>, <argument>(GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLhandleARB</argument>, <argument>CreateProgramObjectARB</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AttachObjectARB</argument>, <argument>(GLhandleARB, GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LinkProgramARB</argument>, <argument>(GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UseProgramObjectARB</argument>, <argument>(GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ValidateProgramARB</argument>, <argument>(GLhandleARB)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1fARB</argument>, <argument>(GLint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2fARB</argument>, <argument>(GLint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3fARB</argument>, <argument>(GLint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4fARB</argument>, <argument>(GLint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1iARB</argument>, <argument>(GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2iARB</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3iARB</argument>, <argument>(GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4iARB</argument>, <argument>(GLint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1fvARB</argument>, <argument>(GLint, GLsizei, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2fvARB</argument>, <argument>(GLint, GLsizei, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3fvARB</argument>, <argument>(GLint, GLsizei, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4fvARB</argument>, <argument>(GLint, GLsizei, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1ivARB</argument>, <argument>(GLint, GLsizei, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2ivARB</argument>, <argument>(GLint, GLsizei, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3ivARB</argument>, <argument>(GLint, GLsizei, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4ivARB</argument>, <argument>(GLint, GLsizei, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2fvARB</argument>, <argument>(GLint, GLsizei, GLboolean, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3fvARB</argument>, <argument>(GLint, GLsizei, GLboolean, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4fvARB</argument>, <argument>(GLint, GLsizei, GLboolean, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectParameterfvARB</argument>, <argument>(GLhandleARB, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectParameterivARB</argument>, <argument>(GLhandleARB, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInfoLogARB</argument>, <argument>(GLhandleARB, GLsizei, GLsizei *, GLcharARB *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetAttachedObjectsARB</argument>, <argument>(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetUniformLocationARB</argument>, <argument>(GLhandleARB, const GLcharARB *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveUniformARB</argument>, <argument>(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformfvARB</argument>, <argument>(GLhandleARB, GLint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformivARB</argument>, <argument>(GLhandleARB, GLint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetShaderSourceARB</argument>, <argument>(GLhandleARB, GLsizei, GLsizei *, GLcharARB *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GL_ARB_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fARB</argument>, <argument>(GLuint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1sARB</argument>, <argument>(GLuint, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dARB</argument>, <argument>(GLuint, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fARB</argument>, <argument>(GLuint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2sARB</argument>, <argument>(GLuint, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dARB</argument>, <argument>(GLuint, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fARB</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3sARB</argument>, <argument>(GLuint, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dARB</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fARB</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4sARB</argument>, <argument>(GLuint, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dARB</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NubARB</argument>, <argument>(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fvARB</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4svARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dvARB</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ivARB</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4bvARB</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ubvARB</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4usvARB</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4uivARB</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NbvARB</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NsvARB</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NivARB</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NubvARB</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NusvARB</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4NuivARB</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribPointerARB</argument>, <argument>(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableVertexAttribArrayARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableVertexAttribArrayARB</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindAttribLocationARB</argument>, <argument>(GLhandleARB, GLuint, const GLcharARB *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveAttribARB</argument>, <argument>(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetAttribLocationARB</argument>, <argument>(GLhandleARB, const GLcharARB *)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribdvARB</argument>, <argument>(GLuint, GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribfvARB</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribivARB</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribPointervARB</argument>, <argument>(GLuint, GLenum, GLvoid **)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_draw_buffers</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawBuffersARB</argument>, <argument>(GLsizei n, const GLenum *bufs)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_color_buffer_float</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClampColorARB</argument>, <argument>(GLenum, GLenum clamp)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_draw_instanced</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawArraysInstancedARB</argument>, <argument>(GLenum, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementsInstancedARB</argument>, <argument>(GLenum, GLsizei, GLenum, const GLvoid *, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_framebuffer_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsRenderbuffer</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindRenderbuffer</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteRenderbuffers</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenRenderbuffers</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RenderbufferStorage</argument>, <argument>(GLenum, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetRenderbufferParameteriv</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsFramebuffer</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindFramebuffer</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteFramebuffers</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenFramebuffers</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>CheckFramebufferStatus</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture1D</argument>, <argument>(GLenum, GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture2D</argument>, <argument>(GLenum, GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture3D</argument>, <argument>(GLenum, GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferRenderbuffer</argument>, <argument>(GLenum, GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFramebufferAttachmentParameteriv</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenerateMipmap</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlitFramebuffer</argument>, <argument>(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RenderbufferStorageMultisample</argument>, <argument>(GLenum, GLsizei, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureLayer</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_geometry_shader4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameteriARB</argument>, <argument>(GLuint, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureARB</argument>, <argument>(GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureLayerARB</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureFaceARB</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_instanced_arrays</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribDivisor</argument>, <argument>(GLuint, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_map_buffer_range</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapBufferRange</argument>, <argument>(GLenum, GLintptr, GLsizeiptr, GLbitfield)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FlushMappedBufferRange</argument>, <argument>(GLenum, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_texture_buffer_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexBufferARB</argument>, <argument>(GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_vertex_array_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindVertexArray</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteVertexArrays</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenVertexArrays</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsVertexArray</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_uniform_buffer_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformIndices</argument>, <argument>(GLuint, GLsizei, const GLchar* *, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveUniformsiv</argument>, <argument>(GLuint, GLsizei, const GLuint *, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveUniformName</argument>, <argument>(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GetUniformBlockIndex</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveUniformBlockiv</argument>, <argument>(GLuint, GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveUniformBlockName</argument>, <argument>(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformBlockBinding</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_copy_buffer</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyBufferSubData</argument>, <argument>(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_draw_elements_base_vertex</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementsBaseVertex</argument>, <argument>(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawRangeElementsBaseVertex</argument>, <argument>(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementsInstancedBaseVertex</argument>, <argument>(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawElementsBaseVertex</argument>, <argument>(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_provoking_vertex</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProvokingVertex</argument>, <argument>(GLenum mode)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_sync</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLsync</argument>, <argument>FenceSync</argument>, <argument>(GLenum condition, GLbitfield flags)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsSync</argument>, <argument>(GLsync sync)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteSync</argument>, <argument>(GLsync sync)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>ClientWaitSync</argument>, <argument>(GLsync sync, GLbitfield flags, GLuint64 timeout)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WaitSync</argument>, <argument>(GLsync sync, GLbitfield flags, GLuint64 timeout)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInteger64v</argument>, <argument>(GLenum pname, GLint64 *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSynciv</argument>, <argument>(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_texture_multisample</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexImage2DMultisample</argument>, <argument>(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexImage3DMultisample</argument>, <argument>(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultisamplefv</argument>, <argument>(GLenum pname, GLuint index, GLfloat *val)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleMaski</argument>, <argument>(GLuint index, GLbitfield mask)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_draw_buffers_blend</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationi</argument>, <argument>(GLuint buf, GLenum mode)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationSeparatei</argument>, <argument>(GLuint buf, GLenum modeRGB, GLenum modeAlpha)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFunci</argument>, <argument>(GLuint buf, GLenum src, GLenum dst)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFuncSeparatei</argument>, <argument>(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_sample_shading</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MinSampleShading</argument>, <argument>(GLclampf value)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_shading_language_include</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedStringARB</argument>, <argument>(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteNamedStringARB</argument>, <argument>(GLint namelen, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompileShaderIncludeARB</argument>, <argument>(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsNamedStringARB</argument>, <argument>(GLint namelen, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedStringARB</argument>, <argument>(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedStringivARB</argument>, <argument>(GLint namelen, const GLchar *name, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_blend_func_extended</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindFragDataLocationIndexed</argument>, <argument>(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetFragDataIndex</argument>, <argument>(GLuint program, const GLchar *name)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_sampler_objects</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenSamplers</argument>, <argument>(GLsizei count, GLuint *samplers)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteSamplers</argument>, <argument>(GLsizei count, const GLuint *samplers)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsSampler</argument>, <argument>(GLuint sampler)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindSampler</argument>, <argument>(GLenum unit, GLuint sampler)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplerParameteri</argument>, <argument>(GLuint sampler, GLenum pname, GLint param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplerParameteriv</argument>, <argument>(GLuint sampler, GLenum pname, const GLint *param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplerParameterf</argument>, <argument>(GLuint sampler, GLenum pname, GLfloat param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplerParameterfv</argument>, <argument>(GLuint sampler, GLenum pname, const GLfloat *param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplerParameterIiv</argument>, <argument>(GLuint sampler, GLenum pname, const GLint *param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplerParameterIuiv</argument>, <argument>(GLuint sampler, GLenum pname, const GLuint *param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSamplerParameteriv</argument>, <argument>(GLuint sampler, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSamplerParameterIiv</argument>, <argument>(GLuint sampler, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSamplerParameterfv</argument>, <argument>(GLuint sampler, GLenum pname, GLfloat *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSamplerParameterIfv</argument>, <argument>(GLuint sampler, GLenum pname, GLfloat *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_timer_query</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>QueryCounter</argument>, <argument>(GLuint id, GLenum target)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjecti64v</argument>, <argument>(GLuint id, GLenum pname, GLint64 *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjectui64v</argument>, <argument>(GLuint id, GLenum pname, GLuint64 *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexP2ui</argument>, <argument>(GLenum type, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexP2uiv</argument>, <argument>(GLenum type, const GLuint *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexP3ui</argument>, <argument>(GLenum type, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexP3uiv</argument>, <argument>(GLenum type, const GLuint *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexP4ui</argument>, <argument>(GLenum type, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexP4uiv</argument>, <argument>(GLenum type, const GLuint *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP1ui</argument>, <argument>(GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP1uiv</argument>, <argument>(GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP2ui</argument>, <argument>(GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP2uiv</argument>, <argument>(GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP3ui</argument>, <argument>(GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP3uiv</argument>, <argument>(GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP4ui</argument>, <argument>(GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordP4uiv</argument>, <argument>(GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP1ui</argument>, <argument>(GLenum texture, GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP1uiv</argument>, <argument>(GLenum texture, GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP2ui</argument>, <argument>(GLenum texture, GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP2uiv</argument>, <argument>(GLenum texture, GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP3ui</argument>, <argument>(GLenum texture, GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP3uiv</argument>, <argument>(GLenum texture, GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP4ui</argument>, <argument>(GLenum texture, GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordP4uiv</argument>, <argument>(GLenum texture, GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalP3ui</argument>, <argument>(GLenum type, GLuint coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalP3uiv</argument>, <argument>(GLenum type, const GLuint *coords)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorP3ui</argument>, <argument>(GLenum type, GLuint color)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorP3uiv</argument>, <argument>(GLenum type, const GLuint *color)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorP4ui</argument>, <argument>(GLenum type, GLuint color)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorP4uiv</argument>, <argument>(GLenum type, const GLuint *color)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColorP3ui</argument>, <argument>(GLenum type, GLuint color)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColorP3uiv</argument>, <argument>(GLenum type, const GLuint *color)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP1ui</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP1uiv</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP2ui</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP2uiv</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP3ui</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP3uiv</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP4ui</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, GLuint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribP4uiv</argument>, <argument>(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_draw_indirect</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawArraysIndirect</argument>, <argument>(GLenum mode, const GLvoid *indirect)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementsIndirect</argument>, <argument>(GLenum mode, GLenum type, const GLvoid *indirect)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_gpu_shader_fp64</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1d</argument>, <argument>(GLint location, GLdouble x)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2d</argument>, <argument>(GLint location, GLdouble x, GLdouble y)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3d</argument>, <argument>(GLint location, GLdouble x, GLdouble y, GLdouble z)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4d</argument>, <argument>(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1dv</argument>, <argument>(GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2dv</argument>, <argument>(GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3dv</argument>, <argument>(GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4dv</argument>, <argument>(GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2x3dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix2x4dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3x2dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix3x4dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4x2dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformMatrix4x3dv</argument>, <argument>(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformdv</argument>, <argument>(GLuint program, GLint location, GLdouble *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1dEXT</argument>, <argument>(GLuint program, GLint location, GLdouble x)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2dEXT</argument>, <argument>(GLuint program, GLint location, GLdouble x, GLdouble y)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3dEXT</argument>, <argument>(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4dEXT</argument>, <argument>(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix2dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix3dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix4dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix2x3dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix2x4dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix3x2dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix3x4dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix4x2dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix4x3dvEXT</argument>, <argument>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_shader_subroutine</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetSubroutineUniformLocation</argument>, <argument>(GLuint program, GLenum shadertype, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GetSubroutineIndex</argument>, <argument>(GLuint program, GLenum shadertype, const GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveSubroutineUniformiv</argument>, <argument>(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveSubroutineUniformName</argument>, <argument>(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveSubroutineName</argument>, <argument>(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformSubroutinesuiv</argument>, <argument>(GLenum shadertype, GLsizei count, const GLuint *indices)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformSubroutineuiv</argument>, <argument>(GLenum shadertype, GLint location, GLuint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramStageiv</argument>, <argument>(GLuint program, GLenum shadertype, GLenum pname, GLint *values)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_tessellation_shader</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PatchParameteri</argument>, <argument>(GLenum pname, GLint value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PatchParameterfv</argument>, <argument>(GLenum pname, const GLfloat *values)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_transform_feedback2</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindTransformFeedback</argument>, <argument>(GLenum target, GLuint id)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteTransformFeedbacks</argument>, <argument>(GLsizei n, const GLuint *ids)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenTransformFeedbacks</argument>, <argument>(GLsizei n, GLuint *ids)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsTransformFeedback</argument>, <argument>(GLuint id)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PauseTransformFeedback</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResumeTransformFeedback</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawTransformFeedback</argument>, <argument>(GLenum mode, GLuint id)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ARB_transform_feedback3</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawTransformFeedbackStream</argument>, <argument>(GLenum mode, GLuint id, GLuint stream)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginQueryIndexed</argument>, <argument>(GLenum target, GLuint index, GLuint id)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndQueryIndexed</argument>, <argument>(GLenum target, GLuint index)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryIndexediv</argument>, <argument>(GLenum target, GLuint index, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_blend_color</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendColorEXT</argument>, <argument>(GLclampf, GLclampf, GLclampf, GLclampf)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_polygon_offset</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PolygonOffsetEXT</argument>, <argument>(GLfloat, GLfloat)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_texture3D</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexImage3DEXT</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexSubImage3DEXT</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_texture_filter4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexFilterFuncSGIS</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexFilterFuncSGIS</argument>, <argument>(GLenum, GLenum, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_subtexture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexSubImage1DEXT</argument>, <argument>(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexSubImage2DEXT</argument>, <argument>(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_copy_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTexImage1DEXT</argument>, <argument>(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTexImage2DEXT</argument>, <argument>(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTexSubImage1DEXT</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTexSubImage2DEXT</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTexSubImage3DEXT</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_histogram</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogramEXT</argument>, <argument>(GLenum, GLboolean, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogramParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogramParameterivEXT</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMinmaxEXT</argument>, <argument>(GLenum, GLboolean, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMinmaxParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMinmaxParameterivEXT</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>HistogramEXT</argument>, <argument>(GLenum, GLsizei, GLenum, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MinmaxEXT</argument>, <argument>(GLenum, GLenum, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResetHistogramEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResetMinmaxEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_convolution</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionFilter1DEXT</argument>, <argument>(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionFilter2DEXT</argument>, <argument>(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterfEXT</argument>, <argument>(GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterfvEXT</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameteriEXT</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterivEXT</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyConvolutionFilter1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyConvolutionFilter2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionFilterEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionParameterivEXT</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSeparableFilterEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SeparableFilter2DEXT</argument>, <argument>(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGI_color_table</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTableSGI</argument>, <argument>(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTableParameterfvSGI</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTableParameterivSGI</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyColorTableSGI</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableSGI</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableParameterfvSGI</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableParameterivSGI</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_pixel_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTexGenSGIX</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_pixel_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTexGenParameteriSGIS</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTexGenParameterivSGIS</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTexGenParameterfSGIS</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTexGenParameterfvSGIS</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPixelTexGenParameterivSGIS</argument>, <argument>(GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPixelTexGenParameterfvSGIS</argument>, <argument>(GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_texture4D</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexImage4DSGIS</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexSubImage4DSGIS</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_texture_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>AreTexturesResidentEXT</argument>, <argument>(GLsizei, const GLuint *, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindTextureEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteTexturesEXT</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenTexturesEXT</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsTextureEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PrioritizeTexturesEXT</argument>, <argument>(GLsizei, const GLuint *, const GLclampf *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_detail_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DetailTexFuncSGIS</argument>, <argument>(GLenum, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetDetailTexFuncSGIS</argument>, <argument>(GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_sharpen_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SharpenTexFuncSGIS</argument>, <argument>(GLenum, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetSharpenTexFuncSGIS</argument>, <argument>(GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_multisample</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleMaskSGIS</argument>, <argument>(GLclampf, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplePatternSGIS</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_vertex_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ArrayElementEXT</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorPointerEXT</argument>, <argument>(GLint, GLenum, GLsizei, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawArraysEXT</argument>, <argument>(GLenum, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EdgeFlagPointerEXT</argument>, <argument>(GLsizei, GLsizei, const GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPointervEXT</argument>, <argument>(GLenum, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexPointerEXT</argument>, <argument>(GLenum, GLsizei, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalPointerEXT</argument>, <argument>(GLenum, GLsizei, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordPointerEXT</argument>, <argument>(GLint, GLenum, GLsizei, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexPointerEXT</argument>, <argument>(GLint, GLenum, GLsizei, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_blend_minmax</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_sprite</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SpriteParameterfSGIX</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SpriteParameterfvSGIX</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SpriteParameteriSGIX</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SpriteParameterivSGIX</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_point_parameters</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfEXT</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfvEXT</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_point_parameters</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfSGIS</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterfvSGIS</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_instruments</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetInstrumentsSGIX</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InstrumentsBufferSGIX</argument>, <argument>(GLsizei, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>PollInstrumentsSGIX</argument>, <argument>(GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReadInstrumentsSGIX</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StartInstrumentsSGIX</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StopInstrumentsSGIX</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_framezoom</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FrameZoomSGIX</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_tag_sample_buffer</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TagSampleBufferSGIX</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_polynomial_ffd</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeformationMap3dSGIX</argument>, <argument>(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeformationMap3fSGIX</argument>, <argument>(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeformSGIX</argument>, <argument>(GLbitfield)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadIdentityDeformationMapSGIX</argument>, <argument>(GLbitfield)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_reference_plane</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReferencePlaneSGIX</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_flush_raster</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FlushRasterSGIX</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_fog_function</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogFuncSGIS</argument>, <argument>(GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFogFuncSGIS</argument>, <argument>(GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_HP_image_transform</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ImageTransformParameteriHP</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ImageTransformParameterfHP</argument>, <argument>(GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ImageTransformParameterivHP</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ImageTransformParameterfvHP</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetImageTransformParameterivHP</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetImageTransformParameterfvHP</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_color_subtable</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorSubTableEXT</argument>, <argument>(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyColorSubTableEXT</argument>, <argument>(GLenum, GLsizei, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_PGI_misc_hints</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>HintPGI</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_paletted_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorTableEXT</argument>, <argument>(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableParameterivEXT</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetColorTableParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_list_priority</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetListParameterfvSGIX</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetListParameterivSGIX</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ListParameterfSGIX</argument>, <argument>(GLuint, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ListParameterfvSGIX</argument>, <argument>(GLuint, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ListParameteriSGIX</argument>, <argument>(GLuint, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ListParameterivSGIX</argument>, <argument>(GLuint, GLenum, const GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_index_material</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexMaterialEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_index_func</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexFuncEXT</argument>, <argument>(GLenum, GLclampf)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_compiled_vertex_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LockArraysEXT</argument>, <argument>(GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UnlockArraysEXT</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_cull_vertex</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CullParameterdvEXT</argument>, <argument>(GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CullParameterfvEXT</argument>, <argument>(GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_fragment_lighting</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentColorMaterialSGIX</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightfSGIX</argument>, <argument>(GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightfvSGIX</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightiSGIX</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightivSGIX</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightModelfSGIX</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightModelfvSGIX</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightModeliSGIX</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentLightModelivSGIX</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentMaterialfSGIX</argument>, <argument>(GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentMaterialfvSGIX</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentMaterialiSGIX</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FragmentMaterialivSGIX</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFragmentLightfvSGIX</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFragmentLightivSGIX</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFragmentMaterialfvSGIX</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFragmentMaterialivSGIX</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LightEnviSGIX</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_draw_range_elements</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawRangeElementsEXT</argument>, <argument>(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_light_texture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ApplyTextureEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureLightEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureMaterialEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_async</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AsyncMarkerSGIX</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>FinishAsyncSGIX</argument>, <argument>(GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>PollAsyncSGIX</argument>, <argument>(GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GenAsyncMarkersSGIX</argument>, <argument>(GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteAsyncMarkersSGIX</argument>, <argument>(GLuint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsAsyncMarkerSGIX</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_INTEL_parallel_arrays</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexPointervINTEL</argument>, <argument>(GLint, GLenum, const GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalPointervINTEL</argument>, <argument>(GLenum, const GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorPointervINTEL</argument>, <argument>(GLint, GLenum, const GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordPointervINTEL</argument>, <argument>(GLint, GLenum, const GLvoid* *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_pixel_transform</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTransformParameteriEXT</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTransformParameterfEXT</argument>, <argument>(GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTransformParameterivEXT</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTransformParameterfvEXT</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_secondary_color</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3bEXT</argument>, <argument>(GLbyte, GLbyte, GLbyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3bvEXT</argument>, <argument>(const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3dEXT</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3dvEXT</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3fEXT</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3fvEXT</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3iEXT</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3ivEXT</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3sEXT</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3svEXT</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3ubEXT</argument>, <argument>(GLubyte, GLubyte, GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3ubvEXT</argument>, <argument>(const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3uiEXT</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3uivEXT</argument>, <argument>(const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3usEXT</argument>, <argument>(GLushort, GLushort, GLushort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3usvEXT</argument>, <argument>(const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColorPointerEXT</argument>, <argument>(GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_texture_perturb_normal</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureNormalEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_multi_draw_arrays</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawArraysEXT</argument>, <argument>(GLenum, GLint *, GLsizei *, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawElementsEXT</argument>, <argument>(GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_fog_coord</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordfEXT</argument>, <argument>(GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordfvEXT</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoorddEXT</argument>, <argument>(GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoorddvEXT</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordPointerEXT</argument>, <argument>(GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_coordinate_frame</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3bEXT</argument>, <argument>(GLbyte, GLbyte, GLbyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3bvEXT</argument>, <argument>(const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3dEXT</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3dvEXT</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3fEXT</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3fvEXT</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3iEXT</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3ivEXT</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3sEXT</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Tangent3svEXT</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3bEXT</argument>, <argument>(GLbyte, GLbyte, GLbyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3bvEXT</argument>, <argument>(const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3dEXT</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3dvEXT</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3fEXT</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3fvEXT</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3iEXT</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3ivEXT</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3sEXT</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Binormal3svEXT</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TangentPointerEXT</argument>, <argument>(GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BinormalPointerEXT</argument>, <argument>(GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SUNX_constant_data</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FinishTextureSUNX</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SUN_global_alpha</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactorbSUN</argument>, <argument>(GLbyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactorsSUN</argument>, <argument>(GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactoriSUN</argument>, <argument>(GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactorfSUN</argument>, <argument>(GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactordSUN</argument>, <argument>(GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactorubSUN</argument>, <argument>(GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactorusSUN</argument>, <argument>(GLushort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GlobalAlphaFactoruiSUN</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SUN_triangle_list</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiSUN</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeusSUN</argument>, <argument>(GLushort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeubSUN</argument>, <argument>(GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuivSUN</argument>, <argument>(const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeusvSUN</argument>, <argument>(const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeubvSUN</argument>, <argument>(const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodePointerSUN</argument>, <argument>(GLenum, GLsizei, const GLvoid* *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SUN_vertex</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4ubVertex2fSUN</argument>, <argument>(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4ubVertex2fvSUN</argument>, <argument>(const GLubyte *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4ubVertex3fSUN</argument>, <argument>(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4ubVertex3fvSUN</argument>, <argument>(const GLubyte *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color3fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color3fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Normal3fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Normal3fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4fNormal3fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4fNormal3fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4fVertex4fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4fVertex4fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fColor4ubVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fColor4ubVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLubyte *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fColor3fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fColor3fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fNormal3fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fNormal3fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fColor4fNormal3fVertex3fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2fColor4fNormal3fVertex3fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4fColor4fNormal3fVertex4fSUN</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4fColor4fNormal3fVertex4fvSUN</argument>, <argument>(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiColor4ubVertex3fSUN</argument>, <argument>(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiColor4ubVertex3fvSUN</argument>, <argument>(const GLuint *, const GLubyte *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiColor3fVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiColor3fVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiNormal3fVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiNormal3fVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiColor4fNormal3fVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiColor4fNormal3fVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiTexCoord2fVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiTexCoord2fVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</argument>, <argument>(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_blend_func_separate</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFuncSeparateEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_INGR_blend_func_separate</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFuncSeparateINGR</argument>, <argument>(GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_vertex_weighting</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexWeightfEXT</argument>, <argument>(GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexWeightfvEXT</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexWeightPointerEXT</argument>, <argument>(GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_vertex_array_range</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FlushVertexArrayRangeNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexArrayRangeNV</argument>, <argument>(GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_register_combiners</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerParameterfvNV</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerParameterfNV</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerParameterivNV</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerParameteriNV</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerInputNV</argument>, <argument>(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerOutputNV</argument>, <argument>(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FinalCombinerInputNV</argument>, <argument>(GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCombinerInputParameterfvNV</argument>, <argument>(GLenum, GLenum, GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCombinerInputParameterivNV</argument>, <argument>(GLenum, GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCombinerOutputParameterfvNV</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCombinerOutputParameterivNV</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFinalCombinerInputParameterfvNV</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFinalCombinerInputParameterivNV</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_MESA_resize_buffers</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResizeBuffersMESA</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_MESA_window_pos</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2dMESA</argument>, <argument>(GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2dvMESA</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2fMESA</argument>, <argument>(GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2fvMESA</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2iMESA</argument>, <argument>(GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2ivMESA</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2sMESA</argument>, <argument>(GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos2svMESA</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3dMESA</argument>, <argument>(GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3dvMESA</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3fMESA</argument>, <argument>(GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3fvMESA</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3iMESA</argument>, <argument>(GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3ivMESA</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3sMESA</argument>, <argument>(GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos3svMESA</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4dMESA</argument>, <argument>(GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4dvMESA</argument>, <argument>(const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4fMESA</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4fvMESA</argument>, <argument>(const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4iMESA</argument>, <argument>(GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4ivMESA</argument>, <argument>(const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4sMESA</argument>, <argument>(GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WindowPos4svMESA</argument>, <argument>(const GLshort *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_IBM_multimode_draw_arrays</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiModeDrawArraysIBM</argument>, <argument>(GLenum, const GLint *, const GLsizei *, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiModeDrawElementsIBM</argument>, <argument>(const GLenum *, const GLsizei *, GLenum, const GLvoid* *, GLsizei, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AGK_IBM_vertex_array_lists</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorPointerListIBM</argument>, <argument>(GLint, GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColorPointerListIBM</argument>, <argument>(GLint, GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EdgeFlagPointerListIBM</argument>, <argument>(GLint, const GLboolean* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordPointerListIBM</argument>, <argument>(GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexPointerListIBM</argument>, <argument>(GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalPointerListIBM</argument>, <argument>(GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordPointerListIBM</argument>, <argument>(GLint, GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexPointerListIBM</argument>, <argument>(GLint, GLenum, GLint, const GLvoid* *, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_3DFX_tbuffer</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TbufferMask3DFX</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_multisample</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleMaskEXT</argument>, <argument>(GLclampf, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SamplePatternEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIS_texture_color_mask</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureColorMaskSGIS</argument>, <argument>(GLboolean, GLboolean, GLboolean, GLboolean)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SGIX_igloo_interface</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IglooInterfaceSGIX</argument>, <argument>(GLenum, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_fence</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteFencesNV</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenFencesNV</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsFenceNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>TestFenceNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFenceivNV</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FinishFenceNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SetFenceNV</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_evaluators</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapControlPointsNV</argument>, <argument>(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapParameterivNV</argument>, <argument>(GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapParameterfvNV</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMapControlPointsNV</argument>, <argument>(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMapParameterivNV</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMapParameterfvNV</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMapAttribParameterivNV</argument>, <argument>(GLenum, GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMapAttribParameterfvNV</argument>, <argument>(GLenum, GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EvalMapsNV</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_register_combiners2</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CombinerStageParameterfvNV</argument>, <argument>(GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCombinerStageParameterfvNV</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_vertex_program</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>AreProgramsResidentNV</argument>, <argument>(GLsizei, const GLuint *, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindProgramNV</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteProgramsNV</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ExecuteProgramNV</argument>, <argument>(GLenum, GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenProgramsNV</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramParameterdvNV</argument>, <argument>(GLenum, GLuint, GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramParameterfvNV</argument>, <argument>(GLenum, GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramivNV</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramStringNV</argument>, <argument>(GLuint, GLenum, GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTrackMatrixivNV</argument>, <argument>(GLenum, GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribdvNV</argument>, <argument>(GLuint, GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribfvNV</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribivNV</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribPointervNV</argument>, <argument>(GLuint, GLenum, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsProgramNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadProgramNV</argument>, <argument>(GLenum, GLuint, GLsizei, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameter4dNV</argument>, <argument>(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameter4dvNV</argument>, <argument>(GLenum, GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameter4fNV</argument>, <argument>(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameter4fvNV</argument>, <argument>(GLenum, GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameters4dvNV</argument>, <argument>(GLenum, GLuint, GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameters4fvNV</argument>, <argument>(GLenum, GLuint, GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RequestResidentProgramsNV</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TrackMatrixNV</argument>, <argument>(GLenum, GLuint, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribPointerNV</argument>, <argument>(GLuint, GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dNV</argument>, <argument>(GLuint, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1dvNV</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fNV</argument>, <argument>(GLuint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1fvNV</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1sNV</argument>, <argument>(GLuint, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1svNV</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dNV</argument>, <argument>(GLuint, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2dvNV</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fNV</argument>, <argument>(GLuint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2fvNV</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2sNV</argument>, <argument>(GLuint, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2svNV</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dNV</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3dvNV</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fNV</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3fvNV</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3sNV</argument>, <argument>(GLuint, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3svNV</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dNV</argument>, <argument>(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4dvNV</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fNV</argument>, <argument>(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4fvNV</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4sNV</argument>, <argument>(GLuint, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4svNV</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ubNV</argument>, <argument>(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4ubvNV</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs1dvNV</argument>, <argument>(GLuint, GLsizei, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs1fvNV</argument>, <argument>(GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs1svNV</argument>, <argument>(GLuint, GLsizei, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs2dvNV</argument>, <argument>(GLuint, GLsizei, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs2fvNV</argument>, <argument>(GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs2svNV</argument>, <argument>(GLuint, GLsizei, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs3dvNV</argument>, <argument>(GLuint, GLsizei, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs3fvNV</argument>, <argument>(GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs3svNV</argument>, <argument>(GLuint, GLsizei, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs4dvNV</argument>, <argument>(GLuint, GLsizei, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs4fvNV</argument>, <argument>(GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs4svNV</argument>, <argument>(GLuint, GLsizei, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs4ubvNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_envmap_bumpmap</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexBumpParameterivATI</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexBumpParameterfvATI</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexBumpParameterivATI</argument>, <argument>(GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexBumpParameterfvATI</argument>, <argument>(GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_fragment_shader</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GenFragmentShadersATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindFragmentShaderATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteFragmentShaderATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginFragmentShaderATI</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndFragmentShaderATI</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PassTexCoordATI</argument>, <argument>(GLuint, GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleMapATI</argument>, <argument>(GLuint, GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorFragmentOp1ATI</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorFragmentOp2ATI</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorFragmentOp3ATI</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AlphaFragmentOp1ATI</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AlphaFragmentOp2ATI</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AlphaFragmentOp3ATI</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SetFragmentShaderConstantATI</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_pn_triangles</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PNTrianglesiATI</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PNTrianglesfATI</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_vertex_array_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>NewObjectBufferATI</argument>, <argument>(GLsizei, const GLvoid *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsObjectBufferATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UpdateObjectBufferATI</argument>, <argument>(GLuint, GLuint, GLsizei, const GLvoid *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectBufferfvATI</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectBufferivATI</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FreeObjectBufferATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ArrayObjectATI</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetArrayObjectfvATI</argument>, <argument>(GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetArrayObjectivATI</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantArrayObjectATI</argument>, <argument>(GLuint, GLenum, GLsizei, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVariantArrayObjectfvATI</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVariantArrayObjectivATI</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_vertex_shader</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginVertexShaderEXT</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndVertexShaderEXT</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindVertexShaderEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GenVertexShadersEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteVertexShaderEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ShaderOp1EXT</argument>, <argument>(GLenum, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ShaderOp2EXT</argument>, <argument>(GLenum, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ShaderOp3EXT</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SwizzleEXT</argument>, <argument>(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>WriteMaskEXT</argument>, <argument>(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>InsertComponentEXT</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ExtractComponentEXT</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>GenSymbolsEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SetInvariantEXT</argument>, <argument>(GLuint, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SetLocalConstantEXT</argument>, <argument>(GLuint, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantbvEXT</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantsvEXT</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantfvEXT</argument>, <argument>(GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantdvEXT</argument>, <argument>(GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantubvEXT</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantusvEXT</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantuivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VariantPointerEXT</argument>, <argument>(GLuint, GLenum, GLuint, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableVariantClientStateEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableVariantClientStateEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>BindLightParameterEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>BindMaterialParameterEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>BindTexGenParameterEXT</argument>, <argument>(GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>BindTextureUnitParameterEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>BindParameterEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsVariantEnabledEXT</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVariantBooleanvEXT</argument>, <argument>(GLuint, GLenum, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVariantIntegervEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVariantFloatvEXT</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVariantPointervEXT</argument>, <argument>(GLuint, GLenum, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInvariantBooleanvEXT</argument>, <argument>(GLuint, GLenum, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInvariantIntegervEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetInvariantFloatvEXT</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetLocalConstantBooleanvEXT</argument>, <argument>(GLuint, GLenum, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetLocalConstantIntegervEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetLocalConstantFloatvEXT</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_vertex_streams</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1sATI</argument>, <argument>(GLenum, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1svATI</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1iATI</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1ivATI</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1fATI</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1fvATI</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1dATI</argument>, <argument>(GLenum, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream1dvATI</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2sATI</argument>, <argument>(GLenum, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2svATI</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2iATI</argument>, <argument>(GLenum, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2ivATI</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2fATI</argument>, <argument>(GLenum, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2fvATI</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2dATI</argument>, <argument>(GLenum, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream2dvATI</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3sATI</argument>, <argument>(GLenum, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3svATI</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3iATI</argument>, <argument>(GLenum, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3ivATI</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3fATI</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3fvATI</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3dATI</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream3dvATI</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4sATI</argument>, <argument>(GLenum, GLshort, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4svATI</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4iATI</argument>, <argument>(GLenum, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4ivATI</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4fATI</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4fvATI</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4dATI</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexStream4dvATI</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3bATI</argument>, <argument>(GLenum, GLbyte, GLbyte, GLbyte)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3bvATI</argument>, <argument>(GLenum, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3sATI</argument>, <argument>(GLenum, GLshort, GLshort, GLshort)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3svATI</argument>, <argument>(GLenum, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3iATI</argument>, <argument>(GLenum, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3ivATI</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3fATI</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3fvATI</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3dATI</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalStream3dvATI</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClientActiveVertexStreamATI</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexBlendEnviATI</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexBlendEnvfATI</argument>, <argument>(GLenum, GLfloat)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_element_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ElementPointerATI</argument>, <argument>(GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementArrayATI</argument>, <argument>(GLenum, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawRangeElementArrayATI</argument>, <argument>(GLenum, GLuint, GLuint, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_SUN_mesh_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawMeshArraysSUN</argument>, <argument>(GLenum, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_occlusion_query</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenOcclusionQueriesNV</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteOcclusionQueriesNV</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsOcclusionQueryNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginOcclusionQueryNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndOcclusionQueryNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetOcclusionQueryivNV</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetOcclusionQueryuivNV</argument>, <argument>(GLuint, GLenum, GLuint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_point_sprite</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameteriNV</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointParameterivNV</argument>, <argument>(GLenum, const GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_stencil_two_side</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ActiveStencilFaceEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_element_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ElementPointerAPPLE</argument>, <argument>(GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementArrayAPPLE</argument>, <argument>(GLenum, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawRangeElementArrayAPPLE</argument>, <argument>(GLenum, GLuint, GLuint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawElementArrayAPPLE</argument>, <argument>(GLenum, const GLint *, const GLsizei *, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiDrawRangeElementArrayAPPLE</argument>, <argument>(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_fence</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenFencesAPPLE</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteFencesAPPLE</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SetFenceAPPLE</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsFenceAPPLE</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>TestFenceAPPLE</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FinishFenceAPPLE</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>TestObjectAPPLE</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FinishObjectAPPLE</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_vertex_array_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindVertexArrayAPPLE</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteVertexArraysAPPLE</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenVertexArraysAPPLE</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsVertexArrayAPPLE</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_vertex_array_range</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexArrayRangeAPPLE</argument>, <argument>(GLsizei, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FlushVertexArrayRangeAPPLE</argument>, <argument>(GLsizei, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexArrayParameteriAPPLE</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_draw_buffers</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawBuffersATI</argument>, <argument>(GLsizei, const GLenum *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_fragment_program</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramNamedParameter4fNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramNamedParameter4dNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramNamedParameter4fvNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramNamedParameter4dvNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramNamedParameterfvNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramNamedParameterdvNV</argument>, <argument>(GLuint, GLsizei, const GLubyte *, GLdouble *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_half_float</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex2hNV</argument>, <argument>(GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex2hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex3hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex3hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex4hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex4hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Normal3hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Normal3hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color3hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color3hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord1hNV</argument>, <argument>(GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord1hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2hNV</argument>, <argument>(GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord3hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord3hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1hNV</argument>, <argument>(GLenum, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1hvNV</argument>, <argument>(GLenum, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2hNV</argument>, <argument>(GLenum, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2hvNV</argument>, <argument>(GLenum, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3hNV</argument>, <argument>(GLenum, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3hvNV</argument>, <argument>(GLenum, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4hNV</argument>, <argument>(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4hvNV</argument>, <argument>(GLenum, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordhNV</argument>, <argument>(GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordhvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3hNV</argument>, <argument>(GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColor3hvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexWeighthNV</argument>, <argument>(GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexWeighthvNV</argument>, <argument>(const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1hNV</argument>, <argument>(GLuint, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib1hvNV</argument>, <argument>(GLuint, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2hNV</argument>, <argument>(GLuint, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib2hvNV</argument>, <argument>(GLuint, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3hNV</argument>, <argument>(GLuint, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib3hvNV</argument>, <argument>(GLuint, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4hNV</argument>, <argument>(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttrib4hvNV</argument>, <argument>(GLuint, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs1hvNV</argument>, <argument>(GLuint, GLsizei, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs2hvNV</argument>, <argument>(GLuint, GLsizei, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs3hvNV</argument>, <argument>(GLuint, GLsizei, const GLhalfNV *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribs4hvNV</argument>, <argument>(GLuint, GLsizei, const GLhalfNV *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_pixel_data_range</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelDataRangeNV</argument>, <argument>(GLenum, GLsizei, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FlushPixelDataRangeNV</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_primitive_restart</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PrimitiveRestartNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PrimitiveRestartIndexNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_map_object_buffer</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLvoid*</argument>, <argument>MapObjectBufferATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UnmapObjectBufferATI</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_separate_stencil</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StencilOpSeparateATI</argument>, <argument>(GLenum, GLenum, GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StencilFuncSeparateATI</argument>, <argument>(GLenum, GLenum, GLint, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_ATI_vertex_attrib_array_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribArrayObjectATI</argument>, <argument>(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribArrayObjectfvATI</argument>, <argument>(GLuint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribArrayObjectivATI</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_OES_byte_coordinates</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex2bOES</argument>, <argument>( GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex3bOES</argument>, <argument>( GLbyte, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex4bOES</argument>, <argument>( GLbyte, GLbyte, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex2bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex3bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex4bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord1bOES</argument>, <argument>( GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2bOES</argument>, <argument>( GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord3bOES</argument>, <argument>( GLbyte, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4bOES</argument>, <argument>( GLbyte, GLbyte, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord1bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord3bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4bvOES</argument>, <argument>( const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1bOES</argument>, <argument>( GLenum, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2bOES</argument>, <argument>( GLenum, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3bOES</argument>, <argument>( GLenum, GLbyte, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4bOES</argument>, <argument>( GLenum, GLbyte, GLbyte, GLbyte, GLbyte )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1bvOES</argument>, <argument>( GLenum texture, const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2bvOES</argument>, <argument>( GLenum texture, const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3bvOES</argument>, <argument>( GLenum texture, const GLbyte * )</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4bvOES</argument>, <argument>( GLenum texture, const GLbyte * )</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_OES_fixed_point</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex2xOES</argument>, <argument>(GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex3xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex4xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex2xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex3xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Vertex4xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Normal3xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Normal3xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord1xOES</argument>, <argument>(GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2xOES</argument>, <argument>(GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord3xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord1xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord2xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord3xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoord4xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1xOES</argument>, <argument>(GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2xOES</argument>, <argument>(GLenum, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3xOES</argument>, <argument>(GLenum, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4xOES</argument>, <argument>(GLenum, GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord1xvOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord2xvOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord3xvOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoord4xvOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color3xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color3xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Color4xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexxOES</argument>, <argument>(GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexxvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RectxOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RectxvOES</argument>, <argument>(const GLfixed [<literal type="number">2</literal>], const GLfixed [<literal type="number">2</literal>])</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DepthRangexOES</argument>, <argument>(GLclampx, GLclampx)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadMatrixxOES</argument>, <argument>(const GLfixed [<literal type="number">16</literal>])</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultMatrixxOES</argument>, <argument>(const GLfixed [<literal type="number">16</literal>])</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LoadTransposeMatrixxOES</argument>, <argument>(const GLfixed [<literal type="number">16</literal>])</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultTransposeMatrixxOES</argument>, <argument>(const GLfixed [<literal type="number">16</literal>])</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RotatexOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ScalexOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TranslatexOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FrustumxOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>OrthoxOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexGenxOES</argument>, <argument>(GLenum, GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexGenxvOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexGenxvOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClipPlanexOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetClipPlanexOES</argument>, <argument>(GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RasterPos2xOES</argument>, <argument>(GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RasterPos3xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RasterPos4xOES</argument>, <argument>(GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RasterPos2xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RasterPos3xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RasterPos4xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MaterialxOES</argument>, <argument>(GLenum, GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MaterialxvOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMaterialxOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LightxOES</argument>, <argument>(GLenum, GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LightxvOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetLightxOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LightModelxOES</argument>, <argument>(GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LightModelxvOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PointSizexOES</argument>, <argument>(GLfixed size)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>LineWidthxOES</argument>, <argument>(GLfixed width)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PolygonOffsetxOES</argument>, <argument>(GLfixed factor, GLfixed units)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelStorex</argument>, <argument>(GLenum pname, GLfixed param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelTransferxOES</argument>, <argument>(GLenum pname, GLfixed param)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelMapx</argument>, <argument>(GLenum, GLint, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPixelMapxv</argument>, <argument>(GLenum, GLint, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterxOES</argument>, <argument>(GLenum, GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ConvolutionParameterxvOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetConvolutionParameterxvOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetHistogramParameterxvOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PixelZoomxOES</argument>, <argument>(GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BitmapxOES</argument>, <argument>(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexParameterxOES</argument>, <argument>(GLenum, GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexParameterxvOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexParameterxvOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexLevelParameterxvOES</argument>, <argument>(GLenum, GLint, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PrioritizeTexturesxOES</argument>, <argument>(GLsizei, GLuint *, GLclampx *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexEnvxOES</argument>, <argument>(GLenum, GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexEnvxvOES</argument>, <argument>(GLenum, GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexEnvxvOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogxOES</argument>, <argument>(GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogxvOES</argument>, <argument>(GLenum, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleCoverageOES</argument>, <argument>(GLclampx, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AlphaFuncxOES</argument>, <argument>(GLenum, GLclampx)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendColorxOES</argument>, <argument>(GLclampx, GLclampx, GLclampx, GLclampx)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearColorxOES</argument>, <argument>(GLclampx, GLclampx, GLclampx, GLclampx)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearDepthxOES</argument>, <argument>(GLclampx)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearAccumxOES</argument>, <argument>(GLclampx, GLclampx, GLclampx, GLclampx)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>AccumxOES</argument>, <argument>(GLenum, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Map1xOES</argument>, <argument>(GLenum, GLfixed, GLfixed, GLint, GLint, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Map2xOES</argument>, <argument>(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapGrid1xOES</argument>, <argument>(GLint, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapGrid2xOES</argument>, <argument>(GLint, GLfixed, GLfixed, GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMapxvOES</argument>, <argument>(GLenum, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EvalCoord1xOES</argument>, <argument>(GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EvalCoord2xOES</argument>, <argument>(GLfixed, GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EvalCoord1xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EvalCoord2xvOES</argument>, <argument>(const GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FeedbackBufferxOES</argument>, <argument>(GLsizei, GLenum, GLfixed *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PassThroughxOES</argument>, <argument>(GLfixed)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFixedvOES</argument>, <argument>(GLenum, GLfixed *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_OES_single_precision</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DepthRangefOES</argument>, <argument>(GLclampf, GLclampf)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FrustumfOES</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>OrthofOES</argument>, <argument>(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClipPlanefOES</argument>, <argument>(GLenum, const GLfloat*)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetClipPlanefOES</argument>, <argument>(GLenum, GLfloat*)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearDepthfOES</argument>, <argument>(GLclampd)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_OES_query_matrix</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLbitfield</argument>, <argument>QueryMatrixxOES</argument>, <argument>(GLfixed [<literal type="number">16</literal>], GLint [<literal type="number">16</literal>] )</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_depth_bounds_test</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DepthBoundsEXT</argument>, <argument>(GLclampd, GLclampd)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_blend_equation_separate</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationSeparateEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_framebuffer_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsRenderbufferEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindRenderbufferEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteRenderbuffersEXT</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenRenderbuffersEXT</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RenderbufferStorageEXT</argument>, <argument>(GLenum, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetRenderbufferParameterivEXT</argument>, <argument>(GLenum, GLenum, GLint*)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsFramebufferEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindFramebufferEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteFramebuffersEXT</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenFramebuffersEXT</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>CheckFramebufferStatusEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture1DEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture2DEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTexture3DEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferRenderbufferEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFramebufferAttachmentParameterivEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenerateMipmapEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_GREMEDY_string_marker</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StringMarkerGREMEDY</argument>, <argument>(GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_stencil_clear_tag</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>StencilClearTagEXT</argument>, <argument>(GLsizei, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_framebuffer_blit</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlitFramebufferEXT</argument>, <argument>(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_framebuffer_multisample</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RenderbufferStorageMultisampleEXT</argument>, <argument>(GLenum, GLsizei, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_timer_query</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjecti64vEXT</argument>, <argument>(GLuint, GLenum, GLint64EXT *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetQueryObjectui64vEXT</argument>, <argument>(GLuint, GLenum, GLuint64EXT *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_gpu_program_parameters</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameters4fvEXT</argument>, <argument>(GLenum, GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameters4fvEXT</argument>, <argument>(GLenum, GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_flush_buffer_range</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BufferParameteriAPPLE</argument>, <argument>(GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FlushMappedBufferRangeAPPLE</argument>, <argument>(GLenum, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_bindable_uniform</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UniformBufferEXT</argument>, <argument>(GLuint, GLint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetUniformBufferSizeEXT</argument>, <argument>(GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLintptr</argument>, <argument>GetUniformOffsetEXT</argument>, <argument>(GLuint program, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_draw_buffers2</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorMaskIndexedEXT</argument>, <argument>(GLuint, GLboolean, GLboolean, GLboolean, GLboolean)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBooleanIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLboolean *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetIntegerIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableIndexedEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableIndexedEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsEnabledIndexedEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_draw_instanced</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawArraysInstancedEXT</argument>, <argument>(GLenum, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawElementsInstancedEXT</argument>, <argument>(GLenum, GLsizei, GLenum, const GLvoid *, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_geometry_shader4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramParameteriEXT</argument>, <argument>(GLuint, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureEXT</argument>, <argument>(GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_ALLEGRO_GL_EXT_texture_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureLayerEXT</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureFaceEXT</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_gpu_shader4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1iEXT</argument>, <argument>(GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2iEXT</argument>, <argument>(GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1uiEXT</argument>, <argument>(GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2uiEXT</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3uiEXT</argument>, <argument>(GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4uiEXT</argument>, <argument>(GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4bvEXT</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4svEXT</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4ubvEXT</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4usvEXT</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribIPointerEXT</argument>, <argument>(GLuint, GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribIivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribIuivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1uiEXT</argument>, <argument>(GLint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2uiEXT</argument>, <argument>(GLint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3uiEXT</argument>, <argument>(GLint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4uiEXT</argument>, <argument>(GLint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform1uivEXT</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform2uivEXT</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform3uivEXT</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniform4uivEXT</argument>, <argument>(GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformuivEXT</argument>, <argument>(GLuint, GLint location, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindFragDataLocationEXT</argument>, <argument>(GLuint, GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetFragDataLocationEXT</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_texture_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureLayerEXT</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_texture_buffer_object</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexBufferEXT</argument>, <argument>(GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_texture_integer</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearColorIiEXT</argument>, <argument>(GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearColorIuiEXT</argument>, <argument>(GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexParameterIivEXT</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexParameterIuivEXT</argument>, <argument>(GLenum, GLenum, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexParameterIivEXT</argument>, <argument>(GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexParameterIiuvEXT</argument>, <argument>(GLenum, GLenum, GLuint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_depth_buffer_float</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DepthRangedNV</argument>, <argument>(GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClearDepthdNV</argument>, <argument>(GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DepthBoundsdNV</argument>, <argument>(GLdouble, GLdouble)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_framebuffer_multisample_coverage</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>RenderbufferStorageMultsampleCoverageNV</argument>, <argument>(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_geometry_program4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramVertexLimitNV</argument>, <argument>(GLenum, GLint)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_ALLEGRO_GL_EXT_geometry_shader4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureEXT</argument>, <argument>(GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_ALLEGRO_GL_EXT_texture_array</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferTextureLayerEXT</argument>, <argument>(GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_gpu_program4</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameterI4iNV</argument>, <argument>(GLenum, GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameterI4ivNV</argument>, <argument>(GLenum, GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParametersI4ivNV</argument>, <argument>(GLenum, GLuint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameterI4uiNV</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParameterI4uivNV</argument>, <argument>(GLenum, GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramLocalParametersI4uivNV</argument>, <argument>(GLenum, GLuint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameterI4iNV</argument>, <argument>(GLenum, GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameterI4ivNV</argument>, <argument>(GLenum, GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParametersI4ivNV</argument>, <argument>(GLenum, GLuint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameterI4uiNV</argument>, <argument>(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParameterI4uivNV</argument>, <argument>(GLenum, GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramEnvParametersI4uivNV</argument>, <argument>(GLenum, GLuint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramLocalParameterIivNV</argument>, <argument>(GLenum, GLuint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramLocalParameterIuivNV</argument>,<argument>(GLenum, GLuint, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramEnvParameterIivNV</argument>, <argument>(GLenum, GLuint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetProgramEnvParameterIuivNV</argument>, <argument>(GLenum, GLuint, GLuint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_parameter_buffer_object</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_ALLEGRO_GL_NV_transform_feedback</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferRangeNV</argument>, <argument>(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferOffsetNV</argument>,<argument>(GLenum, GLuint, GLuint, GLintptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferBaseNV</argument>, <argument>(GLenum, GLuint, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramBufferParametersfvNV</argument>, <argument>(GLenum, GLuint, GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramBufferParametersIivNV</argument>, <argument>(GLenum, GLuint, GLuint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramBufferParametersIuivNV</argument>,<argument>(GLenum, GLuint, GLuint, GLuint, const GLuint *)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_ALLEGRO_GL_EXT_draw_buffers2</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetIntegerIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLboolean *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_transform_feedback</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferRangeNV</argument>, <argument>(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferOffsetNV</argument>,<argument>(GLenum, GLuint, GLuint, GLintptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferBaseNV</argument>, <argument>(GLenum, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TransformFeedbackAttribsNV</argument>, <argument>(GLsizei, const GLint *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TransformFeedbackVaryingsNV</argument>,<argument>(GLuint, GLsizei, const GLint *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginTransformFeedbackNV</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndTransformFeedbackNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLint</argument>, <argument>GetVaryingLocationNV</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetActiveVaryingNV</argument>, <argument>(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ActiveVaryingNV</argument>, <argument>(GLuint, const GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTransformFeedbackVaryingNV</argument>, <argument>(GLuint, GLuint, GLint *)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_ALLEGRO_GL_EXT_draw_buffers2</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBooleanIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLboolean *)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_vertex_program4</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ALLEGRO_GL_EXT_gpu_shader4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1iEXT</argument>, <argument>(GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2iEXT</argument>, <argument>(GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1uiEXT</argument>, <argument>(GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2uiEXT</argument>, <argument>(GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3uiEXT</argument>, <argument>(GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4uiEXT</argument>, <argument>(GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4ivEXT</argument>, <argument>(GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI1uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI2uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI3uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4uivEXT</argument>, <argument>(GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4bvEXT</argument>, <argument>(GLuint, const GLbyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4svEXT</argument>, <argument>(GLuint, const GLshort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4ubvEXT</argument>, <argument>(GLuint, const GLubyte *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribI4usvEXT</argument>, <argument>(GLuint, const GLushort *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribIPointerEXT</argument>, <argument>(GLuint, GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribIivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVertexAttribIuivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_GREMEDY_frame_terminator</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FrameTerminatorGREMEDY</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_conditional_render</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginConditionalRenderNV</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndConditionalRenderNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_transform_feedback</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginTransformFeedbackEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndTransformFeedbackEXT</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferRangeEXT</argument>, <argument>(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferOffsetEXT</argument>, <argument>(GLenum, GLuint, GLuint, GLintptr)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindBufferBaseEXT</argument>, <argument>(GLenum, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TransformFeedbackVaryingsEXT</argument>, <argument>(GLuint, GLsizei, const GLint *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTransformFeedbackVaryingEXT</argument>, <argument>(GLuint, GLuint, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_direct_state_access</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ClientAttribDefaultEXT</argument>, <argument>(GLbitfield)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PushClientAttribDefaultEXT</argument>, <argument>(GLbitfield)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixLoadfEXT</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixLoaddEXT</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixMultfEXT</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixMultdEXT</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixLoadIdentityEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixRotatefEXT</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixRotatedEXT</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixScalefEXT</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixScaledEXT</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixTranslatefEXT</argument>, <argument>(GLenum, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixTranslatedEXT</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixFrustumEXT</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixOrthoEXT</argument>, <argument>(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixPopEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixPushEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixLoadTransposefEXT</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixLoadTransposedEXT</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixMultTransposefEXT</argument>, <argument>(GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MatrixMultTransposedEXT</argument>, <argument>(GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureParameterfEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureParameterfvEXT</argument>, <argument>(GLuint, GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureParameteriEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureParameterivEXT</argument>, <argument>(GLuint, GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureImage1DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureImage2DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureSubImage1DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureSubImage2DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTextureImage1DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTextureImage2DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTextureSubImage1DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTextureSubImage2DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureImageEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureParameterfvEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureParameterivEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureLevelParameterfvEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureLevelParameterivEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureImage3DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureSubImage3DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyTextureSubImage3DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexParameterfEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexParameteriEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexParameterivEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexImage1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexImage2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexSubImage1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexSubImage2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyMultiTexImage1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyMultiTexImage2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyMultiTexSubImage1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyMultiTexSubImage2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexImageEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexParameterivEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexLevelParameterfvEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexLevelParameterivEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexImage3DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexSubImage3DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CopyMultiTexSubImage3DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindMultiTextureEXT</argument>, <argument>(GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableClientStateIndexedEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableClientStateIndexedEXT</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexCoordPointerEXT</argument>, <argument>(GLenum, GLint, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexEnvfEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexEnvfvEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexEnviEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexEnvivEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexGendEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexGendvEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexGenfEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexGenfvEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexGeniEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexGenivEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexEnvfvEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexEnvivEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexGendvEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexGenfvEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexGenivEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFloatIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetDoubleIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPointerIndexedvEXT</argument>, <argument>(GLenum, GLuint, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTextureImage3DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTextureImage2DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTextureImage1DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTextureSubImage3DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTextureSubImage2DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedTextureSubImage1DEXT</argument>, <argument>(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCompressedTextureImageEXT</argument>, <argument>(GLuint, GLenum, GLint, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedMultiTexImage3DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedMultiTexImage2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedMultiTexImage1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedMultiTexSubImage3DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedMultiTexSubImage2DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>CompressedMultiTexSubImage1DEXT</argument>, <argument>(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetCompressedMultiTexImageEXT</argument>, <argument>(GLenum, GLenum, GLint, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramStringEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLsizei, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameter4dEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameter4dvEXT</argument>, <argument>(GLuint, GLenum, GLuint, const GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameter4fEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameter4fvEXT</argument>, <argument>(GLuint, GLenum, GLuint, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedProgramLocalParameterdvEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLdouble *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedProgramLocalParameterfvEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedProgramivEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedProgramStringEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameters4fvEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameterI4iEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameterI4ivEXT</argument>, <argument>(GLuint, GLenum, GLuint, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParametersI4ivEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameterI4uiEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParameterI4uivEXT</argument>, <argument>(GLuint, GLenum, GLuint, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedProgramLocalParametersI4uivEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedProgramLocalParameterIivEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedProgramLocalParameterIuivEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureParameterIivEXT</argument>, <argument>(GLuint, GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureParameterIuivEXT</argument>, <argument>(GLuint, GLenum, GLenum, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureParameterIivEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTextureParameterIuivEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexParameterIivEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexParameterIuivEXT</argument>, <argument>(GLenum, GLenum, GLenum, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexParameterIivEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultiTexParameterIuivEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1fEXT</argument>, <argument>(GLuint, GLint, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2fEXT</argument>, <argument>(GLuint, GLint, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3fEXT</argument>, <argument>(GLuint, GLint, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4fEXT</argument>, <argument>(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1iEXT</argument>, <argument>(GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4iEXT</argument>, <argument>(GLuint, GLint, GLint, GLint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1ivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2ivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3ivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4ivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix2fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix3fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix4fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix2x3fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix3x2fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix2x4fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix4x2fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix3x4fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformMatrix4x3fvEXT</argument>, <argument>(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1uiEXT</argument>, <argument>(GLuint, GLint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2uiEXT</argument>, <argument>(GLuint, GLint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3uiEXT</argument>, <argument>(GLuint, GLint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4uiEXT</argument>, <argument>(GLuint, GLint, GLuint, GLuint, GLuint, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform1uivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform2uivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform3uivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniform4uivEXT</argument>, <argument>(GLuint, GLint, GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedBufferDataEXT</argument>, <argument>(GLuint, GLsizeiptr, const GLvoid *, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedBufferSubDataEXT</argument>, <argument>(GLuint, GLintptr, GLsizeiptr, const GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLvoid*</argument>, <argument>MapNamedBufferEXT</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>UnmapNamedBufferEXT</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedBufferParameterivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedBufferPointervEXT</argument>, <argument>(GLuint, GLenum, GLvoid* *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedBufferSubDataEXT</argument>, <argument>(GLuint, GLintptr, GLsizeiptr, GLvoid *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureBufferEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexBufferEXT</argument>, <argument>(GLenum, GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedRenderbufferStorageEXT</argument>, <argument>(GLuint, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedRenderbufferParameterivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>CheckNamedFramebufferStatusEXT</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferTexture1DEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferTexture2DEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferTexture3DEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferRenderbufferEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedFramebufferAttachmentParameterivEXT</argument>, <argument>(GLuint, GLenum, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenerateTextureMipmapEXT</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenerateMultiTexMipmapEXT</argument>, <argument>(GLenum, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferDrawBufferEXT</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferDrawBuffersEXT</argument>, <argument>(GLuint, GLsizei, const GLenum *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FramebufferReadBufferEXT</argument>, <argument>(GLuint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetFramebufferParameterivEXT</argument>, <argument>(GLuint, GLenum, GLint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedRenderbufferStorageMultisampleEXT</argument>, <argument>(GLuint, GLsizei, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedRenderbufferStorageMultisampleCoverageEXT</argument>, <argument>(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferTextureEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferTextureLayerEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLint, GLint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NamedFramebufferTextureFaceEXT</argument>, <argument>(GLuint, GLenum, GLuint, GLint, GLenum)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureRenderbufferEXT</argument>, <argument>(GLuint, GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MultiTexRenderbufferEXT</argument>, <argument>(GLenum, GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_explicit_multisample</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetMultisamplefvNV</argument>, <argument>(GLenum, GLuint, GLfloat *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SampleMaskIndexedNV</argument>, <argument>(GLuint, GLbitfield)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexRenderbufferNV</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_transform_feedback2</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindTransformFeedbackNV</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeleteTransformFeedbacksNV</argument>, <argument>(GLsizei, const GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenTransformFeedbacksNV</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsTransformFeedbackNV</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>PauseTransformFeedbackNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ResumeTransformFeedbackNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DrawTransformFeedbackNV</argument>, <argument>(GLenum, GLuint)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_AMD_performance_monitor</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPerfMonitorGroupsAMD</argument>, <argument>(GLint *, GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPerfMonitorCountersAMD</argument>, <argument>(GLuint, GLint *, GLint *, GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPerfMonitorGroupStringAMD</argument>, <argument>(GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPerfMonitorCounterStringAMD</argument>, <argument>(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPerfMonitorCounterInfoAMD</argument>, <argument>(GLuint, GLuint, GLenum, void *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GenPerfMonitorsAMD</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DeletePerfMonitorsAMD</argument>, <argument>(GLsizei, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SelectPerfMonitorCountersAMD</argument>, <argument>(GLuint, GLboolean, GLuint, GLint, GLuint *)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginPerfMonitorAMD</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndPerfMonitorAMD</argument>, <argument>(GLuint)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetPerfMonitorCounterDataAMD</argument>, <argument>(GLuint, GLenum, GLsizei, GLuint *, GLint *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_AMD_vertex_shader_tesselator</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TessellationFactorAMD</argument>, <argument>(GLfloat)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TessellationModeAMD</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_provoking_vertex</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProvokingVertexEXT</argument>, <argument>(GLenum)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_AMD_draw_buffers_blend</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFuncIndexedAMD</argument>, <argument>(GLuint buf, GLenum src, GLenum dst)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendFuncSeparateIndexedAMD</argument>, <argument>(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationIndexedAMD</argument>, <argument>(GLuint buf, GLenum mode)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BlendEquationSeparateIndexedAMD</argument>, <argument>(GLuint buf, GLenum modeRGB, GLenum modeAlpha)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_texture_range</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureRangeAPPLE</argument>, <argument>(GLenum target, GLsizei length, const GLvoid *pointer)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetTexParameterPointervAPPLE</argument>, <argument>(GLenum target, GLenum pname, GLvoid* *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_vertex_program_evaluators</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EnableVertexAttribAPPLE</argument>, <argument>(GLuint index, GLenum pname)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>DisableVertexAttribAPPLE</argument>, <argument>(GLuint index, GLenum pname)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsVertexAttribEnabledAPPLE</argument>, <argument>(GLuint index, GLenum pname)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapVertexAttrib1dAPPLE</argument>, <argument>(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapVertexAttrib1fAPPLE</argument>, <argument>(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapVertexAttrib2dAPPLE</argument>, <argument>(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MapVertexAttrib2fAPPLE</argument>, <argument>(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_APPLE_object_purgeable</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>ObjectPurgeableAPPLE</argument>, <argument>(GLenum objectType, GLuint name, GLenum option)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>ObjectUnpurgeableAPPLE</argument>, <argument>(GLenum objectType, GLuint name, GLenum option)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetObjectParameterivAPPLE</argument>, <argument>(GLenum objectType, GLuint name, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_video_capture</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BeginVideoCaptureNV</argument>, <argument>(GLuint video_capture_slot)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindVideoCaptureStreamBufferNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BindVideoCaptureStreamTextureNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EndVideoCaptureNV</argument>, <argument>(GLuint video_capture_slot)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVideoCaptureivNV</argument>, <argument>(GLuint video_capture_slot, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVideoCaptureStreamivNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVideoCaptureStreamfvNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetVideoCaptureStreamdvNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLenum</argument>, <argument>VideoCaptureNV</argument>, <argument>(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VideoCaptureStreamParameterivNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VideoCaptureStreamParameterfvNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VideoCaptureStreamParameterdvNV</argument>, <argument>(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_EXT_separate_shader_objects</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>UseShaderProgramEXT</argument>, <argument>(GLenum type, GLuint program)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ActiveProgramEXT</argument>, <argument>(GLuint program)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLuint</argument>, <argument>CreateShaderProgramEXT</argument>, <argument>(GLenum type, const GLchar *string)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_shader_buffer_load</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MakeBufferResidentNV</argument>, <argument>(GLenum target, GLenum access)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MakeBufferNonResidentNV</argument>, <argument>(GLenum target)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsBufferResidentNV</argument>, <argument>(GLenum target)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MakeNamedBufferResidentNV</argument>, <argument>(GLuint buffer, GLenum access)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>MakeNamedBufferNonResidentNV</argument>, <argument>(GLuint buffer)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>GLboolean</argument>, <argument>IsNamedBufferResidentNV</argument>, <argument>(GLuint buffer)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetBufferParameterui64vNV</argument>, <argument>(GLenum target, GLenum pname, GLuint64EXT *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetNamedBufferParameterui64vNV</argument>, <argument>(GLuint buffer, GLenum pname, GLuint64EXT *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetIntegerui64vNV</argument>, <argument>(GLenum value, GLuint64EXT *result)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniformui64NV</argument>, <argument>(GLint location, GLuint64EXT value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>Uniformui64vNV</argument>, <argument>(GLint location, GLsizei count, const GLuint64EXT *value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetUniformui64vNV</argument>, <argument>(GLuint program, GLint location, GLuint64EXT *params)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformui64NV</argument>, <argument>(GLuint program, GLint location, GLuint64EXT value)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ProgramUniformui64vNV</argument>, <argument>(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_vertex_buffer_unified_memory</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>BufferAddressRangeNV</argument>, <argument>(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexFormatNV</argument>, <argument>(GLint size, GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>NormalFormatNV</argument>, <argument>(GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>ColorFormatNV</argument>, <argument>(GLint size, GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>IndexFormatNV</argument>, <argument>(GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TexCoordFormatNV</argument>, <argument>(GLint size, GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>EdgeFlagFormatNV</argument>, <argument>(GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>SecondaryColorFormatNV</argument>, <argument>(GLint size, GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>FogCoordFormatNV</argument>, <argument>(GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribFormatNV</argument>, <argument>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>VertexAttribIFormatNV</argument>, <argument>(GLuint index, GLint size, GLenum type, GLsizei stride)</argument>)</argument_list></macro>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>GetIntegerui64i_vNV</argument>, <argument>(GLenum value, GLuint index, GLuint64EXT *result)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_ALLEGRO_GL_NV_texture_barrier</name></expr></cpp:if>
<macro><name>AGL_API</name><argument_list>(<argument>void</argument>, <argument>TextureBarrierNV</argument>, <argument>(void)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
