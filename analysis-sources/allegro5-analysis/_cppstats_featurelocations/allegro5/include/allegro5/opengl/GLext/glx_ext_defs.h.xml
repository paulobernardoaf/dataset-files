<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\opengl\GLext\glx_ext_defs.h">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glxext_h_</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glx_glxext_h_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glx.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__glxext_h_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__glx_glxext_h_</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_VERSION_1_3</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_3</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIXMAP_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_CLOBBER_MASK</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_LEFT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_RIGHT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_LEFT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_RIGHT_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX_BUFFERS_BIT</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEPTH_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STENCIL_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONFIG_CAVEAT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_VISUAL_TYPE</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_TYPE</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX_VALUE</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RED_VALUE</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_GREEN_VALUE</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_BLUE_VALUE</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_ALPHA_VALUE</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DONT_CARE</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NONE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SLOW_CONFIG</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRUE_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DIRECT_COLOR</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PSEUDO_COLOR</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_COLOR</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GRAY_SCALE</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_GRAY</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RGB</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_ID</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SCREEN</name></cpp:macro> <cpp:value>0x800C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NON_CONFORMANT_CONFIG</name></cpp:macro> <cpp:value>0x800D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DRAWABLE_TYPE</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDER_TYPE</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_RENDERABLE</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FBCONFIG_ID</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_TYPE</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_TYPE</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_PIXELS</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PRESERVED_CONTENTS</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LARGEST_PBUFFER</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WIDTH</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HEIGHT</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EVENT_MASK</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DAMAGED</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAVED</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8041</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_VERSION_1_4</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VERSION_1_4</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_get_proc_address</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_ARB_get_proc_address</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_get_proc_address</name></cpp:macro></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>__GLXextFuncPtr</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_ARB_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES_ARB</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_vertex_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_vertex_buffer_object</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_ARB_vertex_buffer_object</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB</name></cpp:macro> <cpp:value>0x2095</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_fbconfig_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_fbconfig_float</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_ARB_fbconfig_float</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_FLOAT_TYPE_ARB</name></cpp:macro> <cpp:value>0x20B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_FLOAT_BIT_ARB</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_create_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_create_context</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_ARB_create_context</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_DEBUG_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_MAJOR_VERSION_ARB</name></cpp:macro> <cpp:value>0x2091</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_MINOR_VERSION_ARB</name></cpp:macro> <cpp:value>0x2092</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_FLAGS_ARB</name></cpp:macro> <cpp:value>0x2094</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_create_context_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ARB_create_context_profile</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_ARB_create_context_profile</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_CORE_PROFILE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_PROFILE_MASK_ARB</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIS_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIS_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIS_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_SGIS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES_SGIS</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SAMPLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_visual_info</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_visual_info</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_visual_info</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_VISUAL_TYPE_EXT</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_TYPE_EXT</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX_VALUE_EXT</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RED_VALUE_EXT</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_GREEN_VALUE_EXT</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_BLUE_VALUE_EXT</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_ALPHA_VALUE_EXT</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NONE_EXT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRUE_COLOR_EXT</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DIRECT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PSEUDO_COLOR_EXT</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_COLOR_EXT</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GRAY_SCALE_EXT</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STATIC_GRAY_EXT</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_RGB_EXT</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TRANSPARENT_INDEX_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_visual_rating</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_visual_rating</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_visual_rating</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_CAVEAT_EXT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SLOW_VISUAL_EXT</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NON_CONFORMANT_VISUAL_EXT</name></cpp:macro> <cpp:value>0x800D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_import_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_import_context</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_import_context</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SHARE_CONTEXT_EXT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_ID_EXT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SCREEN_EXT</name></cpp:macro> <cpp:value>0x800C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_fbconfig</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_fbconfig</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_fbconfig</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>XID</name></type> <name>GLXFBConfigIDSGIX</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>__GLXFBConfigRec</name></name> <modifier>*</modifier></type><name>GLXFBConfigSGIX</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIXMAP_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DRAWABLE_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RENDER_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_X_RENDERABLE_SGIX</name></cpp:macro> <cpp:value>0x8012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FBCONFIG_ID_SGIX</name></cpp:macro> <cpp:value>0x8013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COLOR_INDEX_TYPE_SGIX</name></cpp:macro> <cpp:value>0x8015</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_pbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_pbuffer</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_pbuffer</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>XID</name></type> <name>GLXPbufferSGIX</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>serial</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Bool</name></type> <name>send_event</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLXDrawable</name></type> <name>drawable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>event_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>draw_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
}</block></struct></type> <name>GLXBufferClobberEventSGIX</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BUFFER_CLOBBER_MASK_SGIX</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_LEFT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_RIGHT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_LEFT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_RIGHT_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX_BUFFERS_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEPTH_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_STENCIL_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_ACCUM_BUFFER_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_BIT_SGIX</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x8017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_PBUFFER_PIXELS_SGIX</name></cpp:macro> <cpp:value>0x8018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OPTIMAL_PBUFFER_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x8019</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x801A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PRESERVED_CONTENTS_SGIX</name></cpp:macro> <cpp:value>0x801B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_LARGEST_PBUFFER_SGIX</name></cpp:macro> <cpp:value>0x801C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WIDTH_SGIX</name></cpp:macro> <cpp:value>0x801D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HEIGHT_SGIX</name></cpp:macro> <cpp:value>0x801E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EVENT_MASK_SGIX</name></cpp:macro> <cpp:value>0x801F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DAMAGED_SGIX</name></cpp:macro> <cpp:value>0x8020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAVED_SGIX</name></cpp:macro> <cpp:value>0x8021</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_WINDOW_SGIX</name></cpp:macro> <cpp:value>0x8022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PBUFFER_SGIX</name></cpp:macro> <cpp:value>0x8023</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_video_resize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_video_resize</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_video_resize</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SYNC_FRAME_SGIX</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SYNC_SWAP_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_dmbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_dmbuffer</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_dmbuffer</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DIGITAL_MEDIA_PBUFFER_SGIX</name></cpp:macro> <cpp:value>0x8024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIS_blended_overlay</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIS_blended_overlay</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIS_blended_overlay</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BLENDED_RGBA_SGIS</name></cpp:macro> <cpp:value>0x8025</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIS_shared_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIS_shared_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIS_shared_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS</name></cpp:macro> <cpp:value>0x8026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS</name></cpp:macro> <cpp:value>0x8027</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_3DFX_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_3DFX_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_3DFX_multisample</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLE_BUFFERS_3DFX</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SAMPLES_3DFX</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_set_3dfx_mode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_MESA_set_3dfx_mode</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_set_3dfx_mode</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_3DFX_WINDOW_MODE_MESA</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_3DFX_FULLSCREEN_MODE_MESA</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_visual_select_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_visual_select_group</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_visual_select_group</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VISUAL_SELECT_GROUP_SGIX</name></cpp:macro> <cpp:value>0x8028</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_OML_swap_method</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_OML_swap_method</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OML_swap_method</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_METHOD_OML</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_EXCHANGE_OML</name></cpp:macro> <cpp:value>0x8061</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_COPY_OML</name></cpp:macro> <cpp:value>0x8062</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_UNDEFINED_OML</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_video_source</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_video_source</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_video_source</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>XID</name></type> <name>GLXVideoSourceSGIX</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_video_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_video_sync</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGI_video_sync</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_swap_control</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGI_swap_control</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_make_current_read</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_make_current_read</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGI_make_current_read</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_cushion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGI_cushion</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGI_cushion</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_swap_group</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_swap_group</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_swap_barrier</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_swap_barrier</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_swap_barrier</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SUN_get_transparent_index</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SUN_get_transparent_index</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SUN_get_transparent_index</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_copy_sub_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_copy_sub_buffer</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_MESA_copy_sub_buffer</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_pixmap_colormap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_pixmap_colormap</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_MESA_pixmap_colormap</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_release_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_release_buffers</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_MESA_release_buffers</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_OML_sync_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_OML_sync_control</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_OML_sync_control</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGIX_hyperpipe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SGIX_hyperpipe</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_SGIX_hyperpipe</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_ID_SGIX</name></cpp:macro> <cpp:value>0x8030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_DISPLAY_PIPE_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_RENDER_PIPE_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIPE_RECT_SGIX</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_PIPE_RECT_LIMITS_SGIX</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_STEREO_SGIX</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_HYPERPIPE_CONFIG_SGIX</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BAD_HYPERPIPE_SGIX</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><name>GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>networkId</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLXHyperpipeNetworkSGIX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><name>GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>participationType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeSlice</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLXHyperpipeConfigSGIX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><name>GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcXOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcYOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>destXOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>destYOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>destWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>destHeight</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLXPipeRect</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><name>GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>XOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>YOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxWidth</name></decl>;</decl_stmt>
}</block></struct></type> <name>GLXPipeRectLimits</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_MESA_agp_offset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MESA_agp_offset</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_MESA_agp_offset</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_framebuffer_sRGB</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_framebuffer_sRGB</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT</name></cpp:macro> <cpp:value>0x20B2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_fbconfig_packed_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_fbconfig_packed_float</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_fbconfig_packed_float</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT</name></cpp:macro> <cpp:value>0x20B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_texture_from_pixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_texture_from_pixmap</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_texture_from_pixmap</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_TEXTURE_RGB_EXT</name></cpp:macro> <cpp:value>0x20D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_TEXTURE_RGBA_EXT</name></cpp:macro> <cpp:value>0x20D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_MIPMAP_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x20D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BIND_TO_TEXTURE_TARGETS_EXT</name></cpp:macro> <cpp:value>0x20D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_Y_INVERTED_EXT</name></cpp:macro> <cpp:value>0x20D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_EXT</name></cpp:macro> <cpp:value>0x20D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_TARGET_EXT</name></cpp:macro> <cpp:value>0x20D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MIPMAP_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x20D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_NONE_EXT</name></cpp:macro> <cpp:value>0x20D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_RGB_EXT</name></cpp:macro> <cpp:value>0x20D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_FORMAT_RGBA_EXT</name></cpp:macro> <cpp:value>0x20DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_1D_BIT_EXT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_2D_BIT_EXT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_RECTANGLE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_1D_EXT</name></cpp:macro> <cpp:value>0x20DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_2D_EXT</name></cpp:macro> <cpp:value>0x20DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_TEXTURE_RECTANGLE_EXT</name></cpp:macro> <cpp:value>0x20DD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_LEFT_EXT</name></cpp:macro> <cpp:value>0x20DE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_RIGHT_EXT</name></cpp:macro> <cpp:value>0x20DF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_LEFT_EXT</name></cpp:macro> <cpp:value>0x20E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_RIGHT_EXT</name></cpp:macro> <cpp:value>0x20E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FRONT_EXT</name></cpp:macro> <cpp:value>GLX_FRONT_LEFT_EXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BACK_EXT</name></cpp:macro> <cpp:value>GLX_BACK_LEFT_EXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX0_EXT</name></cpp:macro> <cpp:value>0x20E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX1_EXT</name></cpp:macro> <cpp:value>0x20E3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX2_EXT</name></cpp:macro> <cpp:value>0x20E4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX3_EXT</name></cpp:macro> <cpp:value>0x20E5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX4_EXT</name></cpp:macro> <cpp:value>0x20E6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX5_EXT</name></cpp:macro> <cpp:value>0x20E7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX6_EXT</name></cpp:macro> <cpp:value>0x20E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX7_EXT</name></cpp:macro> <cpp:value>0x20E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX8_EXT</name></cpp:macro> <cpp:value>0x20EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_AUX9_EXT</name></cpp:macro> <cpp:value>0x20EB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_present_video</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_present_video</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_NV_present_video</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_GLX_NUM_VIDEO_SLOTS_NV</name></cpp:macro> <cpp:value>0x20F0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_video_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_video_output</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_NV_video_output</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_COLOR_NV</name></cpp:macro> <cpp:value>0x20C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_ALPHA_NV</name></cpp:macro> <cpp:value>0x20C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV</name></cpp:macro> <cpp:value>0x20C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV</name></cpp:macro> <cpp:value>0x20C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_FRAME_NV</name></cpp:macro> <cpp:value>0x20C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_FIELD_1_NV</name></cpp:macro> <cpp:value>0x20C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_VIDEO_OUT_FIELD_2_NV</name></cpp:macro> <cpp:value>0x20CA</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLXVideoDeviceNV</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_swap_group</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_swap_group</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_NV_swap_group</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_video_capture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_video_capture</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_NV_video_capture</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_DEVICE_ID_NV</name></cpp:macro> <cpp:value>0x20CD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_UNIQUE_ID_NV</name></cpp:macro> <cpp:value>0x20CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NUM_VIDEO_CAPTURE_SLOTS_NV</name></cpp:macro> <cpp:value>0x20CF</cpp:value></cpp:define>
<typedef>typedef <type><name>XID</name></type> <name>GLXVideoCaptureDeviceNV</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_swap_control</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_swap_control</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_SWAP_INTERVAL_EXT</name></cpp:macro> <cpp:value>0x20F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_MAX_SWAP_INTERVAL_EXT</name></cpp:macro> <cpp:value>0x20F2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_NV_copy_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_NV_copy_image</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_NV_copy_image</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_INTEL_swap_event</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_INTEL_swap_event</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_INTEL_swap_event</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXCHANGE_COMPLETE_INTEL</name></cpp:macro> <cpp:value>0x8180</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_COPY_COMPLETE_INTEL</name></cpp:macro> <cpp:value>0x8181</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_FLIP_COMPLETE_INTEL</name></cpp:macro> <cpp:value>0x8182</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_create_context_es_profile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_create_context_es_profile</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_EXT_create_context_es2_profile</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ALLEGRO_GLX_EXT_create_context_es_profile</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ES_PROFILE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLX_CONTEXT_ES2_PROFILE_BIT_EXT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
