<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\include\allegro5\utf8.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_included_allegro5_utf8_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_included_allegro5_utf8_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/base.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>ALLEGRO_USTR</name>;</typedef>



<typedef>typedef <type><name><name>struct</name> <name>_al_tagbstring</name></name></type> <name>ALLEGRO_USTR_INFO</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__al_tagbstring_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__al_tagbstring_defined</name></cpp:macro></cpp:define>
<struct>struct <name>_al_tagbstring</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_new</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_new_from_buffer</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>size_t</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_PRINTFUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_newf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_ustr_free</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>al_ustr_to_buffer</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>char</name> <operator>*</operator><name>buffer</name><operator>,</operator> <name>int</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_cstr_dup</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_dup</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_dup_substr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator>
<name>int</name> <name>start_pos</name><operator>,</operator> <name>int</name> <name>end_pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_empty_string</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ref_cstr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR_INFO</name> <operator>*</operator><name>info</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ref_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR_INFO</name> <operator>*</operator><name>info</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>,</operator>
<name>size_t</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ref_ustr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR_INFO</name> <operator>*</operator><name>info</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator> <name>int</name> <name>end_pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_size</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_length</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_offset</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_next</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <operator>*</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_prev</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <operator>*</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>al_ustr_get</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>al_ustr_get_next</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <operator>*</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>al_ustr_prev_get</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <operator>*</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_insert</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <name>int</name> <name>pos</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_insert_cstr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>pos</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>us2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_insert_chr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>pos</name><operator>,</operator> <name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_append</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_append_cstr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_append_chr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_PRINTFUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_appendf</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_vappendf</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator>
<name>va_list</name> <name>ap</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_remove_chr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_remove_range</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<name>int</name> <name>end_pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_truncate</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_ltrim_ws</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_rtrim_ws</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_trim_ws</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_assign</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_assign_substr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>,</operator>
<name>int</name> <name>start_pos</name><operator>,</operator> <name>int</name> <name>end_pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_assign_cstr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_set_chr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>pos</name><operator>,</operator> <name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_replace_range</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <name>int</name> <name>start_pos1</name><operator>,</operator>
<name>int</name> <name>end_pos1</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_chr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_rfind_chr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_set</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>accept</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_set_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>accept</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_cset</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>reject</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_cset_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>reject</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_str</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>haystack</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>needle</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_find_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>haystack</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>needle</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_rfind_str</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>haystack</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>needle</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_rfind_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>haystack</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>needle</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_find_replace</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>find</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>replace</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_find_replace_cstr</name></expr></argument>, <argument><expr><operator>(</operator><name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>int</name> <name>start_pos</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>find</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>replace</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_equal</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_compare</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>u</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>v</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>al_ustr_ncompare</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us2</name><operator>,</operator>
<name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_has_prefix</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>u</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>v</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_has_prefix_cstr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>u</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_has_suffix</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>u</name><operator>,</operator> <specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>v</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>al_ustr_has_suffix_cstr</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us1</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_utf8_width</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_utf8_encode</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <name><name>s</name><index>[]</index></name><operator>,</operator> <name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>ALLEGRO_USTR</name> <operator>*</operator></expr></argument>, <argument><expr><name>al_ustr_new_from_utf16</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <specifier>const</specifier> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_size_utf16</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_ustr_encode_utf16</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ALLEGRO_USTR</name> <operator>*</operator><name>us</name><operator>,</operator> <name>uint16_t</name> <operator>*</operator><name>s</name><operator>,</operator> <name>size_t</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_utf16_width</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AL_FUNC</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>al_utf16_encode</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <name><name>s</name><index>[]</index></name><operator>,</operator> <name>int32_t</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
