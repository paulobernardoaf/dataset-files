<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\x\xevents.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintunix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xclipboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xembed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xevents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xfullscreen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xkeyboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xmouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xtouch.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SYSTEM_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_SYSTEM_RASPBERRYPI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DISPLAY_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_DISPLAY_RASPBERRYPI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"xevents"</literal></argument>)</argument_list></macro>




<function><type><name>void</name></type> <name>_al_display_xglx_closebutton</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>xevent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>xevent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_x11_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>XEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>dptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name><name>event</name><operator>.</operator><name>xany</name><operator>.</operator><name>window</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KeyPress</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_keyboard_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xkey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KeyRelease</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_keyboard_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xkey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MotionNotify</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_mouse_motion_notify_handler</name><argument_list>(
<argument><expr><name><name>event</name><operator>.</operator><name>xmotion</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>xmotion</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ButtonPress</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_mouse_button_press_handler</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>xbutton</name><operator>.</operator><name>button</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ButtonRelease</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_mouse_button_release_handler</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>xbutton</name><operator>.</operator><name>button</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ClientMessage</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>AllegroAtom</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mouse_warp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>Atom</name><operator>)</operator><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_display_xglx_closebutton</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>XEmbedAtom</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>xtime</name> <init>= <expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>major</name> <init>= <expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>detail</name> <init>= <expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>data1</name> <init>= <expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>data2</name> <init>= <expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>xtime</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>detail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data2</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>major</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XEMBED_EMBEDDED_NOTIFY</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>embedder_window</name></name> <operator>=</operator> <name>data1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XEmbed begin: embedder window = %ld\n"</literal></expr></argument>, <argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XEMBED_FOCUS_IN</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"XEmbed focus in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_display_switch_handler_inner</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_keyboard_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XEMBED_FOCUS_OUT</name></expr>:</case>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"XEmbed focus out\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_display_switch_handler_inner</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_keyboard_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EnterNotify</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_mouse_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xcrossing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LeaveNotify</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_mouse_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xcrossing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FocusIn</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_display_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xfocus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_keyboard_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FocusOut</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_display_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xfocus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_keyboard_switch_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ConfigureNotify</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xglx_display_configure_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resize_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>resized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MapNotify</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALLEGRO_MINIMIZED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_mapped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UnmapNotify</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_MINIMIZED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Expose</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_GENERATE_EXPOSE_EVENTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_xwin_display_expose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xexpose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ReparentNotify</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>xreparent</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <call><name>RootWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XEmbed protocol finished.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>embedder_window</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SelectionNotify</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_display_selection_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xselection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_selectioned</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>selectioned</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SelectionRequest</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_display_selection_request</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>.</operator><name>xselectionrequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>_al_x_handle_touch_event</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xglx_handle_mmon_event</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xwin_background_thread</name><parameter_list>(<parameter><decl><type><name>_AL_THREAD</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>last_reset_screensaver_time</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>_al_get_thread_should_stop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>























<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>XEventsQueued</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>QueuedAfterFlush</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XNextEvent</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_x11_event</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>screen_saver_query_available</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>inhibit_screensaver</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>now</name> <init>= <expr><call><name>al_get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name>last_reset_screensaver_time</name> <operator>&gt;</operator> <literal type="number">10.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XResetScreenSaver</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_reset_screensaver_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>x11_fd</name> <init>= <expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdset</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>x11_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>small_time</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">100000</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><name>x11_fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>small_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
