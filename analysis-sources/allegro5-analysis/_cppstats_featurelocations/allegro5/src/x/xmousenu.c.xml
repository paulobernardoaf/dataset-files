<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\x\xmousenu.c">



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_NO_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xmouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SYSTEM_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_SYSTEM_RASPBERRYPI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DISPLAY_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_DISPLAY_RASPBERRYPI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"mouse"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>ALLEGRO_MOUSE_XWIN</name>
<block>{
<decl_stmt><decl><type><name>ALLEGRO_MOUSE</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_x</name></decl>, <name>min_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_x</name></decl>, <name>max_y</name>;</decl_stmt>
}</block></struct></type> <name>ALLEGRO_MOUSE_XWIN</name>;</typedef>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_installed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_XWIN</name></type> <name>the_mouse</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xmouse_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>xmouse_get_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>xmouse_get_mouse_num_buttons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>xmouse_get_mouse_num_axes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_set_mouse_xy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_set_mouse_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xmouse_get_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>wheel_motion_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x_button</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>x_button_to_al_button</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x_button</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>generate_mouse_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pressure</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dw</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSEDRV_XWIN</name></cpp:macro> <cpp:value>AL_ID('X','W','I','N')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_MOUSE_DRIVER</name></type> <name>mousedrv_xwin</name> <init>=
<expr><block>{
<expr><name>MOUSEDRV_XWIN</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"X-Windows mouse"</literal></expr>,
<expr><name>xmouse_init</name></expr>,
<expr><name>xmouse_exit</name></expr>,
<expr><name>xmouse_get_mouse</name></expr>,
<expr><name>xmouse_get_mouse_num_buttons</name></expr>,
<expr><name>xmouse_get_mouse_num_axes</name></expr>,
<expr><name>xmouse_set_mouse_xy</name></expr>,
<expr><name>xmouse_set_mouse_axis</name></expr>,
<expr><name>xmouse_get_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>ALLEGRO_MOUSE_DRIVER</name> <modifier>*</modifier></type><name>_al_xwin_mouse_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>mousedrv_xwin</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xmouse_installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>display</name> <operator>=</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_mouse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>the_mouse</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xmouse_installed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>xmouse_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xmouse_installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xmouse_installed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ALLEGRO_MOUSE</name> <modifier>*</modifier></type><name>xmouse_get_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xmouse_installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_MOUSE</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>the_mouse</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>xmouse_get_mouse_num_buttons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_buttons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xmouse_installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_buttons</name> <operator>=</operator> <call><name>XGetPointerMapping</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_buttons</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_buttons</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>debug</name><index>[<expr><name>num_buttons</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>debug</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_buttons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>debug</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%2d,"</literal></expr></argument>, <argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"XGetPointerMapping: %s\n"</literal></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>num_buttons</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_buttons</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num_buttons</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>xmouse_get_mouse_num_axes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xmouse_installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_set_mouse_xy</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xmouse_installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11display</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_width</name> <init>= <expr><call><name>al_get_display_width</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_height</name> <init>= <expr><call><name>al_get_display_height</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>window_width</name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name>window_height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name>scale_x</name></decl>, <decl><type ref="prev"/><name>scale_y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_raspberrypi_get_mouse_scale_ratios</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scale_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>/=</operator> <name>scale_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>/=</operator> <name>scale_y</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>event</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ClientMessage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>x11display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>=</operator> <name><name>system</name><operator>-&gt;</operator><name>AllegroAtom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSendEvent</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>NoEventMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XWarpPointer</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>xmouse_set_mouse_axis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xmouse_installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>which</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><ternary><condition><expr><name>which</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>which</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dz</name> <init>= <expr><name>z</name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dw</name> <init>= <expr><name>w</name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dz</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>dw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dz</name></expr></argument>, <argument><expr><name>dw</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>xmouse_get_state</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_STATE</name> <modifier>*</modifier></type><name>ret_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xmouse_installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_state</name> <operator>=</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>_al_xwin_mouse_button_press_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x_button</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>al_button</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xmouse_installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wheel_motion_handler</name><argument_list>(<argument><expr><name>x_button</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>al_button</name> <operator>=</operator> <call><name>x_button_to_al_button</name><argument_list>(<argument><expr><name>x_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>al_button</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>buttons</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>al_button</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <ternary><condition><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>buttons</name></name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_DOWN</name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>al_button</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>wheel_motion_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x_button</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x_button</name> <operator>==</operator> <name>Button4</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x_button</name> <operator>==</operator> <name>Button5</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dz</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x_button</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dw</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x_button</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dz</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dz</name> <operator>*=</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dw</name> <operator>*=</operator> <call><name>al_get_mouse_wheel_precision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name>dz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>dw</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dz</name></expr></argument>, <argument><expr><name>dw</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>_al_xwin_mouse_button_release_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x_button</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>al_button</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xmouse_installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>al_button</name> <operator>=</operator> <call><name>x_button_to_al_button</name><argument_list>(<argument><expr><name>x_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>al_button</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>buttons</name></name> <operator>&amp;=</operator><operator>~</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>al_button</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <ternary><condition><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>buttons</name></name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>ALLEGRO_EVENT_MOUSE_BUTTON_UP</name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>al_button</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>_al_xwin_mouse_motion_notify_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>event_type</name> <init>= <expr><name>ALLEGRO_EVENT_MOUSE_AXES</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xmouse_installed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>mouse_warp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>mouse_warp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_WARPED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name>scale_x</name></decl>, <decl><type ref="prev"/><name>scale_y</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_raspberrypi_get_mouse_scale_ratios</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scale_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>scale_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>*=</operator> <name>scale_y</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name>x</name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>y</name> <operator>-</operator> <name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>event_type</name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>x_button_to_al_button</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x_button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>x_button</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Button1</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>Button2</name></expr>:</case>
<return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><name>Button3</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>Button4</name></expr>:</case>
<case>case <expr><name>Button5</name></expr>:</case>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<case>case <expr><literal type="number">7</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>x_button</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x_button</name> <operator>&lt;=</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">4</literal> <operator>+</operator> <name>x_button</name> <operator>-</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_mouse_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pressure</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dw</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>button</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dx</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dy</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dz</name></name> <operator>=</operator> <name>dz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>dw</name></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>button</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>mouse</name><operator>.</operator><name>pressure</name></name> <operator>=</operator> <name>pressure</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>_al_xwin_mouse_switch_handler</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XCrossingEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>event_type</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <operator>(</operator><name>Button1Mask</name> <operator>|</operator> <name>Button2Mask</name> <operator>|</operator> <name>Button3Mask</name> <operator>|</operator>
<name>Button4Mask</name> <operator>|</operator> <name>Button5Mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EnterNotify</name></expr>:</case>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LeaveNotify</name></expr>:</case>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>event_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>generate_mouse_event</name><argument_list>(
<argument><expr><name>event_type</name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>pressure</name></name></expr></argument>,
<argument><expr><name><name>the_mouse</name><operator>.</operator><name>state</name><operator>.</operator><name>w</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>the_mouse</name><operator>.</operator><name>parent</name><operator>.</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_xwin_grab_mouse</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>grab</name> <operator>=</operator> <call><name>XGrabPointer</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><name>PointerMotionMask</name> <operator>|</operator> <name>ButtonPressMask</name> <operator>|</operator> <name>ButtonReleaseMask</name></expr></argument>,
<argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>grab</name> <operator>==</operator> <name>GrabSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_xwin_ungrab_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XUngrabPointer</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>system</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



</unit>
