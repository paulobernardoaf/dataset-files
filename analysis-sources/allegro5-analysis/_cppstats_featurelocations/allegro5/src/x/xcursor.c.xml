<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\x\xcursor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xcursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_RASPBERRYPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_raspberrypi.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_SYSTEM_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_SYSTEM_RASPBERRYPI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLEGRO_DISPLAY_XGLX</name></cpp:macro> <cpp:value>ALLEGRO_DISPLAY_RASPBERRYPI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XCURSOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xcursor/Xcursor.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:error>#<cpp:directive>error</cpp:directive> This file requires Xcursor.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>_al_xwin_create_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bmp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_focus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_focus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmp_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bmp_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_XWIN</name> <modifier>*</modifier></type><name>xcursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XcursorImage</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>ix</name></decl>, <decl><type ref="prev"/><name>iy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>was_locked</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp_w</name> <operator>=</operator> <call><name>al_get_bitmap_width</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bmp_h</name> <operator>=</operator> <call><name>al_get_bitmap_height</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xcursor</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>xcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xcursor</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>XcursorImageCreate</name><argument_list>(<argument><expr><name><name>bmp</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bmp</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <name>None</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>xcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>was_locked</name> <operator>=</operator> <call><name>al_is_bitmap_locked</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_locked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_lock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>iy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iy</name> <operator>&lt;</operator> <name>bmp_h</name></expr>;</condition> <incr><expr><name>iy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix</name> <operator>&lt;</operator> <name>bmp_w</name></expr>;</condition> <incr><expr><name>ix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>al_get_pixel</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_unmap_rgba</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_locked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>xhot</name></name> <operator>=</operator> <name>x_focus</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>yhot</name></name> <operator>=</operator> <name>y_focus</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xcursor</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <call><name>XcursorImageLoadCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XcursorImageDestroy</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR</name> <operator>*</operator><operator>)</operator><name>xcursor</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_xwin_destroy_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_XWIN</name> <modifier>*</modifier></type><name>xcursor</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR_XWIN</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>sysx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><name>sys</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sysx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>==</operator> <name><name>xcursor</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XUndefineCursor</name><argument_list>(<argument><expr><name><name>sysx</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>XFreeCursor</name><argument_list>(<argument><expr><name><name>sysx</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>xcursor</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>xcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sysx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_MOUSE_CURSOR</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MOUSE_CURSOR_XWIN</name> <modifier>*</modifier></type><name>xcursor</name> <init>= <expr><operator>(</operator><name>ALLEGRO_MOUSE_CURSOR_XWIN</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>xwindow</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>=</operator> <name><name>xcursor</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_system_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_SYSTEM_MOUSE_CURSOR</name></type> <name>cursor_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>xwindow</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_shape</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cursor_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT</name></expr>:</case>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW</name></expr>:</case>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_left_ptr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_watch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_question_arrow</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_xterm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_fleur</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_top_side</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_bottom_side</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_right_side</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_left_side</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_top_right_corner</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_bottom_left_corner</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_top_left_corner</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_bottom_right_corner</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_crosshair</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_hand2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_hand1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE</name></expr>:</case>
<expr_stmt><expr><name>cursor_shape</name> <operator>=</operator> <name>XC_X_cursor</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>=</operator> <call><name>XCreateFontCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>cursor_shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_show_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>xwindow</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>current_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_hide_mouse_cursor</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>xdisplay</name> <init>= <expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>xwindow</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>invisible_cursor</name></name> <operator>==</operator> <name>None</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>gcmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XGCValues</name></type> <name>gcvalues</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>pixmap</name> <init>= <expr><call><name>XCreatePixmap</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>temp_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XColor</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gcmask</name> <operator>=</operator> <name>GCFunction</name> <operator>|</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcvalues</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GXcopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcvalues</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcvalues</name><operator>.</operator><name>background</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_gc</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>, <argument><expr><name>gcmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gcvalues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDrawPoint</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>, <argument><expr><name>temp_gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>temp_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name><name>color</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DoRed</name> <operator>|</operator> <name>DoGreen</name> <operator>|</operator> <name>DoBlue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>invisible_cursor</name></name> <operator>=</operator> <call><name>XCreatePixmapCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>,
<argument><expr><name>pixmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name>xdisplay</name></expr></argument>, <argument><expr><name>xwindow</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>invisible_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>cursor_hidden</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_xwin_add_cursor_functions</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_mouse_cursor</name></name> <operator>=</operator> <name>xdpy_set_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>set_system_mouse_cursor</name></name> <operator>=</operator> <name>xdpy_set_system_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>show_mouse_cursor</name></name> <operator>=</operator> <name>xdpy_show_mouse_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>hide_mouse_cursor</name></name> <operator>=</operator> <name>xdpy_hide_mouse_cursor</name></expr>;</expr_stmt>
</block_content>}</block></function>



</unit>
