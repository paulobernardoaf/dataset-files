<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\x\xrandr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xfullscreen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XRANDR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"xrandr"</literal></argument>)</argument_list></macro>

<typedef>typedef <type><name><name>struct</name> <name>xrandr_screen</name></name></type> <name>xrandr_screen</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>xrandr_crtc</name></name></type> <name>xrandr_crtc</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>xrandr_output</name></name></type> <name>xrandr_output</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>xrandr_mode</name></name></type> <name>xrandr_mode</name>;</typedef>

<struct>struct <name>xrandr_screen</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Time</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Time</name></type> <name>configTimestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>crtcs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>outputs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>modes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>XRRScreenResources</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>xrandr_crtc_position</name> <block>{
<decl><name>CRTC_POS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CRTC_POS_ABOVE</name></decl>,
<decl><name>CRTC_POS_LEFTOF</name></decl>,
<decl><name>CRTC_POS_BELOW</name></decl>,
<decl><name>CRTC_POS_RIGHTOF</name></decl>
}</block>;</enum>

<struct>struct <name>xrandr_crtc</name> <block>{
<decl_stmt><decl><type><name>RRCrtc</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Time</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRMode</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rotation</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>connected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>possible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRMode</name></type> <name>original_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>original_xoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>original_yoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRCrtc</name></type> <name>align_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xrandr_output</name> <block>{
<decl_stmt><decl><type><name>RROutput</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Time</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRCrtc</name></type> <name>crtc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mm_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mm_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Connection</name></type> <name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SubpixelOrder</name></type> <name>subpixel_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>crtcs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>clones</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RRMode</name></type> <name>prefered_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_AL_VECTOR</name></type> <name>modes</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>xrandr_mode</name> <block>{
<decl_stmt><decl><type><name>RRMode</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>refresh</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xrandr_rect</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_copy_mode</name><parameter_list>(<parameter><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>XRRModeInfo</name> <modifier>*</modifier></type><name>rrmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rrmode</name><operator>-&gt;</operator><name>hTotal</name></name> <operator>&amp;&amp;</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>vTotal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>dotClock</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>hTotal</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>rrmode</name><operator>-&gt;</operator><name>vTotal</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_clear_fake_refresh_rates</name><parameter_list>(<parameter><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>modes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nmode</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refresh</name> <operator>!=</operator> <name><name>modes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refresh</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Zeroing out fake refresh rates from nvidia proprietary driver.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Disable the DynamicTwinView driver option to avoid this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refresh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_copy_output</name><parameter_list>(<parameter><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>RROutput</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>XRROutputInfo</name> <modifier>*</modifier></type><name>rroutput</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>crtc</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>crtc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>namelen</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>nameLen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>mm_width</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>mm_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>mm_height</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>mm_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>connection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>subpixel_order</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>subpixel_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"output[%s] %s on crtc %i.\n"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>output</name><operator>-&gt;</operator><name>connection</name></name> <operator>==</operator> <name>RR_Connected</name></expr> ?</condition><then> <expr><literal type="string">"Connected"</literal></expr> </then><else>: <expr><literal type="string">"Not Connected"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RRCrtc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rroutput</name><operator>-&gt;</operator><name>ncrtc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_append_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>ncrtc</name></name></expr></argument>, <argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>clones</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RROutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rroutput</name><operator>-&gt;</operator><name>nclone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_append_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>clones</name></name></expr></argument>, <argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>nclone</name></name></expr></argument>, <argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>clones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RRMode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rroutput</name><operator>-&gt;</operator><name>nmode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_append_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>nmode</name></name></expr></argument>, <argument><expr><name><name>rroutput</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name><name>rroutput</name><operator>-&gt;</operator><name>npreferred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>prefered_mode</name></name> <operator>=</operator> <name><name>rroutput</name><operator>-&gt;</operator><name>modes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_copy_crtc</name><parameter_list>(<parameter><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name></decl></parameter>, <parameter><decl><type><name>RRCrtc</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>XRRCrtcInfo</name> <modifier>*</modifier></type><name>rrcrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>rotation</name></name> <operator>=</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>rotation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RROutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>noutput</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_append_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>, <argument><expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>noutput</name></name></expr></argument>, <argument><expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"found %i outputs.\n"</literal></expr></argument>, <argument><expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>noutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>possible</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RROutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>npossible</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_append_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>possible</name></name></expr></argument>, <argument><expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>npossible</name></name></expr></argument>, <argument><expr><name><name>rrcrtc</name><operator>-&gt;</operator><name>possible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rrcrtc</name><operator>-&gt;</operator><name>npossible</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"output[%i] %i.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rrcrtc</name><operator>-&gt;</operator><name>possible</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_mode</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_xoff</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_yoff</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>CRTC_POS_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_copy_screen</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>XRRScreenResources</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xrandr_mode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>nmode</name></name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>nmode</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xrandr_copy_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xrandr_clear_fake_refresh_rates</name><argument_list>(<argument><expr><call><name>_al_vector_ref_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>nmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xrandr_crtc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ncrtc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"found %i crtcs.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ncrtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>ncrtc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"crtc[%i] %i.\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XRRCrtcInfo</name> <modifier>*</modifier></type><name>rrcrtc</name> <init>= <expr><call><name>XRRGetCrtcInfo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xrandr_copy_crtc</name><argument_list>(<argument><expr><name>crtc</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>rrcrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeCrtcInfo</name><argument_list>(<argument><expr><name>rrcrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xrandr_output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>noutput</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"found %i outputs.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>noutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>noutput</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"output[%i] %i.\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XRROutputInfo</name> <modifier>*</modifier></type><name>rroutput</name> <init>= <expr><call><name>XRRGetOutputInfo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xrandr_copy_output</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>rroutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeOutputInfo</name><argument_list>(<argument><expr><name>rroutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xrandr_crtc</name> <modifier>*</modifier></type><name>xrandr_fetch_crtc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>RRCrtc</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>crtc</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xrandr_output</name> <modifier>*</modifier></type><name>xrandr_fetch_output</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>RROutput</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>output</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xrandr_mode</name> <modifier>*</modifier></type><name>xrandr_fetch_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>RRMode</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>mode</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xrandr_crtc</name> <modifier>*</modifier></type><name>xrandr_map_to_crtc</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xrandr_fetch_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RRCrtc</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>xrandr_output</name> <modifier>*</modifier></type><name>xrandr_map_adapter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_map_to_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>xrandr_fetch_output</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RROutput</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_combine_output_rect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xrandr_rect</name></name> <modifier>*</modifier></type><name>rect</name></decl></parameter>, <parameter><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>-&gt;</operator><name>x1</name></name> <operator>&gt;</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>-&gt;</operator><name>y1</name></name> <operator>&gt;</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>-&gt;</operator><name>x2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>crtc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>-&gt;</operator><name>y2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>crtc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xrandr_get_xscreen</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xrandr_query</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>screen_count</name> <init>= <expr><call><name>ScreenCount</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xrandr_screen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RROutput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>screen_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XRRScreenResources</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>XRRGetScreenResources</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><call><name>XRootWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"failed to get screen resources for screen %i\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>noutput</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"screen %i doesn't have any outputs.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xrandr_copy_screen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>not_clone</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc_k</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc_k</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name><name>crtc_k</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <name><name>crtc_k</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>not_clone</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>not_clone</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RRCrtc</name> <modifier>*</modifier></type><name>crtc_ptr</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Map Allegro Adadpter %i to RandR CRTC %i.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>crtc_ptr</name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"RandR CRTC %i is a clone, ignoring.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name>RRScreenChangeNotifyMask</name> <operator>|</operator> 
<name>RRCrtcChangeNotifyMask</name> <operator>|</operator> 
<name>RROutputChangeNotifyMask</name> <operator>|</operator> 
<name>RROutputPropertyNotifyMask</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XRRSelectInput</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XRRSelectInput</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>



<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>xrandr_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_fetch_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RRCrtc</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xscreen_j</name> <init>= <expr><call><name>xrandr_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc_j</name> <init>= <expr><call><name>xrandr_fetch_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen_j</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RRCrtc</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc_j</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name> <operator>=</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>CRTC_POS_RIGHTOF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Adapter %i is RightOf Adapter %i.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name> <operator>=</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>CRTC_POS_LEFTOF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Adapter %i is LeftOf Adapter %i.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc_j</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name> <operator>=</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>CRTC_POS_BELOW</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Adapter %i is Below Adapter %i.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name> <operator>=</operator> <name><name>crtc_j</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>CRTC_POS_ABOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Adapter %i is Above Adapter %i.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XINERAMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xinerama_available</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xinerama_screen_count</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XRandR and Xinerama seem to disagree on how many screens there are (%i vs %i), going to ignore XRandR.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xinerama_screen_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xrandr_get_num_modes</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>adapter</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>adapter</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>xrandr_map_adapter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>xrandr_get_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_MODE</name> <modifier>*</modifier></type><name>amode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>xrandr_map_adapter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><macro><name>id</name></macro> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>xrandr_fetch_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RRMode</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>amode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>mode</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>amode</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>mode</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>amode</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>amode</name><operator>-&gt;</operator><name>refresh_rate</name></name> <operator>=</operator> <name><name>mode</name><operator>-&gt;</operator><name>refresh</name></name></expr>;</expr_stmt>

<return>return <expr><name>amode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xrandr_realign_crtc_origin</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xscreen</name></decl></parameter>, <parameter><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>align_to</name> <init>= <expr><call><name>xrandr_fetch_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>align_to</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CRTC_POS_RIGHTOF</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>align_to</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CRTC_POS_LEFTOF</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>new_w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CRTC_POS_BELOW</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>align_to</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CRTC_POS_ABOVE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>align_to</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name>new_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"unknown crtc alignment flag (%i)!"</literal></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xrandr_set_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refresh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><call><name>_al_xglx_get_adapter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_map_to_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>cur_mode</name> <init>= <expr><call><name>xrandr_fetch_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cur_mode</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cur_mode</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name>h</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>refresh</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>refresh</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cur_mode</name><operator>-&gt;</operator><name>refresh</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"mode already set, good to go\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"new mode: %dx%d@%d old mode: %dx%d@%d.\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>refresh</name></expr></argument>, <argument><expr><name><name>cur_mode</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cur_mode</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>cur_mode</name><operator>-&gt;</operator><name>refresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode_idx</name> <init>= <expr><call><name>_al_xglx_fullscreen_select_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>refresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>mode_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"mode %dx%d@%d not found\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>refresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>xrandr_fetch_output</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RROutput</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>xrandr_fetch_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>RRMode</name><operator>*</operator><operator>)</operator><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>, <argument><expr><name>mode_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_x</name> <init>= <expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>new_y</name> <init>= <expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xrandr_realign_crtc_origin</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>crtc</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xrandr: set mode %i+%i-%ix%i on adapter %i\n"</literal></expr></argument>, <argument><expr><name>new_x</name></expr></argument>, <argument><expr><name>new_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>XRRSetCrtcConfig</name><argument_list>(
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>res</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>,
<argument><expr><name>new_x</name></expr></argument>,
<argument><expr><name>new_y</name></expr></argument>,
<argument><expr><name><name>mode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>,
<argument><expr><call><name>_al_vector_ref_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>!=</operator> <name>RRSetConfigSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"XRandR failed to set mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xrandr_rect</name></name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xrandr_combine_output_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>crtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>new_width</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>x2</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>x1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_height</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>y2</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>y1</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>new_width</name> <operator>&gt;</operator> <call><name>DisplayWidth</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>new_height</name> <operator>&gt;</operator> <call><name>DisplayHeight</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XRRSetScreenSize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>new_width</name></expr></argument>, <argument><expr><name>new_height</name></expr></argument>,
<argument><expr><call><name>DisplayWidthMM</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DisplayHeightMM</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_restore_mode</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_map_to_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name><name>crtc</name><operator>-&gt;</operator><name>original_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"current crtc mode (%i) equals the original mode (%i), not restoring.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>original_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xrandr_mode</name> <modifier>*</modifier></type><name>orig_mode</name> <init>= <expr><call><name>xrandr_fetch_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"restore mode %i+%i-%ix%i@%i on adapter %i\n"</literal></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_xoff</name></name></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_yoff</name></name></expr></argument>, <argument><expr><name><name>orig_mode</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>orig_mode</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>orig_mode</name><operator>-&gt;</operator><name>refresh</name></name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>XRRSetCrtcConfig</name>
<argument_list>(
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>res</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_xoff</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>original_yoff</name></name></expr></argument>,
<argument><expr><name><name>orig_mode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>,
<argument><expr><call><name>_al_vector_ref_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ok</name> <operator>!=</operator> <name>RRSetConfigSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to restore mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_get_display_offset</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_map_to_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"display offset: %ix%i.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xrandr_get_num_adapters</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xrandr_get_monitor_info</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_MONITOR_INFO</name> <modifier>*</modifier></type><name>mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>adapter</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>adapter</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xscreen</name> <init>= <expr><call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>xrandr_map_adapter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_fetch_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xscreen</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>crtc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>crtc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xrandr_get_default_adapter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_al_xsys_mheadx_get_default_adapter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>center_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>center_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_xsys_get_active_window_center</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>center_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>center_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>default_adapter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_map_to_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>center_x</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name>center_x</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>crtc</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>center_y</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>&amp;&amp;</operator> <name>center_y</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>crtc</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>default_adapter</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"selected default adapter: %i.\n"</literal></expr></argument>, <argument><expr><name>default_adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>default_adapter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xrandr_get_xscreen</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_al_xsys_mheadx_get_xscreen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xrandr_handle_xevent</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>xrandr_event_base</name></name> <operator>+</operator> <name>RRNotify</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>XRRNotifyEvent</name> <modifier>*</modifier></type><name>rre</name> <init>= <expr><operator>(</operator><name>XRRNotifyEvent</name><operator>*</operator><operator>)</operator><name>e</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rre</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>RRNotify_CrtcChange</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>XRRCrtcChangeNotifyEvent</name> <modifier>*</modifier></type><name>rrce</name> <init>= <expr><operator>(</operator><name>XRRCrtcChangeNotifyEvent</name><operator>*</operator><operator>)</operator><name>rre</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"RRNotify_CrtcChange!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>xrandr_fetch_crtc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>, <argument><expr><name><name>rrce</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>crtc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"invalid RRCrtc(%i).\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rrce</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rrce</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"mode changed from %i to %i.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rrce</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>rrce</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rrce</name><operator>-&gt;</operator><name>rotation</name></name> <operator>!=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>rotation</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"rotation changed from %i to %i.\n"</literal></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>, <argument><expr><name><name>rrce</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>rotation</name></name> <operator>=</operator> <name><name>rrce</name><operator>-&gt;</operator><name>rotation</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rrce</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>||</operator> <name><name>rrce</name><operator>-&gt;</operator><name>y</name></name> <operator>!=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"origin changed from %i+%i to %i+%i.\n"</literal></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rrce</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rrce</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>rrce</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>rrce</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rrce</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>rrce</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>crtc</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"size changed from %ix%i to %ix%i.\n"</literal></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>crtc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>rrce</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rrce</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>rrce</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>rrce</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>crtc</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>screen</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>rre</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>RRNotify_OutputChange</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>XRROutputChangeNotifyEvent</name> <modifier>*</modifier></type><name>rroe</name> <init>= <expr><operator>(</operator><name>XRROutputChangeNotifyEvent</name><operator>*</operator><operator>)</operator><name>rre</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>xrandr_fetch_output</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>, <argument><expr><name><name>rroe</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"invalid RROutput(%i).\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rroe</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xrandr: RRNotify_OutputChange %s!\n"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rroe</name><operator>-&gt;</operator><name>crtc</name></name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>crtc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"crtc changed from %i to %i.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rroe</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>crtc</name></name> <operator>=</operator> <name><name>rroe</name><operator>-&gt;</operator><name>crtc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>rroe</name><operator>-&gt;</operator><name>connection</name></name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>connection</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"connection changed from %i to %i.\n"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>rroe</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name><name>rroe</name><operator>-&gt;</operator><name>connection</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>screen</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>rre</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>RRNotify_OutputProperty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xrandr: RRNotify_OutputProperty!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xrandr: RRNotify_Unknown(%i)!\n"</literal></expr></argument>, <argument><expr><name><name>rre</name><operator>-&gt;</operator><name>subtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>xrandr_event_base</name></name> <operator>+</operator> <name>RRScreenChangeNotify</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>XRRScreenChangeNotifyEvent</name> <modifier>*</modifier></type><name>rre</name> <init>= <expr><operator>(</operator><name>XRRScreenChangeNotifyEvent</name><operator>*</operator><operator>)</operator><name>e</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XRRUpdateConfiguration</name><argument_list>( <argument><expr><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"RRScreenChangeNotify!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>rre</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>configTimestamp</name></name> <operator>=</operator> <name><name>rre</name><operator>-&gt;</operator><name>config_timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_xsys_xrandr_init</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error_base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XRRQueryExtension</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_event_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>minor_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>major_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>XRRQueryVersion</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major_version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor_version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XRandR version: %i.%i\n"</literal></expr></argument>, <argument><expr><name>major_version</name></expr></argument>, <argument><expr><name>minor_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XRandR not available, XRRQueryVersion failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>major_version</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor_version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XRandR not available, unsupported version: %i.%i\n"</literal></expr></argument>, <argument><expr><name>major_version</name></expr></argument>, <argument><expr><name>minor_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>xrandr_query</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XRandR is active\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xrandr_available</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"XRandR is not active\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"XRandR extension is not available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xrandr_available</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_al_xglx_mmon_interface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_al_xglx_mmon_interface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_num_display_modes</name></name> <operator>=</operator> <name>xrandr_get_num_modes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_display_mode</name></name> <operator>=</operator> <name>xrandr_get_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>set_mode</name></name> <operator>=</operator> <name>xrandr_set_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>restore_mode</name></name> <operator>=</operator> <name>xrandr_restore_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_display_offset</name></name> <operator>=</operator> <name>xrandr_get_display_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_num_adapters</name></name> <operator>=</operator> <name>xrandr_get_num_adapters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_monitor_info</name></name> <operator>=</operator> <name>xrandr_get_monitor_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_default_adapter</name></name> <operator>=</operator> <name>xrandr_get_default_adapter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>get_xscreen</name></name> <operator>=</operator> <name>xrandr_get_xscreen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_al_xglx_mmon_interface</name><operator>.</operator><name>handle_xevent</name></name> <operator>=</operator> <name>xrandr_handle_xevent</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_al_xsys_xrandr_exit</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ALLEGRO_DEBUG("XRandR exiting.\n");









ALLEGRO_DEBUG("XRRFreeScreenResources\n");



al_free(s-&gt;xrandr_outputs);
al_free(s-&gt;xrandr_res);

s-&gt;xrandr_available = 0;
s-&gt;xrandr_res_count = 0;
s-&gt;xrandr_res = NULL;
s-&gt;xrandr_output_count = 0;
s-&gt;xrandr_outputs = NULL;

ALLEGRO_DEBUG("XRandR exit finished.\n");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_crtc</name> <modifier>*</modifier></type><name>crtc</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>connected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crtc</name><operator>-&gt;</operator><name>possible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>xrandr_output</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>clones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>crtcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRRFreeScreenResources</name><argument_list>(<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_screens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xrandr_adaptermap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


</unit>
