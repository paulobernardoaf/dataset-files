<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\x\xdisplay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xcursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xclipboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xfullscreen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xglx_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xtouch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xwindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/platform/aintxglx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XINPUT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/XInput2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/xpm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xicon.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"display"</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_INTERFACE</name></type> <name>xdpy_vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_XWIN_DISPLAY_OVERRIDABLE_INTERFACE</name></type> <name>default_overridable_vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_XWIN_DISPLAY_OVERRIDABLE_INTERFACE</name> <modifier>*</modifier></type><name>gtk_override_vt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_xglx_use_adapter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"use adapter %i\n"</literal></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adapter_use_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adapter_map</name><index>[<expr><name>adapter</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>_al_xglx_unuse_adapter</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unuse adapter %i\n"</literal></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adapter_use_count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adapter_map</name><index>[<expr><name>adapter</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_adapter_use_count</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>bool</name></type> <name>true_xinerama_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XINERAMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>xrandr_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XRANDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>xrandr_active</name> <operator>=</operator> <name><name>system</name><operator>-&gt;</operator><name>xrandr_available</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>true_xinerama_active</name> <operator>=</operator> <operator>!</operator><name>xrandr_active</name> <operator>&amp;&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>xinerama_available</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>true_xinerama_active</name> <operator>||</operator> <call><name>ScreenCount</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>system</name><operator>-&gt;</operator><name>adapter_use_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>adapter_use_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>adapter_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>adapter_use_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>adapter_use_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Use of more than one adapter at once in "</literal>
<literal type="string">"multi-head X or X with true Xinerama active is not possible.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>query_glx_version</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glXQueryVersion</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <name>major</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>minor</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"GLX %.1f.\n"</literal></expr></argument>, <argument><expr><name>version</name> <operator>/</operator> <literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>version</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>xdpy_swap_control</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vsync_setting</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"requested vsync=%d.\n"</literal></expr></argument>, <argument><expr><name>vsync_setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vsync_setting</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>extension_list</name><operator>-&gt;</operator><name>ALLEGRO_GLX_SGI_swap_control</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>vsync_setting</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>glXSwapIntervalSGI</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"glXSwapIntervalSGI(%d) failed.\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"no vsync, GLX_SGI_swap_control missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>vsync_setting</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>vsync_setting</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>should_bypass_compositor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"x11"</literal></expr></argument>, <argument><expr><literal type="string">"bypass_compositor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_compositor_bypass_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>_NET_WM_BYPASS_COMPOSITOR_HINT_ON</name> <init>= <expr><call><name>should_bypass_compositor</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>_NET_WM_BYPASS_COMPOSITOR</name></decl>;</decl_stmt>

<expr_stmt><expr><name>_NET_WM_BYPASS_COMPOSITOR</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><literal type="string">"_NET_WM_BYPASS_COMPOSITOR"</literal></expr></argument>,
<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>_NET_WM_BYPASS_COMPOSITOR</name></expr></argument>,
<argument><expr><name>XA_CARDINAL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>_NET_WM_BYPASS_COMPOSITOR_HINT_ON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_create_display_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Colormap</name></type> <name>cmap</name> <init>= <expr><call><name>XCreateColormap</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>visual</name></name></expr></argument>, <argument><expr><name>AllocNone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>XSetWindowAttributes</name></type> <name>swa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name>CWBorderPixel</name> <operator>|</operator> <name>CWColormap</name> <operator>|</operator> <name>CWEventMask</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>swa</name><operator>.</operator><name>colormap</name></name> <operator>=</operator> <name>cmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swa</name><operator>.</operator><name>border_pixel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swa</name><operator>.</operator><name>event_mask</name></name> <operator>=</operator>
<name>KeyPressMask</name> <operator>|</operator>
<name>KeyReleaseMask</name> <operator>|</operator>
<name>StructureNotifyMask</name> <operator>|</operator>
<name>EnterWindowMask</name> <operator>|</operator>
<name>LeaveWindowMask</name> <operator>|</operator>
<name>FocusChangeMask</name> <operator>|</operator>
<name>ExposureMask</name> <operator>|</operator>
<name>PropertyChangeMask</name> <operator>|</operator>
<name>ButtonPressMask</name> <operator>|</operator>
<name>ButtonReleaseMask</name> <operator>|</operator>
<name>PointerMotionMask</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>CWBackPixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swa</name><operator>.</operator><name>background_pixel</name></name> <operator>=</operator> <call><name>BlackPixel</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_off</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_off</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_xglx_get_display_offset</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>xscr_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xscr_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>al_get_new_window_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>_al_xglx_get_display_offset</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscr_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscr_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x_off</name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x_off</name> <operator>+=</operator> <name>xscr_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y_off</name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_off</name> <operator>+=</operator> <name>xscr_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>XCreateWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>x_off</name> <operator>!=</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>x_off</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>y_off</name> <operator>!=</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>y_off</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>,
<argument><expr><name>InputOutput</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>visual</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Window ID: %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>_al_xwin_set_frame</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_above</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_xglx_fullscreen_set_mode</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>display</name><operator>-&gt;</operator><name>refresh_rate</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xdpy: failed to set fullscreen mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FRAMELESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_xwin_set_frame</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"X11 window created.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Atom</name></type> <name>_NET_WM_PID</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_PID"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>_NET_WM_PID</name></expr></argument>, <argument><expr><name>XA_CARDINAL</name></expr></argument>,
<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xwin_set_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Atom</name></type> <name>_NET_WM_WINDOW_TYPE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>_NET_WM_WINDOW_TYPE_NORMAL</name></decl>;</decl_stmt>

<expr_stmt><expr><name>_NET_WM_WINDOW_TYPE</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_WINDOW_TYPE"</literal></expr></argument>,
<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_NET_WM_WINDOW_TYPE_NORMAL</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><literal type="string">"_NET_WM_WINDOW_TYPE_NORMAL"</literal></expr></argument>,
<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>_NET_WM_WINDOW_TYPE</name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>,
<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>_NET_WM_WINDOW_TYPE_NORMAL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_compositor_bypass_flag</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XINPUT2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>XIEventMask</name></type> <name>event_mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event_mask</name><operator>.</operator><name>deviceid</name></name> <operator>=</operator> <name>XIAllMasterDevices</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_mask</name><operator>.</operator><name>mask_len</name></name> <operator>=</operator> <call><name>XIMaskLen</name><argument_list>(<argument><expr><name>XI_TouchEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_mask</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XISetMask</name><argument_list>(<argument><expr><name><name>event_mask</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><name>XI_TouchBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XISetMask</name><argument_list>(<argument><expr><name><name>event_mask</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><name>XI_TouchUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XISetMask</name><argument_list>(<argument><expr><name><name>event_mask</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><name>XI_TouchEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XISelectEvents</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_mask</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>event_mask</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>xdpy_create_display_locked</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ogl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name></name> <operator>=</operator> <name>ogl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>glx_version</name></name> <operator>=</operator> <call><name>query_glx_version</name><argument_list>(<argument><expr><name>system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <call><name>_al_display_xglx_driver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>refresh_rate</name></name> <operator>=</operator> <call><name>al_get_new_display_refresh_rate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_CFG_OPENGLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"selected adapter %i\n"</literal></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name> <operator>=</operator> <call><name>_al_xglx_get_default_adapter</name><argument_list>(<argument><expr><name>system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name> <operator>=</operator> <name>adapter</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xdpy: selected adapter %i\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xglx_use_adapter</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_adapter_use_count</name><argument_list>(<argument><expr><name>system</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>EarlyError</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name> <operator>=</operator> <call><name>_al_xglx_get_xscreen</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xdpy: selected xscreen %i\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_mapped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_selectioned</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>selectioned</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>resize_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>programmatic_resize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xglx_config_select_visual</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"FIXME: Need better visual selection.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No matching visual found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>EarlyError</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Selected X11 visual %lu.\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>visualid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name></decl>;</decl_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_al_event_source_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xdpy_create_display_window</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>LateError</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_GTK_TOPLEVEL_INTERNAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gtk_override_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gtk_override_vt</name><operator>-&gt;</operator><name>create_display_hook</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>LateError</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>default_overridable_vt</name><operator>.</operator><name>set_window_title</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><call><name>al_get_new_window_title</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>default_overridable_vt</name><operator>.</operator><name>create_display_hook</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>LateError</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>overridable_vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<while>while <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>is_mapped</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_RESIZABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>resize_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xdpy_acknowledge_resize</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Toggling fullscreen flag for %d x %d window.\n"</literal></expr></argument>,
<argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_reset_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_fullscreen_window</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>xwa</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xwa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>xwa</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>xwa</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Using ALLEGRO_FULLSCREEN_WINDOW of %d x %d\n"</literal></expr></argument>,
<argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>_al_xwin_set_above</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xglx_fullscreen_to_display</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_grab_mouse</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_ungrab_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_MAXIMIZED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_xwin_maximize</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_xglx_config_create_context</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>LateError</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>fbc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glXMakeContextCurrent failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeCurrent</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"glXMakeCurrent failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_manage_extensions</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"OpenGL Version: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Vendor: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Renderer: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_RENDERER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>ogl_info</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name>_ALLEGRO_OPENGL_VERSION_1_2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name> <init>= <expr><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>required</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ALLEGRO_COMPATIBLE_DISPLAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Allegro requires at least OpenGL version 1.2 to work.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>LateError</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>vsync_setting</name> <init>= <expr><call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vsync_setting</name> <operator>=</operator> <call><name>xdpy_swap_control</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>vsync_setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name> <operator>=</operator> <name>vsync_setting</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>invisible_cursor</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>current_cursor</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor_hidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>icon</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>icon_mask</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>

<label><name>EarlyError</name>:</label>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>ogl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>

<label><name>LateError</name>:</label>
<expr_stmt><expr><call><name>xdpy_destroy_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_initial_icon</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11display</name></decl></parameter>, <parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLEGRO_XWINDOWS_WITH_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XWMHints</name> <modifier>*</modifier></type><name>wm_hints</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x11_xpm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wm_hints</name> <operator>=</operator> <call><name>XAllocWMHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wm_hints</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IconPixmapHint</name> <operator>|</operator> <name>IconMaskHint</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>x11_xpm</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>wm_hints</name><operator>-&gt;</operator><name>icon_pixmap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wm_hints</name><operator>-&gt;</operator><name>icon_mask</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMHints</name><argument_list>(<argument><expr><name>x11display</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>wm_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>wm_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x11display</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>window</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_create_display_hook_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_initial_icon</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XLockDisplay</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMapWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"X11 window mapped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>,
<argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>wm_delete_window_atom</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XUnlockDisplay</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>overridable_vt</name></name> <operator>=</operator> <operator>&amp;</operator><name>default_overridable_vt</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>xdpy_create_display</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adapter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Not connected to X server.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Invalid window size %dx%d\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>al_get_new_display_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_GTK_TOPLEVEL_INTERNAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gtk_override_vt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"GTK requested but unavailable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"GTK incompatible with fullscreen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adapter</name> <operator>=</operator> <call><name>al_get_new_display_adapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>xdpy_create_display_locked</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ALLEGRO_DISPLAY</name> <operator>*</operator><operator>)</operator><name>display</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_display_bitmaps_to_memory_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"converting display bitmaps to memory bitmaps.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>bptr</name> <init>= <expr><call><name>_al_vector_ref_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><name>bptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_convert_to_memory_bitmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>transfer_display_bitmaps_to_any_other_display</name><parameter_list>(
<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>living</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name><operator>.</operator><name>_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>living</name> <operator>=</operator> <operator>*</operator><name>slot</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>living</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"transferring display bitmaps to other display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>bitmaps</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>add</name> <init>= <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>living</name><operator>-&gt;</operator><name>bitmaps</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>add</name> <operator>=</operator> <operator>*</operator><name>ref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>add</name><operator>)</operator><operator>-&gt;</operator><name>_display</name></name> <operator>=</operator> <name>living</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_mode_if_last_fullscreen_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>last_fullscreen</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name><operator>.</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>living</name> <init>= <expr><operator>*</operator><name>slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>living</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>living</name><operator>-&gt;</operator><name>adapter</name></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>adapter</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>living</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_fullscreen</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_fullscreen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"restore mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xglx_restore_video_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"*not* restoring mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_destroy_display_hook_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>is_last</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glXDestroyContext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name> <operator>!=</operator> <name><name>glx</name><operator>-&gt;</operator><name>window</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>glXDestroyWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy glx window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glx</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glx</name><operator>-&gt;</operator><name>selectioned</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDestroyWindow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xglx_unuse_adapter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_mode_if_last_fullscreen_display</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>glx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_destroy_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroying display.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>is_last</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name><operator>.</operator><name>_size</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>convert_display_bitmaps_to_memory_bitmap</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transfer_display_bitmaps_to_any_other_display</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>_al_ogl_unmanage_extensions</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"unmanaged extensions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_vector_find_and_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_ogl_destroy_backbuffer</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ogl</name><operator>-&gt;</operator><name>backbuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy backbuffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name><operator>-&gt;</operator><name>destroy_display_hook</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>is_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>==</operator> <name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mouse_grab_display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vertex_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"destroy display finished.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_make_current</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>,
<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>glXMakeCurrent</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xdpy_make_current</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_OGL_EXTRAS</name> <modifier>*</modifier></type><name>ogl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>ogl_extras</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_ogl_set_extensions</name><argument_list>(<argument><expr><name><name>ogl</name><operator>-&gt;</operator><name>extension_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_update_render_state</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_unset_current_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glXMakeContextCurrent</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_flip_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>glGetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"OpenGL error was not 0: %s\n"</literal></expr></argument>, <argument><expr><call><name>_al_gl_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glXSwapBuffers</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_update_display_region</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdpy_flip_display</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_acknowledge_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>xwa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xwa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>xwa</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>xwa</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>w</name> <operator>!=</operator> <name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>h</name> <operator>!=</operator> <name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xdpy: acknowledge_resize (%d, %d)\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_ogl_setup_gl</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_xwin_check_maximized</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>_al_display_xglx_await_resize</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_resize_count</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>delay_hack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_TIMEOUT</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Awaiting resize event\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>al_init_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>old_resize_count</name> <operator>==</operator> <name><name>glx</name><operator>-&gt;</operator><name>resize_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>resized</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Timeout while waiting for resize event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>delay_hack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xdpy_acknowledge_resize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_resize_display_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>xwa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attempts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xwa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xwa</name><operator>.</operator><name>width</name></name> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator> <name><name>xwa</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_xwin_set_fullscreen_window</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_xglx_fullscreen_set_mode</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>glx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>skip_resize</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attempts</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>attempts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>







<for>for <control>(<init>;</init> <condition><expr><name>attempts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>attempts</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_resize_count</name> <init>= <expr><name><name>glx</name><operator>-&gt;</operator><name>resize_count</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"calling XResizeWindow, attempts=%d\n"</literal></expr></argument>, <argument><expr><name>attempts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_reset_size_hints</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>programmatic_resize</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XResizeWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_display_xglx_await_resize</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>old_resize_count</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>programmatic_resize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_size_hints</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>al_rest</name><argument_list>(<argument><expr><literal type="number">0.333</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>attempts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"XResizeWindow didn't work; giving up\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>skip_resize</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_xwin_set_fullscreen_window</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_above</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xglx_fullscreen_to_display</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>glx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xdpy: resize fullscreen?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_resize_display</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name><operator>-&gt;</operator><name>resize_display</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_xglx_display_configure</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setglxy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>es</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>programmatic_resize</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name>width</name> <operator>||</operator>
<name><name>d</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_RESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>setglxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name><operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_MONITOR_INFO</name></type> <name>mi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>center_x</name> <init>= <expr><operator>(</operator><name><name>glx</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name><name>glx</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>width</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>center_y</name> <init>= <expr><operator>(</operator><name><name>glx</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>glx</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>height</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_xglx_get_monitor_info</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xconfigure event! %ix%i\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>center_x</name> <argument_list type="generic">&lt; <argument><expr><name><name>mi</name><operator>.</operator><name>x1</name></name> <operator>&amp;&amp;</operator> <name>center_x</name></expr></argument> &gt;</argument_list></name> <name><name>mi</name><operator>.</operator><name>x2</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>center_y</name> <argument_list type="generic">&lt; <argument><expr><name><name>mi</name><operator>.</operator><name>y1</name></name> <operator>&amp;&amp;</operator> <name>center_y</name></expr></argument> &gt;</argument_list></name> <name><name>mi</name><operator>.</operator><name>x2</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_adapter</name> <init>= <expr><call><name>_al_xglx_get_adapter</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>glx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_adapter</name> <operator>!=</operator> <name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"xdpy: adapter change!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xglx_unuse_adapter</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_al_xglx_restore_video_mode</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name> <operator>=</operator> <name>new_adapter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xglx_use_adapter</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>adapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_al_xwin_check_maximized</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_xglx_display_configure_event</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>xevent</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>bool</name></type> <name>setglxy</name> <init>= <expr><operator>(</operator><name><name>xevent</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>send_event</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_xglx_display_configure</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>xevent</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>xevent</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>xevent</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>xevent</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>setglxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_xwin_display_switch_handler</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>XFocusChangeEvent</name> <modifier>*</modifier></type><name>xevent</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>xevent</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>NotifyNormal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_al_xwin_display_switch_handler_inner</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>(</operator><name><name>xevent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FocusIn</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>_al_xwin_display_switch_handler_inner</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>focus_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>focus_in</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_IN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_SWITCH_OUT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_xwin_display_expose</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>XExposeEvent</name> <modifier>*</modifier></type><name>xevent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT_SOURCE</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>es</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_event_source_lock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_al_event_source_needs_to_generate_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ALLEGRO_EVENT_DISPLAY_EXPOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <call><name>al_get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>xevent</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>xevent</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>xevent</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>xevent</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_event_source_emit_event</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_al_event_source_unlock</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_is_compatible_bitmap</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bitmap</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_set_window_title_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name></type> <name>WM_NAME</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="string">"WM_NAME"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>_NET_WM_NAME</name> <init>= <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_NAME"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>title</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XTextProperty</name></type> <name>property</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Xutf8TextListToTextProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XUTF8StringStyle</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetTextProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>property</name></expr></argument>, <argument><expr><name>WM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetTextProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>property</name></expr></argument>, <argument><expr><name>_NET_WM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetTextProperty</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>property</name></expr></argument>, <argument><expr><name>XA_WM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name><name>property</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<block>{<block_content>
<decl_stmt><decl><type><name>XClassHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>XAllocClassHint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_PATH</name> <modifier>*</modifier></type><name>exepath</name> <init>= <expr><call><name>al_get_standard_path</name><argument_list>(<argument><expr><name>ALLEGRO_EXENAME_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>al_get_path_basename</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>res_class</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>al_get_path_basename</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClassHint</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hint</name><operator>-&gt;</operator><name>res_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hint</name><operator>-&gt;</operator><name>res_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_destroy_path</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_set_window_title</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name><operator>-&gt;</operator><name>set_window_title</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_set_window_position_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>parent</name></decl>, <decl><type ref="prev"/><name>child</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>XQueryTree</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XTranslateCoordinates</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,
<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMoveWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>x11display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_set_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name><operator>-&gt;</operator><name>set_window_position</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_get_window_position</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_window_constraints_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>min_w</name></name> <operator>=</operator> <name>min_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>min_h</name></name> <operator>=</operator> <name>min_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>max_w</name></name> <operator>=</operator> <name>max_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>max_h</name></name> <operator>=</operator> <name>max_h</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name><operator>-&gt;</operator><name>set_window_constraints</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>,
<argument><expr><name>min_w</name></expr></argument>, <argument><expr><name>min_h</name></expr></argument>, <argument><expr><name>max_w</name></expr></argument>, <argument><expr><name>max_h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_get_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>max_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>min_w</name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>min_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>min_h</name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>min_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>max_w</name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>max_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>max_h</name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>max_h</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_apply_window_constraints</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>posX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>posY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>ALLEGRO_SYSTEM_XGLX</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>onoff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_get_window_position</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>posX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>posY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>posX</name></expr></argument>, <argument><expr><name>posY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>_al_xwin_reset_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_resize_display</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_set_fullscreen_window_default</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>onoff</name> <operator>==</operator> <operator>!</operator><operator>(</operator><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_reset_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_fullscreen_window</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>flags</name></name> <operator>^=</operator> <name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_set_size_hints</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_compositor_bypass_flag</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>xdpy_set_fullscreen_window</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name> <init>= <expr><operator>(</operator><name>ALLEGRO_DISPLAY_XGLX</name> <operator>*</operator><operator>)</operator><name>display</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>glx</name><operator>-&gt;</operator><name>overridable_vt</name><operator>-&gt;</operator><name>set_fullscreen_window</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_set_display_flag</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>flag_onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALLEGRO_FRAMELESS</name></expr>:</case>

<expr_stmt><expr><call><name>_al_xwin_set_frame</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>!</operator><name>flag_onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_FULLSCREEN_WINDOW</name></expr>:</case>
<expr_stmt><expr><call><name>xdpy_set_fullscreen_window</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>flag_onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ALLEGRO_MAXIMIZED</name></expr>:</case>
<expr_stmt><expr><call><name>_al_xwin_maximize</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>flag_onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>xdpy_wait_for_vsync</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>al_get_opengl_extension_list</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ALLEGRO_GLX_SGI_video_sync</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glXGetVideoSyncSGI</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glXWaitVideoSyncSGI</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ALLEGRO_DISPLAY_INTERFACE</name> <modifier>*</modifier></type><name>_al_display_xglx_driver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xdpy_vt</name><operator>.</operator><name>create_display</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>xdpy_vt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>create_display</name></name> <operator>=</operator> <name>xdpy_create_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>destroy_display</name></name> <operator>=</operator> <name>xdpy_destroy_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_current_display</name></name> <operator>=</operator> <name>xdpy_set_current_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>unset_current_display</name></name> <operator>=</operator> <name>xdpy_unset_current_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>flip_display</name></name> <operator>=</operator> <name>xdpy_flip_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>update_display_region</name></name> <operator>=</operator> <name>xdpy_update_display_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>acknowledge_resize</name></name> <operator>=</operator> <name>xdpy_acknowledge_resize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>create_bitmap</name></name> <operator>=</operator> <name>_al_ogl_create_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>get_backbuffer</name></name> <operator>=</operator> <name>_al_ogl_get_backbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_target_bitmap</name></name> <operator>=</operator> <name>_al_ogl_set_target_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>is_compatible_bitmap</name></name> <operator>=</operator> <name>xdpy_is_compatible_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>resize_display</name></name> <operator>=</operator> <name>xdpy_resize_display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_icons</name></name> <operator>=</operator> <name>_al_xwin_set_icons</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_window_title</name></name> <operator>=</operator> <name>xdpy_set_window_title</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_window_position</name></name> <operator>=</operator> <name>xdpy_set_window_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>get_window_position</name></name> <operator>=</operator> <name>xdpy_get_window_position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_window_constraints</name></name> <operator>=</operator> <name>xdpy_set_window_constraints</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>get_window_constraints</name></name> <operator>=</operator> <name>xdpy_get_window_constraints</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>apply_window_constraints</name></name> <operator>=</operator> <name>xdpy_apply_window_constraints</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>set_display_flag</name></name> <operator>=</operator> <name>xdpy_set_display_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>wait_for_vsync</name></name> <operator>=</operator> <name>xdpy_wait_for_vsync</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdpy_vt</name><operator>.</operator><name>update_render_state</name></name> <operator>=</operator> <name>_al_ogl_update_render_state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_al_xwin_add_cursor_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xdpy_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_xwin_add_clipboard_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xdpy_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_ogl_add_drawing_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xdpy_vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>xdpy_vt</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALLEGRO_XWIN_DISPLAY_OVERRIDABLE_INTERFACE</name></type> <name>default_overridable_vt</name> <init>=
<expr><block>{
<expr><name>xdpy_create_display_hook_default</name></expr>,
<expr><name>xdpy_destroy_display_hook_default</name></expr>,
<expr><name>xdpy_resize_display_default</name></expr>,
<expr><name>xdpy_set_window_title_default</name></expr>,
<expr><name>xdpy_set_fullscreen_window_default</name></expr>,
<expr><name>xdpy_set_window_position_default</name></expr>,
<expr><name>xdpy_set_window_constraints_default</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>bool</name></type> <name>_al_xwin_set_gtk_display_overridable_interface</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>check_version</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ALLEGRO_XWIN_DISPLAY_OVERRIDABLE_INTERFACE</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;&amp;</operator> <name>check_version</name> <operator>==</operator> <name>ALLEGRO_VERSION_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"GTK vtable made available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gtk_override_vt</name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"GTK vtable reset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gtk_override_vt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vt</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



</unit>
