<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\x\xglx_config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/opengl/gl_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_opengl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xdisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xglx_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_xsystem.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"xglx_config"</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>display_pixel_format</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Single-buffer: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Swap method: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"flip"</literal></expr> </then><else>: <expr><literal type="string">"copy"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Swap method: undefined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Color format: r%i g%i b%i a%i, %i bit\n"</literal></expr></argument>,
<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Depth buffer: %i bits\n"</literal></expr></argument>, <argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Sample buffers: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Samples: %i\n"</literal></expr></argument>, <argument><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_shift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>figure_out_colors</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl></parameter>, <parameter><decl><type><name>XVisualInfo</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SHIFT</name></expr>]</index></name> <operator>=</operator> <call><name>get_shift</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>red_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SHIFT</name></expr>]</index></name> <operator>=</operator> <call><name>get_shift</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>green_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SHIFT</name></expr>]</index></name> <operator>=</operator> <call><name>get_shift</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>blue_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal>
<operator>&amp;&amp;</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal>
<operator>&amp;&amp;</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">48</literal> <operator>-</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SHIFT</name></expr>]</index></name>
<operator>-</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SHIFT</name></expr>]</index></name>
<operator>-</operator> <name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SHIFT</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier></type> <name>read_fbconfig</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>GLXFBConfig</name></type> <name>fbc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>render_type</name></decl>, <decl><type ref="prev"/><name>visual_type</name></decl>, <decl><type ref="prev"/><name>buffer_size</name></decl>, <decl><type ref="prev"/><name>sbuffers</name></decl>, <decl><type ref="prev"/><name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drawable_type</name></decl>, <decl><type ref="prev"/><name>renderable</name></decl>, <decl><type ref="prev"/><name>swap_method</name></decl>, <decl><type ref="prev"/><name>double_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XVisualInfo</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_RENDER_TYPE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>render_type</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_X_RENDERABLE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>renderable</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_DRAWABLE_TYPE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>drawable_type</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_X_VISUAL_TYPE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>visual_type</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_BUFFER_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_DEPTH_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_STEREO</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STEREO</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_RED_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_GREEN_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_BLUE_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_ALPHA_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_DOUBLEBUFFER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>double_buffer</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_AUX_BUFFERS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_AUX_BUFFERS</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_STENCIL_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STENCIL_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_ACCUM_RED_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_RED_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_ACCUM_GREEN_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_GREEN_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_ACCUM_BLUE_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_BLUE_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetFBConfigAttrib</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_ACCUM_ALPHA_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_ALPHA_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Incomplete glX mode ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name>double_buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>render_type</name> <operator>&amp;</operator> <name>GLX_RGBA_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>render_type</name> <operator>&amp;</operator> <name>GLX_RGBA_FLOAT_BIT_ARB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Not RGBA mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>drawable_type</name> <operator>&amp;</operator> <name>GLX_WINDOW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Cannot render to a window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>renderable</name> <operator>==</operator> <name>False</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"GLX windows not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual_type</name> <operator>!=</operator> <name>GLX_TRUE_COLOR</name> <operator>&amp;&amp;</operator> <name>visual_type</name> <operator>!=</operator> <name>GLX_DIRECT_COLOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"visual type other than TrueColor and "</literal>
<literal type="string">"DirectColor.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_DEPTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_COLOR</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>render_type</name> <operator>&amp;</operator> <name>GLX_RGBA_FLOAT_BIT_ARB</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>glXGetVisualFromFBConfig</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Cannot get associated visual for the FBConfig.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>figure_out_colors</name><argument_list>(<argument><expr><name>eds</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glXGetConfig</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuffers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <name>sbuffers</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>glXGetConfig</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_SAMPLES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>samples</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>glXGetFBConfigAttrib</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fbc</name></expr></argument>, <argument><expr><name>GLX_SWAP_METHOD_OML</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>swap_method</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GLX_BAD_ATTRIBUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <name>swap_method</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_VSYNC</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>_al_deduce_color_format</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eds</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier><modifier>*</modifier></type> <name>get_visuals_new</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>eds_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_fbconfigs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLXFBConfig</name> <modifier>*</modifier></type><name>fbconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fbconfig</name> <operator>=</operator> <call><name>glXGetFBConfigs</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_fbconfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fbconfig</name> <operator>||</operator> <operator>!</operator><name>num_fbconfigs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fbconfig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"glXGetFBConfigs(xscreen=%d) returned NULL.\n"</literal></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xscreen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>num_fbconfigs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i formats.\n"</literal></expr></argument>, <argument><expr><name>num_fbconfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fbconfigs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"-- \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Decoding visual no. %i...\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>read_fbconfig</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>fbconfig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>display_pixel_format</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>=</operator> <call><name>_al_score_display_settings</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>info</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLXFBConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbconfig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLXFBConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>eds_count</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i visuals are good enough.\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>fbconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eds</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier></type> <name>read_xvisual</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>XVisualInfo</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rgba</name></decl>, <decl><type ref="prev"/><name>buffer_size</name></decl>, <decl><type ref="prev"/><name>use_gl</name></decl>, <decl><type ref="prev"/><name>sbuffers</name></decl>, <decl><type ref="prev"/><name>samples</name></decl>, <decl><type ref="prev"/><name>double_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>eds</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>class</name></name> <operator>!=</operator> <name>TrueColor</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>class</name></name> <operator>!=</operator> <name>DirectColor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RENDER_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_RGBA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rgba</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_USE_GL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_gl</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_BUFFER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_RED_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_RED_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_GREEN_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_GREEN_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_BLUE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_BLUE_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_ALPHA_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ALPHA_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_DOUBLEBUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>double_buffer</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_STEREO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STEREO</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_AUX_BUFFERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_AUX_BUFFERS</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_DEPTH_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_DEPTH_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_STENCIL_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_STENCIL_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_ACCUM_RED_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_RED_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_ACCUM_GREEN_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_GREEN_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_ACCUM_BLUE_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_BLUE_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>glXGetConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_ACCUM_ALPHA_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_ACC_ALPHA_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Incomplete glX mode ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SINGLE_BUFFER</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name>double_buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rgba</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Not RGBA mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_gl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"OpenGL Unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COLOR_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>figure_out_colors</name><argument_list>(<argument><expr><name>eds</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_COLOR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_FLOAT_DEPTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glXGetConfig</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_SAMPLE_BUFFERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuffers</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GLX_BAD_ATTRIBUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLE_BUFFERS</name></expr>]</index></name> <operator>=</operator> <name>sbuffers</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>glXGetConfig</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GLX_SAMPLES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>samples</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GLX_BAD_ATTRIBUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SAMPLES</name></expr>]</index></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_SWAP_METHOD</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><operator>-&gt;</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>_al_deduce_color_format</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ALLEGRO_PIXEL_FORMAT_ANY</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>eds</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier><modifier>*</modifier></type> <name>get_visuals_old</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>eds_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>num_visuals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XVisualInfo</name> <modifier>*</modifier></type><name>xv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>_al_get_new_display_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xv</name> <operator>=</operator> <call><name>XGetVisualInfo</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_visuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xv</name> <operator>||</operator> <operator>!</operator><name>num_visuals</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name>num_visuals</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i formats.\n"</literal></expr></argument>, <argument><expr><name>num_visuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_visuals</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"-- \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Decoding visual no. %i...\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>read_xvisual</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name>xv</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>display_pixel_format</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>=</operator> <call><name>_al_score_display_settings</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>info</name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XVisualInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>info</name></expr></argument>, <argument><expr><name>xv</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XVisualInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>eds_count</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"%i visuals are good enough.\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>xv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eds</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>select_best_visual</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name></decl></parameter>,
<parameter><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name><modifier>*</modifier> <modifier>*</modifier></type><name>eds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eds_count</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>using_fbc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>eds</name></expr></argument>, <argument><expr><name>eds_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eds</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_al_display_settings_sorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>eds_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"No matching displays found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Chose visual no. %i\n"</literal></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>display_pixel_format</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>using_fbc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLXFBConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLXFBConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name> <operator>=</operator> <call><name>glXGetVisualFromFBConfig</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XVisualInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XVisualInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLEGRO_INFO</name><argument_list>(<argument><expr><literal type="string">"Corresponding X11 visual id: %lu\n"</literal></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name><operator>-&gt;</operator><name>visualid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glx</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>extra_settings</name></name></expr></argument>, <argument><expr><name><name>eds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>_al_xglx_config_select_visual</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_EXTRA_DISPLAY_SETTINGS</name> <modifier>*</modifier><modifier>*</modifier></type><name>eds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eds_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>force_old</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>using_fbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>selection_mode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>selection_mode</name> <operator>=</operator> <call><name>al_get_config_value</name><argument_list>(<argument><expr><call><name>al_get_system_config</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"graphics"</literal></expr></argument>,
<argument><expr><literal type="string">"config_selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>selection_mode</name> <operator>&amp;&amp;</operator> <name><name>selection_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>selection_mode</name></expr></argument>, <argument><expr><literal type="string">"old"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_WARN</name><argument_list>(<argument><expr><literal type="string">"Forcing OLD visual selection method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>force_old</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_al_stricmp</name><argument_list>(<argument><expr><name>selection_mode</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>force_old</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>glx_version</name></name> <operator>&gt;=</operator> <literal type="number">130</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_old</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>get_visuals_new</name><argument_list>(<argument><expr><name>glx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eds_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>eds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eds</name> <operator>=</operator> <call><name>get_visuals_old</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eds_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>using_fbc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>using_fbc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to get any visual info.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>select_best_visual</name><argument_list>(<argument><expr><name>glx</name></expr></argument>, <argument><expr><name>eds</name></expr></argument>, <argument><expr><name>eds_count</name></expr></argument>, <argument><expr><name>using_fbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>eds_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>eds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name>eds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLXContext</name></type> <name>create_context_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type> <name>fb</name></decl></parameter>,
<parameter><decl><type><name>GLXContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forward_compat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>want_es</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>GLXContext</name></type> (<modifier>*</modifier><name>GCCA_PROC</name>) <parameter_list>(<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLXFBConfig</name></type></decl></parameter>, <parameter><decl><type><name>GLXContext</name></type></decl></parameter>, <parameter><decl><type><name>Bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GCCA_PROC</name></type> <name>_xglx_glXCreateContextAttribsARB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr>)</condition> <block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>glXCreateContextAttribsARB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_xglx_glXCreateContextAttribsARB</name> <operator>=</operator> <name>glXCreateContextAttribsARB</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_xglx_glXCreateContextAttribsARB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>_xglx_glXCreateContextAttribsARB</name> <operator>=</operator>
<operator>(</operator><name>GCCA_PROC</name><operator>)</operator><call><name>glXGetProcAddress</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name><operator>*</operator><operator>)</operator><literal type="string">"glXCreateContextAttribsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_xglx_glXCreateContextAttribsARB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"GLX_ARB_create_context not supported and needed for OpenGL 3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>attrib</name><index>[]</index></name> <init>= <expr><block>{<expr><name>GLX_CONTEXT_MAJOR_VERSION_ARB</name></expr>, <expr><name>major</name></expr>,
<expr><name>GLX_CONTEXT_MINOR_VERSION_ARB</name></expr>, <expr><name>minor</name></expr>,
<expr><name>GLX_CONTEXT_FLAGS_ARB</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>forward_compat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>want_es</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>GLX_CONTEXT_PROFILE_MASK_ARB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>GLX_CONTEXT_ES_PROFILE_BIT_EXT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>_xglx_glXCreateContextAttribsARB</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_al_xglx_config_create_context</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier></type><name>glx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_SYSTEM_XGLX</name> <modifier>*</modifier></type><name>system</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>al_get_system_driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY</name> <modifier>*</modifier></type><name>disp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>glx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLXContext</name></type> <name>existing_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_al_vector_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_DISPLAY_XGLX</name> <modifier>*</modifier><modifier>*</modifier></type><name>existing_dpy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>existing_dpy</name> <operator>=</operator> <call><name>_al_vector_ref_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>system</name><operator>-&gt;</operator><name>system</name><operator>.</operator><name>displays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>existing_dpy</name> <operator>!=</operator> <name>glx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>existing_ctx</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>existing_dpy</name><operator>)</operator><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL_MAJOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name> <init>= <expr><call><name>al_get_new_display_option</name><argument_list>(<argument><expr><name>ALLEGRO_OPENGL_MINOR_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>forward_compat</name> <init>= <expr><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL_FORWARD_COMPATIBLE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL_ES_PROFILE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>major</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>major</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>create_context_new</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glx_version</name></name></expr></argument>,
<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>, <argument><expr><name>existing_ctx</name></expr></argument>, <argument><expr><name>forward_compat</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_OPENGL_3_0</name><operator>)</operator> <operator>||</operator> <name>major</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>major</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>major</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>create_context_new</name><argument_list>(<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>glx_version</name></name></expr></argument>,
<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>, <argument><expr><name>existing_ctx</name></expr></argument>, <argument><expr><name>forward_compat</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>forward_compat</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>disp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALLEGRO_PROGRAMMABLE_PIPELINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>extra_settings</name><operator>.</operator><name>settings</name><index>[<expr><name>ALLEGRO_COMPATIBLE_DISPLAY</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>glXCreateNewContext</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>,
<argument><expr><name>GLX_RGBA_TYPE</name></expr></argument>, <argument><expr><name>existing_ctx</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name> <operator>=</operator> <call><name>glXCreateWindow</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>glx</name><operator>-&gt;</operator><name>fbc</name></name></expr></argument>,
<argument><expr><name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>glXCreateContext</name><argument_list>(<argument><expr><name><name>system</name><operator>-&gt;</operator><name>gfxdisplay</name></name></expr></argument>, <argument><expr><name><name>glx</name><operator>-&gt;</operator><name>xvinfo</name></name></expr></argument>,
<argument><expr><name>existing_ctx</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name> <operator>=</operator> <name><name>glx</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>context</name></name> <operator>||</operator> <operator>!</operator><name><name>glx</name><operator>-&gt;</operator><name>glxwindow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create GLX context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>disp</name><operator>-&gt;</operator><name>ogl_extras</name><operator>-&gt;</operator><name>is_shared</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLEGRO_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Got GLX context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
