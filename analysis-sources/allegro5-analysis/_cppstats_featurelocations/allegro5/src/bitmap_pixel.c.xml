<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\bitmap_pixel.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_blend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_pixels.h"</cpp:file></cpp:include>

<macro><name>ALLEGRO_DEBUG_CHANNEL</name><argument_list>(<argument><literal type="string">"bitmap"</literal></argument>)</argument_list></macro>




<function><type><name>ALLEGRO_COLOR</name></type> <name>al_get_pixel</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name> <init>= <expr><call><name>al_map_rgba_f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Invalid lock format."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Out of bounds."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_AL_INLINE_GET_PIXEL</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_READONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_AL_INLINE_GET_PIXEL</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>_al_put_pixel</name><parameter_list>(<parameter><decl><type><name>ALLEGRO_BITMAP</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_LOCKED_REGION</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>xofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>yofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cl</name></name> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>ct</name></name> <operator>||</operator>
<name>x</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cr_excl</name></name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>cb_excl</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_al_pixel_format_is_video_only</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLEGRO_ERROR</name><argument_list>(<argument><expr><literal type="string">"Invalid lock format."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_y</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_w</name></name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_h</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <call><name>al_get_pixel_size</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_AL_INLINE_PUT_PIXEL</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>locked_region</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>al_lock_bitmap_region</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ALLEGRO_PIXEL_FORMAT_ANY</name></expr></argument>, <argument><expr><name>ALLEGRO_LOCK_WRITEONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>lock_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_AL_INLINE_PUT_PIXEL</name><argument_list>(<argument><expr><name><name>lr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>al_unlock_bitmap</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_put_pixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_al_put_pixel</name><argument_list>(<argument><expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>al_put_blended_pixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ALLEGRO_COLOR</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALLEGRO_COLOR</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLEGRO_BITMAP</name><modifier>*</modifier></type> <name>bitmap</name> <init>= <expr><call><name>al_get_target_bitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_al_blend_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_al_put_pixel</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



</unit>
