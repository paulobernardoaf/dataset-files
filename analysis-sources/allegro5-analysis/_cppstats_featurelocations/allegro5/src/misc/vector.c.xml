<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\allegro5-analysis\_cppstats_featurelocations\allegro5\src\misc\vector.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/allegro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allegro5/internal/aintern_vector.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_START</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vec-&gt;_items + ((idx) * vec-&gt;_itemsize))</cpp:value></cpp:define>











<function><type><name>void</name></type> <name>_al_vector_init</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>itemsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>itemsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>=</operator> <name>itemsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





















<function><type><name>void</name> <modifier>*</modifier></type><name>_al_vector_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name><modifier>*</modifier></type> <name>_al_vector_ref_front</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name><modifier>*</modifier></type> <name>_al_vector_ref_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_al_vector_ref</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>_al_vector_append_array</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>&lt;</operator> <name>num</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_items</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_items</name> <operator>=</operator> <call><name>al_realloc</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>+</operator> <name>num</name><operator>)</operator> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_items</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <name>new_items</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>+</operator> <operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>arr</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>-=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>void</name><modifier>*</modifier></type> <name>_al_vector_alloc_back</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <call><name>al_malloc</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_items</name> <init>= <expr><call><name>al_realloc</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_items</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <name>new_items</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>












<function><type><name>void</name><modifier>*</modifier></type> <name>_al_vector_alloc_mid</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_al_vector_alloc_back</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_items</name> <init>= <expr><call><name>al_realloc</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>new_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_items</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <name>new_items</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>*</operator> <operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>_al_vector_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ptr_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ptr_item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr_item</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>_al_vector_contains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_al_vector_find</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>ptr_item</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>_al_vector_delete_at</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>to_move</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>to_move</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>to_move</name> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>ITEM_START</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>









<function><type><name>bool</name></type> <name>_al_vector_find_and_delete</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>_al_vector_find</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>ptr_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_al_vector_delete_at</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>_al_vector_free</name><parameter_list>(<parameter><decl><type><name>_AL_VECTOR</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>al_free</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>_unused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>









</unit>
